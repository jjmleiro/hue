From 4d9d5b557c6b17bb9e6160de1e3e185ff28302c4 Mon Sep 17 00:00:00 2001
From: Erick Tryzelaar <erick.tryzelaar@gmail.com>
Date: Tue, 10 Feb 2015 13:17:33 -0800
Subject: [PATCH 0783/1173] HUE-2436 [desktop] Django-1.6: Upgrade
 django-extensions to 1.5.0

---
 desktop/core/ext-py/django-extensions-0.5/PKG-INFO |   20 -
 .../django_extensions/__init__.py                  |   10 -
 .../django_extensions/admin/__init__.py            |  142 -
 .../django_extensions/admin/widgets.py             |   76 -
 .../conf/app_template/forms.py.tmpl                |    3 -
 .../conf/app_template/models.py.tmpl               |    3 -
 .../conf/app_template/urls.py.tmpl                 |    3 -
 .../conf/app_template/views.py.tmpl                |    1 -
 .../management/commands/sample.py.tmpl             |    7 -
 .../conf/jobs_template/jobs/sample.py.tmpl         |    8 -
 .../django_extensions/db/fields/__init__.py        |  247 --
 .../django_extensions/db/fields/encrypted.py       |   58 -
 .../django_extensions/db/fields/json.py            |   77 -
 .../django_extensions/db/models.py                 |   67 -
 .../django_extensions/jobs/daily/cache_cleanup.py  |   23 -
 .../django_extensions/jobs/daily/daily_cleanup.py  |   15 -
 .../django_extensions/management/color.py          |   14 -
 .../management/commands/clean_pyc.py               |   41 -
 .../management/commands/compile_pyc.py             |   39 -
 .../management/commands/create_app.py              |  141 -
 .../management/commands/create_command.py          |   78 -
 .../management/commands/create_jobs.py             |   54 -
 .../management/commands/describe_form.py           |   64 -
 .../management/commands/dumpscript.py              |  515 ---
 .../management/commands/export_emails.py           |  114 -
 .../management/commands/generate_secret_key.py     |   10 -
 .../management/commands/graph_models.py            |   60 -
 .../management/commands/mail_debug.py              |   41 -
 .../management/commands/passwd.py                  |   37 -
 .../management/commands/print_user_for_session.py  |   49 -
 .../management/commands/reset_db.py                |  139 -
 .../management/commands/runjob.py                  |   59 -
 .../management/commands/runjobs.py                 |   92 -
 .../management/commands/runprofileserver.py        |  221 --
 .../management/commands/runscript.py               |  134 -
 .../management/commands/runserver_plus.py          |   77 -
 .../management/commands/set_fake_emails.py         |   75 -
 .../management/commands/set_fake_passwords.py      |   44 -
 .../management/commands/shell_plus.py              |   91 -
 .../management/commands/show_templatetags.py       |   97 -
 .../management/commands/show_urls.py               |   69 -
 .../management/commands/sqldiff.py                 |  598 ----
 .../management/commands/sync_media_s3.py           |  265 --
 .../management/commands/syncdata.py                |  221 --
 .../management/commands/unreferenced_files.py      |   44 -
 .../django_extensions/management/jobs.py           |  157 -
 .../django_extensions/management/modelviz.py       |  287 --
 .../django_extensions/management/signals.py        |   10 -
 .../django_extensions/management/utils.py          |    7 -
 .../django_extensions/css/jquery.autocomplete.css  |   43 -
 .../media/django_extensions/img/indicator.gif      |  Bin 1553 -> 0 bytes
 .../django_extensions/js/jquery.autocomplete.js    |  759 -----
 .../django_extensions/js/jquery.bgiframe.min.js    |   10 -
 .../media/django_extensions/js/jquery.js           | 3558 --------------------
 .../widgets/foreignkey_searchinput.html            |   60 -
 .../django_extensions/templatetags/highlighting.py |   89 -
 .../django_extensions/templatetags/syntax_color.py |   96 -
 .../templatetags/truncate_letters.py               |   21 -
 .../django_extensions/templatetags/widont.py       |   62 -
 .../django_extensions/tests/__init__.py            |   11 -
 .../django_extensions/tests/encrypted_fields.py    |   74 -
 .../django_extensions/tests/models.py              |   18 -
 .../django_extensions/tests/utils.py               |   49 -
 .../django_extensions/utils/dia2django.py          |  196 --
 .../django_extensions/utils/text.py                |   13 -
 .../django_extensions/utils/uuid.py                |  547 ---
 desktop/core/ext-py/django-extensions-0.5/setup.py |   92 -
 .../core/ext-py/django-extensions-1.5.0/LICENSE    |   19 +
 .../ext-py/django-extensions-1.5.0/MANIFEST.in     |    8 +
 .../core/ext-py/django-extensions-1.5.0/PKG-INFO   |   23 +
 .../core/ext-py/django-extensions-1.5.0/README.rst |  155 +
 .../django_extensions/__init__.py                  |   13 +
 .../django_extensions/admin/__init__.py            |  146 +
 .../django_extensions/admin/widgets.py             |   88 +
 .../conf/app_template/forms.py.tmpl                |    3 +
 .../conf/app_template/models.py.tmpl               |    3 +
 .../conf/app_template/urls.py.tmpl                 |    6 +
 .../conf/app_template/views.py.tmpl                |    1 +
 .../management/commands/sample.py.tmpl             |    7 +
 .../conf/jobs_template/jobs/sample.py.tmpl         |    8 +
 .../templatetags/sample.py.tmpl                    |    4 +
 .../django_extensions/db/fields/__init__.py        |  390 +++
 .../django_extensions/db/fields/encrypted.py       |  150 +
 .../django_extensions/db/fields/json.py            |  116 +
 .../django_extensions/db/models.py                 |  101 +
 .../django_extensions/future_1_5.py                |   16 +
 .../django_extensions/jobs/daily/cache_cleanup.py  |   61 +
 .../django_extensions/jobs/daily/daily_cleanup.py  |   21 +
 .../locale/cs/LC_MESSAGES/django.mo                |  Bin 0 -> 451 bytes
 .../locale/cs/LC_MESSAGES/django.po                |   77 +
 .../locale/da/LC_MESSAGES/django.mo                |  Bin 0 -> 797 bytes
 .../locale/da/LC_MESSAGES/django.po                |   79 +
 .../locale/de/LC_MESSAGES/django.mo                |  Bin 0 -> 1227 bytes
 .../locale/de/LC_MESSAGES/django.po                |   77 +
 .../locale/el/LC_MESSAGES/django.mo                |  Bin 0 -> 1581 bytes
 .../locale/el/LC_MESSAGES/django.po                |   79 +
 .../locale/en/LC_MESSAGES/django.mo                |  Bin 0 -> 367 bytes
 .../locale/en/LC_MESSAGES/django.po                |   76 +
 .../locale/es/LC_MESSAGES/django.mo                |  Bin 0 -> 1260 bytes
 .../locale/es/LC_MESSAGES/django.po                |   77 +
 .../locale/et/LC_MESSAGES/django.mo                |  Bin 0 -> 398 bytes
 .../locale/et/LC_MESSAGES/django.po                |   75 +
 .../locale/fr/LC_MESSAGES/django.mo                |  Bin 0 -> 743 bytes
 .../locale/fr/LC_MESSAGES/django.po                |   81 +
 .../locale/hu/LC_MESSAGES/django.mo                |  Bin 0 -> 1242 bytes
 .../locale/hu/LC_MESSAGES/django.po                |   77 +
 .../locale/it/LC_MESSAGES/django.mo                |  Bin 0 -> 1247 bytes
 .../locale/it/LC_MESSAGES/django.po                |   77 +
 .../locale/ja/LC_MESSAGES/django.mo                |  Bin 0 -> 1397 bytes
 .../locale/ja/LC_MESSAGES/django.po                |   77 +
 .../locale/pl/LC_MESSAGES/django.mo                |  Bin 0 -> 1236 bytes
 .../locale/pl/LC_MESSAGES/django.po                |   77 +
 .../locale/pt/LC_MESSAGES/django.mo                |  Bin 0 -> 1262 bytes
 .../locale/pt/LC_MESSAGES/django.po                |   77 +
 .../locale/pt_BR/LC_MESSAGES/django.mo             |  Bin 0 -> 1310 bytes
 .../locale/pt_BR/LC_MESSAGES/django.po             |   79 +
 .../locale/ro/LC_MESSAGES/django.mo                |  Bin 0 -> 1352 bytes
 .../locale/ro/LC_MESSAGES/django.po                |   80 +
 .../locale/ru/LC_MESSAGES/django.mo                |  Bin 0 -> 1561 bytes
 .../locale/ru/LC_MESSAGES/django.po                |   80 +
 .../locale/sk/LC_MESSAGES/django.mo                |  Bin 0 -> 451 bytes
 .../locale/sk/LC_MESSAGES/django.po                |   77 +
 .../locale/tr/LC_MESSAGES/django.mo                |  Bin 0 -> 417 bytes
 .../locale/tr/LC_MESSAGES/django.po                |   77 +
 .../locale/zh_CN/LC_MESSAGES/django.mo             |  Bin 0 -> 420 bytes
 .../locale/zh_CN/LC_MESSAGES/django.po             |   77 +
 .../django_extensions/management/base.py           |   53 +
 .../django_extensions/management/color.py          |   19 +
 .../management/commands/admin_generator.py         |  332 ++
 .../management/commands/clean_pyc.py               |   40 +
 .../management/commands/clear_cache.py             |   16 +
 .../management/commands/compile_pyc.py             |   36 +
 .../management/commands/create_app.py              |  139 +
 .../management/commands/create_command.py          |   74 +
 .../management/commands/create_jobs.py             |   57 +
 .../management/commands/create_template_tags.py    |   69 +
 .../management/commands/describe_form.py           |   71 +
 .../management/commands/drop_test_database.py      |  147 +
 .../management/commands/dumpscript.py              |  786 +++++
 .../management/commands/export_emails.py           |  135 +
 .../management/commands/find_template.py           |   38 +
 .../management/commands/generate_secret_key.py     |   14 +
 .../management/commands/graph_models.py            |  151 +
 .../management/commands/mail_debug.py              |   81 +
 .../django_extensions/management/commands/notes.py |   50 +
 .../management/commands/passwd.py                  |   44 +
 .../management/commands/pipchecker.py              |  265 ++
 .../management/commands/print_settings.py          |   82 +
 .../management/commands/print_user_for_session.py  |   72 +
 .../management/commands/reset_db.py                |  178 +
 .../management/commands/runjob.py                  |   52 +
 .../management/commands/runjobs.py                 |   87 +
 .../management/commands/runprofileserver.py        |  312 ++
 .../management/commands/runscript.py               |  177 +
 .../management/commands/runserver_plus.py          |  307 ++
 .../management/commands/set_default_site.py        |   58 +
 .../management/commands/set_fake_emails.py         |   84 +
 .../management/commands/set_fake_passwords.py      |   52 +
 .../management/commands/shell_plus.py              |  291 ++
 .../management/commands/show_templatetags.py       |  109 +
 .../management/commands/show_urls.py               |  176 +
 .../management/commands/sqlcreate.py               |   74 +
 .../management/commands/sqldiff.py                 | 1003 ++++++
 .../management/commands/sync_s3.py                 |  390 +++
 .../management/commands/syncdata.py                |  220 ++
 .../management/commands/unreferenced_files.py      |   50 +
 .../management/commands/update_permissions.py      |   41 +
 .../management/commands/validate_templates.py      |   73 +
 .../management/email_notifications.py              |  136 +
 .../django_extensions/management/jobs.py           |  180 +
 .../django_extensions/management/modelviz.py       |  301 ++
 .../management/notebook_extension.py               |    6 +
 .../django_extensions/management/shells.py         |  213 ++
 .../django_extensions/management/signals.py        |   15 +
 .../management/technical_response.py               |    6 +
 .../django_extensions/management/utils.py          |   80 +
 .../django_extensions/migrations/0001_empty.py     |   17 +
 .../django_extensions/mongodb/fields/__init__.py   |  250 ++
 .../django_extensions/mongodb/fields/encrypted.py  |   61 +
 .../django_extensions/mongodb/fields/json.py       |   77 +
 .../django_extensions/mongodb/models.py            |   69 +
 .../django_extensions/settings.py                  |    8 +
 .../django_extensions/css/jquery.autocomplete.css  |   38 +
 .../static/django_extensions/img/indicator.gif     |  Bin 0 -> 1553 bytes
 .../django_extensions/js/jquery-1.7.2.min.js       |    4 +
 .../django_extensions/js/jquery.ajaxQueue.js       |  119 +
 .../django_extensions/js/jquery.autocomplete.js    | 1152 +++++++
 .../django_extensions/js/jquery.bgiframe.min.js    |   10 +
 .../django_extensions/graph_models/digraph.dot     |   26 +
 .../django_extensions/graph_models/label.dot       |   30 +
 .../django_extensions/graph_models/relation.dot    |   10 +
 .../widgets/foreignkey_searchinput.html            |   61 +
 .../django_extensions/templatetags/highlighting.py |   97 +
 .../django_extensions/templatetags/indent_text.py  |   55 +
 .../django_extensions/templatetags/syntax_color.py |   95 +
 .../templatetags/truncate_letters.py               |   28 +
 .../django_extensions/templatetags/widont.py       |   65 +
 .../django_extensions/tests/__init__.py            |   26 +
 .../django_extensions/tests/encrypted_fields.py    |  258 ++
 .../django_extensions/tests/fields.py              |  159 +
 .../django_extensions/tests/json_field.py          |   17 +
 .../management/commands/error_raising_command.py   |   10 +
 .../django_extensions/tests/management_command.py  |  107 +
 .../django_extensions/tests/shortuuid_field.py     |   39 +
 .../django_extensions/tests/test_clean_pyc.py      |   61 +
 .../django_extensions/tests/test_compile_pyc.py    |   51 +
 .../django_extensions/tests/test_dumpscript.py     |   86 +
 .../django_extensions/tests/test_models.py         |   42 +
 .../django_extensions/tests/test_templatetags.py   |   15 +
 .../django_extensions/tests/testapp/models.py      |  125 +
 .../django_extensions/tests/utils.py               |   76 +
 .../django_extensions/tests/uuid_field.py          |   47 +
 .../django_extensions/utils/dia2django.py          |  214 ++
 .../django_extensions/utils/text.py                |   23 +
 .../utils/validatingtemplatetags.py                |   91 +
 .../django_extensions/validators.py                |   65 +
 .../ext-py/django-extensions-1.5.0/docs/AUTHORS    |   24 +
 .../ext-py/django-extensions-1.5.0/docs/Makefile   |   75 +
 .../docs/_build/doctrees/admin_extensions.doctree  |  Bin 0 -> 7216 bytes
 .../doctrees/command_extension_ideas.doctree       |  Bin 0 -> 3829 bytes
 .../_build/doctrees/command_extensions.doctree     |  Bin 0 -> 31306 bytes
 .../docs/_build/doctrees/create_app.doctree        |  Bin 0 -> 7054 bytes
 .../docs/_build/doctrees/dumpscript.doctree        |  Bin 0 -> 17229 bytes
 .../docs/_build/doctrees/environment.pickle        |  Bin 0 -> 44908 bytes
 .../docs/_build/doctrees/export_emails.doctree     |  Bin 0 -> 11031 bytes
 .../docs/_build/doctrees/field_extensions.doctree  |  Bin 0 -> 15998 bytes
 .../docs/_build/doctrees/graph_models.doctree      |  Bin 0 -> 19435 bytes
 .../docs/_build/doctrees/index.doctree             |  Bin 0 -> 13046 bytes
 .../doctrees/installation_instructions.doctree     |  Bin 0 -> 16462 bytes
 .../docs/_build/doctrees/jobs_scheduling.doctree   |  Bin 0 -> 8055 bytes
 .../docs/_build/doctrees/model_extensions.doctree  |  Bin 0 -> 4304 bytes
 .../_build/doctrees/namespace_proposal.doctree     |  Bin 0 -> 6575 bytes
 .../docs/_build/doctrees/print_settings.doctree    |  Bin 0 -> 10450 bytes
 .../docs/_build/doctrees/runprofileserver.doctree  |  Bin 0 -> 15785 bytes
 .../docs/_build/doctrees/runscript.doctree         |  Bin 0 -> 12976 bytes
 .../docs/_build/doctrees/runserver_plus.doctree    |  Bin 0 -> 21903 bytes
 .../docs/_build/doctrees/shell_plus.doctree        |  Bin 0 -> 15910 bytes
 .../docs/_build/doctrees/sqlcreate.doctree         |  Bin 0 -> 8377 bytes
 .../docs/_build/doctrees/sqldiff.doctree           |  Bin 0 -> 7367 bytes
 .../docs/_build/doctrees/sync_s3.doctree           |  Bin 0 -> 10721 bytes
 .../_build/doctrees/validate_templates.doctree     |  Bin 0 -> 7497 bytes
 .../docs/_build/html/.buildinfo                    |    4 +
 .../docs/_build/html/_sources/admin_extensions.txt |   53 +
 .../html/_sources/command_extension_ideas.txt      |    7 +
 .../_build/html/_sources/command_extensions.txt    |  104 +
 .../docs/_build/html/_sources/create_app.txt       |   41 +
 .../docs/_build/html/_sources/dumpscript.txt       |   99 +
 .../docs/_build/html/_sources/export_emails.txt    |   81 +
 .../docs/_build/html/_sources/field_extensions.txt |   37 +
 .../docs/_build/html/_sources/graph_models.txt     |  110 +
 .../docs/_build/html/_sources/index.txt            |   81 +
 .../html/_sources/installation_instructions.txt    |  100 +
 .../docs/_build/html/_sources/jobs_scheduling.txt  |   49 +
 .../docs/_build/html/_sources/model_extensions.txt |   11 +
 .../_build/html/_sources/namespace_proposal.txt    |   29 +
 .../docs/_build/html/_sources/print_settings.txt   |   60 +
 .../docs/_build/html/_sources/runprofileserver.txt |   86 +
 .../docs/_build/html/_sources/runscript.txt        |   88 +
 .../docs/_build/html/_sources/runserver_plus.txt   |  152 +
 .../docs/_build/html/_sources/shell_plus.txt       |  126 +
 .../docs/_build/html/_sources/sqlcreate.txt        |   45 +
 .../docs/_build/html/_sources/sqldiff.txt          |   44 +
 .../docs/_build/html/_sources/sync_s3.txt          |   70 +
 .../_build/html/_sources/validate_templates.txt    |   38 +
 .../docs/_build/html/_static/ajax-loader.gif       |  Bin 0 -> 673 bytes
 .../docs/_build/html/_static/basic.css             |  537 +++
 .../docs/_build/html/_static/comment-bright.png    |  Bin 0 -> 3500 bytes
 .../docs/_build/html/_static/comment-close.png     |  Bin 0 -> 3578 bytes
 .../docs/_build/html/_static/comment.png           |  Bin 0 -> 3445 bytes
 .../docs/_build/html/_static/default.css           |  256 ++
 .../docs/_build/html/_static/doctools.js           |  238 ++
 .../docs/_build/html/_static/down-pressed.png      |  Bin 0 -> 368 bytes
 .../docs/_build/html/_static/down.png              |  Bin 0 -> 363 bytes
 .../docs/_build/html/_static/file.png              |  Bin 0 -> 392 bytes
 .../docs/_build/html/_static/jquery.js             |    2 +
 .../docs/_build/html/_static/minus.png             |  Bin 0 -> 199 bytes
 .../docs/_build/html/_static/plus.png              |  Bin 0 -> 199 bytes
 .../docs/_build/html/_static/pygments.css          |   63 +
 .../docs/_build/html/_static/searchtools.js        |  622 ++++
 .../docs/_build/html/_static/sidebar.js            |  159 +
 .../docs/_build/html/_static/underscore.js         |   31 +
 .../docs/_build/html/_static/up-pressed.png        |  Bin 0 -> 372 bytes
 .../docs/_build/html/_static/up.png                |  Bin 0 -> 363 bytes
 .../docs/_build/html/_static/websupport.js         |  808 +++++
 .../docs/_build/html/admin_extensions.html         |  169 +
 .../docs/_build/html/command_extension_ideas.html  |  122 +
 .../docs/_build/html/command_extensions.html       |  181 +
 .../docs/_build/html/create_app.html               |  152 +
 .../docs/_build/html/dumpscript.html               |  219 ++
 .../docs/_build/html/export_emails.html            |  192 ++
 .../docs/_build/html/field_extensions.html         |  160 +
 .../docs/_build/html/genindex.html                 |   92 +
 .../docs/_build/html/graph_models.html             |  216 ++
 .../docs/_build/html/index.html                    |  298 ++
 .../_build/html/installation_instructions.html     |  216 ++
 .../docs/_build/html/jobs_scheduling.html          |  164 +
 .../docs/_build/html/model_extensions.html         |  133 +
 .../docs/_build/html/namespace_proposal.html       |  149 +
 .../docs/_build/html/objects.inv                   |  Bin 0 -> 213 bytes
 .../docs/_build/html/print_settings.html           |  179 +
 .../docs/_build/html/runprofileserver.html         |  197 ++
 .../docs/_build/html/runscript.html                |  206 ++
 .../docs/_build/html/runserver_plus.html           |  251 ++
 .../docs/_build/html/search.html                   |   99 +
 .../docs/_build/html/searchindex.js                |    1 +
 .../docs/_build/html/shell_plus.html               |  221 ++
 .../docs/_build/html/sqlcreate.html                |  172 +
 .../docs/_build/html/sqldiff.html                  |  161 +
 .../docs/_build/html/sync_s3.html                  |  190 ++
 .../docs/_build/html/validate_templates.html       |  158 +
 .../docs/admin_extensions.rst                      |   53 +
 .../docs/command_extension_ideas.rst               |    7 +
 .../docs/command_extensions.rst                    |  108 +
 .../docs/command_signals.rst                       |   91 +
 .../ext-py/django-extensions-1.5.0/docs/conf.py    |  194 ++
 .../django-extensions-1.5.0/docs/create_app.rst    |   41 +
 .../docs/creating_release.txt                      |   47 +
 .../django-extensions-1.5.0/docs/dumpscript.rst    |   99 +
 .../django-extensions-1.5.0/docs/export_emails.rst |   81 +
 .../docs/field_extensions.rst                      |   39 +
 .../django-extensions-1.5.0/docs/graph_models.rst  |  110 +
 .../ext-py/django-extensions-1.5.0/docs/index.rst  |   82 +
 .../docs/installation_instructions.rst             |  100 +
 .../docs/jobs_scheduling.rst                       |   49 +
 .../docs/model_extensions.rst                      |   11 +
 .../docs/namespace_proposal.rst                    |   29 +
 .../docs/print_settings.rst                        |   60 +
 .../docs/runprofileserver.rst                      |   86 +
 .../django-extensions-1.5.0/docs/runscript.rst     |   88 +
 .../docs/runserver_plus.rst                        |  152 +
 .../django-extensions-1.5.0/docs/shell_plus.rst    |  126 +
 .../django-extensions-1.5.0/docs/sqlcreate.rst     |   45 +
 .../django-extensions-1.5.0/docs/sqldiff.rst       |   44 +
 .../django-extensions-1.5.0/docs/sync_s3.rst       |   70 +
 .../docs/validate_templates.rst                    |   38 +
 .../ext-py/django-extensions-1.5.0/run_tests.py    |  141 +
 .../core/ext-py/django-extensions-1.5.0/setup.cfg  |    8 +
 .../core/ext-py/django-extensions-1.5.0/setup.py   |  116 +
 .../core/ext-py/django-extensions-1.5.0/tox.ini    |   80 +
 339 files changed, 24864 insertions(+), 10402 deletions(-)
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/PKG-INFO
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/admin/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/admin/widgets.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/forms.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/models.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/urls.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/views.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/commands/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/commands/sample.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/daily/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/hourly/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/monthly/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/sample.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/weekly/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/yearly/__init__.py.tmpl
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/db/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/encrypted.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/json.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/db/models.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/cache_cleanup.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/daily_cleanup.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/hourly/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/monthly/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/weekly/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/yearly/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/color.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/clean_pyc.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/compile_pyc.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_app.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_command.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_jobs.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/describe_form.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/dumpscript.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/export_emails.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/generate_secret_key.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/graph_models.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/mail_debug.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/passwd.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/print_user_for_session.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/reset_db.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runjob.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runjobs.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runprofileserver.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runscript.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runserver_plus.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/set_fake_emails.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/set_fake_passwords.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/shell_plus.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/show_templatetags.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/show_urls.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/sqldiff.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/sync_media_s3.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/syncdata.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/unreferenced_files.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/jobs.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/modelviz.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/signals.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/management/utils.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/css/jquery.autocomplete.css
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/img/indicator.gif
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.autocomplete.js
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.bgiframe.min.js
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.js
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/models.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/templates/django_extensions/widgets/foreignkey_searchinput.html
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/highlighting.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/syntax_color.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/truncate_letters.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/widont.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/__init__.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/encrypted_fields.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/models.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/utils.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/__init__.py
 delete mode 100755 desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/dia2django.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/text.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/uuid.py
 delete mode 100644 desktop/core/ext-py/django-extensions-0.5/setup.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/LICENSE
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/MANIFEST.in
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/PKG-INFO
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/README.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/admin/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/admin/widgets.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/forms.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/models.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/urls.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/views.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/commands/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/commands/sample.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/daily/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/hourly/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/monthly/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/sample.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/weekly/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/yearly/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/template_tags_template/templatetags/__init__.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/template_tags_template/templatetags/sample.py.tmpl
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/encrypted.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/json.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/models.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/future_1_5.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/cache_cleanup.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/daily_cleanup.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/hourly/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/minutely/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/monthly/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/weekly/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/yearly/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/cs/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/cs/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/da/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/da/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/de/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/de/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/el/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/el/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/en/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/en/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/es/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/es/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/et/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/et/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/fr/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/fr/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/hu/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/hu/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/it/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/it/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ja/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ja/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pl/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pl/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt_BR/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt_BR/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ro/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ro/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ru/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ru/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/sk/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/sk/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/tr/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/tr/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/zh_CN/LC_MESSAGES/django.mo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/zh_CN/LC_MESSAGES/django.po
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/base.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/color.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/admin_generator.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/clean_pyc.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/clear_cache.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/compile_pyc.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_app.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_command.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_jobs.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_template_tags.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/describe_form.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/drop_test_database.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/dumpscript.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/export_emails.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/find_template.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/generate_secret_key.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/graph_models.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/mail_debug.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/notes.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/passwd.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/pipchecker.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/print_settings.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/print_user_for_session.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/reset_db.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runjob.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runjobs.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runprofileserver.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runscript.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runserver_plus.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_default_site.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_fake_emails.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_fake_passwords.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/shell_plus.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/show_templatetags.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/show_urls.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sqlcreate.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sqldiff.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sync_s3.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/syncdata.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/unreferenced_files.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/update_permissions.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/validate_templates.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/email_notifications.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/jobs.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/modelviz.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/notebook_extension.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/shells.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/signals.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/technical_response.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/utils.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/migrations/0001_empty.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/migrations/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/models.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/encrypted.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/json.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/models.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/settings.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/css/jquery.autocomplete.css
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/img/indicator.gif
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery-1.7.2.min.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.ajaxQueue.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.autocomplete.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.bgiframe.min.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/digraph.dot
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/label.dot
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/relation.dot
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/widgets/foreignkey_searchinput.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/highlighting.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/indent_text.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/syntax_color.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/truncate_letters.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/widont.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/encrypted_fields.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/fields.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/json_field.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/commands/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/commands/error_raising_command.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management_command.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/shortuuid_field.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_clean_pyc.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_compile_pyc.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_dumpscript.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_models.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_templatetags.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/models.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/urls.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/utils.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/uuid_field.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/__init__.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/dia2django.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/text.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/validatingtemplatetags.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/django_extensions/validators.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/AUTHORS
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/Makefile
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/admin_extensions.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/command_extension_ideas.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/command_extensions.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/create_app.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/dumpscript.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/environment.pickle
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/export_emails.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/field_extensions.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/graph_models.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/index.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/installation_instructions.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/jobs_scheduling.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/model_extensions.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/namespace_proposal.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/print_settings.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runprofileserver.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runscript.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runserver_plus.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/shell_plus.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sqlcreate.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sqldiff.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sync_s3.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/validate_templates.doctree
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/.buildinfo
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/admin_extensions.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/command_extension_ideas.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/command_extensions.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/create_app.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/dumpscript.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/export_emails.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/field_extensions.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/graph_models.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/index.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/installation_instructions.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/jobs_scheduling.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/model_extensions.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/namespace_proposal.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/print_settings.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runprofileserver.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runscript.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runserver_plus.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/shell_plus.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sqlcreate.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sqldiff.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sync_s3.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/validate_templates.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/ajax-loader.gif
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/basic.css
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment-bright.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment-close.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/default.css
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/doctools.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/down-pressed.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/down.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/file.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/jquery.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/minus.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/plus.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/pygments.css
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/searchtools.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/sidebar.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/underscore.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/up-pressed.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/up.png
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/websupport.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/admin_extensions.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/command_extension_ideas.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/command_extensions.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/create_app.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/dumpscript.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/export_emails.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/field_extensions.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/genindex.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/graph_models.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/index.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/installation_instructions.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/jobs_scheduling.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/model_extensions.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/namespace_proposal.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/objects.inv
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/print_settings.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runprofileserver.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runscript.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runserver_plus.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/search.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/searchindex.js
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/shell_plus.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sqlcreate.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sqldiff.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sync_s3.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/validate_templates.html
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/admin_extensions.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/command_extension_ideas.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/command_extensions.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/command_signals.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/conf.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/create_app.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/creating_release.txt
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/dumpscript.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/export_emails.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/field_extensions.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/graph_models.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/index.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/installation_instructions.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/jobs_scheduling.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/model_extensions.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/namespace_proposal.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/print_settings.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/runprofileserver.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/runscript.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/runserver_plus.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/shell_plus.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/sqlcreate.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/sqldiff.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/sync_s3.rst
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/docs/validate_templates.rst
 create mode 100755 desktop/core/ext-py/django-extensions-1.5.0/run_tests.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/setup.cfg
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/setup.py
 create mode 100644 desktop/core/ext-py/django-extensions-1.5.0/tox.ini

diff --git a/desktop/core/ext-py/django-extensions-0.5/PKG-INFO b/desktop/core/ext-py/django-extensions-0.5/PKG-INFO
deleted file mode 100644
index a8e82b9..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/PKG-INFO
+++ /dev/null
@@ -1,20 +0,0 @@
-Metadata-Version: 1.0
-Name: django-extensions
-Version: 0.5
-Summary: Extensions for Django
-Home-page: http://code.google.com/p/django-command-extensions/
-Author: Michael Trier
-Author-email: mtrier@gmail.com
-License: New BSD License
-Description: django-extensions bundles several useful
-        additions for Django projects. See the project page for more information:
-        http://code.google.com/p/django-command-extensions/
-Platform: any
-Classifier: Development Status :: 4 - Beta
-Classifier: Environment :: Web Environment
-Classifier: Framework :: Django
-Classifier: Intended Audience :: Developers
-Classifier: License :: OSI Approved :: BSD License
-Classifier: Operating System :: OS Independent
-Classifier: Programming Language :: Python
-Classifier: Topic :: Utilities
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/__init__.py
deleted file mode 100644
index 7e509ff..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/__init__.py
+++ /dev/null
@@ -1,10 +0,0 @@
-
-VERSION = (0, 5,)
-
-# Dynamically calculate the version based on VERSION tuple
-if len(VERSION)>2 and VERSION[2] is not None:
-    str_version = "%s.%s_%s" % VERSION[:3]
-else:
-    str_version = "%s.%s" % VERSION[:2]
-
-__version__ = str_version
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/admin/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/admin/__init__.py
deleted file mode 100644
index 63e2aca..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/admin/__init__.py
+++ /dev/null
@@ -1,142 +0,0 @@
-#
-#    Autocomplete feature for admin panel
-#
-#    Most of the code has been written by Jannis Leidel and was updated a bit
-#    for django_extensions.
-#    http://jannisleidel.com/2008/11/autocomplete-form-widget-foreignkey-model-fields/
-#
-#    to_string_function, Satchmo adaptation and some comments added by emes
-#    (Michal Salaban)
-#
-import operator
-from django.http import HttpResponse, HttpResponseNotFound
-from django.db import models
-from django.db.models.query import QuerySet
-from django.utils.encoding import smart_str
-from django.utils.translation import ugettext as _
-from django.utils.text import get_text_list
-from django.utils.functional import update_wrapper
-
-from django_extensions.admin.widgets import ForeignKeySearchInput
-
-from django.conf import settings
-if 'reversion' in settings.INSTALLED_APPS:
-    from reversion.admin import VersionAdmin as ModelAdmin
-else:
-    from django.contrib.admin import ModelAdmin
-
-class ForeignKeyAutocompleteAdmin(ModelAdmin):
-    """Admin class for models using the autocomplete feature.
-
-    There are two additional fields:
-       - related_search_fields: defines fields of managed model that
-         have to be represented by autocomplete input, together with
-         a list of target model fields that are searched for
-         input string, e.g.:
-
-         related_search_fields = {
-            'author': ('first_name', 'email'),
-         }
-
-       - related_string_functions: contains optional functions which
-         take target model instance as only argument and return string
-         representation. By default __unicode__() method of target
-         object is used.
-    """
-
-    related_search_fields = {}
-    related_string_functions = {}
-
-    def get_urls(self):
-        from django.conf.urls.defaults import patterns, url
-
-        def wrap(view):
-            def wrapper(*args, **kwargs):
-                return self.admin_site.admin_view(view)(*args, **kwargs)
-            return update_wrapper(wrapper, view)
-
-        info = self.model._meta.app_label, self.model._meta.module_name
-
-        urlpatterns = patterns('',
-            url(r'foreignkey_autocomplete/$',
-                wrap(self.foreignkey_autocomplete),
-                name='%s_%s_autocomplete' % info),
-        ) + super(ForeignKeyAutocompleteAdmin, self).get_urls()
-        return urlpatterns
-
-    def foreignkey_autocomplete(self, request):
-        """
-        Searches in the fields of the given related model and returns the
-        result as a simple string to be used by the jQuery Autocomplete plugin
-        """
-        query = request.GET.get('q', None)
-        app_label = request.GET.get('app_label', None)
-        model_name = request.GET.get('model_name', None)
-        search_fields = request.GET.get('search_fields', None)
-        object_pk = request.GET.get('object_pk', None)
-        try:
-            to_string_function = self.related_string_functions[model_name]
-        except KeyError:
-            to_string_function = lambda x: x.__unicode__()
-        if search_fields and app_label and model_name and (query or object_pk):
-            def construct_search(field_name):
-                # use different lookup methods depending on the notation
-                if field_name.startswith('^'):
-                    return "%s__istartswith" % field_name[1:]
-                elif field_name.startswith('='):
-                    return "%s__iexact" % field_name[1:]
-                elif field_name.startswith('@'):
-                    return "%s__search" % field_name[1:]
-                else:
-                    return "%s__icontains" % field_name
-            model = models.get_model(app_label, model_name)
-            queryset = model._default_manager.all()
-            data = ''
-            if query:
-                for bit in query.split():
-                    or_queries = [models.Q(**{construct_search(
-                        smart_str(field_name)): smart_str(bit)})
-                            for field_name in search_fields.split(',')]
-                    other_qs = QuerySet(model)
-                    other_qs.dup_select_related(queryset)
-                    other_qs = other_qs.filter(reduce(operator.or_, or_queries))
-                    queryset = queryset & other_qs
-                data = ''.join([u'%s|%s\n' % (
-                    to_string_function(f), f.pk) for f in queryset])
-            elif object_pk:
-                try:
-                    obj = queryset.get(pk=object_pk)
-                except:
-                    pass
-                else:
-                    data = to_string_function(obj)
-            return HttpResponse(data)
-        return HttpResponseNotFound()
-
-    def get_help_text(self, field_name, model_name):
-        searchable_fields = self.related_search_fields.get(field_name, None)
-        if searchable_fields:
-            help_kwargs = {
-                'model_name': model_name,
-                'field_list': get_text_list(searchable_fields, _('and')),
-            }
-            return _('Use the left field to do %(model_name)s lookups in the fields %(field_list)s.') % help_kwargs
-        return ''
-
-    def formfield_for_dbfield(self, db_field, **kwargs):
-        """
-        Overrides the default widget for Foreignkey fields if they are
-        specified in the related_search_fields class attribute.
-        """
-        if (isinstance(db_field, models.ForeignKey) and
-            db_field.name in self.related_search_fields):
-            model_name = db_field.rel.to._meta.object_name
-            help_text = self.get_help_text(db_field.name, model_name)
-            if kwargs.get('help_text'):
-                help_text = u'%s %s' % (kwargs['help_text'], help_text)
-            kwargs['widget'] = ForeignKeySearchInput(db_field.rel,
-                                    self.related_search_fields[db_field.name])
-            kwargs['help_text'] = help_text
-        return super(ForeignKeyAutocompleteAdmin,
-            self).formfield_for_dbfield(db_field, **kwargs)
-
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/admin/widgets.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/admin/widgets.py
deleted file mode 100644
index 77c5387..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/admin/widgets.py
+++ /dev/null
@@ -1,76 +0,0 @@
-from django import forms
-from django.conf import settings
-from django.utils.safestring import mark_safe
-from django.utils.text import truncate_words
-from django.template.loader import render_to_string
-from django.contrib.admin.widgets import ForeignKeyRawIdWidget
-
-class ForeignKeySearchInput(ForeignKeyRawIdWidget):
-    """
-    A Widget for displaying ForeignKeys in an autocomplete search input 
-    instead in a <select> box.
-    """
-    # Set in subclass to render the widget with a different template
-    widget_template = None
-    # Set this to the patch of the search view
-    search_path = '../foreignkey_autocomplete/'
-
-    class Media:
-        css = {
-            'all': ('django_extensions/css/jquery.autocomplete.css',)
-        }
-        js = (
-            'django_extensions/js/jquery.js',
-            'django_extensions/js/jquery.bgiframe.min.js',
-            'django_extensions/js/jquery.ajaxQueue.js',
-            'django_extensions/js/jquery.autocomplete.js',
-        )
-
-    def label_for_value(self, value):
-        key = self.rel.get_related_field().name
-        obj = self.rel.to._default_manager.get(**{key: value})
-        return truncate_words(obj, 14)
-
-    def __init__(self, rel, search_fields, attrs=None):
-        self.search_fields = search_fields
-        super(ForeignKeySearchInput, self).__init__(rel, attrs)
-
-    def render(self, name, value, attrs=None):
-        if attrs is None:
-            attrs = {}
-        output = [super(ForeignKeySearchInput, self).render(name, value, attrs)]
-        opts = self.rel.to._meta
-        app_label = opts.app_label
-        model_name = opts.object_name.lower()
-        related_url = '../../../%s/%s/' % (app_label, model_name)
-        params = self.url_parameters()
-        if params:
-            url = '?' + '&amp;'.join(['%s=%s' % (k, v) for k, v in params.items()])
-        else:
-            url = ''
-        if not attrs.has_key('class'):
-            attrs['class'] = 'vForeignKeyRawIdAdminField'
-        # Call the TextInput render method directly to have more control
-        output = [forms.TextInput.render(self, name, value, attrs)]
-        if value:
-            label = self.label_for_value(value)
-        else:
-            label = u''
-        context = {
-            'url': url,
-            'related_url': related_url,
-            'admin_media_prefix': settings.ADMIN_MEDIA_PREFIX,
-            'search_path': self.search_path,
-            'search_fields': ','.join(self.search_fields),
-            'model_name': model_name,
-            'app_label': app_label,
-            'label': label,
-            'name': name,
-        }
-        output.append(render_to_string(self.widget_template or (
-            'django_extensions/widgets/%s/%s/foreignkey_searchinput.html' % (app_label, model_name),
-            'django_extensions/widgets/%s/foreignkey_searchinput.html' % app_label,
-            'django_extensions/widgets/foreignkey_searchinput.html',
-        ), context))
-        output.reverse()
-        return mark_safe(u''.join(output))
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/forms.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/forms.py.tmpl
deleted file mode 100644
index 6b477f9..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/forms.py.tmpl
+++ /dev/null
@@ -1,3 +0,0 @@
-from django import forms
-
-# place form definition here
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/models.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/models.py.tmpl
deleted file mode 100644
index 71a8362..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/models.py.tmpl
+++ /dev/null
@@ -1,3 +0,0 @@
-from django.db import models
-
-# Create your models here.
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/urls.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/urls.py.tmpl
deleted file mode 100644
index 5d79a9f..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/urls.py.tmpl
+++ /dev/null
@@ -1,3 +0,0 @@
-from django.conf.urls.defaults import *
-
-# place app url patterns here
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/views.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/views.py.tmpl
deleted file mode 100644
index 60f00ef..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/app_template/views.py.tmpl
+++ /dev/null
@@ -1 +0,0 @@
-# Create your views here.
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/commands/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/commands/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/commands/sample.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/commands/sample.py.tmpl
deleted file mode 100644
index eb9df1b..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/command_template/management/commands/sample.py.tmpl
+++ /dev/null
@@ -1,7 +0,0 @@
-from django.core.management.base import {{ base_command }}
-
-class Command({{ base_command }}):
-    help = "My shiny new management command."
-
-    def {{ handle_method }}:
-        raise NotImplementedError()
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/daily/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/daily/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/hourly/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/hourly/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/monthly/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/monthly/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/sample.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/sample.py.tmpl
deleted file mode 100644
index 1a15179..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/sample.py.tmpl
+++ /dev/null
@@ -1,8 +0,0 @@
-from django_extensions.management.jobs import BaseJob
-
-class Job(BaseJob):
-    help = "My sample job."
-
-    def execute(self):
-        # executing empty sample job
-        pass
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/weekly/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/weekly/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/yearly/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-0.5/django_extensions/conf/jobs_template/jobs/yearly/__init__.py.tmpl
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/__init__.py
deleted file mode 100644
index 3cdb32b..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/__init__.py
+++ /dev/null
@@ -1,247 +0,0 @@
-"""
-Django Extensions additional model fields
-"""
-
-from django.template.defaultfilters import slugify
-from django.db.models import DateTimeField, CharField, SlugField
-import datetime
-import re
-
-try:
-    import uuid
-except ImportError:
-    from django_extensions.utils import uuid
-
-class AutoSlugField(SlugField):
-    """ AutoSlugField
-
-    By default, sets editable=False, blank=True.
-
-    Required arguments:
-
-    populate_from
-        Specifies which field or list of fields the slug is populated from.
-
-    Optional arguments:
-
-    separator
-        Defines the used separator (default: '-')
-
-    overwrite
-        If set to True, overwrites the slug on every save (default: False)
-
-    Inspired by SmileyChris' Unique Slugify snippet:
-    http://www.djangosnippets.org/snippets/690/
-    """
-    def __init__(self, *args, **kwargs):
-        kwargs.setdefault('blank', True)
-        kwargs.setdefault('editable', False)
-
-        populate_from = kwargs.pop('populate_from', None)
-        if populate_from is None:
-            raise ValueError("missing 'populate_from' argument")
-        else:
-            self._populate_from = populate_from
-        self.separator = kwargs.pop('separator',  u'-')
-        self.overwrite = kwargs.pop('overwrite', False)
-        super(AutoSlugField, self).__init__(*args, **kwargs)
-
-    def _slug_strip(self, value):
-        """
-        Cleans up a slug by removing slug separator characters that occur at
-        the beginning or end of a slug.
-
-        If an alternate separator is used, it will also replace any instances
-        of the default '-' separator with the new separator.
-        """
-        re_sep = '(?:-|%s)' % re.escape(self.separator)
-        value = re.sub('%s+' % re_sep, self.separator, value)
-        return re.sub(r'^%s+|%s+$' % (re_sep, re_sep), '', value)
-
-    def slugify_func(self, content):
-        return slugify(content)
-
-    def create_slug(self, model_instance, add):
-        # get fields to populate from and slug field to set
-        if not isinstance(self._populate_from, (list, tuple)):
-            self._populate_from = (self._populate_from, )
-        slug_field = model_instance._meta.get_field(self.attname)
-
-        if add or self.overwrite:
-            # slugify the original field content and set next step to 2
-            slug_for_field = lambda field: self.slugify_func(getattr(model_instance, field))
-            slug = self.separator.join(map(slug_for_field, self._populate_from))
-            next = 2
-        else:
-            # get slug from the current model instance and calculate next
-            # step from its number, clean-up
-            slug = self._slug_strip(getattr(model_instance, self.attname))
-            next = slug.split(self.separator)[-1]
-            if next.isdigit():
-                slug = self.separator.join(slug.split(self.separator)[:-1])
-                next = int(next)
-            else:
-                next = 2
-
-        # strip slug depending on max_length attribute of the slug field
-        # and clean-up
-        slug_len = slug_field.max_length
-        if slug_len:
-            slug = slug[:slug_len]
-        slug = self._slug_strip(slug)
-        original_slug = slug
-
-        # exclude the current model instance from the queryset used in finding
-        # the next valid slug
-        queryset = model_instance.__class__._default_manager.all()
-        if model_instance.pk:
-            queryset = queryset.exclude(pk=model_instance.pk)
-
-        # form a kwarg dict used to impliment any unique_together contraints
-        kwargs = {}
-        for params in model_instance._meta.unique_together:
-            if self.attname in params:
-                for param in params:
-                    kwargs[param] = getattr(model_instance, param, None)
-        kwargs[self.attname] = slug
-
-        # increases the number while searching for the next valid slug
-        # depending on the given slug, clean-up
-        while not slug or queryset.filter(**kwargs):
-            slug = original_slug
-            end = '%s%s' % (self.separator, next)
-            end_len = len(end)
-            if slug_len and len(slug)+end_len > slug_len:
-                slug = slug[:slug_len-end_len]
-                slug = self._slug_strip(slug)
-            slug = '%s%s' % (slug, end)
-            kwargs[self.attname] = slug
-            next += 1
-        return slug
-
-    def pre_save(self, model_instance, add):
-        value = unicode(self.create_slug(model_instance, add))
-        setattr(model_instance, self.attname, value)
-        return value
-
-    def get_internal_type(self):
-        return "SlugField"
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        # We'll just introspect the _actual_ field.
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.SlugField"
-        args, kwargs = introspector(self)
-        # That's our definition!
-        return (field_class, args, kwargs)
-
-class CreationDateTimeField(DateTimeField):
-    """ CreationDateTimeField
-
-    By default, sets editable=False, blank=True, default=datetime.now
-    """
-
-    def __init__(self, *args, **kwargs):
-        kwargs.setdefault('editable', False)
-        kwargs.setdefault('blank', True)
-        kwargs.setdefault('default', datetime.datetime.now)
-        DateTimeField.__init__(self, *args, **kwargs)
-
-    def get_internal_type(self):
-        return "DateTimeField"
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        # We'll just introspect ourselves, since we inherit.
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.DateTimeField"
-        args, kwargs = introspector(self)
-        return (field_class, args, kwargs)
-
-class ModificationDateTimeField(CreationDateTimeField):
-    """ ModificationDateTimeField
-
-    By default, sets editable=False, blank=True, default=datetime.now
-
-    Sets value to datetime.now() on each save of the model.
-    """
-
-    def pre_save(self, model, add):
-        value = datetime.datetime.now()
-        setattr(model, self.attname, value)
-        return value
-
-    def get_internal_type(self):
-        return "DateTimeField"
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        # We'll just introspect ourselves, since we inherit.
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.DateTimeField"
-        args, kwargs = introspector(self)
-        return (field_class, args, kwargs)
-
-class UUIDVersionError(Exception):
-    pass
-
-class UUIDField(CharField):
-    """ UUIDField
-
-    By default uses UUID version 1 (generate from host ID, sequence number and current time)
-
-    The field support all uuid versions which are natively supported by the uuid python module.
-    For more information see: http://docs.python.org/lib/module-uuid.html
-    """
-
-    def __init__(self, verbose_name=None, name=None, auto=True, version=1, node=None, clock_seq=None, namespace=None, **kwargs):
-        kwargs['max_length'] = 36
-        if auto:
-            kwargs['blank'] = True
-            kwargs.setdefault('editable', False)
-        self.auto = auto
-        self.version = version
-        if version==1:
-            self.node, self.clock_seq = node, clock_seq
-        elif version==3 or version==5:
-            self.namespace, self.name = namespace, name
-        CharField.__init__(self, verbose_name, name, **kwargs)
-
-    def get_internal_type(self):
-        return CharField.__name__
-
-    def create_uuid(self):
-        if not self.version or self.version==4:
-            return uuid.uuid4()
-        elif self.version==1:
-            return uuid.uuid1(self.node, self.clock_seq)
-        elif self.version==2:
-            raise UUIDVersionError("UUID version 2 is not supported.")
-        elif self.version==3:
-            return uuid.uuid3(self.namespace, self.name)
-        elif self.version==5:
-            return uuid.uuid5(self.namespace, self.name)
-        else:
-            raise UUIDVersionError("UUID version %s is not valid." % self.version)
-
-    def pre_save(self, model_instance, add):
-        if self.auto and add:
-            value = unicode(self.create_uuid())
-            setattr(model_instance, self.attname, value)
-            return value
-        else:
-            value = super(UUIDField, self).pre_save(model_instance, add)
-            if self.auto and not value:
-                value = unicode(self.create_uuid())
-                setattr(model_instance, self.attname, value)
-        return value
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        # We'll just introspect the _actual_ field.
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.CharField"
-        args, kwargs = introspector(self)
-        # That's our definition!
-        return (field_class, args, kwargs)
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/encrypted.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/encrypted.py
deleted file mode 100644
index 6a35889..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/encrypted.py
+++ /dev/null
@@ -1,58 +0,0 @@
-from django.db import models
-from django.core.exceptions import ImproperlyConfigured
-from django import forms
-from django.conf import settings
-
-try:
-    from keyczar import keyczar
-except ImportError:
-    raise ImportError('Using an encrypted field requires the Keyczar module.  You can obtain Keyczar from http://www.keyczar.org/.')
-
-class BaseEncryptedField(models.Field):
-    prefix = 'enc_str:::'
-    def __init__(self, *args, **kwargs):
-        if not hasattr(settings, 'ENCRYPTED_FIELD_KEYS_DIR'):
-            raise ImproperlyConfigured('You must set settings.ENCRYPTED_FIELD_KEYS_DIR to your Keyczar keys directory.')
-        self.crypt = keyczar.Crypter.Read(settings.ENCRYPTED_FIELD_KEYS_DIR)
-        super(BaseEncryptedField, self).__init__(*args, **kwargs)
-    
-    def to_python(self, value):
-        if (value.startswith(self.prefix)):
-            retval = self.crypt.Decrypt(value[len(self.prefix):])
-        else:
-            retval = value
-            
-        return retval
-    
-    def get_db_prep_value(self, value):
-        if not value.startswith(self.prefix):
-            value = self.prefix + self.crypt.Encrypt(value)
-        return value
-
-class EncryptedTextField(BaseEncryptedField):
-    __metaclass__ = models.SubfieldBase
-
-    def get_internal_type(self): 
-        return 'TextField'
-    
-    def formfield(self, **kwargs):
-        defaults = {'widget': forms.Textarea}
-        defaults.update(kwargs)
-        return super(EncryptedTextField, self).formfield(**defaults)
-
-class EncryptedCharField(BaseEncryptedField):
-    __metaclass__ = models.SubfieldBase
-    
-    def __init__(self, max_length=None, *args, **kwargs):
-        if max_length:
-            max_length += len(self.prefix)
-        
-        super(EncryptedCharField, self).__init__(max_length=max_length, *args, **kwargs)
-        
-    def get_internal_type(self):
-        return "CharField"
-    
-    def formfield(self, **kwargs):
-        defaults = {'max_length': self.max_length}
-        defaults.update(kwargs)
-        return super(EncryptedCharField, self).formfield(**defaults)
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/json.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/json.py
deleted file mode 100644
index bdc8e4b..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/fields/json.py
+++ /dev/null
@@ -1,77 +0,0 @@
-"""
-JSONField automatically serializes most Python terms to JSON data.
-Creates a TEXT field with a default value of "{}".  See test_json.py for
-more information.
-
- from django.db import models
- from django_extensions.db.fields import json
-
- class LOL(models.Model):
-     extra = json.JSONField()
-"""
-
-import datetime
-from decimal import Decimal
-from django.db import models
-from django.conf import settings
-from django.utils import simplejson
-from django.utils.encoding import smart_unicode
-
-class JSONEncoder(simplejson.JSONEncoder):
-    def default(self, obj):
-        if isinstance(obj, Decimal):
-            return str(obj)
-        elif isinstance(obj, datetime.datetime):
-            assert settings.TIME_ZONE == 'UTC'
-            return obj.strftime('%Y-%m-%dT%H:%M:%SZ')
-        return simplejson.JSONEncoder.default(self, obj)
-
-def dumps(value):
-    assert isinstance(value, dict)
-    return JSONEncoder().encode(value)
-
-def loads(txt):
-    value = simplejson.loads(
-        txt,
-        parse_float = Decimal,
-        encoding    = settings.DEFAULT_CHARSET)
-    assert isinstance(value, dict)
-    return value
-
-class JSONDict(dict):
-    """
-    Hack so repr() called by dumpdata will output JSON instead of
-    Python formatted data.  This way fixtures will work!
-    """
-    def __repr__(self):
-        return dumps(self)
-
-class JSONField(models.TextField):
-    """JSONField is a generic textfield that neatly serializes/unserializes
-    JSON objects seamlessly.  Main thingy must be a dict object."""
-
-    # Used so to_python() is called
-    __metaclass__ = models.SubfieldBase
-
-    def __init__(self, *args, **kwargs):
-        if 'default' not in kwargs:
-            kwargs['default'] = '{}'
-        models.TextField.__init__(self, *args, **kwargs)
-
-    def to_python(self, value):
-        """Convert our string value to JSON after we load it from the DB"""
-        if not value:
-            return {}
-        elif isinstance(value, basestring):
-            res = loads(value)
-            assert isinstance(res, dict)
-            return JSONDict(**res)
-        else:
-            return value
-
-    def get_db_prep_save(self, value):
-        """Convert our JSON object to a string before we save"""
-        if not value:
-            return super(JSONField, self).get_db_prep_save("")
-        else:
-            return super(JSONField, self).get_db_prep_save(dumps(value))
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/models.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/models.py
deleted file mode 100644
index 4a3d0e9..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/db/models.py
+++ /dev/null
@@ -1,67 +0,0 @@
-"""
-Django Extensions abstract base model classes.
-"""
-import datetime
-from django.db import models
-from django.utils.translation import ugettext_lazy as _
-from django_extensions.db.fields import (ModificationDateTimeField,
-                                         CreationDateTimeField, AutoSlugField)
-
-class TimeStampedModel(models.Model):
-    """ TimeStampedModel
-    An abstract base class model that provides self-managed "created" and
-    "modified" fields.
-    """
-    created = CreationDateTimeField(_('created'))
-    modified = ModificationDateTimeField(_('modified'))
-
-    class Meta:
-        abstract = True
-
-class TitleSlugDescriptionModel(models.Model):
-    """ TitleSlugDescriptionModel
-    An abstract base class model that provides title and description fields
-    and a self-managed "slug" field that populates from the title.
-    """
-    title = models.CharField(_('title'), max_length=255)
-    slug = AutoSlugField(_('slug'), populate_from='title')
-    description = models.TextField(_('description'), blank=True, null=True)
-
-    class Meta:
-        abstract = True
-
-class ActivatorModelManager(models.Manager):
-    """ ActivatorModelManager
-    Manager to return instances of ActivatorModel: SomeModel.objects.active() / .inactive()
-    """
-    def active(self):
-        """ Returns active instances of ActivatorModel: SomeModel.objects.active() """
-        return super(ActivatorModelManager, self).get_query_set().filter(status=1)
-
-    def inactive(self):
-        """ Returns inactive instances of ActivatorModel: SomeModel.objects.inactive() """
-        return super(ActivatorModelManager, self).get_query_set().filter(status=0)
-
-class ActivatorModel(models.Model):
-    """ ActivatorModel
-    An abstract base class model that provides activate and deactivate fields.
-    """
-    STATUS_CHOICES = (
-        (0, _('Inactive')),
-        (1, _('Active')),
-    )
-    status = models.IntegerField(_('status'), choices=STATUS_CHOICES,
-        default=1)
-    activate_date = models.DateTimeField(blank=True, null=True,
-        help_text=_('keep empty for an immediate activation'))
-    deactivate_date = models.DateTimeField(blank=True, null=True,
-        help_text=_('keep empty for indefinite activation'))
-    objects = ActivatorModelManager()
-
-    class Meta:
-        abstract = True
-
-    def save(self, *args, **kwargs):
-        if not self.activate_date:
-            self.activate_date = datetime.datetime.now()
-        super(ActivatorModel, self).save(*args, **kwargs)
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/cache_cleanup.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/cache_cleanup.py
deleted file mode 100644
index 09f4e68..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/cache_cleanup.py
+++ /dev/null
@@ -1,23 +0,0 @@
-"""
-Daily cleanup job.
-
-Can be run as a cronjob to clean out old data from the database (only expired
-sessions at the moment).
-"""
-
-from django_extensions.management.jobs import DailyJob
-
-class Job(DailyJob):
-    help = "Cache (db) cleanup Job"
-
-    def execute(self):
-        from django.conf import settings
-        import os
-
-        if settings.CACHE_BACKEND.startswith('db://'):
-            os.environ['TZ'] = settings.TIME_ZONE
-            table_name = settings.CACHE_BACKEND[5:]
-            cursor = connection.cursor()
-            cursor.execute("DELETE FROM %s WHERE %s < UTC_TIMESTAMP()" % \
-                (backend.quote_name(table_name), backend.quote_name('expires')))
-            transaction.commit_unless_managed()
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/daily_cleanup.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/daily_cleanup.py
deleted file mode 100644
index 37fde33..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/daily/daily_cleanup.py
+++ /dev/null
@@ -1,15 +0,0 @@
-"""
-Daily cleanup job.
-
-Can be run as a cronjob to clean out old data from the database (only expired
-sessions at the moment).
-"""
-
-from django_extensions.management.jobs import DailyJob
-
-class Job(DailyJob):
-    help = "Django Daily Cleanup Job"
-
-    def execute(self):
-        from django.core import management
-        management.call_command("cleanup")
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/hourly/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/hourly/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/monthly/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/monthly/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/weekly/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/weekly/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/yearly/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/jobs/yearly/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/color.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/color.py
deleted file mode 100644
index 047adcd..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/color.py
+++ /dev/null
@@ -1,14 +0,0 @@
-"""
-Sets up the terminal color scheme.
-"""
-
-from django.core.management import color
-from django.utils import termcolors
-
-def color_style():
-    style = color.color_style()
-    style.URL = termcolors.make_style(fg='green', opts=('bold',))
-    style.MODULE = termcolors.make_style(fg='yellow')
-    style.MODULE_NAME = termcolors.make_style(opts=('bold',))
-    style.URL_NAME = termcolors.make_style(fg='red')
-    return style
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/clean_pyc.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/clean_pyc.py
deleted file mode 100644
index 5d3b12f..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/clean_pyc.py
+++ /dev/null
@@ -1,41 +0,0 @@
-from django.core.management.base import NoArgsCommand
-from django_extensions.management.utils import get_project_root
-from random import choice
-from optparse import make_option
-from os.path import join as _j
-import os
-
-class Command(NoArgsCommand):
-    option_list = NoArgsCommand.option_list + (
-        make_option('--optimize', '-o', '-O', action='store_true', dest='optimize', 
-            help='Remove optimized python bytecode files'),
-        make_option('--path', '-p', action='store', dest='path', 
-            help='Specify path to recurse into'),
-    )
-    help = "Removes all python bytecode compiled files from the project."
-    
-    requires_model_validation = False
-    
-    def handle_noargs(self, **options):
-        project_root = options.get("path", None)
-        if not project_root:
-            project_root = get_project_root()
-        exts = options.get("optimize", False) and [".pyc", ".pyo"] or [".pyc"]
-        verbose = int(options.get("verbosity", 1))>1
-
-        for root, dirs, files in os.walk(project_root):
-            for file in files:
-                ext = os.path.splitext(file)[1]
-                if ext in exts:
-                    full_path = _j(root, file)
-                    if verbose:
-                        print full_path
-                    os.remove(full_path)
-
-# Backwards compatibility for Django r9110
-if not [opt for opt in Command.option_list if opt.dest=='verbosity']:
-    Command.option_list += (
-        make_option('--verbosity', '-v', action="store", dest="verbosity",
-            default='1', type='choice', choices=['0', '1', '2'],
-            help="Verbosity level; 0=minimal output, 1=normal output, 2=all output"),
-    )
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/compile_pyc.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/compile_pyc.py
deleted file mode 100644
index 170fb25..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/compile_pyc.py
+++ /dev/null
@@ -1,39 +0,0 @@
-from django.core.management.base import NoArgsCommand
-from django_extensions.management.utils import get_project_root
-from random import choice
-from optparse import make_option
-from os.path import join as _j
-import py_compile 
-import os
-
-class Command(NoArgsCommand):
-    option_list = NoArgsCommand.option_list + (
-        make_option('--path', '-p', action='store', dest='path', 
-            help='Specify path to recurse into'),
-    )
-    help = "Compile python bytecode files for the project."
-    
-    requires_model_validation = False
-    
-    def handle_noargs(self, **options):
-        project_root = options.get("path", None)
-        if not project_root:
-            project_root = get_project_root()
-        verbose = int(options.get("verbosity", 1))>1
-
-        for root, dirs, files in os.walk(project_root):
-            for file in files:
-                ext = os.path.splitext(file)[1]
-                if ext==".py":
-                    full_path = _j(root, file)
-                    if verbose:
-                        print "%sc" % full_path
-                    py_compile.compile(full_path)
-
-# Backwards compatibility for Django r9110
-if not [opt for opt in Command.option_list if opt.dest=='verbosity']:
-    Command.option_list += (
-        make_option('--verbosity', '-v', action="store", dest="verbosity",
-            default='1', type='choice', choices=['0', '1', '2'],
-            help="Verbosity level; 0=minimal output, 1=normal output, 2=all output"),
-    )
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_app.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_app.py
deleted file mode 100644
index 550a6f4..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_app.py
+++ /dev/null
@@ -1,141 +0,0 @@
-import os
-import re
-import django_extensions
-from django.conf import settings
-from django.db import connection
-from django.core.management.base import CommandError, LabelCommand, _make_writeable
-from django_extensions.utils.dia2django import dia2django
-from optparse import make_option
-
-class Command(LabelCommand):
-    option_list = LabelCommand.option_list + (
-        make_option('--template', '-t', action='store', dest='app_template',
-            help='The path to the app template'),
-        make_option('--parent_path', '-p', action='store', dest='parent_path',
-            help='The parent path of the application to be created'),
-        make_option('-d', action='store_true', dest='dia_parse',
-            help='Generate model.py and admin.py from [APP_NAME].dia file'),
-        make_option('--diagram', action='store', dest='dia_path',
-            help='The diagram path of the app to be created. -d is implied'),
-    )
-
-    help = ("Creates an application directory structure for the specified "
-        "application name.")
-    args = "APP_NAME"
-    label = 'application name'
-
-    requires_model_validation = False
-    can_import_settings = True
-
-    def handle_label(self, label, **options):
-        project_dir = os.getcwd()
-        project_name = os.path.split(project_dir)[-1]
-        app_name =label
-        app_template = options.get('app_template') or os.path.join(django_extensions.__path__[0], 'conf', 'app_template')
-        app_dir = os.path.join(options.get('parent_path') or project_dir, app_name)
-        dia_path = options.get('dia_path') or os.path.join(project_dir, '%s.dia' % app_name)
-
-        if not os.path.exists(app_template):
-            raise CommandError("The template path, %r, does not exist." % app_template)
-
-        if not re.search(r'^\w+$', label):
-            raise CommandError("%r is not a valid application name. Please use only numbers, letters and underscores." % label)
-
-        dia_parse = options.get('dia_path') or options.get('dia_parse')
-        if dia_parse:
-            if not os.path.exists(dia_path):
-                raise CommandError("The diagram path, %r, does not exist."
-                    % dia_path)
-            if app_name in settings.INSTALLED_APPS:
-                raise CommandError("The application %s should not be defined "
-                    "in the settings file. Please remove %s now, and add it "
-                    "after using this command." % (app_name, app_name))
-            tables = [name for name in connection.introspection.table_names()
-                if name.startswith('%s_' % app_name)]
-            if tables:
-                raise CommandError("%r application has tables in the database. "
-                    "Please delete them." % app_name)
-
-        try:
-            os.makedirs(app_dir)
-        except OSError, e:
-            raise CommandError(e)
-
-        copy_template(app_template, app_dir, project_name, app_name)
-
-        if dia_parse:
-            generate_models_and_admin(dia_path, app_dir, project_name, app_name)
-            print "Application %r created." % app_name
-            print "Please add now %r and any other dependent application in " \
-                "settings.INSTALLED_APPS, and run 'manage syncdb'" % app_name
-
-
-def copy_template(app_template, copy_to, project_name, app_name):
-    """copies the specified template directory to the copy_to location"""
-    import shutil
-    
-    app_template = os.path.normpath(app_template)
-    # walks the template structure and copies it
-    for d, subdirs, files in os.walk(app_template):
-        relative_dir = d[len(app_template)+1:]
-        d_new = os.path.join(copy_to, relative_dir).replace('app_name', app_name)
-        if relative_dir and not os.path.exists(d_new):
-            os.mkdir(d_new)
-        for i, subdir in enumerate(subdirs):
-            if subdir.startswith('.'):
-                del subdirs[i]
-        for f in files:
-            if f.endswith('.pyc') or f.startswith('.DS_Store'):
-                continue
-            path_old = os.path.join(d, f)
-            path_new = os.path.join(d_new, f.replace('app_name', app_name))
-            if os.path.exists(path_new):
-                path_new = os.path.join(d_new, f)
-                if os.path.exists(path_new):
-                    continue
-            if path_new.endswith('.tmpl'):
-                path_new = path_new[:-5]
-            fp_old = open(path_old, 'r')
-            fp_new = open(path_new, 'w')
-            fp_new.write(fp_old.read().replace('{{ app_name }}', app_name).replace('{{ project_name }}', project_name))
-            fp_old.close()
-            fp_new.close()
-            try:
-                shutil.copymode(path_old, path_new)
-                _make_writeable(path_new)
-            except OSError:
-                sys.stderr.write(style.NOTICE("Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.\n" % path_new))
-
-
-def generate_models_and_admin(dia_path, app_dir, project_name, app_name):
-    """Generates the models.py and admin.py files"""
-
-    def format_text(string, indent=False):
-        """format string in lines of 80 or less characters"""
-        retval = ''
-        while string:
-            line = string[:77]
-            last_space = line.rfind(' ')
-            if last_space != -1 and len(string)>77:
-                retval += "%s \\\n" % string[:last_space]
-                string = string[last_space+1:]
-            else:
-                retval += "%s\n" % string
-                string = ''
-            if string and indent:
-                string = '    %s' % string
-        return retval
-
-    model_path = os.path.join(app_dir, 'models.py')
-    admin_path = os.path.join(app_dir, 'admin.py')
-
-    models_txt = 'from django.db import models\n' + dia2django(dia_path)
-    open(model_path, 'w').write(models_txt)
-
-    classes = re.findall('class (\w+)', models_txt)
-    admin_txt = 'from django.contrib.admin import site, ModelAdmin\n' + \
-        format_text('from %s.%s.models import %s' %
-        (project_name, app_name, ', '.join(classes)), indent=True)
-    admin_txt += format_text('\n\n%s' %
-        '\n'.join(map((lambda t: 'site.register(%s)' %t), classes)))
-    open(admin_path, 'w').write(admin_txt)
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_command.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_command.py
deleted file mode 100644
index 3677992..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_command.py
+++ /dev/null
@@ -1,78 +0,0 @@
-import os
-from django.core.management.base import CommandError, AppCommand, _make_writeable
-from optparse import make_option
-
-class Command(AppCommand):
-    option_list = AppCommand.option_list + (
-        make_option('--name', '-n', action='store', dest='command_name', default='sample',
-            help='The name to use for the management command'),
-        make_option('--base', '-b', action='store', dest='base_command', default='Base',
-            help='The base class used for implementation of this command. Should be one of Base, App, Label, or NoArgs'),
-    )
-    
-    help = ("Creates a Django management command directory structure for the given app name"
-            " in the current directory.")
-    args = "[appname]"
-    label = 'application name'
-
-    requires_model_validation = False
-    # Can't import settings during this command, because they haven't
-    # necessarily been created.
-    can_import_settings = True
-
-    def handle_app(self, app, **options):
-        directory = os.getcwd()
-        app_name = app.__name__.split('.')[-2]
-        project_dir = os.path.join(directory, app_name)
-        if not os.path.exists(project_dir):
-            try:
-                os.mkdir(project_dir)
-            except OSError, e:
-                raise CommandError(e)
-        
-        copy_template('command_template', project_dir, options.get('command_name'), '%sCommand' % options.get('base_command'))
-            
-def copy_template(template_name, copy_to, command_name, base_command):
-    """copies the specified template directory to the copy_to location"""
-    import django_extensions
-    import re
-    import shutil
-    
-    template_dir = os.path.join(django_extensions.__path__[0], 'conf', template_name)
-
-    handle_method = "handle(self, *args, **options)"
-    if base_command == 'AppCommand':
-        handle_method = "handle_app(self, app, **options)"
-    elif base_command == 'LabelCommand':
-        handle_method = "handle_label(self, label, **options)"
-    elif base_command == 'NoArgsCommand':
-        handle_method = "handle_noargs(self, **options)"
-    
-    # walks the template structure and copies it
-    for d, subdirs, files in os.walk(template_dir):
-        relative_dir = d[len(template_dir)+1:]
-        if relative_dir and not os.path.exists(os.path.join(copy_to, relative_dir)):
-            os.mkdir(os.path.join(copy_to, relative_dir))
-        for i, subdir in enumerate(subdirs):
-            if subdir.startswith('.'):
-                del subdirs[i]
-        for f in files:
-            if f.endswith('.pyc') or f.startswith('.DS_Store'):
-                continue
-            path_old = os.path.join(d, f)
-            path_new = os.path.join(copy_to, relative_dir, f.replace('sample', command_name))
-            if os.path.exists(path_new):
-                path_new = os.path.join(copy_to, relative_dir, f)
-                if os.path.exists(path_new):
-                    continue
-            path_new = path_new.rstrip(".tmpl")
-            fp_old = open(path_old, 'r')
-            fp_new = open(path_new, 'w')
-            fp_new.write(fp_old.read().replace('{{ command_name }}', command_name).replace('{{ base_command }}', base_command).replace('{{ handle_method }}', handle_method))
-            fp_old.close()
-            fp_new.close()
-            try:
-                shutil.copymode(path_old, path_new)
-                _make_writeable(path_new)
-            except OSError:
-                sys.stderr.write(style.NOTICE("Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.\n" % path_new))
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_jobs.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_jobs.py
deleted file mode 100644
index 16ece2c..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/create_jobs.py
+++ /dev/null
@@ -1,54 +0,0 @@
-import os
-import sys
-from django.core.management.base import CommandError, AppCommand, _make_writeable
-
-class Command(AppCommand):
-    help = ("Creates a Django jobs command directory structure for the given app name in the current directory.")
-    args = "[appname]"
-    label = 'application name'
-
-    requires_model_validation = False
-    # Can't import settings during this command, because they haven't
-    # necessarily been created.
-    can_import_settings = True
-
-    def handle_app(self, app, **options):
-        app_dir = os.path.dirname(app.__file__)
-        copy_template('jobs_template', app_dir)
-
-def copy_template(template_name, copy_to):
-    """copies the specified template directory to the copy_to location"""
-    import django_extensions
-    import re
-    import shutil
-    
-    template_dir = os.path.join(django_extensions.__path__[0], 'conf', template_name)
-
-    # walks the template structure and copies it
-    for d, subdirs, files in os.walk(template_dir):
-        relative_dir = d[len(template_dir)+1:]
-        if relative_dir and not os.path.exists(os.path.join(copy_to, relative_dir)):
-            os.mkdir(os.path.join(copy_to, relative_dir))
-        for i, subdir in enumerate(subdirs):
-            if subdir.startswith('.'):
-                del subdirs[i]
-        for f in files:
-            if f.endswith('.pyc') or f.startswith('.DS_Store'):
-                continue
-            path_old = os.path.join(d, f)
-            path_new = os.path.join(copy_to, relative_dir, f)
-            if os.path.exists(path_new):
-                path_new = os.path.join(copy_to, relative_dir, f)
-                if os.path.exists(path_new):
-                    continue
-            path_new = path_new.rstrip(".tmpl")
-            fp_old = open(path_old, 'r')
-            fp_new = open(path_new, 'w')
-            fp_new.write(fp_old.read())
-            fp_old.close()
-            fp_new.close()
-            try:
-                shutil.copymode(path_old, path_new)
-                _make_writeable(path_new)
-            except OSError:
-                sys.stderr.write(style.NOTICE("Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.\n" % path_new))
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/describe_form.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/describe_form.py
deleted file mode 100644
index 4aa3491..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/describe_form.py
+++ /dev/null
@@ -1,64 +0,0 @@
-from django.core.management.base import LabelCommand, CommandError
-from django.utils.encoding import force_unicode
-
-class Command(LabelCommand):
-    help = "Outputs the specified model as a form definition to the shell."
-    args = "[app.model]"
-    label = 'application name and model name'
-    
-    requires_model_validation = True
-    can_import_settings = True
-
-    def handle_label(self, label, **options):    
-        return describe_form(label)
-
-
-def describe_form(label, fields=None):
-    """
-    Returns a string describing a form based on the model
-    """
-    from django.db.models.loading import get_model
-    try:
-        app_name, model_name = label.split('.')[-2:]
-    except (IndexError, ValueError):
-        raise CommandError("Need application and model name in the form: appname.model")
-    model = get_model(app_name, model_name)
-
-    opts = model._meta
-    field_list = []
-    for f in opts.fields + opts.many_to_many:
-        if not f.editable:
-            continue
-        if fields and not f.name in fields:
-            continue
-        formfield = f.formfield()
-        if not '__dict__' in dir(formfield):
-            continue
-        attrs = {}
-        valid_fields = ['required', 'initial', 'max_length', 'min_length', 'max_value', 'min_value', 'max_digits', 'decimal_places', 'choices', 'help_text', 'label']
-        for k,v in formfield.__dict__.items():
-            if k in valid_fields and v != None:
-                # ignore defaults, to minimize verbosity
-                if k == 'required' and v:
-                    continue
-                if k == 'help_text' and not v:
-                    continue
-                if k == 'widget':
-                    attrs[k] = v.__class__
-                elif k in ['help_text', 'label']:
-                    attrs[k] = force_unicode(v).strip()
-                else:
-                    attrs[k] = v
-                
-        params = ', '.join(['%s=%r' % (k, v) for k, v in attrs.items()])
-        field_list.append('    %(field_name)s = forms.%(field_type)s(%(params)s)' % { 'field_name': f.name, 
-                                                                                  'field_type': formfield.__class__.__name__, 
-                                                                                  'params': params })
-                                                                               
-    return '''
-from django import forms
-from %(app_name)s.models import %(object_name)s
-    
-class %(object_name)sForm(forms.Form):
-%(field_list)s
-''' % { 'app_name': app_name, 'object_name': opts.object_name,  'field_list': '\n'.join(field_list) }
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/dumpscript.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/dumpscript.py
deleted file mode 100644
index 7039786..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/dumpscript.py
+++ /dev/null
@@ -1,515 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: UTF-8 -*-
-"""
-      Title: Dumpscript management command
-    Project: Hardytools (queryset-refactor version)
-     Author: Will Hardy (http://willhardy.com.au)
-       Date: June 2008
-      Usage: python manage.py dumpscript appname > scripts/scriptname.py
-  $Revision: 217 $
-
-Description: 
-    Generates a Python script that will repopulate the database using objects.
-    The advantage of this approach is that it is easy to understand, and more
-    flexible than directly populating the database, or using XML.
-
-    * It also allows for new defaults to take effect and only transfers what is
-      needed.
-    * If a new database schema has a NEW ATTRIBUTE, it is simply not
-      populated (using a default value will make the transition smooth :)
-    * If a new database schema REMOVES AN ATTRIBUTE, it is simply ignored
-      and the data moves across safely (I'm assuming we don't want this
-      attribute anymore.
-    * Problems may only occur if there is a new model and is now a required
-      ForeignKey for an existing model. But this is easy to fix by editing the
-      populate script :)
-
-Improvements:
-    See TODOs and FIXMEs scattered throughout :-)
-
-"""
-
-import sys
-from django.db import models
-from django.core.exceptions import ObjectDoesNotExist
-from django.core.management.base import BaseCommand
-from django.utils.encoding import smart_unicode, force_unicode
-from django.contrib.contenttypes.models import ContentType
-
-class Command(BaseCommand):
-    help = 'Dumps the data as a customised python script.'
-    args = '[appname ...]'
-
-    def handle(self, *app_labels, **options):
-
-        # Get the models we want to export
-        models = get_models(app_labels)
-
-        # A dictionary is created to keep track of all the processed objects,
-        # so that foreign key references can be made using python variable names.
-        # This variable "context" will be passed around like the town bicycle.
-        context = {}
-
-        # Create a dumpscript object and let it format itself as a string
-        print Script(models=models, context=context)
-
-
-def get_models(app_labels):
-    """ Gets a list of models for the given app labels, with some exceptions. 
-        TODO: If a required model is referenced, it should also be included.
-        Or at least discovered with a get_or_create() call.
-    """
-
-    from django.db.models import get_app, get_apps, get_model
-    from django.db.models import get_models as get_all_models
-
-    # These models are not to be output, e.g. because they can be generated automatically
-    # TODO: This should be "appname.modelname" string
-    from django.contrib.contenttypes.models import ContentType
-    EXCLUDED_MODELS = (ContentType, )
-
-    models = []
-
-    # If no app labels are given, return all
-    if not app_labels:
-        for app in get_apps():
-            models += [ m for m in get_all_models(app) if m not in EXCLUDED_MODELS ]
-
-    # Get all relevant apps
-    for app_label in app_labels:
-        # If a specific model is mentioned, get only that model
-        if "." in app_label:
-            app_label, model_name = app_label.split(".", 1)
-            models.append(get_model(app_label, model_name))
-        # Get all models for a given app
-        else:
-            models += [ m for m in get_all_models(get_app(app_label)) if m not in EXCLUDED_MODELS ]
-
-    return models
-
-
-
-class Code(object):
-    """ A snippet of python script. 
-        This keeps track of import statements and can be output to a string.
-        In the future, other features such as custom indentation might be included
-        in this class.
-    """
-
-    def __init__(self):
-        self.imports = {}
-        self.indent = -1 
-
-    def __str__(self):
-        """ Returns a string representation of this script. 
-        """
-        if self.imports:
-            sys.stderr.write(repr(self.import_lines))
-            return flatten_blocks([""] + self.import_lines + [""] + self.lines, num_indents=self.indent)
-        else:
-            return flatten_blocks(self.lines, num_indents=self.indent)
-
-    def get_import_lines(self):
-        """ Takes the stored imports and converts them to lines
-        """
-        if self.imports:
-            return [ "from %s import %s" % (value, key) for key, value in self.imports.items() ]
-        else:
-            return []
-    import_lines = property(get_import_lines)
-
-
-class ModelCode(Code):
-    " Produces a python script that can recreate data for a given model class. "
-
-    def __init__(self, model, context={}):
-        self.model = model
-        self.context = context
-        self.instances = []
-        self.indent = 0
-
-    def get_imports(self):
-        """ Returns a dictionary of import statements, with the variable being
-            defined as the key. 
-        """
-        return { self.model.__name__: smart_unicode(self.model.__module__) }
-    imports = property(get_imports)
-
-    def get_lines(self):
-        """ Returns a list of lists or strings, representing the code body. 
-            Each list is a block, each string is a statement.
-        """
-        code = []
-
-        for counter, item in enumerate(self.model.objects.all()):
-            instance = InstanceCode(instance=item, id=counter+1, context=self.context)
-            self.instances.append(instance)
-            if instance.waiting_list:
-                code += instance.lines
- 
-        # After each instance has been processed, try again.
-        # This allows self referencing fields to work.
-        for instance in self.instances:
-            if instance.waiting_list:
-                code += instance.lines
-
-        return code
-
-    lines = property(get_lines)
-
-
-class InstanceCode(Code):
-    " Produces a python script that can recreate data for a given model instance. "
-
-    def __init__(self, instance, id, context={}):
-        """ We need the instance in question and an id """
-
-        self.instance = instance
-        self.model = self.instance.__class__
-        self.context = context
-        self.variable_name = "%s_%s" % (self.instance._meta.db_table, id)
-        self.skip_me = None
-        self.instantiated = False
-
-        self.indent  = 0 
-        self.imports = {}
-
-        self.waiting_list = list(self.model._meta.fields)
-
-        self.many_to_many_waiting_list = {} 
-        for field in self.model._meta.many_to_many:
-            self.many_to_many_waiting_list[field] = list(getattr(self.instance, field.name).all())
-
-    def get_lines(self, force=False):
-        """ Returns a list of lists or strings, representing the code body. 
-            Each list is a block, each string is a statement.
-            
-            force (True or False): if an attribute object cannot be included, 
-            it is usually skipped to be processed later. With 'force' set, there
-            will be no waiting: a get_or_create() call is written instead.
-        """
-        code_lines = []
-
-        # Don't return anything if this is an instance that should be skipped
-        if self.skip():
-            return []
-
-        # Initialise our new object
-        # e.g. model_name_35 = Model()
-        code_lines += self.instantiate()
-
-        # Add each field
-        # e.g. model_name_35.field_one = 1034.91
-        #      model_name_35.field_two = "text"
-        code_lines += self.get_waiting_list()
-
-        if force:
-            # TODO: Check that M2M are not affected
-            code_lines += self.get_waiting_list(force=force)
-
-        # Print the save command for our new object
-        # e.g. model_name_35.save()
-        if code_lines:
-            code_lines.append("%s.save()\n" % (self.variable_name))
-
-        code_lines += self.get_many_to_many_lines(force=force)
-
-        return code_lines
-    lines = property(get_lines)
-
-    def skip(self):
-        """ Determine whether or not this object should be skipped.
-            If this model is a parent of a single subclassed instance, skip it.
-            The subclassed instance will create this parent instance for us.
-
-            TODO: Allow the user to force its creation?
-        """
-
-        if self.skip_me is not None:
-            return self.skip_me
-
-        try:
-            # Django trunk since r7722 uses CollectedObjects instead of dict
-            from django.db.models.query import CollectedObjects
-            sub_objects = CollectedObjects()
-        except ImportError:
-            # previous versions don't have CollectedObjects
-            sub_objects = {}
-        self.instance._collect_sub_objects(sub_objects)
-        if reduce(lambda x, y: x+y, [self.model in so._meta.parents for so in sub_objects.keys()]) == 1:
-            pk_name = self.instance._meta.pk.name
-            key = '%s_%s' % (self.model.__name__, getattr(self.instance, pk_name))
-            self.context[key] = None
-            self.skip_me = True
-        else:
-            self.skip_me = False
-
-        return self.skip_me
-
-    def instantiate(self):
-        " Write lines for instantiation "
-        # e.g. model_name_35 = Model()
-        code_lines = []
-
-        if not self.instantiated:
-            code_lines.append("%s = %s()" % (self.variable_name, self.model.__name__))
-            self.instantiated = True
-
-            # Store our variable name for future foreign key references
-            pk_name = self.instance._meta.pk.name
-            key = '%s_%s' % (self.model.__name__, getattr(self.instance, pk_name))
-            self.context[key] = self.variable_name
-
-        return code_lines
-
-
-    def get_waiting_list(self, force=False):
-        " Add lines for any waiting fields that can be completed now. "
-
-        code_lines = []
-
-        # Process normal fields
-        for field in list(self.waiting_list):
-            try:
-                # Find the value, add the line, remove from waiting list and move on
-                value = get_attribute_value(self.instance, field, self.context, force=force)
-                code_lines.append('%s.%s = %s' % (self.variable_name, field.name, value))
-                self.waiting_list.remove(field)
-            except SkipValue, e:
-                # Remove from the waiting list and move on
-                self.waiting_list.remove(field)
-                continue
-            except DoLater, e:
-                # Move on, maybe next time
-                continue
-
-
-        return code_lines
-
-
-    def get_many_to_many_lines(self, force=False):
-        """ Generates lines that define many to many relations for this instance. """
-
-        lines = []
-
-        for field, rel_items in self.many_to_many_waiting_list.items():
-            for rel_item in list(rel_items):
-                try:
-                    pk_name = rel_item._meta.pk.name
-                    key = '%s_%s' % (rel_item.__class__.__name__, getattr(rel_item, pk_name))
-                    value = "%s" % self.context[key]
-                    lines.append('%s.%s.add(%s)' % (self.variable_name, field.name, value))
-                    self.many_to_many_waiting_list[field].remove(rel_item)
-                except KeyError:
-                    if force:
-                        value = "%s.objects.get(%s=%s)" % (rel_item._meta.object_name, pk_name, getattr(rel_item, pk_name))
-                        lines.append('%s.%s.add(%s)' % (self.variable_name, field.name, value))
-                        self.many_to_many_waiting_list[field].remove(rel_item)
-
-        if lines:
-            lines.append("")
-
-        return lines
-
-
-class Script(Code):
-    " Produces a complete python script that can recreate data for the given apps. "
-
-    def __init__(self, models, context={}):
-        self.models = models
-        self.context = context
-
-        self.indent = -1 
-        self.imports = {}
-
-    def get_lines(self):
-        """ Returns a list of lists or strings, representing the code body. 
-            Each list is a block, each string is a statement.
-        """
-        code = [ self.FILE_HEADER.strip() ]
-
-        # Queue and process the required models
-        for model_class in queue_models(self.models, context=self.context):
-            sys.stderr.write('Processing model: %s\n' % model_class.model.__name__)
-            code.append(model_class.import_lines)
-            code.append("")
-            code.append(model_class.lines)
-
-        # Process left over foreign keys from cyclic models
-        for model in self.models:
-            sys.stderr.write('Re-processing model: %s\n' % model.model.__name__)
-            for instance in model.instances:
-                if instance.waiting_list or instance.many_to_many_waiting_list:
-                    code.append(instance.get_lines(force=True))
-
-        return code
-
-    lines = property(get_lines)
-
-    # A user-friendly file header
-    FILE_HEADER = """
-
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
-
-# This file has been automatically generated, changes may be lost if you
-# go and generate it again. It was generated with the following command:
-# %s
-
-import datetime
-from decimal import Decimal
-from django.contrib.contenttypes.models import ContentType
-
-def run():
-
-""" % " ".join(sys.argv)
-
-
-
-# HELPER FUNCTIONS
-#-------------------------------------------------------------------------------
-
-def flatten_blocks(lines, num_indents=-1):
-    """ Takes a list (block) or string (statement) and flattens it into a string
-        with indentation. 
-    """
-
-    # The standard indent is four spaces
-    INDENTATION = " " * 4
-
-    if not lines:
-        return ""
-
-    # If this is a string, add the indentation and finish here
-    if isinstance(lines, basestring):
-        return INDENTATION * num_indents + lines
-
-    # If this is not a string, join the lines and recurse
-    return "\n".join([ flatten_blocks(line, num_indents+1) for line in lines ])
-
-
-
-
-def get_attribute_value(item, field, context, force=False):
-    """ Gets a string version of the given attribute's value, like repr() might. """
-
-    # Find the value of the field, catching any database issues
-    try:
-        value = getattr(item, field.name)
-    except ObjectDoesNotExist:
-        raise SkipValue('Could not find object for %s.%s, ignoring.\n' % (item.__class__.__name__, field.name))
-
-    # AutoField: We don't include the auto fields, they'll be automatically recreated
-    if isinstance(field, models.AutoField):
-        raise SkipValue()
-
-    # Some databases (eg MySQL) might store boolean values as 0/1, this needs to be cast as a bool
-    elif isinstance(field, models.BooleanField) and value is not None:
-        return repr(bool(value))
-
-    # Post file-storage-refactor, repr() on File/ImageFields no longer returns the path
-    elif isinstance(field, models.FileField):
-        return repr(force_unicode(value))
-
-    # ForeignKey fields, link directly using our stored python variable name
-    elif isinstance(field, models.ForeignKey) and value is not None:
-
-        # Special case for contenttype foreign keys: no need to output any
-        # content types in this script, as they can be generated again 
-        # automatically.
-        # NB: Not sure if "is" will always work
-        if field.rel.to is ContentType:
-            return 'ContentType.objects.get(app_label="%s", model="%s")' % (value.app_label, value.model)
-
-        # Generate an identifier (key) for this foreign object
-        pk_name = value._meta.pk.name
-        key = '%s_%s' % (value.__class__.__name__, getattr(value, pk_name))
-
-        if key in context:
-            variable_name = context[key]
-            # If the context value is set to None, this should be skipped.
-            # This identifies models that have been skipped (inheritance)
-            if variable_name is None:
-                raise SkipValue()
-            # Return the variable name listed in the context 
-            return "%s" % variable_name
-        elif force:
-            return "%s.objects.get(%s=%s)" % (value._meta.object_name, pk_name, getattr(value, pk_name))
-        else:
-            raise DoLater('(FK) %s.%s\n' % (item.__class__.__name__, field.name))
-
-
-    # A normal field (e.g. a python built-in)
-    else:
-        return repr(value)
-
-def queue_models(models, context):
-    """ Works an an appropriate ordering for the models.
-        This isn't essential, but makes the script look nicer because 
-        more instances can be defined on their first try.
-    """
-
-    # Max number of cycles allowed before we call it an infinite loop.
-    MAX_CYCLES = 5
-
-    model_queue = []
-    number_remaining_models = len(models)
-    allowed_cycles = MAX_CYCLES
-
-    while number_remaining_models > 0:
-        previous_number_remaining_models = number_remaining_models
-
-        model = models.pop(0)
-        
-        # If the model is ready to be processed, add it to the list
-        if check_dependencies(model, model_queue):
-            model_class = ModelCode(model=model, context=context)
-            model_queue.append(model_class)
-
-        # Otherwise put the model back at the end of the list
-        else:
-            models.append(model)
-
-        # Check for infinite loops. 
-        # This means there is a cyclic foreign key structure
-        # That cannot be resolved by re-ordering
-        number_remaining_models = len(models)
-        if number_remaining_models == previous_number_remaining_models:
-            allowed_cycles -= 1
-            if allowed_cycles <= 0:
-                # Add the remaining models, but do not remove them from the model list
-                missing_models = [ ModelCode(model=m, context=context) for m in models ]
-                model_queue += missing_models
-                # Replace the models with the model class objects 
-                # (sure, this is a little bit of hackery)
-                models[:] = missing_models
-                break
-        else:
-            allowed_cycles = MAX_CYCLES
-
-    return model_queue
-
-
-def check_dependencies(model, model_queue):
-    " Check that all the depenedencies for this model are already in the queue. "
-
-    # A list of allowed links: existing fields, itself and the special case ContentType
-    allowed_links = [ m.model.__name__ for m in model_queue ] + [model.__name__, 'ContentType']
-
-    # For each ForeignKey or ManyToMany field, check that a link is possible
-    for field in model._meta.fields + model._meta.many_to_many:
-        if field.rel and field.rel.to.__name__ not in allowed_links:
-            return False
-
-    return True
-
-
-
-# EXCEPTIONS
-#-------------------------------------------------------------------------------
-
-class SkipValue(Exception):
-    """ Value could not be parsed or should simply be skipped. """
-
-class DoLater(Exception):
-    """ Value could not be parsed or should simply be skipped. """
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/export_emails.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/export_emails.py
deleted file mode 100644
index 3228ee5..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/export_emails.py
+++ /dev/null
@@ -1,114 +0,0 @@
-from django.core.management.base import BaseCommand, CommandError
-from django.contrib.auth.models import User, Group
-from optparse import make_option
-from sys import stdout
-from csv import writer
-
-FORMATS = [
-    'address',
-    'google',
-    'outlook',
-    'linkedin',
-    'vcard',
-]
-
-def full_name(first_name, last_name, username, **extra):
-    name = u" ".join(n for n in [first_name, last_name] if n)
-    if not name: return username
-    return name
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--group', '-g', action='store', dest='group', default=None,
-            help='Limit to users which are part of the supplied group name'),
-        make_option('--format', '-f', action='store', dest='format', default=FORMATS[0],
-            help="output format. May be one of '" + "', '".join(FORMATS) + "'."),
-    )
-
-    help = ("Export user email address list in one of a number of formats.")
-    args = "[output file]"
-    label = 'filename to save to'
-
-    requires_model_validation = True
-    can_import_settings = True
-    encoding = 'utf-8' # RED_FLAG: add as an option -DougN
-
-    def handle(self, *args, **options):
-        if len(args) > 1:
-            raise CommandError("extra arguments supplied")
-        group = options['group']
-        if group and not Group.objects.filter(name=group).count()==1:
-            names = u"', '".join(g['name'] for g in Group.objects.values('name')).encode('utf-8')
-            if names: names = "'" + names + "'."
-            raise CommandError("Unknown group '" + group + "'. Valid group names are: " + names)
-        if len(args) and args[0] != '-':
-            outfile = file(args[0], 'w')
-        else:
-            outfile = stdout
-
-        qs = User.objects.all().order_by('last_name', 'first_name', 'username', 'email')
-        if group: qs = qs.filter(group__name=group).distinct()
-        qs = qs.values('last_name', 'first_name', 'username', 'email')
-        getattr(self, options['format'])(qs, outfile)
-
-    def address(self, qs, out):
-        """simple single entry per line in the format of:
-            "full name" <my@address.com>;
-        """
-        out.write(u"\n".join(u'"%s" <%s>;' % (full_name(**ent), ent['email']) 
-                             for ent in qs).encode(self.encoding))
-        out.write("\n")
-
-    def google(self, qs, out):
-        """CSV format suitable for importing into google GMail
-        """
-        csvf = writer(out)
-        csvf.writerow(['Name', 'Email'])
-        for ent in qs:
-            csvf.writerow([full_name(**ent).encode(self.encoding), 
-                           ent['email'].encode(self.encoding)])
-
-    def outlook(self, qs, out):
-        """CSV format suitable for importing into outlook
-        """
-        csvf = writer(out)
-        columns = ['Name','E-mail Address','Notes','E-mail 2 Address','E-mail 3 Address',
-                   'Mobile Phone','Pager','Company','Job Title','Home Phone','Home Phone 2',
-                   'Home Fax','Home Address','Business Phone','Business Phone 2',
-                   'Business Fax','Business Address','Other Phone','Other Fax','Other Address']
-        csvf.writerow(columns)
-        empty = [''] * (len(columns) - 2)
-        for ent in qs:
-            csvf.writerow([full_name(**ent).encode(self.encoding), 
-                           ent['email'].encode(self.encoding)] + empty)
-
-    def linkedin(self, qs, out):
-        """CSV format suitable for importing into linkedin Groups.
-        perfect for pre-approving members of a linkedin group.
-        """
-        csvf = writer(out)
-        csvf.writerow(['First Name', 'Last Name', 'Email'])
-        for ent in qs:
-            csvf.writerow([ent['first_name'].encode(self.encoding), 
-                           ent['last_name'].encode(self.encoding), 
-                           ent['email'].encode(self.encoding)])
-
-    def vcard(self, qs, out):
-        try:
-            import vobject
-        except ImportError:
-            print self.style.ERROR("Please install python-vobject to use the vcard export format.")
-            import sys
-            sys.exit(1)
-        for ent in qs:
-            card = vobject.vCard()
-            card.add('fn').value = full_name(**ent)
-            if not ent['last_name'] and not ent['first_name']:
-                # fallback to fullname, if both first and lastname are not declared
-                card.add('n').value = vobject.vcard.Name(full_name(**ent))
-            else:
-                card.add('n').value = vobject.vcard.Name(ent['last_name'], ent['first_name'])
-            emailpart = card.add('email')
-            emailpart.value = ent['email']
-            emailpart.type_param = 'INTERNET'
-            out.write(card.serialize().encode(self.encoding))
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/generate_secret_key.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/generate_secret_key.py
deleted file mode 100644
index e4a494d..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/generate_secret_key.py
+++ /dev/null
@@ -1,10 +0,0 @@
-from random import choice
-from django.core.management.base import NoArgsCommand
-
-class Command(NoArgsCommand):
-    help = "Generates a new SECRET_KEY that can be used in a project settings file."
-    
-    requires_model_validation = False
-    
-    def handle_noargs(self, **options):
-        return ''.join([choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)') for i in range(50)])
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/graph_models.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/graph_models.py
deleted file mode 100644
index 2a1a505..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/graph_models.py
+++ /dev/null
@@ -1,60 +0,0 @@
-from django.core.management.base import BaseCommand, CommandError
-from optparse import make_option
-from django_extensions.management.modelviz import generate_dot
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--disable-fields', '-d', action='store_true', dest='disable_fields',
-            help='Do not show the class member fields'),
-        make_option('--group-models', '-g', action='store_true', dest='group_models',
-            help='Group models together respective to there application'),
-        make_option('--all-applications', '-a', action='store_true', dest='all_applications',
-            help='Automaticly include all applications from INSTALLED_APPS'),
-        make_option('--output', '-o', action='store', dest='outputfile',
-            help='Render output file. Type of output dependend on file extensions. Use png or jpg to render graph to image.'),
-        make_option('--layout', '-l', action='store', dest='layout', default='dot',
-            help='Layout to be used by GraphViz for visualization. Layouts: circo dot fdp neato nop nop1 nop2 twopi'),
-    )
-
-    help = ("Creates a GraphViz dot file for the specified app names.  You can pass multiple app names and they will all be combined into a single model.  Output is usually directed to a dot file.")
-    args = "[appname]"
-    label = 'application name'
-
-    requires_model_validation = True
-    can_import_settings = True
-
-    def handle(self, *args, **options):
-        if len(args) < 1 and not options['all_applications']:
-            raise CommandError("need one or more arguments for appname")
-
-        dotdata = generate_dot(args, **options)
-        if options['outputfile']:
-            self.render_output(dotdata, **options)
-        else:
-            self.print_output(dotdata)
-
-    def print_output(self, dotdata):
-        print dotdata
-
-    def render_output(self, dotdata, **kwargs):
-        try:
-            import pygraphviz
-        except ImportError, e:
-            raise CommandError("need pygraphviz python module ( apt-get install python-pygraphviz )")
-
-        vizdata = ' '.join(dotdata.split("\n")).strip()
-        version = pygraphviz.__version__.rstrip("-svn")
-        try:
-            if [int(v) for v in version.split('.')]<(0,36):
-                # HACK around old/broken AGraph before version 0.36 (ubuntu ships with this old version)
-                import tempfile
-                tmpfile = tempfile.NamedTemporaryFile()
-                tmpfile.write(vizdata)
-                tmpfile.seek(0)
-                vizdata = tmpfile.name
-        except ValueError:
-            pass
-
-        graph = pygraphviz.AGraph(vizdata)
-        graph.layout(prog=kwargs['layout'])
-        graph.draw(kwargs['outputfile'])
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/mail_debug.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/mail_debug.py
deleted file mode 100644
index 78532df..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/mail_debug.py
+++ /dev/null
@@ -1,41 +0,0 @@
-from django.core.management.base import BaseCommand
-import sys
-import smtpd
-import asyncore
-
-class Command(BaseCommand):
-    help = "Starts a test mail server for development."
-    args = '[optional port number or ippaddr:port]'
-
-    requires_model_validation = False
-
-    def handle(self, addrport='', *args, **options):
-        if args:
-            raise CommandError('Usage is runserver %s' % self.args)
-        if not addrport:
-            addr = ''
-            port = '1025'
-        else:
-            try:
-                addr, port = addrport.split(':')
-            except ValueError:
-                addr, port = '', addrport
-        if not addr:
-            addr = '127.0.0.1'
-
-        if not port.isdigit():
-            raise CommandError("%r is not a valid port number." % port)
-        else:
-            port = int(port)
-
-        quit_command = (sys.platform == 'win32') and 'CTRL-BREAK' or 'CONTROL-C'
-
-        def inner_run():
-            print "Now accepting mail at %s:%s" % (addr, port)
-            server = smtpd.DebuggingServer((addr,port), None)
-            asyncore.loop()
-
-        try: 
-            inner_run()
-        except KeyboardInterrupt:
-            pass
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/passwd.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/passwd.py
deleted file mode 100644
index 8296f92..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/passwd.py
+++ /dev/null
@@ -1,37 +0,0 @@
-from django.core.management.base import BaseCommand, CommandError
-from django.contrib.auth.models import User
-import getpass
-
-class Command(BaseCommand):
-    help = "Clone of the UNIX program ``passwd'', for django.contrib.auth."
-
-    requires_model_validation = False
-
-    def handle(self, *args, **options):
-        if len(args) > 1:
-            raise CommandError("need exactly one or zero arguments for username")
-
-        if args:
-            username, = args
-        else:
-            username = getpass.getuser()
-
-        try:
-            u = User.objects.get(username=username)
-        except User.DoesNotExist:
-            raise CommandError("user %s does not exist" % username)
-
-        print "Changing password for user", u.username
-        p1 = p2 = ""
-        while "" in (p1, p2) or p1 != p2:
-            p1 = getpass.getpass()
-            p2 = getpass.getpass("Password (again): ")
-            if p1 != p2:
-                print "Passwords do not match, try again"
-            elif "" in (p1, p2):
-                raise CommandError("aborted")
-
-        u.set_password(p1)
-        u.save()
-
-        return "Password changed successfully for user", u.username
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/print_user_for_session.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/print_user_for_session.py
deleted file mode 100644
index 6c8fda8..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/print_user_for_session.py
+++ /dev/null
@@ -1,49 +0,0 @@
-from django.core.management.base import BaseCommand, CommandError
-from django.contrib.auth.models import User
-from django.contrib.sessions.models import Session
-import re
-
-SESSION_RE = re.compile("^[0-9a-f]{20,40}$")
-
-class Command(BaseCommand):
-    help = ("print the user information for the provided session key. "
-            "this is very helpful when trying to track down the person who "
-            "experienced a site crash.")
-    args = "session_key"
-    label = 'session key for the user'
-
-    requires_model_validation = True
-    can_import_settings = True
-
-    def handle(self, *args, **options):
-        if len(args) > 1:
-            raise CommandError("extra arguments supplied")
-        if len(args) < 1:
-            raise CommandError("session_key argument missing")
-        key = args[0].lower()
-        if not SESSION_RE.match(key):
-            raise CommandError("malformed session key")
-        try:
-            session = Session.objects.get(pk=key)
-        except Session.DoesNotExist:
-            print "Session Key does not exist. Expired?"
-            return
-
-        data = session.get_decoded()
-        print 'Session to Expire:', session.expire_date
-        print 'Raw Data:', data
-        uid = data.get('_auth_user_id', None)
-        if uid is None:
-            print 'No user associated with session'
-            return
-        print "User id:", uid
-        try:
-            user = User.objects.get(pk=uid)
-        except User.DoesNotExist:
-            print "No user associated with that id."
-            return
-        for key in ['username', 'email', 'first_name', 'last_name']:
-            print key+': ' + getattr(user, key)
-
-
-
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/reset_db.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/reset_db.py
deleted file mode 100644
index 768f6dc..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/reset_db.py
+++ /dev/null
@@ -1,139 +0,0 @@
-"""
-originally from http://www.djangosnippets.org/snippets/828/ by dnordberg
-"""
-
-
-from django.conf import settings
-from django.core.management.base import CommandError, BaseCommand
-from django.db import connection
-import django
-import logging
-from optparse import make_option
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--noinput', action='store_false',
-                    dest='interactive', default=True,
-                    help='Tells Django to NOT prompt the user for input of any kind.'),
-        make_option('--no-utf8', action='store_true',
-                    dest='no_utf8_support', default=False,
-                    help='Tells Django to not create a UTF-8 charset database'),
-        make_option('-U', '--user', action='store',
-                    dest='user', default=None,
-                    help='Use another user for the database then defined in settings.py'),
-        make_option('-P', '--password', action='store',
-                    dest='password', default=None,
-                    help='Use another password for the database then defined in settings.py'),
-        make_option('-D', '--dbname', action='store',
-                    dest='dbname', default=None,
-                    help='Use another database name then defined in settings.py (For PostgreSQL this defaults to "template1")'),
-    )
-    help = "Resets the database for this project."
-
-    def handle(self, *args, **options):
-        """
-        Resets the database for this project.
-    
-        Note: Transaction wrappers are in reverse as a work around for
-        autocommit, anybody know how to do this the right way?
-        """
-        
-        if django.get_version()>="1.2":
-            raise CommandError, "reset_db is currently not compatible with Django 1.2 or higher"
-        
-
-        if options.get('interactive'):
-            confirm = raw_input("""
-You have requested a database reset.
-This will IRREVERSIBLY DESTROY
-ALL data in the database "%s".
-Are you sure you want to do this?
-
-Type 'yes' to continue, or 'no' to cancel: """ % (settings.DATABASE_NAME,))
-        else:
-            confirm = 'yes'
-
-        if confirm != 'yes':
-            print "Reset cancelled."
-            return
-
-        engine = settings.DATABASE_ENGINE
-        user = options.get('user', settings.DATABASE_USER)
-        if user==None:
-            user = settings.DATABASE_USER
-        password = options.get('password', settings.DATABASE_PASSWORD)
-        if password==None:
-            password = settings.DATABASE_PASSWORD
-        
-        if engine == 'sqlite3':
-            import os
-            try:
-                logging.info("Unlinking sqlite3 database")
-                os.unlink(settings.DATABASE_NAME)
-            except OSError:
-                pass
-        elif engine == 'mysql':
-            import MySQLdb as Database
-            kwargs = {
-                'user': user,
-                'passwd': password,
-            }
-            if settings.DATABASE_HOST.startswith('/'):
-                kwargs['unix_socket'] = settings.DATABASE_HOST
-            else:
-                kwargs['host'] = settings.DATABASE_HOST
-            if settings.DATABASE_PORT:
-                kwargs['port'] = int(settings.DATABASE_PORT)
-            connection = Database.connect(**kwargs)
-            drop_query = 'DROP DATABASE IF EXISTS %s' % settings.DATABASE_NAME
-            utf8_support = options.get('no_utf8_support', False) and '' or 'CHARACTER SET utf8'
-            create_query = 'CREATE DATABASE %s %s' % (settings.DATABASE_NAME, utf8_support)
-            logging.info('Executing... "' + drop_query + '"')
-            connection.query(drop_query)
-            logging.info('Executing... "' + create_query + '"')
-            connection.query(create_query)
-        elif engine == 'postgresql' or engine == 'postgresql_psycopg2':
-            if engine == 'postgresql':
-                import psycopg as Database
-            elif engine == 'postgresql_psycopg2':
-                import psycopg2 as Database
-            
-            if settings.DATABASE_NAME == '':
-                from django.core.exceptions import ImproperlyConfigured
-                raise ImproperlyConfigured, "You need to specify DATABASE_NAME in your Django settings file."
-            
-            database_name = options.get('dbname', 'template1')
-            conn_string = "dbname=%s" % database_name
-            if settings.DATABASE_USER:
-                conn_string += " user=%s" % user
-            if settings.DATABASE_PASSWORD:
-                conn_string += " password='%s'" % password
-            if settings.DATABASE_HOST:
-                conn_string += " host=%s" % settings.DATABASE_HOST
-            if settings.DATABASE_PORT:
-                conn_string += " port=%s" % settings.DATABASE_PORT
-            connection = Database.connect(conn_string)
-            connection.set_isolation_level(0) #autocommit false
-            cursor = connection.cursor()
-            drop_query = 'DROP DATABASE %s' % settings.DATABASE_NAME
-            logging.info('Executing... "' + drop_query + '"')
-    
-            try:
-                cursor.execute(drop_query)
-            except Database.ProgrammingError, e:
-                logging.info("Error: "+str(e))
-    
-            # Encoding should be SQL_ASCII (7-bit postgres default) or prefered UTF8 (8-bit)
-            create_query = ("""
-CREATE DATABASE %s
-    WITH OWNER = %s
-        ENCODING = 'UTF8'
-        TABLESPACE = %s;
-""" % (settings.DATABASE_NAME, settings.DATABASE_USER, settings.DEFAULT_TABLESPACE))
-            logging.info('Executing... "' + create_query + '"')
-            cursor.execute(create_query)
-    
-        else:
-            raise CommandError, "Unknown database engine %s" % engine
-    
-        print "Reset successful."
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runjob.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runjob.py
deleted file mode 100644
index 7de4d62..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runjob.py
+++ /dev/null
@@ -1,59 +0,0 @@
-from django.core.management.base import LabelCommand
-from optparse import make_option
-from django_extensions.management.jobs import get_job, print_jobs
-
-class Command(LabelCommand):
-    option_list = LabelCommand.option_list + (
-        make_option('--list', '-l', action="store_true", dest="list_jobs",
-            help="List all jobs with their description"),
-    )
-    help = "Run a single maintenance job."
-    args = "[app_name] job_name"
-    label = ""
-    
-    requires_model_validation = True
-
-    def runjob(self, app_name, job_name, options):
-        verbosity = int(options.get('verbosity', 1))
-        if verbosity>1:
-            print "Executing job: %s (app: %s)" % (job_name, app_name)
-        try:
-            job = get_job(app_name, job_name)
-        except KeyError, e:
-            if app_name:
-                print "Error: Job %s for applabel %s not found" % (app_name, job_name)
-            else:
-                print "Error: Job %s not found" % job_name
-            print "Use -l option to view all the available jobs"
-            return
-        try:
-            job().execute()
-        except Exception, e:
-            import traceback
-            print "ERROR OCCURED IN JOB: %s (APP: %s)" % (job_name, app_name)
-            print "START TRACEBACK:"
-            traceback.print_exc()
-            print "END TRACEBACK\n"
-    
-    def handle(self, *args, **options):
-        app_name = None
-        job_name = None
-        if len(args)==1:
-            job_name = args[0]
-        elif len(args)==2:
-            app_name, job_name = args
-        if options.get('list_jobs'):
-            print_jobs(only_scheduled=False, show_when=True, show_appname=True)
-        else:
-            if not job_name:
-                print "Run a single maintenance job. Please specify the name of the job."
-                return
-            self.runjob(app_name, job_name, options)
-
-# Backwards compatibility for Django r9110
-if not [opt for opt in Command.option_list if opt.dest=='verbosity']:
-    Command.option_list += (
-        make_option('--verbosity', '-v', action="store", dest="verbosity",
-            default='1', type='choice', choices=['0', '1', '2'],
-            help="Verbosity level; 0=minimal output, 1=normal output, 2=all output"),
-    )
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runjobs.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runjobs.py
deleted file mode 100644
index 3677382..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runjobs.py
+++ /dev/null
@@ -1,92 +0,0 @@
-from django.core.management.base import LabelCommand
-from optparse import make_option
-from django_extensions.management.jobs import get_jobs, print_jobs
-
-class Command(LabelCommand):
-    option_list = LabelCommand.option_list + (
-        make_option('--list', '-l', action="store_true", dest="list_jobs",
-            help="List all jobs with their description"),
-    )
-    help = "Runs scheduled maintenance jobs."
-    args = "[hourly daily weekly monthly yearly]"
-    label = ""
-
-    requires_model_validation = True
-
-    def usage_msg(self):
-        print "Run scheduled jobs. Please specify 'hourly', 'daily', 'weekly', 'monthly' or 'yearly'"
-
-    def runjobs(self, when, options):
-        verbosity = int(options.get('verbosity', 1))
-        jobs = get_jobs(when, only_scheduled=True)
-        list = jobs.keys()
-        list.sort()
-        for app_name, job_name in list:
-            job = jobs[(app_name, job_name)]
-            if verbosity>1:
-                print "Executing %s job: %s (app: %s)" % (when, job_name, app_name)
-            try:
-                job().execute()
-            except Exception, e:
-                import traceback
-                print "ERROR OCCURED IN %s JOB: %s (APP: %s)" % (when.upper(), job_name, app_name)
-                print "START TRACEBACK:"
-                traceback.print_exc()
-                print "END TRACEBACK\n"
-
-    def runjobs_by_signals(self, when, options):
-        """ Run jobs from the signals """
-        # Thanks for Ian Holsman for the idea and code
-        from django_extensions.management import signals
-        from django.db import models
-        from django.conf import settings
-
-        verbosity = int(options.get('verbosity', 1))
-        for app_name in settings.INSTALLED_APPS:
-            try:
-                __import__(app_name + '.management', '', '', [''])
-            except ImportError:
-                pass
-
-        for app in models.get_apps():
-            if verbosity>1:
-                app_name = '.'.join(app.__name__.rsplit('.')[:-1])
-                print "Sending %s job signal for: %s" % (when, app_name)
-            if when == 'hourly':
-                signals.run_hourly_jobs.send(sender=app, app=app)
-            elif when == 'daily':
-                signals.run_daily_jobs.send(sender=app, app=app)
-            elif when == 'weekly':
-                signals.run_weekly_jobs.send(sender=app, app=app)
-            elif when == 'monthly':
-                signals.run_monthly_jobs.send(sender=app, app=app)
-            elif when == 'yearly':
-                signals.run_yearly_jobs.send(sender=app, app=app)
-
-    def handle(self, *args, **options):
-        when = None
-        if len(args)>1:
-            self.usage_msg()
-            return
-        elif len(args)==1:
-            if not args[0] in ['hourly', 'daily', 'weekly', 'monthly', 'yearly']:
-                self.usage_msg()
-                return
-            else:
-                when = args[0]
-        if options.get('list_jobs'):
-            print_jobs(when, only_scheduled=True, show_when=True, show_appname=True)
-        else:
-            if not when:
-                self.usage_msg()
-                return
-            self.runjobs(when, options)
-            self.runjobs_by_signals(when, options)
-
-# Backwards compatibility for Django r9110
-if not [opt for opt in Command.option_list if opt.dest=='verbosity']:
-    Command.option_list += (
-        make_option('--verbosity', '-v', action="store", dest="verbosity",
-            default='1', type='choice', choices=['0', '1', '2'],
-            help="Verbosity level; 0=minimal output, 1=normal output, 2=all output"),
-    )
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runprofileserver.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runprofileserver.py
deleted file mode 100644
index e7c0ace..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runprofileserver.py
+++ /dev/null
@@ -1,221 +0,0 @@
-"""
-runprofileserver.py
-
-    Starts a lightweight Web server with profiling enabled.
-
-Credits for kcachegrind support taken from lsprofcalltree.py go to:
- David Allouche
- Jp Calderone & Itamar Shtull-Trauring
- Johan Dahlin
-"""
-
-from django.core.management.base import BaseCommand, CommandError
-from optparse import make_option
-from datetime import datetime
-import os
-import sys
-
-def label(code):
-    if isinstance(code, str):
-        return ('~', 0, code)    # built-in functions ('~' sorts at the end)
-    else:
-        return '%s %s:%d' % (code.co_name,
-                             code.co_filename,
-                             code.co_firstlineno)
-
-class KCacheGrind(object):
-    def __init__(self, profiler):
-        self.data = profiler.getstats()
-        self.out_file = None
-
-    def output(self, out_file):
-        self.out_file = out_file
-        print >> out_file, 'events: Ticks'
-        self._print_summary()
-        for entry in self.data:
-            self._entry(entry)
-
-    def _print_summary(self):
-        max_cost = 0
-        for entry in self.data:
-            totaltime = int(entry.totaltime * 1000)
-            max_cost = max(max_cost, totaltime)
-        print >> self.out_file, 'summary: %d' % (max_cost,)
-
-    def _entry(self, entry):
-        out_file = self.out_file
-
-        code = entry.code
-        #print >> out_file, 'ob=%s' % (code.co_filename,)
-        if isinstance(code, str):
-            print >> out_file, 'fi=~'
-        else:
-            print >> out_file, 'fi=%s' % (code.co_filename,)
-        print >> out_file, 'fn=%s' % (label(code),)
-
-        inlinetime = int(entry.inlinetime * 1000)
-        if isinstance(code, str):
-            print >> out_file, '0 ', inlinetime
-        else:
-            print >> out_file, '%d %d' % (code.co_firstlineno, inlinetime)
-
-        # recursive calls are counted in entry.calls
-        if entry.calls:
-            calls = entry.calls
-        else:
-            calls = []
-
-        if isinstance(code, str):
-            lineno = 0
-        else:
-            lineno = code.co_firstlineno
-
-        for subentry in calls:
-            self._subentry(lineno, subentry)
-        print >> out_file
-
-    def _subentry(self, lineno, subentry):
-        out_file = self.out_file
-        code = subentry.code
-        #print >> out_file, 'cob=%s' % (code.co_filename,)
-        print >> out_file, 'cfn=%s' % (label(code),)
-        if isinstance(code, str):
-            print >> out_file, 'cfi=~'
-            print >> out_file, 'calls=%d 0' % (subentry.callcount,)
-        else:
-            print >> out_file, 'cfi=%s' % (code.co_filename,)
-            print >> out_file, 'calls=%d %d' % (
-                subentry.callcount, code.co_firstlineno)
-
-        totaltime = int(subentry.totaltime * 1000)
-        print >> out_file, '%d %d' % (lineno, totaltime)
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--noreload', action='store_false', dest='use_reloader', default=True,
-            help='Tells Django to NOT use the auto-reloader.'),
-        make_option('--adminmedia', dest='admin_media_path', default='',
-            help='Specifies the directory from which to serve admin media.'),
-        make_option('--prof-path', dest='prof_path', default='/tmp',
-            help='Specifies the directory which to save profile information in.'),
-        make_option('--nomedia', action='store_true', dest='no_media', default=False,
-            help='Do not profile MEDIA_URL and ADMIN_MEDIA_URL'),
-        make_option('--use-cprofile', action='store_true', dest='use_cprofile', default=False,
-            help='Use cProfile if available, this is disabled per default because of incompatibilities.'),
-        make_option('--kcachegrind', action='store_true', dest='use_lsprof', default=False,
-            help='Create kcachegrind compatible lsprof files, this requires and automatically enables cProfile.'),
-    )
-    help = "Starts a lightweight Web server with profiling enabled."
-    args = '[optional port number, or ipaddr:port]'
-
-    # Validation is called explicitly each time the server is reloaded.
-    requires_model_validation = False
-
-    def handle(self, addrport='', *args, **options):
-        import django
-        from django.core.servers.basehttp import run, AdminMediaHandler, WSGIServerException
-        from django.core.handlers.wsgi import WSGIHandler
-        if args:
-            raise CommandError('Usage is runserver %s' % self.args)
-        if not addrport:
-            addr = ''
-            port = '8000'
-        else:
-            try:
-                addr, port = addrport.split(':')
-            except ValueError:
-                addr, port = '', addrport
-        if not addr:
-            addr = '127.0.0.1'
-
-        if not port.isdigit():
-            raise CommandError("%r is not a valid port number." % port)
-
-        use_reloader = options.get('use_reloader', True)
-        admin_media_path = options.get('admin_media_path', '')
-        shutdown_message = options.get('shutdown_message', '')
-        no_media = options.get('no_media', False)
-        quit_command = (sys.platform == 'win32') and 'CTRL-BREAK' or 'CONTROL-C'
-
-        def inner_run():
-            from django.conf import settings
-
-            import hotshot, time, os
-            USE_CPROFILE = options.get('use_cprofile', False)
-            USE_LSPROF = options.get('use_lsprof', False)
-            if USE_LSPROF:
-               USE_CPROFILE = True
-            if USE_CPROFILE:
-                try:
-                    import cProfile
-                    USE_CPROFILE = True
-                except ImportError:
-                    print "cProfile disabled, module cannot be imported!"
-                    USE_CPROFILE = False
-            if USE_LSPROF and not USE_CPROFILE:
-                raise SystemExit("Kcachegrind compatible output format required cProfile from Python 2.5")
-            prof_path = options.get('prof_path', '/tmp')
-            def make_profiler_handler(inner_handler):
-                def handler(environ, start_response):
-                    path_info = environ['PATH_INFO']
-                    # normally /media/ is MEDIA_URL, but in case still check it in case it's differently
-                    # should be hardly a penalty since it's an OR expression.
-                    # TODO: fix this to check the configuration settings and not make assumpsions about where media are on the url
-                    if no_media and (path_info.startswith('/media') or path_info.startswith(settings.MEDIA_URL)):
-                        return inner_handler(environ, start_response)
-                    path_name = path_info.strip("/").replace('/', '.') or "root"
-                    profname = "%s.%s.prof" % (path_name, datetime.now().isoformat())
-                    profname = os.path.join(prof_path, profname)
-                    if USE_CPROFILE:
-                        prof = cProfile.Profile()
-                    else:
-                        prof = hotshot.Profile(profname)
-                    start = datetime.now()
-                    try:
-                        return prof.runcall(inner_handler, environ, start_response)
-                    finally:
-                        # seeing how long the request took is important!
-                        elap = datetime.now() - start
-                        elapms = elap.seconds * 1000.0 + elap.microseconds / 1000.0
-                        if USE_LSPROF:
-                            kg = KCacheGrind(prof)
-                            kg.output(file(profname, 'w'))
-                        elif USE_CPROFILE:
-                            prof.dump_stats(profname)
-                        profname2 = "%s.%06dms.%s.prof" % (path_name, elapms, datetime.now().isoformat())
-                        profname2 = os.path.join(prof_path, profname2)
-                        os.rename(profname, profname2)
-                return handler
-
-            print "Validating models..."
-            self.validate(display_num_errors=True)
-            print "\nDjango version %s, using settings %r" % (django.get_version(), settings.SETTINGS_MODULE)
-            print "Development server is running at http://%s:%s/" % (addr, port)
-            print "Quit the server with %s." % quit_command
-            try:
-                path = admin_media_path or django.__path__[0] + '/contrib/admin/media'
-                handler = make_profiler_handler(AdminMediaHandler(WSGIHandler(), path))
-                run(addr, int(port), handler)
-            except WSGIServerException, e:
-                # Use helpful error messages instead of ugly tracebacks.
-                ERRORS = {
-                    13: "You don't have permission to access that port.",
-                    98: "That port is already in use.",
-                    99: "That IP address can't be assigned-to.",
-                }
-                try:
-                    error_text = ERRORS[e.args[0].args[0]]
-                except (AttributeError, KeyError):
-                    error_text = str(e)
-                sys.stderr.write(self.style.ERROR("Error: %s" % error_text) + '\n')
-                # Need to use an OS exit because sys.exit doesn't work in a thread
-                os._exit(1)
-            except KeyboardInterrupt:
-                if shutdown_message:
-                    print shutdown_message
-                sys.exit(0)
-        if use_reloader:
-            from django.utils import autoreload
-            autoreload.main(inner_run)
-        else:
-            inner_run()
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runscript.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runscript.py
deleted file mode 100644
index e597856..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runscript.py
+++ /dev/null
@@ -1,134 +0,0 @@
-from django.core.management.base import BaseCommand
-from django.core.management.color import no_style
-from optparse import make_option
-import sys
-import os
-
-try:
-    set
-except NameError:
-    from sets import Set as set   # Python 2.3 fallback
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--fixtures', action='store_true', dest='infixtures', default=False,
-            help='Only look in app.fixtures subdir'),
-        make_option('--noscripts', action='store_true', dest='noscripts', default=False,
-            help='Look in app.scripts subdir'),
-        make_option('-s', '--silent', action='store_true', dest='silent', default=False,
-            help='Run silently, do not show errors and tracebacks'),
-        make_option('--no-traceback', action='store_true', dest='no_traceback', default=False,
-            help='Do not show tracebacks'),
-    )
-    help = 'Runs a script in django context.'
-    args = "script [script ...]"
-
-    def handle(self, *scripts, **options):
-        from django.db.models import get_apps
-        
-        NOTICE = self.style.SQL_TABLE
-        NOTICE2 = self.style.SQL_FIELD
-        ERROR = self.style.ERROR
-        ERROR2 = self.style.NOTICE
-
-        subdirs = []
-
-        if not options.get('noscripts'):
-            subdirs.append('scripts')
-        if options.get('infixtures'):
-            subdirs.append('fixtures')
-        verbosity = int(options.get('verbosity', 1))
-        show_traceback = options.get('traceback', True)
-        if show_traceback is None:
-            # XXX: traceback is set to None from Django ?
-            show_traceback = True
-        no_traceback = options.get('no_traceback', False)
-        if no_traceback:
-            show_traceback = False
-        silent = options.get('silent', False)
-        if silent:
-            verbosity = 0
-
-        if len(subdirs) < 1:
-            print NOTICE("No subdirs to run left.")
-            return
-
-        if len(scripts) < 1:
-            print ERROR("Script name required.")
-            return
-
-        def run_script(mod):
-            # TODO: add arguments to run
-            try:
-                mod.run()
-            except Exception, e:
-                if silent:
-                    return
-                if verbosity > 0:
-                    print ERROR("Exception while running run() in '%s'" % mod.__name__)
-                if show_traceback:
-                    raise
-        
-        def my_import(mod):
-            if verbosity > 1:
-                print NOTICE("Check for %s" % mod)
-            try:
-                t = __import__(mod, [], [], [" "])
-                #if verbosity > 1:
-                #    print NOTICE("Found script %s ..." % mod)
-                if hasattr(t, "run"):
-                    if verbosity > 1:
-                        print NOTICE2("Found script '%s' ..." % mod)
-                    #if verbosity > 1:
-                    #    print NOTICE("found run() in %s. executing..." % mod)
-                    return t
-                else:
-                    if verbosity > 1:
-                        print ERROR2("Find script '%s' but no run() function found." % mod)
-            except ImportError:
-                return False
-        
-        def find_modules_for_script(script):
-            """ find script module which contains 'run' attribute """
-            modules = []
-            # first look in apps
-            for app in get_apps():
-                app_name = app.__name__.split(".")[:-1] # + ['fixtures']
-                for subdir in subdirs:
-                    mod = my_import(".".join(app_name + [subdir, script]))
-                    if mod:
-                        modules.append(mod)
-
-            # try app.DIR.script import
-            sa = script.split(".")
-            for subdir in subdirs:
-                nn = ".".join(sa[:-1] + [subdir, sa[-1]])
-                mod = my_import(nn)
-                if mod:
-                    modules.append(mod)
-
-            # try direct import
-            if script.find(".") != -1:
-                mod = my_import(script)
-                if mod:
-                    modules.append(mod)
-            
-            return modules
-        
-        for script in scripts:
-            modules = find_modules_for_script(script)
-            if not modules:
-                if verbosity>0 and not silent:
-                    print ERROR("No module for script '%s' found" % script)
-            for mod in modules:
-                if verbosity>1:
-                    print NOTICE2("Running script '%s' ..." % mod.__name__)
-                run_script(mod)
-
-# Backwards compatibility for Django r9110
-if not [opt for opt in Command.option_list if opt.dest=='verbosity']:
-    Command.option_list += (
-        make_option('--verbosity', '-v', action="store", dest="verbosity",
-                    default='1', type='choice', choices=['0', '1', '2'],
-                    help="Verbosity level; 0=minimal output, 1=normal output, 2=all output"),
-    )
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runserver_plus.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runserver_plus.py
deleted file mode 100644
index 68c7277..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/runserver_plus.py
+++ /dev/null
@@ -1,77 +0,0 @@
-from django.core.management.base import BaseCommand, CommandError
-from optparse import make_option
-import os
-import sys
-
-def null_technical_500_response(request, exc_type, exc_value, tb):
-    raise exc_type, exc_value, tb
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--noreload', action='store_false', dest='use_reloader', default=True,
-            help='Tells Django to NOT use the auto-reloader.'),
-        make_option('--browser', action='store_true', dest='open_browser',
-            help='Tells Django to open a browser.'),
-        make_option('--adminmedia', dest='admin_media_path', default='',
-            help='Specifies the directory from which to serve admin media.'),
-    )
-    help = "Starts a lightweight Web server for development."
-    args = '[optional port number, or ipaddr:port]'
-
-    # Validation is called explicitly each time the server is reloaded.
-    requires_model_validation = False
-
-    def handle(self, addrport='', *args, **options):
-        import django
-        from django.core.servers.basehttp import run, AdminMediaHandler, WSGIServerException
-        from django.core.handlers.wsgi import WSGIHandler
-        try:
-            from werkzeug import run_simple, DebuggedApplication
-        except ImportError, e:
-            raise e
-        except:
-            raise CommandError("Werkzeug is required to use runserver_plus.  Please visit http://werkzeug.pocoo.org/download")
-
-        # usurp django's handler
-        from django.views import debug
-        debug.technical_500_response = null_technical_500_response
-
-        if args:
-            raise CommandError('Usage is runserver %s' % self.args)
-        if not addrport:
-            addr = ''
-            port = '8000'
-        else:
-            try:
-                addr, port = addrport.split(':')
-            except ValueError:
-                addr, port = '', addrport
-        if not addr:
-            addr = '127.0.0.1'
-
-        if not port.isdigit():
-            raise CommandError("%r is not a valid port number." % port)
-
-        use_reloader = options.get('use_reloader', True)
-        open_browser = options.get('open_browser', False)
-        admin_media_path = options.get('admin_media_path', '')
-        shutdown_message = options.get('shutdown_message', '')
-        quit_command = (sys.platform == 'win32') and 'CTRL-BREAK' or 'CONTROL-C'
-
-        def inner_run():
-            from django.conf import settings
-            print "Validating models..."
-            self.validate(display_num_errors=True)
-            print "\nDjango version %s, using settings %r" % (django.get_version(), settings.SETTINGS_MODULE)
-            print "Development server is running at http://%s:%s/" % (addr, port)
-            print "Using the Werkzeug debugger (http://werkzeug.pocoo.org/)"
-            print "Quit the server with %s." % quit_command
-            path = admin_media_path or django.__path__[0] + '/contrib/admin/media'
-            handler = AdminMediaHandler(WSGIHandler(), path)
-            if open_browser:
-                import webbrowser
-                url = "http://%s:%s/" % (addr, port)
-                webbrowser.open(url)
-            run_simple(addr, int(port), DebuggedApplication(handler, True), 
-                       use_reloader=use_reloader, use_debugger=True)            
-        inner_run()
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/set_fake_emails.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/set_fake_emails.py
deleted file mode 100644
index 6a4dc00..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/set_fake_emails.py
+++ /dev/null
@@ -1,75 +0,0 @@
-"""
-set_fake_emails.py 
-
-    Give all users a new email account. Useful for testing in a 
-    development environment. As such, this command is only available when
-    setting.DEBUG is True.
-
-"""
-from optparse import make_option
-
-from django.conf import settings
-from django.core.management.base import NoArgsCommand, CommandError
-
-DEFAULT_FAKE_EMAIL = '%(username)s@example.com'
-
-class Command(NoArgsCommand):
-    option_list = NoArgsCommand.option_list + (
-        make_option('--email', dest='default_email', default=DEFAULT_FAKE_EMAIL,
-            help='Use this as the new email format.'),
-        make_option('-a', '--no-admin', action="store_true", dest='no_admin', default=False,
-            help='Do not change administrator accounts'),
-        make_option('-s', '--no-staff', action="store_true", dest='no_staff', default=False,
-            help='Do not change staff accounts'),
-        make_option('--include', dest='include_regexp', default=None,
-            help='Include usernames matching this regexp.'),
-        make_option('--exclude', dest='exclude_regexp', default=None,
-            help='Exclude usernames matching this regexp.'),
-        make_option('--include-groups', dest='include_groups', default=None,
-            help='Include users matching this group. (use comma seperation for multiple groups)'),
-        make_option('--exclude-groups', dest='exclude_groups', default=None,
-            help='Exclude users matching this group. (use comma seperation for multiple groups)'),
-    )
-    help = '''DEBUG only: give all users a new email based on their account data ("%s" by default). Possible parameters are: username, first_name, last_name''' % (DEFAULT_FAKE_EMAIL, )
-    requires_model_validation = False
-
-    def handle_noargs(self, **options):
-        if not settings.DEBUG:
-            raise CommandError('Only available in debug mode')
-            
-        from django.contrib.auth.models import User, Group
-        email = options.get('default_email', DEFAULT_FAKE_EMAIL)
-        include_regexp = options.get('include_regexp', None)
-        exclude_regexp = options.get('exclude_regexp', None)
-        include_groups = options.get('include_groups', None)
-        exclude_groups = options.get('exclude_groups', None)
-        no_admin = options.get('no_admin', False)
-        no_staff = options.get('no_staff', False)
-        
-        users = User.objects.all()
-        if no_admin:
-            users = users.exclude(is_superuser=True)
-        if no_staff:
-            users = users.exclude(is_staff=True)
-        if exclude_groups:
-            groups = Group.objects.filter(name__in=exclude_groups.split(","))
-            if groups:
-                users = users.exclude(groups__in=groups)
-            else:
-                raise CommandError("No group matches filter: %s" % exclude_groups)
-        if include_groups:
-            groups = Group.objects.filter(name__in=include_groups.split(","))
-            if groups:
-                users = users.filter(groups__in=groups)
-            else:
-                raise CommandError("No groups matches filter: %s" % include_groups)
-        if exclude_regexp:
-            users = users.exclude(username__regex=exclude_regexp)
-        if include_regexp:
-            users = users.filter(username__regex=include_regexp)
-        for user in users:
-            user.email = email % {'username': user.username,
-                                  'first_name': user.first_name,
-                                  'last_name': user.last_name}
-            user.save()
-        print 'Changed %d emails' % users.count()
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/set_fake_passwords.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/set_fake_passwords.py
deleted file mode 100644
index 2a65ef4..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/set_fake_passwords.py
+++ /dev/null
@@ -1,44 +0,0 @@
-"""
-set_fake_passwords.py 
-
-    Reset all user passwords to a common value. Useful for testing in a 
-    development environment. As such, this command is only available when
-    setting.DEBUG is True.
-
-"""
-from optparse import make_option
-
-from django.conf import settings
-from django.core.management.base import NoArgsCommand, CommandError
-
-DEFAULT_FAKE_PASSWORD = 'password'
-
-class Command(NoArgsCommand):
-    option_list = NoArgsCommand.option_list + (
-        make_option('--prompt', dest='prompt_passwd', default=False, action='store_true',
-            help='Prompts for the new password to apply to all users'),
-        make_option('--password', dest='default_passwd', default=DEFAULT_FAKE_PASSWORD,
-            help='Use this as default password.'),
-    )
-    help = 'DEBUG only: sets all user passwords to a common value ("%s" by default)' % (DEFAULT_FAKE_PASSWORD, )
-    requires_model_validation = False
-
-    def handle_noargs(self, **options):
-        if not settings.DEBUG:
-            raise CommandError('Only available in debug mode')
-            
-        from django.contrib.auth.models import User
-        if options.get('prompt_passwd', False):
-            from getpass import getpass
-            passwd = getpass('Password: ')
-            if not passwd:
-                raise CommandError('You must enter a valid password')
-        else:
-            passwd = options.get('default_passwd', DEFAULT_FAKE_PASSWORD)
-        
-        users = User.objects.all()
-        for user in users:
-            user.set_password(passwd)
-            user.save()
-            
-        print 'Reset %d passwords' % users.count()
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/shell_plus.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/shell_plus.py
deleted file mode 100644
index f3ca737..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/shell_plus.py
+++ /dev/null
@@ -1,91 +0,0 @@
-import os
-from django.core.management.base import NoArgsCommand
-from optparse import make_option
-
-class Command(NoArgsCommand):
-    option_list = NoArgsCommand.option_list + (
-        make_option('--ipython', action='store_true', dest='ipython',
-            help='Tells Django to use IPython, not BPython.'),
-        make_option('--plain', action='store_true', dest='plain',
-            help='Tells Django to use plain Python, not BPython nor IPython.'),
-        make_option('--no-pythonrc', action='store_true', dest='no_pythonrc',
-            help='Tells Django to use plain Python, not IPython.'),
-    )
-    help = "Like the 'shell' command but autoloads the models of all installed Django apps."
-
-    requires_model_validation = True
-
-    def handle_noargs(self, **options):
-        # XXX: (Temporary) workaround for ticket #1796: force early loading of all
-        # models from installed apps. (this is fixed by now, but leaving it here
-        # for people using 0.96 or older trunk (pre [5919]) versions.
-        from django.db.models.loading import get_models, get_apps
-        loaded_models = get_models()
-
-        use_ipython = options.get('ipython', False)
-        use_plain = options.get('plain', False)
-        use_pythonrc = not options.get('no_pythonrc', True)
-
-        # Set up a dictionary to serve as the environment for the shell, so
-        # that tab completion works on objects that are imported at runtime.
-        # See ticket 5082.
-        from django.conf import settings
-        imported_objects = {'settings': settings}
-        for app_mod in get_apps():
-            app_models = get_models(app_mod)
-            if not app_models:
-                continue
-            model_labels = ", ".join([model.__name__ for model in app_models])
-            print self.style.SQL_COLTYPE("From '%s' autoload: %s" % (app_mod.__name__.split('.')[-2], model_labels))
-            for model in app_models:
-                try:
-                    imported_objects[model.__name__] = getattr(__import__(app_mod.__name__, {}, {}, model.__name__), model.__name__)
-                except AttributeError, e:
-                    print self.style.ERROR("Failed to import '%s' from '%s' reason: %s" % (model.__name__, app_mod.__name__.split('.')[-2], str(e)))
-                    continue
-        try:
-            if use_plain:
-                # Don't bother loading B/IPython, because the user wants plain Python.
-                raise ImportError
-            try:
-                if use_ipython:
-                    # User wants IPython
-                    raise ImportError
-                from bpython import embed
-                embed(imported_objects)
-            except ImportError:
-                # Explicitly pass an empty list as arguments, because otherwise IPython
-                # would use sys.argv from this script.
-                try:
-                    from IPython.core.iplib import InteractiveShell
-                    shell = InteractiveShell(user_ns=imported_objects)
-                except ImportError:
-                    import IPython
-                    shell = IPython.Shell.IPShell(argv=[], user_ns=imported_objects)
-                shell.mainloop()
-        except ImportError:
-            # Using normal Python shell
-            import code
-            try: # Try activating rlcompleter, because it's handy.
-                import readline
-            except ImportError:
-                pass
-            else:
-                # We don't have to wrap the following import in a 'try', because
-                # we already know 'readline' was imported successfully.
-                import rlcompleter
-                readline.set_completer(rlcompleter.Completer(imported_objects).complete)
-                readline.parse_and_bind("tab:complete")
-
-            # We want to honor both $PYTHONSTARTUP and .pythonrc.py, so follow system
-            # conventions and get $PYTHONSTARTUP first then import user.
-            if use_pythonrc:
-                pythonrc = os.environ.get("PYTHONSTARTUP") 
-                if pythonrc and os.path.isfile(pythonrc): 
-                    try: 
-                        execfile(pythonrc) 
-                    except NameError: 
-                        pass
-                # This will import .pythonrc.py as a side-effect
-                import user
-            code.interact(local=imported_objects)
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/show_templatetags.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/show_templatetags.py
deleted file mode 100644
index da38ea6..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/show_templatetags.py
+++ /dev/null
@@ -1,97 +0,0 @@
-from django.conf import settings
-from django.template import get_library
-import os
-import inspect
-from django.core.management.base import BaseCommand
-from django.core.management import color
-from django.utils import termcolors
-
-
-
-def color_style():
-    style = color.color_style()
-    style.FILTER = termcolors.make_style(fg='yellow',opts=('bold',))
-    style.MODULE_NAME = termcolors.make_style(fg='green', opts=('bold',))
-    style.TAG = termcolors.make_style(fg='red', opts=('bold',))
-    style.TAGLIB = termcolors.make_style(fg='blue', opts=('bold',))
-    return style
-
-def format_block(block,nlspaces=0):
-    '''Format the given block of text, trimming leading/trailing
-    empty lines and any leading whitespace that is common to all lines.
-    The purpose is to let us list a code block as a multiline,
-    triple-quoted Python string, taking care of
-    indentation concerns.
-    http://code.activestate.com/recipes/145672/'''
-
-    import re
-
-    # separate block into lines
-    lines = str(block).split('\n')
-
-    # remove leading/trailing empty lines
-    while lines and not lines[0]:  del lines[0]
-    while lines and not lines[-1]: del lines[-1]
-
-    # look at first line to see how much indentation to trim
-    ws = re.match(r'\s*',lines[0]).group(0)
-    if ws:
-        lines = map( lambda x: x.replace(ws,'',1), lines )
-
-    # remove leading/trailing blank lines (after leading ws removal)
-    # we do this again in case there were pure-whitespace lines
-    while lines and not lines[0]:  del lines[0]
-    while lines and not lines[-1]: del lines[-1]
-
-    # account for user-specified leading spaces
-    flines = ['%s%s' % (' '*nlspaces,line) for line in lines]
-
-    return '\n'.join(flines)+'\n'  
-
-class Command(BaseCommand):
-    help = "Displays template tags and filters available in the current project."
-    results = ""
-    
-    def add_result (self, s, depth=0):
-        self.results += '\n%s\n' % s.rjust(depth*4 + len(s))
-        
-    def handle(self, *args, **options):
-        if args:
-            appname, = args
-
-        style = color_style()
-
-        if settings.ADMIN_FOR:
-            settings_modules = [__import__(m, {}, {}, ['']) for m in settings.ADMIN_FOR]
-        else:
-            settings_modules = [settings]
-
-        for settings_mod in settings_modules:
-            for app in settings_mod.INSTALLED_APPS:
-                try:
-                    templatetag_mod = __import__(app + '.templatetags', {}, {}, [''])
-                except ImportError:
-                    continue
-                mod_path = inspect.getabsfile (templatetag_mod)
-                mod_files = os.listdir(os.path.dirname(mod_path))
-                tag_files = [i.rstrip('.py') for i in mod_files if i.endswith('.py') and i[0] != '_']
-                app_labeled = False
-                for taglib in tag_files:
-                    try:
-                        lib = get_library("django.templatetags.%s" % taglib)
-                    except:
-                        continue
-                    if not app_labeled:
-                        self.add_result ('\nApp: %s' % style.MODULE_NAME(app))
-                        app_labeled = True
-                    self.add_result ('load: %s' % style.TAGLIB (taglib),1)
-                    for items, label, style_func in [(lib.tags, 'Tag:', style.TAG),
-                        (lib.filters, 'Filter:', style.FILTER)]:
-                        for item in items:
-                            self.add_result ('%s %s' % (label,style_func(item)),2)
-                            doc = inspect.getdoc(items[item])
-                            if doc:
-                                self.add_result (format_block(doc,12))
-        return self.results            
-        # return "\n".join(results)
-            
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/show_urls.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/show_urls.py
deleted file mode 100644
index 9829c67..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/show_urls.py
+++ /dev/null
@@ -1,69 +0,0 @@
-from django.conf import settings
-from django.core.exceptions import ViewDoesNotExist
-from django.core.management.base import BaseCommand
-try:
-    # 2008-05-30 admindocs found in newforms-admin brand
-    from django.contrib.admindocs.views import simplify_regex
-except ImportError:
-    # fall back to trunk, pre-NFA merge
-    from django.contrib.admin.views.doc import simplify_regex
-        
-from django_extensions.management.color import color_style
-
-def extract_views_from_urlpatterns(urlpatterns, base=''):
-    """ 
-    Return a list of views from a list of urlpatterns.
-
-    Each object in the returned list is a two-tuple: (view_func, regex)
-    """
-    views = []
-    for p in urlpatterns:
-        if hasattr(p, '_get_callback'):
-            try:
-                views.append((p._get_callback(), base + p.regex.pattern, p.name))
-            except ViewDoesNotExist:
-                continue
-        elif hasattr(p, '_get_url_patterns'):
-            try:
-                patterns = p.url_patterns
-            except ImportError:
-                continue
-            views.extend(extract_views_from_urlpatterns(patterns, base + p.regex.pattern))
-        else:
-            raise TypeError, _("%s does not appear to be a urlpattern object") % p
-    return views
-
-class Command(BaseCommand):
-    help = "Displays all of the url matching routes for the project."
-    
-    requires_model_validation = True
-    
-    def handle(self, *args, **options):
-        if args:
-            appname, = args
-
-        style = color_style()
-
-        if settings.ADMIN_FOR:
-            settings_modules = [__import__(m, {}, {}, ['']) for m in settings.ADMIN_FOR]
-        else:
-            settings_modules = [settings]
-
-        views = []
-        for settings_mod in settings_modules:
-            try:
-                urlconf = __import__(settings_mod.ROOT_URLCONF, {}, {}, [''])
-            except Exception, e:
-                if options.get('traceback', None):
-                    import traceback
-                    traceback.print_exc()
-                print style.ERROR("Error occurred while trying to load %s: %s" % (settings_mod.ROOT_URLCONF, str(e)))
-                continue
-            view_functions = extract_views_from_urlpatterns(urlconf.urlpatterns)
-            for (func, regex, url_name) in view_functions:
-                func_name = hasattr(func, '__name__') and func.__name__ or repr(func)
-                views.append("%(url)s\t%(module)s.%(name)s\t%(url_name)s" % {'name': style.MODULE_NAME(func_name),
-                                       'module': style.MODULE(func.__module__),
-                                       'url_name': style.URL_NAME(url_name or ''),
-                                       'url': style.URL(simplify_regex(regex))})
-        return "\n".join([v for v in views])
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/sqldiff.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/sqldiff.py
deleted file mode 100644
index 95679f8..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/sqldiff.py
+++ /dev/null
@@ -1,598 +0,0 @@
-"""
-sqldiff.py - Prints the (approximated) difference between models and database
-
-TODO:
- - better support for relations
- - better support for constraints (mainly postgresql?)
- - support for table spaces with postgresql
- - when a table is not managed (meta.managed==False) then only do a one-way
-   sqldiff ? show differences from db->table but not the other way around since
-   it's not managed.
- 
-KNOWN ISSUES:
- - MySQL has by far the most problems with introspection. Please be
-   carefull when using MySQL with sqldiff. 
-   - Booleans are reported back as Integers, so there's know way to know if
-     there was a real change.
-   - Varchar sizes are reported back without unicode support so there size
-     may change in comparison to the real length of the varchar.   
-   - Some of the 'fixes' to counter these problems might create false 
-     positives or false negatives.
-"""
-
-from django.core.management.base import BaseCommand
-from django.core.management import sql as _sql
-from django.core.management import CommandError
-from django.core.management.color import no_style
-from django.db import transaction, connection
-from django.db.models.fields import IntegerField
-from optparse import make_option
-
-ORDERING_FIELD = IntegerField('_order', null=True)
-
-def flatten(l, ltypes=(list, tuple)):
-    ltype = type(l)
-    l = list(l)
-    i = 0
-    while i < len(l):
-        while isinstance(l[i], ltypes):
-            if not l[i]:
-                l.pop(i)
-                i -= 1
-                break
-            else:
-                l[i:i + 1] = l[i]
-        i += 1
-    return ltype(l)
-
-def all_local_fields(meta):
-    all_fields = meta.local_fields[:]
-    for parent in meta.parents:
-        all_fields.extend(all_local_fields(parent._meta))
-    return all_fields
-
-class SQLDiff(object):
-    DATA_TYPES_REVERSE_OVERRIDE = {
-    }
-    
-    DIFF_TYPES = [
-        'comment',
-        'table-missing-in-db',
-        'field-missing-in-db',
-        'field-missing-in-model',
-        'index-missing-in-db',
-        'index-missing-in-model',
-        'unique-missing-in-db',
-        'unique-missing-in-model',
-        'field-type-differ',
-        'field-parameter-differ',
-    ]
-    DIFF_TEXTS = {
-        'comment': 'comment: %(0)s',
-        'table-missing-in-db': "table '%(0)s' missing in database",
-        'field-missing-in-db' : "field '%(1)s' defined in model but missing in database",
-        'field-missing-in-model' : "field '%(1)s' defined in database but missing in model",
-        'index-missing-in-db' : "field '%(1)s' INDEX defined in model but missing in database",
-        'index-missing-in-model' : "field '%(1)s' INDEX defined in database schema but missing in model",
-        'unique-missing-in-db' : "field '%(1)s' UNIQUE defined in model but missing in database",
-        'unique-missing-in-model' : "field '%(1)s' UNIQUE defined in database schema but missing in model",
-        'field-type-differ' : "field '%(1)s' not of same type: db='%(3)s', model='%(2)s'",
-        'field-parameter-differ' : "field '%(1)s' parameters differ: db='%(3)s', model='%(2)s'",
-    }
-
-    SQL_FIELD_MISSING_IN_DB = lambda self, style, qn, args: "%s %s\n\t%s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ADD'), style.SQL_FIELD(qn(args[1])), style.SQL_COLTYPE(args[2]))
-    SQL_FIELD_MISSING_IN_MODEL = lambda self, style, qn, args: "%s %s\n\t%s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('DROP COLUMN'), style.SQL_FIELD(qn(args[1])))
-    SQL_INDEX_MISSING_IN_DB = lambda self, style, qn, args: "%s %s\n\t%s %s (%s);" % (style.SQL_KEYWORD('CREATE INDEX'), style.SQL_TABLE(qn("%s_idx" % '_'.join(args[0:2]))), style.SQL_KEYWORD('ON'), style.SQL_TABLE(qn(args[0])), style.SQL_FIELD(qn(args[1])))
-    # FIXME: need to lookup index name instead of just appending _idx to table + fieldname
-    SQL_INDEX_MISSING_IN_MODEL = lambda self, style, qn, args: "%s %s;" % (style.SQL_KEYWORD('DROP INDEX'), style.SQL_TABLE(qn("%s_idx" % '_'.join(args[0:2]))))
-    SQL_UNIQUE_MISSING_IN_DB = lambda self, style, qn, args: "%s %s\n\t%s %s (%s);" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ADD'), style.SQL_KEYWORD('UNIQUE'), style.SQL_FIELD(qn(args[1])))
-    # FIXME: need to lookup unique constraint name instead of appending _key to table + fieldname
-    SQL_UNIQUE_MISSING_IN_MODEL = lambda self, style, qn, args: "%s %s\n\t%s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('DROP'), style.SQL_KEYWORD('CONSTRAINT'), style.SQL_TABLE(qn("%s_key" % ('_'.join(args[:2])))))
-    SQL_FIELD_TYPE_DIFFER = lambda self, style, qn, args:  "%s %s\n\t%s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD("MODIFY"), style.SQL_FIELD(qn(args[1])), style.SQL_COLTYPE(args[2]))
-    SQL_FIELD_PARAMETER_DIFFER = lambda self, style, qn, args:  "%s %s\n\t%s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD("MODIFY"), style.SQL_FIELD(qn(args[1])), style.SQL_COLTYPE(args[2]))
-    SQL_COMMENT = lambda self, style, qn, args: style.NOTICE('-- Comment: %s' % style.SQL_TABLE(args[0]))
-    SQL_TABLE_MISSING_IN_DB = lambda self, style, qn, args: style.NOTICE('-- Table missing: %s' % args[0])
-
-    def __init__(self, app_models, options):
-        self.app_models = app_models
-        self.options = options
-        self.dense = options.get('dense_output', False)
-
-        try:
-            self.introspection = connection.introspection
-        except AttributeError:
-            from django.db import get_introspection_module
-            self.introspection = get_introspection_module()
-
-        self.cursor = connection.cursor()
-        self.django_tables = self.get_django_tables(options.get('only_existing', True))
-        self.db_tables = self.introspection.get_table_list(self.cursor)
-        self.differences = []
-        self.unknown_db_fields = {}
-        
-        self.DIFF_SQL = {
-            'comment': self.SQL_COMMENT,
-            'table-missing-in-db': self.SQL_TABLE_MISSING_IN_DB,
-            'field-missing-in-db': self.SQL_FIELD_MISSING_IN_DB,
-            'field-missing-in-model': self.SQL_FIELD_MISSING_IN_MODEL,
-            'index-missing-in-db': self.SQL_INDEX_MISSING_IN_DB,
-            'index-missing-in-model': self.SQL_INDEX_MISSING_IN_MODEL,
-            'unique-missing-in-db': self.SQL_UNIQUE_MISSING_IN_DB,
-            'unique-missing-in-model': self.SQL_UNIQUE_MISSING_IN_MODEL,
-            'field-type-differ': self.SQL_FIELD_TYPE_DIFFER,
-            'field-parameter-differ': self.SQL_FIELD_PARAMETER_DIFFER,
-        }
-
-    def add_app_model_marker(self, app_label, model_name):
-        self.differences.append((app_label, model_name, []))
-        
-    def add_difference(self, diff_type, *args):
-        assert diff_type in self.DIFF_TYPES, 'Unknown difference type'
-        self.differences[-1][-1].append((diff_type, args))
-
-    def get_django_tables(self, only_existing):
-        try:
-            django_tables = self.introspection.django_table_names(only_existing=only_existing)
-        except AttributeError:
-            # backwards compatibility for before introspection refactoring (r8296)
-            try:
-                django_tables = _sql.django_table_names(only_existing=only_existing)
-            except AttributeError:
-                # backwards compatibility for before svn r7568
-                django_tables = _sql.django_table_list(only_existing=only_existing)
-        return django_tables
-
-    def sql_to_dict(self, query,param):
-        """ sql_to_dict(query, param) -> list of dicts
-
-        code from snippet at http://www.djangosnippets.org/snippets/1383/
-        """
-        cursor = connection.cursor()
-        cursor.execute(query,param)
-        fieldnames = [name[0] for name in cursor.description]
-        result = []
-        for row in cursor.fetchall():
-            rowset = []
-            for field in zip(fieldnames, row):
-                rowset.append(field)
-            result.append(dict(rowset))
-        return result
-
-    def get_field_model_type(self, field):
-        return field.db_type()
-
-    def get_field_db_type(self, description, field=None, table_name=None):
-        from django.db import models
-        # DB-API cursor.description
-        #(name, type_code, display_size, internal_size, precision, scale, null_ok) = description
-        type_code = description[1]
-        if type_code in self.DATA_TYPES_REVERSE_OVERRIDE:
-            reverse_type = self.DATA_TYPES_REVERSE_OVERRIDE[type_code]
-        else:
-            try:
-                try:
-                    reverse_type = self.introspection.data_types_reverse[type_code]
-                except AttributeError:
-                    # backwards compatibility for before introspection refactoring (r8296)
-                    reverse_type = self.introspection.DATA_TYPES_REVERSE.get(type_code)
-            except KeyError:
-                # type_code not found in data_types_reverse map
-                key = (self.differences[-1][:2], description[:2])
-                if key not in self.unknown_db_fields:
-                    self.unknown_db_fields[key] = 1
-                    self.add_difference('comment', "Unknown database type for field '%s' (%s)" % (description[0], type_code))
-                return None
-        
-        kwargs = {}
-        if isinstance(reverse_type, tuple):
-            kwargs.update(reverse_type[1])
-            reverse_type = reverse_type[0]
-
-        if reverse_type == "CharField" and description[3]:
-            kwargs['max_length'] = description[3]
-
-        if reverse_type == "DecimalField":
-            kwargs['max_digits'] = description[4]
-            kwargs['decimal_places'] = abs(description[5])
-
-        if description[6]:
-            kwargs['blank'] = True
-            if not reverse_type in ('TextField', 'CharField'):
-                kwargs['null'] = True
-        
-        if '.' in reverse_type:
-            from django.utils import importlib
-            # TODO: when was importlib added to django.utils ? and do we
-            # need to add backwards compatibility code ?
-            module_path, package_name = reverse_type.rsplit('.', 1)
-            module = importlib.import_module(module_path)
-            field_db_type = getattr(module, package_name)(**kwargs).db_type()
-        else:
-            field_db_type = getattr(models, reverse_type)(**kwargs).db_type()
-        return field_db_type
-
-    def strip_parameters(self, field_type):
-        if field_type:
-            return field_type.split(" ")[0].split("(")[0]
-        return field_type
-
-    def find_unique_missing_in_db(self, meta, table_indexes, table_name):
-        for field in all_local_fields(meta):
-            if field.unique:
-                attname = field.db_column or field.attname
-                if attname in table_indexes and table_indexes[attname]['unique']:
-                    continue
-                self.add_difference('unique-missing-in-db', table_name, attname)
-
-    def find_unique_missing_in_model(self, meta, table_indexes, table_name):
-        # TODO: Postgresql does not list unique_togethers in table_indexes
-        #       MySQL does
-        fields = dict([(field.db_column or field.name, field.unique) for field in all_local_fields(meta)])
-        for att_name, att_opts in table_indexes.iteritems():
-            if att_opts['unique'] and att_name in fields and not fields[att_name]:
-                if att_name in flatten(meta.unique_together): continue
-                self.add_difference('unique-missing-in-model', table_name, att_name)
-
-    def find_index_missing_in_db(self, meta, table_indexes, table_name):
-        for field in all_local_fields(meta):
-            if field.db_index:
-                attname = field.db_column or field.attname
-                if not attname in table_indexes:
-                    self.add_difference('index-missing-in-db', table_name, attname)
-
-    def find_index_missing_in_model(self, meta, table_indexes, table_name):
-        fields = dict([(field.name, field) for field in all_local_fields(meta)])
-        for att_name, att_opts in table_indexes.iteritems():
-            if att_name in fields:
-                field = fields[att_name]
-                if field.db_index: continue
-                if att_opts['primary_key'] and field.primary_key: continue
-                if att_opts['unique'] and field.unique: continue
-                if att_opts['unique'] and att_name in flatten(meta.unique_together): continue
-                self.add_difference('index-missing-in-model', table_name, att_name)
-
-    def find_field_missing_in_model(self, fieldmap, table_description, table_name):
-        for row in table_description:
-            if row[0] not in fieldmap:
-                self.add_difference('field-missing-in-model', table_name, row[0])
-
-    def find_field_missing_in_db(self, fieldmap, table_description, table_name):
-        db_fields = [row[0] for row in table_description]
-        for field_name, field in fieldmap.iteritems():
-            if field_name not in db_fields:
-                self.add_difference('field-missing-in-db', table_name, field_name, field.db_type())
-
-    def find_field_type_differ(self, meta, table_description, table_name, func=None):
-        db_fields = dict([(row[0], row) for row in table_description])
-        for field in all_local_fields(meta):
-            if field.name not in db_fields: continue
-            description = db_fields[field.name]
-
-            model_type = self.strip_parameters(self.get_field_model_type(field))
-            db_type = self.strip_parameters(self.get_field_db_type(description, field))
-
-            # use callback function if defined
-            if func:
-                model_type, db_type = func(field, description, model_type, db_type)
-
-            if not model_type==db_type:
-                self.add_difference('field-type-differ', table_name, field.name, model_type, db_type)
-
-    def find_field_parameter_differ(self, meta, table_description, table_name, func=None):
-        db_fields = dict([(row[0], row) for row in table_description])
-        for field in all_local_fields(meta):
-            if field.name not in db_fields: continue
-            description = db_fields[field.name]
-
-            model_type = self.get_field_model_type(field)
-            db_type = self.get_field_db_type(description, field, table_name)
-
-            if not self.strip_parameters(model_type)==self.strip_parameters(db_type):
-                continue
-            
-            # use callback function if defined
-            if func:
-                model_type, db_type = func(field, description, model_type, db_type)
-
-            if not model_type==db_type:
-                self.add_difference('field-parameter-differ', table_name, field.name, model_type, db_type)
-    
-    @transaction.commit_manually
-    def find_differences(self):
-        cur_app_label = None
-        for app_model in self.app_models:
-            meta = app_model._meta
-            table_name = meta.db_table
-            app_label = meta.app_label
-
-            if cur_app_label!=app_label:
-                # Marker indicating start of difference scan for this table_name
-                self.add_app_model_marker(app_label, app_model.__name__)
-
-            #if not table_name in self.django_tables:
-            if not table_name in self.db_tables:
-                # Table is missing from database
-                self.add_difference('table-missing-in-db', table_name)
-                continue
-            
-            table_indexes = self.introspection.get_indexes(self.cursor, table_name)
-            fieldmap = dict([(field.db_column or field.get_attname(), field) for field in all_local_fields(meta)])
-            
-            # add ordering field if model uses order_with_respect_to
-            if meta.order_with_respect_to:
-                fieldmap['_order'] = ORDERING_FIELD
-
-            try:
-                table_description = self.introspection.get_table_description(self.cursor, table_name)
-            except Exception, e:
-                model_diffs.append((app_model.__name__, [str(e).strip()]))
-                transaction.rollback() # reset transaction
-                continue
-            
-            # Fields which are defined in database but not in model
-            # 1) find: 'unique-missing-in-model'
-            self.find_unique_missing_in_model(meta, table_indexes, table_name)
-            # 2) find: 'index-missing-in-model'
-            self.find_index_missing_in_model(meta, table_indexes, table_name)
-            # 3) find: 'field-missing-in-model'
-            self.find_field_missing_in_model(fieldmap, table_description, table_name)
-
-            # Fields which are defined in models but not in database
-            # 4) find: 'field-missing-in-db'
-            self.find_field_missing_in_db(fieldmap, table_description, table_name)
-            # 5) find: 'unique-missing-in-db'
-            self.find_unique_missing_in_db(meta, table_indexes, table_name)
-            # 6) find: 'index-missing-in-db'
-            self.find_index_missing_in_db(meta, table_indexes, table_name)
-
-            # Fields which have a different type or parameters
-            # 7) find: 'type-differs'
-            self.find_field_type_differ(meta, table_description, table_name)
-            # 8) find: 'type-parameter-differs'
-            self.find_field_parameter_differ(meta, table_description, table_name)
-
-    def print_diff(self, style=no_style()):
-        """ print differences to stdout """
-        if self.options.get('sql', True):
-            self.print_diff_sql(style)
-        else:
-            self.print_diff_text(style)
-
-    def print_diff_text(self, style):
-        cur_app_label = None
-        for app_label, model_name, diffs in self.differences:
-            if not diffs: continue
-            if not self.dense and cur_app_label != app_label:
-                print style.NOTICE("+ Application:"), style.SQL_TABLE(app_label)
-                cur_app_label = app_label
-            if not self.dense:
-                print style.NOTICE("|-+ Differences for model:"), style.SQL_TABLE(model_name)
-            for diff in diffs:
-                diff_type, diff_args = diff
-                text = self.DIFF_TEXTS[diff_type] % dict((str(i), style.SQL_TABLE(e)) for i, e in enumerate(diff_args))
-                text = "'".join(i%2==0 and style.ERROR(e) or e for i, e in enumerate(text.split("'")))
-                if not self.dense:
-                    print style.NOTICE("|--+"), text
-                else:
-                    print style.NOTICE("App"), style.SQL_TABLE(app_name), style.NOTICE('Model'), style.SQL_TABLE(model_name), text
-
-    def print_diff_sql(self, style):
-        cur_app_label = None
-        qn = connection.ops.quote_name
-        print style.SQL_KEYWORD("BEGIN;")
-        for app_label, model_name, diffs in self.differences:
-            if not diffs: continue
-            if not self.dense and cur_app_label != app_label:
-                print style.NOTICE("-- Application: %s" % style.SQL_TABLE(app_label))
-                cur_app_label = app_label
-            if not self.dense:
-                print style.NOTICE("-- Model: %s" % style.SQL_TABLE(model_name))
-            for diff in diffs:
-                diff_type, diff_args = diff
-                text = self.DIFF_SQL[diff_type](style, qn, diff_args)
-                if self.dense:
-                    text = text.replace("\n\t", " ")
-                print text
-        print style.SQL_KEYWORD("COMMIT;")
-        
-class GenericSQLDiff(SQLDiff):
-    pass
-
-class MySQLDiff(SQLDiff):
-    # All the MySQL hacks together create something of a problem
-    # Fixing one bug in MySQL creates another issue. So just keep in mind
-    # that this is way unreliable for MySQL atm.
-    def get_field_db_type(self, description, field=None, table_name=None):
-        from MySQLdb.constants import FIELD_TYPE
-        # weird bug? in mysql db-api where it returns three times the correct value for field length
-        # if i remember correctly it had something todo with unicode strings
-        # TODO: Fix this is a more meaningful and better understood manner
-        description = list(description)
-        if description[1] not in [FIELD_TYPE.TINY, FIELD_TYPE.SHORT]: # exclude tinyints from conversion.
-            description[3] = description[3]/3
-            description[4] = description[4]/3
-        db_type = super(MySQLDiff, self).get_field_db_type(description)
-        if not db_type:
-            return
-        if field:
-            if field.primary_key and (db_type=='integer' or db_type=='bigint'):
-                db_type += ' AUTO_INCREMENT'
-            # MySQL isn't really sure about char's and varchar's like sqlite
-            field_type = self.get_field_model_type(field)
-            # Fix char/varchar inconsistencies
-            if self.strip_parameters(field_type)=='char' and self.strip_parameters(db_type)=='varchar':
-                db_type = db_type.lstrip("var")
-            # They like to call 'bool's 'tinyint(1)' and introspection makes that a integer
-            # just convert it back to it's proper type, a bool is a bool and nothing else.
-            if db_type=='integer' and description[1]==FIELD_TYPE.TINY and description[4]==1:
-                db_type = 'bool'
-            if db_type=='integer' and description[1]==FIELD_TYPE.SHORT:
-                db_type = 'smallint UNSIGNED' # FIXME: what about if it's not UNSIGNED ?
-        return db_type
-
-class SqliteSQLDiff(SQLDiff):
-    # Unique does not seem to be implied on Sqlite for Primary_key's
-    # if this is more generic among databases this might be usefull
-    # to add to the superclass's find_unique_missing_in_db method
-    def find_unique_missing_in_db(self, meta, table_indexes, table_name):
-        for field in all_local_fields(meta):
-            if field.unique:
-                attname = field.db_column or field.attname
-                if attname in table_indexes and table_indexes[attname]['unique']:
-                    continue
-                if table_indexes[attname]['primary_key']:
-                    continue
-                self.add_difference('unique-missing-in-db', table_name, attname)
-
-    # Finding Indexes by using the get_indexes dictionary doesn't seem to work
-    # for sqlite.
-    def find_index_missing_in_db(self, meta, table_indexes, table_name):
-        pass
-
-    def find_index_missing_in_model(self, meta, table_indexes, table_name):
-        pass
-
-    def get_field_db_type(self, description, field=None, table_name=None):
-        db_type = super(SqliteSQLDiff, self).get_field_db_type(description)
-        if not db_type:
-            return
-        if field:
-            field_type = self.get_field_model_type(field)
-            # Fix char/varchar inconsistencies
-            if self.strip_parameters(field_type)=='char' and self.strip_parameters(db_type)=='varchar':
-                db_type = db_type.lstrip("var")
-        return db_type
-
-class PostgresqlSQLDiff(SQLDiff):
-    DATA_TYPES_REVERSE_OVERRIDE = {
-        20: 'IntegerField',
-        1042: 'CharField',
-        # postgis types (TODO: support is very incomplete)
-        17506: 'django.contrib.gis.db.models.fields.PointField',
-        55902: 'django.contrib.gis.db.models.fields.MultiPolygonField',
-    }
-
-    # Hopefully in the future we can add constraint checking and other more
-    # advanced checks based on this database.
-    SQL_LOAD_CONSTRAINTS = """
-    SELECT nspname, relname, conname, attname, pg_get_constraintdef(pg_constraint.oid)
-    FROM pg_constraint
-    INNER JOIN pg_attribute ON pg_constraint.conrelid = pg_attribute.attrelid AND pg_attribute.attnum = any(pg_constraint.conkey)
-    INNER JOIN pg_class ON conrelid=pg_class.oid
-    INNER JOIN pg_namespace ON pg_namespace.oid=pg_class.relnamespace
-    ORDER BY CASE WHEN contype='f' THEN 0 ELSE 1 END,contype,nspname,relname,conname;
-    """
-
-    SQL_FIELD_TYPE_DIFFER = lambda self, style, qn, args:  "%s %s\n\t%s %s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ALTER'), style.SQL_FIELD(qn(args[1])), style.SQL_KEYWORD("TYPE"), style.SQL_COLTYPE(args[2]))
-    SQL_FIELD_PARAMETER_DIFFER = lambda self, style, qn, args:  "%s %s\n\t%s %s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ALTER'), style.SQL_FIELD(qn(args[1])), style.SQL_KEYWORD("TYPE"), style.SQL_COLTYPE(args[2]))
-
-    def __init__(self, app_models, options):
-        SQLDiff.__init__(self, app_models, options)
-        self.check_constraints = {}
-        self.load_constraints()
-
-    def load_constraints(self):
-        for dct in self.sql_to_dict(self.SQL_LOAD_CONSTRAINTS, []):
-            key = (dct['nspname'], dct['relname'], dct['attname'])
-            if 'CHECK' in dct['pg_get_constraintdef']:
-                self.check_constraints[key] = dct
-
-    def get_field_db_type(self, description, field=None, table_name=None):
-        db_type = super(PostgresqlSQLDiff, self).get_field_db_type(description)
-        if not db_type:
-            return
-        if field:
-            if field.primary_key and db_type=='integer':
-                db_type = 'serial'
-            if table_name:
-                tablespace = field.db_tablespace
-                if tablespace=="":
-                    tablespace = "public"
-                check_constraint = self.check_constraints.get((tablespace, table_name, field.attname),{}).get('pg_get_constraintdef', None)
-                if check_constraint:
-                    check_constraint = check_constraint.replace("((", "(")
-                    check_constraint = check_constraint.replace("))", ")")
-                    check_constraint = '("'.join([')' in e and '" '.join(e.split(" ", 1)) or e for e in check_constraint.split("(")])
-                    # TODO: might be more then one constraint in definition ?
-                    db_type += ' '+check_constraint
-        return db_type
-
-    """
-    def find_field_type_differ(self, meta, table_description, table_name):
-        def callback(field, description, model_type, db_type):
-            if field.primary_key and db_type=='integer':
-                db_type = 'serial'
-            return model_type, db_type
-        super(PostgresqlSQLDiff, self).find_field_type_differs(meta, table_description, table_name, callback)
-    """
-
-DATABASE_SQLDIFF_CLASSES = {
-    'postgresql_psycopg2' : PostgresqlSQLDiff,
-    'postgresql': PostgresqlSQLDiff,
-    'mysql': MySQLDiff,
-    'sqlite3': SqliteSQLDiff,
-    'oracle': GenericSQLDiff
-}
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--all-applications', '-a', action='store_true', dest='all_applications',
-                    help="Automaticly include all application from INSTALLED_APPS."),
-        make_option('--not-only-existing', '-e', action='store_false', dest='only_existing',
-                    help="Check all tables that exist in the database, not only tables that should exist based on models."),
-        make_option('--dense-output', '-d', action='store_true', dest='dense_output',
-                    help="Shows the output in dense format, normally output is spreaded over multiple lines."),
-        make_option('--output_text', '-t', action='store_false', dest='sql', default=True,
-                    help="Outputs the differences as descriptive text instead of SQL"),
-    )
-    
-    help = """Prints the (approximated) difference between models and fields in the database for the given app name(s).
-
-It indicates how columns in the database are different from the sql that would
-be generated by Django. This command is not a database migration tool. (Though
-it can certainly help) It's purpose is to show the current differences as a way
-to check/debug ur models compared to the real database tables and columns."""
-
-    output_transaction = False
-    args = '<appname appname ...>'
-
-    def handle(self, *app_labels, **options):
-        from django import VERSION
-        if VERSION[:2]<(1,0):
-            raise CommandError("SQLDiff only support Django 1.0 or higher!")
-
-        from django.db import models
-        from django.conf import settings
-
-        if settings.DATABASE_ENGINE =='dummy':
-            # This must be the "dummy" database backend, which means the user
-            # hasn't set DATABASE_ENGINE.
-            raise CommandError("Django doesn't know which syntax to use for your SQL statements,\n" +
-                "because you haven't specified the DATABASE_ENGINE setting.\n" +
-                "Edit your settings file and change DATABASE_ENGINE to something like 'postgresql' or 'mysql'.")
-
-        if options.get('all_applications', False):
-            app_models = models.get_models()
-        else:
-            if not app_labels:
-                raise CommandError('Enter at least one appname.')
-            try:
-                app_list = [models.get_app(app_label) for app_label in app_labels]
-            except (models.ImproperlyConfigured, ImportError), e:
-                raise CommandError("%s. Are you sure your INSTALLED_APPS setting is correct?" % e)
-
-            app_models = []
-            for app in app_list:
-                app_models.extend(models.get_models(app))
-
-        ## remove all models that are not managed by Django
-        #app_models = [model for model in app_models if getattr(model._meta, 'managed', True)]
-
-        if not app_models:
-            raise CommandError('Unable to execute sqldiff no models founds.')
-
-        cls = DATABASE_SQLDIFF_CLASSES.get(settings.DATABASE_ENGINE, GenericSQLDiff)
-        sqldiff_instance = cls(app_models, options)
-        sqldiff_instance.find_differences()
-        sqldiff_instance.print_diff(self.style)
-        return
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/sync_media_s3.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/sync_media_s3.py
deleted file mode 100644
index 4999ae9..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/sync_media_s3.py
+++ /dev/null
@@ -1,265 +0,0 @@
-"""
-Sync Media to S3
-================
-
-Django command that scans all files in your settings.MEDIA_ROOT folder and
-uploads them to S3 with the same directory structure.
-
-This command can optionally do the following but it is off by default:
-* gzip compress any CSS and Javascript files it finds and adds the appropriate
-  'Content-Encoding' header.
-* set a far future 'Expires' header for optimal caching.
-
-Note: This script requires the Python boto library and valid Amazon Web
-Services API keys.
-
-Required settings.py variables:
-AWS_ACCESS_KEY_ID = ''
-AWS_SECRET_ACCESS_KEY = ''
-AWS_BUCKET_NAME = ''
-
-Command options are:
-  -p PREFIX, --prefix=PREFIX
-                        The prefix to prepend to the path on S3.
-  --gzip                Enables gzipping CSS and Javascript files.
-  --expires             Enables setting a far future expires header.
-  --force               Skip the file mtime check to force upload of all
-                        files.
-  --filter-list         Override default directory and file exclusion
-                        filters. (enter as comma seperated line)
-
-TODO:
- * Use fnmatch (or regex) to allow more complex FILTER_LIST rules.
-
-"""
-import datetime
-import email
-import mimetypes
-import optparse
-import os
-import sys
-import time
-
-from django.conf import settings
-from django.core.management.base import BaseCommand, CommandError
-
-# Make sure boto is available
-try:
-    import boto
-    import boto.exception
-except ImportError:
-    raise ImportError, "The boto Python library is not installed."
-
-class Command(BaseCommand):
-
-    # Extra variables to avoid passing these around
-    AWS_ACCESS_KEY_ID = ''
-    AWS_SECRET_ACCESS_KEY = ''
-    AWS_BUCKET_NAME = ''
-    DIRECTORY = ''
-    FILTER_LIST = ['.DS_Store', '.svn', '.hg', '.git', 'Thumbs.db']
-    GZIP_CONTENT_TYPES = (
-        'text/css',
-        'application/javascript',
-        'application/x-javascript'
-    )
-
-    upload_count = 0
-    skip_count = 0
-
-    option_list = BaseCommand.option_list + (
-        optparse.make_option('-p', '--prefix',
-            dest='prefix', default='',
-            help="The prefix to prepend to the path on S3."),
-        optparse.make_option('-d', '--dir',
-            dest='dir', default=settings.MEDIA_ROOT,
-            help="The root directory to use instead of your MEDIA_ROOT"),
-        optparse.make_option('--gzip',
-            action='store_true', dest='gzip', default=False,
-            help="Enables gzipping CSS and Javascript files."),
-        optparse.make_option('--expires',
-            action='store_true', dest='expires', default=False,
-            help="Enables setting a far future expires header."),
-        optparse.make_option('--force',
-            action='store_true', dest='force', default=False,
-            help="Skip the file mtime check to force upload of all files."),
-        optparse.make_option('--filter-list', dest='filter_list',
-            action='store', default='',
-            help="Override default directory and file exclusion filters. (enter as comma seperated line)"),
-    )
-
-    help = 'Syncs the complete MEDIA_ROOT structure and files to S3 into the given bucket name.'
-    args = 'bucket_name'
-
-    can_import_settings = True
-
-    def handle(self, *args, **options):
-
-        # Check for AWS keys in settings
-        if not hasattr(settings, 'AWS_ACCESS_KEY_ID') or \
-           not hasattr(settings, 'AWS_SECRET_ACCESS_KEY'):
-           raise CommandError('Missing AWS keys from settings file.  Please' +
-                     'supply both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.')
-        else:
-            self.AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
-            self.AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
-
-        if not hasattr(settings, 'AWS_BUCKET_NAME'):
-            raise CommandError('Missing bucket name from settings file. Please' +
-                ' add the AWS_BUCKET_NAME to your settings file.')
-        else:
-            if not settings.AWS_BUCKET_NAME:
-                raise CommandError('AWS_BUCKET_NAME cannot be empty.')
-        self.AWS_BUCKET_NAME = settings.AWS_BUCKET_NAME
-
-        if not hasattr(settings, 'MEDIA_ROOT'):
-            raise CommandError('MEDIA_ROOT must be set in your settings.')
-        else:
-            if not settings.MEDIA_ROOT:
-                raise CommandError('MEDIA_ROOT must be set in your settings.')
-
-        self.verbosity = int(options.get('verbosity'))
-        self.prefix = options.get('prefix')
-        self.do_gzip = options.get('gzip')
-        self.do_expires = options.get('expires')
-        self.do_force = options.get('force')
-        self.DIRECTORY = options.get('dir')
-        self.FILTER_LIST = getattr(settings, 'FILTER_LIST', self.FILTER_LIST)
-        filter_list = options.get('filter_list').split(',')
-        if filter_list:
-            # command line option overrides default filter_list and
-            # settings.filter_list
-            self.FILTER_LIST = filter_list
-
-        # Now call the syncing method to walk the MEDIA_ROOT directory and
-        # upload all files found.
-        self.sync_s3()
-
-        print
-        print "%d files uploaded." % (self.upload_count)
-        print "%d files skipped." % (self.skip_count)
-
-    def sync_s3(self):
-        """
-        Walks the media directory and syncs files to S3
-        """
-        bucket, key = self.open_s3()
-        os.path.walk(self.DIRECTORY, self.upload_s3,
-            (bucket, key, self.AWS_BUCKET_NAME, self.DIRECTORY))
-
-    def compress_string(self, s):
-        """Gzip a given string."""
-        import cStringIO, gzip
-        zbuf = cStringIO.StringIO()
-        zfile = gzip.GzipFile(mode='wb', compresslevel=6, fileobj=zbuf)
-        zfile.write(s)
-        zfile.close()
-        return zbuf.getvalue()
-
-    def open_s3(self):
-        """
-        Opens connection to S3 returning bucket and key
-        """
-        conn = boto.connect_s3(self.AWS_ACCESS_KEY_ID, self.AWS_SECRET_ACCESS_KEY)
-        try:
-            bucket = conn.get_bucket(self.AWS_BUCKET_NAME)
-        except boto.exception.S3ResponseError:
-            bucket = conn.create_bucket(self.AWS_BUCKET_NAME)
-        return bucket, boto.s3.key.Key(bucket)
-
-    def upload_s3(self, arg, dirname, names):
-        """
-        This is the callback to os.path.walk and where much of the work happens
-        """
-        bucket, key, bucket_name, root_dir = arg # expand arg tuple
-
-        # Skip directories we don't want to sync
-        if os.path.basename(dirname) in self.FILTER_LIST:
-            # prevent walk from processing subfiles/subdirs below the ignored one
-            del names[:]
-            return 
-
-        # Later we assume the MEDIA_ROOT ends with a trailing slash
-        if not root_dir.endswith(os.path.sep):
-            root_dir = root_dir + os.path.sep
-
-        for file in names:
-            headers = {}
-
-            if file in self.FILTER_LIST:
-                continue # Skip files we don't want to sync
-
-            filename = os.path.join(dirname, file)
-            if os.path.isdir(filename):
-                continue # Don't try to upload directories
-
-            file_key = filename[len(root_dir):]
-            if self.prefix:
-                file_key = '%s/%s' % (self.prefix, file_key)
-
-            # Check if file on S3 is older than local file, if so, upload
-            if not self.do_force:
-                s3_key = bucket.get_key(file_key)
-                if s3_key:
-                    s3_datetime = datetime.datetime(*time.strptime(
-                        s3_key.last_modified, '%a, %d %b %Y %H:%M:%S %Z')[0:6])
-                    local_datetime = datetime.datetime.utcfromtimestamp(
-                        os.stat(filename).st_mtime)
-                    if local_datetime < s3_datetime:
-                        self.skip_count += 1
-                        if self.verbosity > 1:
-                            print "File %s hasn't been modified since last " \
-                                "being uploaded" % (file_key)
-                        continue
-
-            # File is newer, let's process and upload
-            if self.verbosity > 0:
-                print "Uploading %s..." % (file_key)
-
-            content_type = mimetypes.guess_type(filename)[0]
-            if content_type:
-                headers['Content-Type'] = content_type
-            file_obj = open(filename, 'rb')
-            file_size = os.fstat(file_obj.fileno()).st_size
-            filedata = file_obj.read()
-            if self.do_gzip:
-                # Gzipping only if file is large enough (>1K is recommended) 
-                # and only if file is a common text type (not a binary file)
-                if file_size > 1024 and content_type in self.GZIP_CONTENT_TYPES:
-                    filedata = self.compress_string(filedata)
-                    headers['Content-Encoding'] = 'gzip'
-                    if self.verbosity > 1:
-                        print "\tgzipped: %dk to %dk" % \
-                            (file_size/1024, len(filedata)/1024)
-            if self.do_expires:
-                # HTTP/1.0
-                headers['Expires'] = '%s GMT' % (email.Utils.formatdate(
-                    time.mktime((datetime.datetime.now() +
-                    datetime.timedelta(days=365*2)).timetuple())))
-                # HTTP/1.1
-                headers['Cache-Control'] = 'max-age %d' % (3600 * 24 * 365 * 2)
-                if self.verbosity > 1:
-                    print "\texpires: %s" % (headers['Expires'])
-                    print "\tcache-control: %s" % (headers['Cache-Control'])
-
-            try:
-                key.name = file_key
-                key.set_contents_from_string(filedata, headers, replace=True)
-                key.set_acl('public-read')
-            except boto.s3.connection.S3CreateError, e:
-                print "Failed: %s" % e
-            except Exception, e:
-                print e
-                raise
-            else:
-                self.upload_count += 1
-
-            file_obj.close()
-
-# Backwards compatibility for Django r9110
-if not [opt for opt in Command.option_list if opt.dest=='verbosity']:
-    Command.option_list += (
-        optparse.make_option('-v', '--verbosity',
-            dest='verbosity', default=1, action='count',
-            help="Verbose mode. Multiple -v options increase the verbosity."),
-    )
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/syncdata.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/syncdata.py
deleted file mode 100644
index fb2ad34..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/syncdata.py
+++ /dev/null
@@ -1,221 +0,0 @@
-""" 
-SyncData
-========
-
-Django command similar to 'loaddata' but also deletes.
-After 'syncdata' has run, the database will have the same data as the fixture - anything
-missing will of been added, anything different will of been updated,
-and anything extra will of been deleted.
-"""
-
-from django.core.management.base import BaseCommand
-from django.core.management.color import no_style
-from optparse import make_option
-import sys
-import os
-
-class Command(BaseCommand):
-    """ syncdata command """
-    
-    help = 'Makes the current database have the same data as the fixture(s), no more, no less.'
-    args = "fixture [fixture ...]"
-    
-    def remove_objects_not_in(self, objects_to_keep, verbosity):
-        """
-        Deletes all the objects in the database that are not in objects_to_keep.
-        - objects_to_keep: A map where the keys are classes, and the values are a
-         set of the objects of that class we should keep.
-        """
-        for class_ in objects_to_keep.keys():
-
-            current = class_.objects.all()
-            current_ids = set( [x.id for x in current] )
-            keep_ids = set( [x.id for x in objects_to_keep[class_]] )
-
-            remove_these_ones = current_ids.difference(keep_ids)
-            if remove_these_ones:
-
-                for obj in current:
-                    if obj.id in remove_these_ones:
-                        obj.delete()
-                        if verbosity >= 2:
-                            print "Deleted object: "+ unicode(obj)
-
-            if verbosity > 0 and remove_these_ones:
-                num_deleted = len(remove_these_ones)
-                if num_deleted > 1:
-                    type_deleted = unicode(class_._meta.verbose_name_plural)
-                else:
-                    type_deleted = unicode(class_._meta.verbose_name)
-
-                print "Deleted "+ str(num_deleted) +" "+ type_deleted
-
-    def handle(self, *fixture_labels, **options):
-        """ Main method of a Django command """
-        from django.db.models import get_apps
-        from django.core import serializers
-        from django.db import connection, transaction
-        from django.conf import settings
-
-        self.style = no_style()
-
-        verbosity = int(options.get('verbosity', 1))
-        show_traceback = options.get('traceback', False)
-        
-        # Keep a count of the installed objects and fixtures
-        fixture_count = 0
-        object_count = 0
-        objects_per_fixture = []
-        models = set()
-
-        humanize = lambda dirname: dirname and "'%s'" % dirname or 'absolute path'
-
-        # Get a cursor (even though we don't need one yet). This has
-        # the side effect of initializing the test database (if
-        # it isn't already initialized).
-        cursor = connection.cursor()
-
-        # Start transaction management. All fixtures are installed in a
-        # single transaction to ensure that all references are resolved.
-        transaction.commit_unless_managed()
-        transaction.enter_transaction_management()
-        transaction.managed(True)
-
-        app_fixtures = [os.path.join(os.path.dirname(app.__file__), 'fixtures') \
-                        for app in get_apps()]
-        for fixture_label in fixture_labels:
-            parts = fixture_label.split('.')
-            if len(parts) == 1:
-                fixture_name = fixture_label
-                formats = serializers.get_public_serializer_formats()
-            else:
-                fixture_name, format = '.'.join(parts[:-1]), parts[-1]
-                if format in serializers.get_public_serializer_formats():
-                    formats = [format]
-                else:
-                    formats = []
-
-            if formats:
-                if verbosity > 1:
-                    print "Loading '%s' fixtures..." % fixture_name
-            else:
-                sys.stderr.write(
-                    self.style.ERROR("Problem installing fixture '%s': %s is not a known "+ \
-                                     "serialization format." % (fixture_name, format))
-                    )
-                transaction.rollback()
-                transaction.leave_transaction_management()
-                return
-
-            if os.path.isabs(fixture_name):
-                fixture_dirs = [fixture_name]
-            else:
-                fixture_dirs = app_fixtures + list(settings.FIXTURE_DIRS) + ['']
-
-            for fixture_dir in fixture_dirs:
-                if verbosity > 1:
-                    print "Checking %s for fixtures..." % humanize(fixture_dir)
-
-                label_found = False
-                for format in formats:
-                    serializer = serializers.get_serializer(format)
-                    if verbosity > 1:
-                        print "Trying %s for %s fixture '%s'..." % \
-                            (humanize(fixture_dir), format, fixture_name)
-                    try:
-                        full_path = os.path.join(fixture_dir, '.'.join([fixture_name, format]))
-                        fixture = open(full_path, 'r')
-                        if label_found:
-                            fixture.close()
-                            print self.style.ERROR("Multiple fixtures named '%s' in %s. Aborting." %
-                                (fixture_name, humanize(fixture_dir)))
-                            transaction.rollback()
-                            transaction.leave_transaction_management()
-                            return
-                        else:
-                            fixture_count += 1
-                            objects_per_fixture.append(0)
-                            if verbosity > 0:
-                                print "Installing %s fixture '%s' from %s." % \
-                                    (format, fixture_name, humanize(fixture_dir))
-                            try:
-                                objects_to_keep = {}
-                                objects = serializers.deserialize(format, fixture)
-                                for obj in objects:
-                                    object_count += 1
-                                    objects_per_fixture[-1] += 1
-
-                                    class_ = obj.object.__class__
-                                    if not class_ in objects_to_keep:
-                                        objects_to_keep[class_] = set()
-                                    objects_to_keep[class_].add(obj.object)
-                                    
-                                    models.add(class_)
-                                    obj.save()
-
-                                self.remove_objects_not_in(objects_to_keep, verbosity)
-
-                                label_found = True
-                            except (SystemExit, KeyboardInterrupt):
-                                raise
-                            except Exception:
-                                import traceback
-                                fixture.close()
-                                transaction.rollback()
-                                transaction.leave_transaction_management()
-                                if show_traceback:
-                                    traceback.print_exc()
-                                else:
-                                    sys.stderr.write(
-                                        self.style.ERROR("Problem installing fixture '%s': %s\n" %
-                                             (full_path, traceback.format_exc())))
-                                return
-                            fixture.close()
-                    except:
-                        if verbosity > 1:
-                            print "No %s fixture '%s' in %s." % \
-                                (format, fixture_name, humanize(fixture_dir))
-
-        # If any of the fixtures we loaded contain 0 objects, assume that an 
-        # error was encountered during fixture loading.
-        if 0 in objects_per_fixture:
-            sys.stderr.write(
-                self.style.ERROR("No fixture data found for '%s'. (File format may be invalid.)" %
-                    (fixture_name)))
-            transaction.rollback()
-            transaction.leave_transaction_management()
-            return
-            
-        # If we found even one object in a fixture, we need to reset the 
-        # database sequences.
-        if object_count > 0:
-            sequence_sql = connection.ops.sequence_reset_sql(self.style, models)
-            if sequence_sql:
-                if verbosity > 1:
-                    print "Resetting sequences"
-                for line in sequence_sql:
-                    cursor.execute(line)
-            
-        transaction.commit()
-        transaction.leave_transaction_management()
-
-        if object_count == 0:
-            if verbosity > 1:
-                print "No fixtures found."
-        else:
-            if verbosity > 0:
-                print "Installed %d object(s) from %d fixture(s)" % (object_count, fixture_count)
-                
-        # Close the DB connection. This is required as a workaround for an
-        # edge case in MySQL: if the same connection is used to
-        # create tables, load data, and query, the query can return
-        # incorrect results. See Django #7572, MySQL #37735.
-        connection.close()
-
-# Backwards compatibility for Django r9110
-if not [opt for opt in Command.option_list if opt.dest=='verbosity']:
-    Command.option_list += (
-        make_option('--verbosity', '-v', action="store", dest="verbosity",
-            default='1', type='choice', choices=['0', '1', '2'],
-            help="Verbosity level; 0=minimal output, 1=normal output, 2=all output"),
-    )
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/unreferenced_files.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/unreferenced_files.py
deleted file mode 100644
index 93288ec..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/commands/unreferenced_files.py
+++ /dev/null
@@ -1,44 +0,0 @@
-from collections import defaultdict
-import os
-from django.conf import settings
-from django.core.management.base import NoArgsCommand
-from django.db import models
-from django.db.models.loading import cache
-
-class Command(NoArgsCommand):
-    help = "Prints a list of all files in MEDIA_ROOT that are not referenced in the database."
-
-    def handle_noargs(self, **options):
-
-        if settings.MEDIA_ROOT == '':
-            print "MEDIA_ROOT is not set, nothing to do"
-            return
-        
-        # Get a list of all files under MEDIA_ROOT
-        media = []
-        for root, dirs, files in os.walk(settings.MEDIA_ROOT):
-            for f in files:
-                media.append(os.path.abspath(os.path.join(root, f)))
-
-        # Get list of all fields (value) for each model (key)
-        # that is a FileField or subclass of a FileField
-        model_dict = defaultdict(list)
-        for app in cache.get_apps():
-            model_list = cache.get_models(app)
-            for model in model_list:
-                for field in model._meta.fields:
-                    if issubclass(field.__class__, models.FileField):
-                        model_dict[model].append(field)
-
-        # Get a list of all files referenced in the database
-        referenced = []
-        for model in model_dict.iterkeys():
-            all = model.objects.all().iterator()
-            for object in all:
-                for field in model_dict[model]:
-                    referenced.append(os.path.abspath(getattr(object, field.name).path))
-
-        # Print each file in MEDIA_ROOT that is not referenced in the database
-        for m in media:
-            if m not in referenced:
-                print m
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/jobs.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/jobs.py
deleted file mode 100644
index 691aec8..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/jobs.py
+++ /dev/null
@@ -1,157 +0,0 @@
-"""
-django_extensions.management.jobs
-"""
-
-import os
-from imp import find_module
-
-_jobs = None
-
-def noneimplementation(meth):
-    return None
-
-class JobError(Exception):
-    pass
-
-class BaseJob(object):
-    help = "undefined job description."
-    when = None
-
-    def execute(self):
-        raise NotImplementedError("Job needs to implement the execute method")
-
-class HourlyJob(BaseJob):
-    when = "hourly"
-
-class DailyJob(BaseJob):
-    when = "daily"
-
-class WeeklyJob(BaseJob):
-    when = "weekly"
-
-class MonthlyJob(BaseJob):
-    when = "monthly"
-
-class YearlyJob(BaseJob):
-    when = "yearly"
-    
-def my_import(name):
-    imp = __import__(name)
-    mods = name.split('.')
-    if len(mods)>1:
-        for mod in mods[1:]:
-            imp = getattr(imp, mod)
-    return imp
-
-def find_jobs(jobs_dir):
-    try:
-        return [f[:-3] for f in os.listdir(jobs_dir) \
-                if not f.startswith('_') and f.endswith(".py")]
-    except OSError:
-        return []
-
-def find_job_module(app_name, when=None):
-    parts = app_name.split('.')
-    parts.append('jobs')
-    if when:
-        parts.append(when)
-    parts.reverse()
-    path = None
-    while parts:
-        part = parts.pop()
-        f, path, descr = find_module(part, path and [path] or None)
-    return path
-
-def import_job(app_name, name, when=None):
-    jobmodule = "%s.jobs.%s%s" % (app_name, when and "%s." % when or "", name)
-    job_mod = my_import(jobmodule)
-    # todo: more friendly message for AttributeError if job_mod does not exist
-    try:
-        job = job_mod.Job
-    except:
-        raise JobError("Job module %s does not contain class instance named 'Job'" % jobmodule)
-    if when and not (job.when == when or job.when == None):
-        raise JobError("Job %s is not a %s job." % (jobmodule, when))
-    return job
-
-def get_jobs(when=None, only_scheduled=False):
-    """
-    Returns a dictionary mapping of job names together with there respective
-    application class.
-    """
-    global _jobs
-    # FIXME: HACK: make sure the project dir is on the path when executed as ./manage.py
-    import sys
-    try:
-        cpath = os.path.dirname(os.path.realpath(sys.argv[0]))
-        ppath = os.path.dirname(cpath)
-        if ppath not in sys.path:
-            sys.path.append(ppath)
-    except:
-        pass
-    if _jobs is None:
-        _jobs = {}
-        if True:
-            from django.conf import settings
-            for app_name in settings.INSTALLED_APPS:
-                scandirs = (None, 'hourly', 'daily', 'weekly', 'monthly', 'yearly')
-                if when:
-                    scandirs = None, when
-                for subdir in scandirs:
-                    try:
-                        path = find_job_module(app_name, subdir)
-                        for name in find_jobs(path):
-                            if (app_name, name) in _jobs:
-                                raise JobError("Duplicate job %s" % name)
-                            job = import_job(app_name, name, subdir)
-                            if only_scheduled and job.when == None:
-                                # only include jobs which are scheduled
-                                continue
-                            if when and job.when != when:
-                                # generic job not in same schedule
-                                continue
-                            _jobs[(app_name, name)] = job
-                    except ImportError:
-                        pass # No job module -- continue scanning
-    return _jobs
-
-def get_job(app_name, job_name):
-    jobs = get_jobs()
-    if app_name:
-        return jobs[(app_name, job_name)]
-    else:
-        for a, j in jobs.keys():
-            if j==job_name:
-                return jobs[(a, j)]
-        raise KeyError("Job not found: %s" % job_name)
-
-def print_jobs(when=None, only_scheduled=False, show_when=True, \
-                show_appname=False, show_header=True):
-    jobmap = get_jobs(when, only_scheduled=only_scheduled)
-    print "Job List: %i jobs" % len(jobmap)
-    jlist = jobmap.keys()
-    jlist.sort()
-    appname_spacer = "%%-%is" % max(len(e[0]) for e in jlist)
-    name_spacer = "%%-%is" % max(len(e[1]) for e in jlist)
-    when_spacer = "%%-%is" % max(len(e.when) for e in jobmap.values() if e.when)
-    if show_header:
-        line = " "
-        if show_appname:
-            line += appname_spacer % "appname" + " - "
-        line += name_spacer % "jobname"
-        if show_when:
-            line += " - " + when_spacer % "when"
-        line += " - help"
-        print line
-        print "-"*80
-
-    for app_name, job_name in jlist:
-        job = jobmap[(app_name, job_name)]
-        line = " "
-        if show_appname:
-            line += appname_spacer % app_name + " - "
-        line += name_spacer % job_name
-        if show_when:
-            line += " - " + when_spacer % (job.when and job.when or "")
-        line += " - " + job.help
-        print line
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/modelviz.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/modelviz.py
deleted file mode 100644
index f3a6a51..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/modelviz.py
+++ /dev/null
@@ -1,287 +0,0 @@
-#!/usr/bin/env python
-"""Django model to DOT (Graphviz) converter
-by Antonio Cavedoni <antonio@cavedoni.org>
-
-Make sure your DJANGO_SETTINGS_MODULE is set to your project or
-place this script in the same directory of the project and call
-the script like this:
-
-$ python modelviz.py [-h] [-a] [-d] [-g] [-i <model_names>] <app_label> ... <app_label> > <filename>.dot
-$ dot <filename>.dot -Tpng -o <filename>.png
-
-options:
-    -h, --help
-    show this help message and exit.
-
-    -a, --all_applications
-    show models from all applications.
-
-    -d, --disable_fields
-    don't show the class member fields.
-
-    -g, --group_models
-    draw an enclosing box around models from the same app.
-
-    -i, --include_models=User,Person,Car
-    only include selected models in graph.
-"""
-__version__ = "0.9"
-__svnid__ = "$Id$"
-__license__ = "Python"
-__author__ = "Antonio Cavedoni <http://cavedoni.com/>"
-__contributors__ = [
-   "Stefano J. Attardi <http://attardi.org/>",
-   "limodou <http://www.donews.net/limodou/>",
-   "Carlo C8E Miron",
-   "Andre Campos <cahenan@gmail.com>",
-   "Justin Findlay <jfindlay@gmail.com>",
-   "Alexander Houben <alexander@houben.ch>",
-   "Bas van Oostveen <v.oostveen@gmail.com>",
-]
-
-import getopt, sys
-
-from django.core.management import setup_environ
-
-try:
-    import settings
-except ImportError:
-    pass
-else:
-    setup_environ(settings)
-
-from django.utils.safestring import mark_safe
-from django.template import Template, Context
-from django.db import models
-from django.db.models import get_models
-from django.db.models.fields.related import \
-    ForeignKey, OneToOneField, ManyToManyField
-
-try:
-    from django.db.models.fields.generic import GenericRelation
-except ImportError:
-    from django.contrib.contenttypes.generic import GenericRelation
-
-head_template = """
-digraph name {
-  fontname = "Helvetica"
-  fontsize = 8
-
-  node [
-    fontname = "Helvetica"
-    fontsize = 8
-    shape = "plaintext"
-  ]
-  edge [
-    fontname = "Helvetica"
-    fontsize = 8
-  ]
-
-"""
-
-body_template = """
-{% if use_subgraph %}
-subgraph {{ cluster_app_name }} {
-  label=<
-        <TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0">
-        <TR><TD COLSPAN="2" CELLPADDING="4" ALIGN="CENTER"
-        ><FONT FACE="Helvetica Bold" COLOR="Black" POINT-SIZE="12"
-        >{{ app_name }}</FONT></TD></TR>
-        </TABLE>
-        >
-  color=olivedrab4
-  style="rounded"
-{% endif %}
-
-  {% for model in models %}
-    {{ model.app_name }}_{{ model.name }} [label=<
-    <TABLE BGCOLOR="palegoldenrod" BORDER="0" CELLBORDER="0" CELLSPACING="0">
-     <TR><TD COLSPAN="2" CELLPADDING="4" ALIGN="CENTER" BGCOLOR="olivedrab4"
-     ><FONT FACE="Helvetica Bold" COLOR="white"
-     >{{ model.name }}{% if model.abstracts %}<BR/>&lt;<FONT FACE="Helvetica Italic">{{ model.abstracts|join:"," }}</FONT>&gt;{% endif %}</FONT></TD></TR>
-
-    {% if not disable_fields %}
-        {% for field in model.fields %}
-        <TR><TD ALIGN="LEFT" BORDER="0"
-        ><FONT {% if field.blank %}COLOR="#7B7B7B" {% endif %}FACE="Helvetica {% if field.abstract %}Italic{% else %}Bold{% endif %}">{{ field.name }}</FONT
-        ></TD>
-        <TD ALIGN="LEFT"
-        ><FONT {% if field.blank %}COLOR="#7B7B7B" {% endif %}FACE="Helvetica {% if field.abstract %}Italic{% else %}Bold{% endif %}">{{ field.type }}</FONT
-        ></TD></TR>
-        {% endfor %}
-    {% endif %}
-    </TABLE>
-    >]
-  {% endfor %}
-
-{% if use_subgraph %}
-}
-{% endif %}
-"""
-
-rel_template = """
-  {% for model in models %}
-    {% for relation in model.relations %}
-    {% if relation.needs_node %}
-    {{ relation.target_app }}_{{ relation.target }} [label=<
-        <TABLE BGCOLOR="palegoldenrod" BORDER="0" CELLBORDER="0" CELLSPACING="0">
-        <TR><TD COLSPAN="2" CELLPADDING="4" ALIGN="CENTER" BGCOLOR="olivedrab4"
-        ><FONT FACE="Helvetica Bold" COLOR="white"
-        >{{ relation.target }}</FONT></TD></TR>
-        </TABLE>
-        >]
-    {% endif %}
-    {{ model.app_name }}_{{ model.name }} -> {{ relation.target_app }}_{{ relation.target }}
-    [label="{{ relation.name }}"] {{ relation.arrows }};
-    {% endfor %}
-  {% endfor %}
-"""
-
-tail_template = """
-}
-"""
-
-def generate_dot(app_labels, **kwargs):
-    disable_fields = kwargs.get('disable_fields', False)
-    include_models = kwargs.get('include_models', [])
-    all_applications = kwargs.get('all_applications', False)
-    use_subgraph = kwargs.get('group_models', False)
-
-    dot = head_template
-
-    apps = []
-    if all_applications:
-        apps = models.get_apps()
-
-    for app_label in app_labels:
-        app = models.get_app(app_label)
-        if not app in apps:
-            apps.append(app)
-
-    graphs = []
-    for app in apps:
-        graph = Context({
-            'name': '"%s"' % app.__name__,
-            'app_name': "%s" % '.'.join(app.__name__.split('.')[:-1]),
-            'cluster_app_name': "cluster_%s" % app.__name__.replace(".", "_"),
-            'disable_fields': disable_fields,
-            'use_subgraph': use_subgraph,
-            'models': []
-        })
-
-        for appmodel in get_models(app):
-            abstracts = [e.__name__ for e in appmodel.__bases__ if hasattr(e, '_meta') and e._meta.abstract]
-            abstract_fields = []
-            for e in appmodel.__bases__:
-                if hasattr(e, '_meta') and e._meta.abstract:
-                    abstract_fields.extend(e._meta.fields)
-            model = {
-                'app_name': appmodel.__module__.replace(".", "_"),
-                'name': appmodel.__name__,
-                'abstracts': abstracts,
-                'fields': [],
-                'relations': []
-            }
-
-            # consider given model name ?
-            def consider(model_name):
-                return not include_models or model_name in include_models
-
-            if not consider(appmodel._meta.object_name):
-                continue
-
-            # model attributes
-            def add_attributes(field):
-                model['fields'].append({
-                    'name': field.name,
-                    'type': type(field).__name__,
-                    'blank': field.blank,
-                    'abstract': field in abstract_fields,
-                })
-
-            for field in appmodel._meta.fields:
-                add_attributes(field)
-
-            if appmodel._meta.many_to_many:
-                for field in appmodel._meta.many_to_many:
-                    add_attributes(field)
-
-            # relations
-            def add_relation(field, extras=""):
-                _rel = {
-                    'target_app': field.rel.to.__module__.replace('.','_'),
-                    'target': field.rel.to.__name__,
-                    'type': type(field).__name__,
-                    'name': field.name,
-                    'arrows': extras,
-                    'needs_node': True
-                }
-                if _rel not in model['relations'] and consider(_rel['target']):
-                    model['relations'].append(_rel)
-
-            for field in appmodel._meta.fields:
-                if isinstance(field, ForeignKey):
-                    add_relation(field)
-                elif isinstance(field, OneToOneField):
-                    add_relation(field, '[arrowhead=none arrowtail=none]')
-
-            if appmodel._meta.many_to_many:
-                for field in appmodel._meta.many_to_many:
-                    if isinstance(field, ManyToManyField) and getattr(field, 'creates_table', False):
-                        add_relation(field, '[arrowhead=normal arrowtail=normal]')
-                    elif isinstance(field, GenericRelation):
-                        add_relation(field, mark_safe('[style="dotted"] [arrowhead=normal arrowtail=normal]'))
-            graph['models'].append(model)
-        graphs.append(graph)
-
-    nodes = []
-    for graph in graphs:
-        nodes.extend([e['name'] for e in graph['models']])
-
-    for graph in graphs:
-        # don't draw duplication nodes because of relations
-        for model in graph['models']:
-            for relation in model['relations']:
-                if relation['target'] in nodes:
-                    relation['needs_node'] = False
-        # render templates
-        t = Template(body_template)
-        dot += '\n' + t.render(graph)
-
-    for graph in graphs:
-        t = Template(rel_template)
-        dot += '\n' + t.render(graph)
-
-    dot += '\n' + tail_template
-    return dot
-
-def main():
-    try:
-        opts, args = getopt.getopt(sys.argv[1:], "hadgi:",
-                    ["help", "all_applications", "disable_fields", "group_models", "include_models="])
-    except getopt.GetoptError, error:
-        print __doc__
-        sys.exit(error)
-    
-    kwargs = {}
-    for opt, arg in opts:
-        if opt in ("-h", "--help"):
-            print __doc__
-            sys.exit()
-        if opt in ("-a", "--all_applications"):
-            kwargs['all_applications'] = True
-        if opt in ("-d", "--disable_fields"):
-            kwargs['disable_fields'] = True
-        if opt in ("-g", "--group_models"):
-            kwargs['group_models'] = True
-        if opt in ("-i", "--include_models"):
-            kwargs['include_models'] = arg.split(',')
-
-    if not args and not kwargs.get('all_applications', False):
-        print __doc__
-        sys.exit()
-
-    print generate_dot(args, **kwargs)
-
-if __name__ == "__main__":
-    main()
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/signals.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/signals.py
deleted file mode 100644
index 40f3cbf..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/signals.py
+++ /dev/null
@@ -1,10 +0,0 @@
-"""
-signals we use to trigger regular batch jobs
-"""
-from django.dispatch import Signal
-
-run_hourly_jobs = Signal()
-run_daily_jobs = Signal()
-run_weekly_jobs = Signal()
-run_monthly_jobs = Signal()
-run_yearly_jobs = Signal()
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/utils.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/utils.py
deleted file mode 100644
index c757988..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/management/utils.py
+++ /dev/null
@@ -1,7 +0,0 @@
-from django.conf import settings
-import os
-
-def get_project_root():
-    """ get the project root directory """
-    settings_mod = __import__(settings.SETTINGS_MODULE, {}, {}, [''])
-    return os.path.dirname(os.path.abspath(settings_mod.__file__))
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/css/jquery.autocomplete.css b/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/css/jquery.autocomplete.css
deleted file mode 100644
index 27a5852..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/css/jquery.autocomplete.css
+++ /dev/null
@@ -1,43 +0,0 @@
-/*****************************************************************************
- * jQuery autocomplete
- ****************************************************************************/
-.ac_results {
-    padding: 0px;
-    border: 1px solid #ccc;
-    background-color: #fff;
-    overflow: hidden;
-    z-index: 99999;
-    text-align: left;
-}
-
-.ac_results ul {
-    width: 100%;
-    list-style-position: outside;
-    list-style: none;
-    padding: 0;
-    margin: 0;
-}
-
-.ac_results li {
-    margin: 0px;
-    padding: 3px 5px;
-    cursor: default;
-    display: block;
-    font: menu;
-    font-size: 12px;
-    line-height: 14px;
-    overflow: hidden;
-}
-
-.ac_loading {
-    background: white url('../img/indicator.gif') right center no-repeat;
-}
-
-.ac_odd {
-    background-color: #eee;
-}
-
-.ac_over {
-    background-color: #999;
-    color: white;
-}
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/img/indicator.gif b/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/img/indicator.gif
deleted file mode 100644
index 085ccaecaf5fa5c34bc14cd2c2ed5cbbd8e25dcb..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1553
zcma)+TTl~c6vwlh>n<VLV61^sn`|N^0W=V(@iI19!X;{*a0v}4n9#t)qE(cNZLw}P
zBrK?LQM6z?S|c(6DW=#WqtgyaK&kac#nC!4BieSLI*ymt;!A1Ljt{60JulzOch2ve
z|9Adhjv-sK$coSq+8~WKJw5&4!Gp1}u`_4Rbai#LwY8BXSzB9MSy^c^ne=+STCGM=
zR3H%01hjC3??;aR9g^v&Rau1vnL1-u+I$rq2q#LOF_`QyJvmY&(guxLE0$qEqwH57
z21*&1rPOix(v`P|1KqGX6!OzM^uQ4ETdu6EuSGj4nxc$0+~1FySgw;sDf5!mMXXtJ
z_@XnE+69Z^;Ek6TFIK@@Sz3@Gt4mgcQFI0qB-Tm+h>b99Af5rT)t{mCEg5urg=A(g
z{C|6SPb~9Xage|wB`SrZk2FOMYM!buln2sX?5Y+T78iB(Zu9cS7|LZyZ++}u$^oi1
z_j@S}bW9OzU2R+RMy&~OT>X-oZ98$jq#ogNfJ!BM-42wHGZk*6s2KD}U*IA%epmxb
zm}|6BK9YoIF;*xSL!+z@<64lB7->LTW2Vi4ostCA(z&2XniwNIv}fFo-`MbG;)u4G
z^p@F!)|9HhZprHd_vXjDoxs6WkK-6P0@lfxnGT>*p(QHoUV=u1FAqb@b%*W<w2f#2
z9Zq52LnoAPWxjqFa17&!lIJ3lEbmY7(n(&LWmufC*Do^9<}hNtBbx^HGRL7u_650L
z@3YLm0&zR;*(vvhKl4$5URv-j9V^8@CER$E{3R?ej5S0wuBLpg<mFJu{hL^H^4t$r
zU$OthrOpL^Q8IHH&%vf!%?Er#xip35=vO%xYnERtD;U+bp7xwgQR+AR*m0vBC}cFa
zUb#)xk?JZ+E=0W5WCO)wSBa>=a3{`LsH5k^AvQNL>6fPpy#oU(&MuH(*aEX4b35*}
zn4n7)`I2U%=+Z=?BVZQ?<pD1q+$vd%8uP#+pdy-Ij6|<fF!&{iWt)`CPgH-zuTvcI
zyfkA(+Q@rSV#=o>vjQFW4gD@~XSOO6b{qu81`4&LFuU2(ilxW+1|ZkNMnWe79C$gs
zWT?Ele|HR{JGPe)5BTW>0Ey<DIvb)X7FdCg3kq-^KY>?-Ls6S#GoV0tbt6ku7B&*0
z;i9QM$W1Rj*rRIdceL)rAOSl+sDe3LkB87<%){;ZdHp6|SNl<OIeBfYJ^OGoVC|jD
zcj|NrO0)Z%BOuq3YT)!JC)v;7%cHj=+`Ob^2$Vkq`P{n^zZen9w+$o2yd>opDXRx<
zxBDF9-lTo&v`8$humFygUij@qgT=Qzhj8{ym2-{Xciwqq_Xwk%=O3B-MNAL_6e`3U
zyxwmXex4`g0^1RYw~Dth3av3Dl^AAlpO3mG!nLr#&ZZ7c_wUboI+deC+&%TFjK2Lm
z!Y&f1h|T_On%RCV&=4bx`!>(YezqGVhl&QpED?N6GV)HmzJ9&rh$x*i?*@o9#6QI<
z5ZI_MR<T&BR{~4JK$);*Lc}>X;0+p<?a4bIc*y(Xi3cp5d?^0LhPu<3u^J|nbF?~l
z5p;s4bEF-J@g5$=A7ZajUFdkSSl>Y8$`j)eF#TlUyG(eE%E7S!rj;mj^M5vhUicPm
zVWQ2z+imFyg}SRABmOBY_@osR!>7Ov!ioK`NB6_Rv}7Ud?35ed5Sb@?yND?kv~RCa
wqs^a3Sh>&&L4)!LKI?D2&k@))k(LESaga|C278ChSzn3NWVkcuNoY&{0f?~U_5c6?

diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.autocomplete.js b/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.autocomplete.js
deleted file mode 100644
index 5ad9178..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.autocomplete.js
+++ /dev/null
@@ -1,759 +0,0 @@
-/*
- * Autocomplete - jQuery plugin 1.0.2
- *
- * Copyright (c) 2007 Dylan Verheul, Dan G. Switzer, Anjesh Tuladhar, Jörn Zaefferer
- *
- * Dual licensed under the MIT and GPL licenses:
- *   http://www.opensource.org/licenses/mit-license.php
- *   http://www.gnu.org/licenses/gpl.html
- *
- * Revision: $Id: jquery.autocomplete.js 5747 2008-06-25 18:30:55Z joern.zaefferer $
- *
- */
-
-;(function($) {
-	
-$.fn.extend({
-	autocomplete: function(urlOrData, options) {
-		var isUrl = typeof urlOrData == "string";
-		options = $.extend({}, $.Autocompleter.defaults, {
-			url: isUrl ? urlOrData : null,
-			data: isUrl ? null : urlOrData,
-			delay: isUrl ? $.Autocompleter.defaults.delay : 10,
-			max: options && !options.scroll ? 10 : 150
-		}, options);
-		
-		// if highlight is set to false, replace it with a do-nothing function
-		options.highlight = options.highlight || function(value) { return value; };
-		
-		// if the formatMatch option is not specified, then use formatItem for backwards compatibility
-		options.formatMatch = options.formatMatch || options.formatItem;
-		
-		return this.each(function() {
-			new $.Autocompleter(this, options);
-		});
-	},
-	result: function(handler) {
-		return this.bind("result", handler);
-	},
-	search: function(handler) {
-		return this.trigger("search", [handler]);
-	},
-	flushCache: function() {
-		return this.trigger("flushCache");
-	},
-	setOptions: function(options){
-		return this.trigger("setOptions", [options]);
-	},
-	unautocomplete: function() {
-		return this.trigger("unautocomplete");
-	}
-});
-
-$.Autocompleter = function(input, options) {
-
-	var KEY = {
-		UP: 38,
-		DOWN: 40,
-		DEL: 46,
-		TAB: 9,
-		RETURN: 13,
-		ESC: 27,
-		COMMA: 188,
-		PAGEUP: 33,
-		PAGEDOWN: 34,
-		BACKSPACE: 8
-	};
-
-	// Create $ object for input element
-	var $input = $(input).attr("autocomplete", "off").addClass(options.inputClass);
-
-	var timeout;
-	var previousValue = "";
-	var cache = $.Autocompleter.Cache(options);
-	var hasFocus = 0;
-	var lastKeyPressCode;
-	var config = {
-		mouseDownOnSelect: false
-	};
-	var select = $.Autocompleter.Select(options, input, selectCurrent, config);
-	
-	var blockSubmit;
-	
-	// prevent form submit in opera when selecting with return key
-	$.browser.opera && $(input.form).bind("submit.autocomplete", function() {
-		if (blockSubmit) {
-			blockSubmit = false;
-			return false;
-		}
-	});
-	
-	// only opera doesn't trigger keydown multiple times while pressed, others don't work with keypress at all
-	$input.bind(($.browser.opera ? "keypress" : "keydown") + ".autocomplete", function(event) {
-		// track last key pressed
-		lastKeyPressCode = event.keyCode;
-		switch(event.keyCode) {
-		
-			case KEY.UP:
-				event.preventDefault();
-				if ( select.visible() ) {
-					select.prev();
-				} else {
-					onChange(0, true);
-				}
-				break;
-				
-			case KEY.DOWN:
-				event.preventDefault();
-				if ( select.visible() ) {
-					select.next();
-				} else {
-					onChange(0, true);
-				}
-				break;
-				
-			case KEY.PAGEUP:
-				event.preventDefault();
-				if ( select.visible() ) {
-					select.pageUp();
-				} else {
-					onChange(0, true);
-				}
-				break;
-				
-			case KEY.PAGEDOWN:
-				event.preventDefault();
-				if ( select.visible() ) {
-					select.pageDown();
-				} else {
-					onChange(0, true);
-				}
-				break;
-			
-			// matches also semicolon
-			case options.multiple && $.trim(options.multipleSeparator) == "," && KEY.COMMA:
-			case KEY.TAB:
-			case KEY.RETURN:
-				if( selectCurrent() ) {
-					// stop default to prevent a form submit, Opera needs special handling
-					event.preventDefault();
-					blockSubmit = true;
-					return false;
-				}
-				break;
-				
-			case KEY.ESC:
-				select.hide();
-				break;
-				
-			default:
-				clearTimeout(timeout);
-				timeout = setTimeout(onChange, options.delay);
-				break;
-		}
-	}).focus(function(){
-		// track whether the field has focus, we shouldn't process any
-		// results if the field no longer has focus
-		hasFocus++;
-	}).blur(function() {
-		hasFocus = 0;
-		if (!config.mouseDownOnSelect) {
-			hideResults();
-		}
-	}).click(function() {
-		// show select when clicking in a focused field
-		if ( hasFocus++ > 1 && !select.visible() ) {
-			onChange(0, true);
-		}
-	}).bind("search", function() {
-		// TODO why not just specifying both arguments?
-		var fn = (arguments.length > 1) ? arguments[1] : null;
-		function findValueCallback(q, data) {
-			var result;
-			if( data && data.length ) {
-				for (var i=0; i < data.length; i++) {
-					if( data[i].result.toLowerCase() == q.toLowerCase() ) {
-						result = data[i];
-						break;
-					}
-				}
-			}
-			if( typeof fn == "function" ) fn(result);
-			else $input.trigger("result", result && [result.data, result.value]);
-		}
-		$.each(trimWords($input.val()), function(i, value) {
-			request(value, findValueCallback, findValueCallback);
-		});
-	}).bind("flushCache", function() {
-		cache.flush();
-	}).bind("setOptions", function() {
-		$.extend(options, arguments[1]);
-		// if we've updated the data, repopulate
-		if ( "data" in arguments[1] )
-			cache.populate();
-	}).bind("unautocomplete", function() {
-		select.unbind();
-		$input.unbind();
-		$(input.form).unbind(".autocomplete");
-	});
-	
-	
-	function selectCurrent() {
-		var selected = select.selected();
-		if( !selected )
-			return false;
-		
-		var v = selected.result;
-		previousValue = v;
-		
-		if ( options.multiple ) {
-			var words = trimWords($input.val());
-			if ( words.length > 1 ) {
-				v = words.slice(0, words.length - 1).join( options.multipleSeparator ) + options.multipleSeparator + v;
-			}
-			v += options.multipleSeparator;
-		}
-		
-		$input.val(v);
-		hideResultsNow();
-		$input.trigger("result", [selected.data, selected.value]);
-		return true;
-	}
-	
-	function onChange(crap, skipPrevCheck) {
-		if( lastKeyPressCode == KEY.DEL ) {
-			select.hide();
-			return;
-		}
-		
-		var currentValue = $input.val();
-		
-		if ( !skipPrevCheck && currentValue == previousValue )
-			return;
-		
-		previousValue = currentValue;
-		
-		currentValue = lastWord(currentValue);
-		if ( currentValue.length >= options.minChars) {
-			$input.addClass(options.loadingClass);
-			if (!options.matchCase)
-				currentValue = currentValue.toLowerCase();
-			request(currentValue, receiveData, hideResultsNow);
-		} else {
-			stopLoading();
-			select.hide();
-		}
-	};
-	
-	function trimWords(value) {
-		if ( !value ) {
-			return [""];
-		}
-		var words = value.split( options.multipleSeparator );
-		var result = [];
-		$.each(words, function(i, value) {
-			if ( $.trim(value) )
-				result[i] = $.trim(value);
-		});
-		return result;
-	}
-	
-	function lastWord(value) {
-		if ( !options.multiple )
-			return value;
-		var words = trimWords(value);
-		return words[words.length - 1];
-	}
-	
-	// fills in the input box w/the first match (assumed to be the best match)
-	// q: the term entered
-	// sValue: the first matching result
-	function autoFill(q, sValue){
-		// autofill in the complete box w/the first match as long as the user hasn't entered in more data
-		// if the last user key pressed was backspace, don't autofill
-		if( options.autoFill && (lastWord($input.val()).toLowerCase() == q.toLowerCase()) && lastKeyPressCode != KEY.BACKSPACE ) {
-			// fill in the value (keep the case the user has typed)
-			$input.val($input.val() + sValue.substring(lastWord(previousValue).length));
-			// select the portion of the value not typed by the user (so the next character will erase)
-			$.Autocompleter.Selection(input, previousValue.length, previousValue.length + sValue.length);
-		}
-	};
-
-	function hideResults() {
-		clearTimeout(timeout);
-		timeout = setTimeout(hideResultsNow, 200);
-	};
-
-	function hideResultsNow() {
-		var wasVisible = select.visible();
-		select.hide();
-		clearTimeout(timeout);
-		stopLoading();
-		if (options.mustMatch) {
-			// call search and run callback
-			$input.search(
-				function (result){
-					// if no value found, clear the input box
-					if( !result ) {
-						if (options.multiple) {
-							var words = trimWords($input.val()).slice(0, -1);
-							$input.val( words.join(options.multipleSeparator) + (words.length ? options.multipleSeparator : "") );
-						}
-						else
-							$input.val( "" );
-					}
-				}
-			);
-		}
-		if (wasVisible)
-			// position cursor at end of input field
-			$.Autocompleter.Selection(input, input.value.length, input.value.length);
-	};
-
-	function receiveData(q, data) {
-		if ( data && data.length && hasFocus ) {
-			stopLoading();
-			select.display(data, q);
-			autoFill(q, data[0].value);
-			select.show();
-		} else {
-			hideResultsNow();
-		}
-	};
-
-	function request(term, success, failure) {
-		if (!options.matchCase)
-			term = term.toLowerCase();
-		var data = cache.load(term);
-		// recieve the cached data
-		if (data && data.length) {
-			success(term, data);
-		// if an AJAX url has been supplied, try loading the data now
-		} else if( (typeof options.url == "string") && (options.url.length > 0) ){
-			
-			var extraParams = {
-				timestamp: +new Date()
-			};
-			$.each(options.extraParams, function(key, param) {
-				extraParams[key] = typeof param == "function" ? param() : param;
-			});
-			
-			$.ajax({
-				// try to leverage ajaxQueue plugin to abort previous requests
-				mode: "abort",
-				// limit abortion to this input
-				port: "autocomplete" + input.name,
-				dataType: options.dataType,
-				url: options.url,
-				data: $.extend({
-					q: lastWord(term),
-					limit: options.max
-				}, extraParams),
-				success: function(data) {
-					var parsed = options.parse && options.parse(data) || parse(data);
-					cache.add(term, parsed);
-					success(term, parsed);
-				}
-			});
-		} else {
-			// if we have a failure, we need to empty the list -- this prevents the the [TAB] key from selecting the last successful match
-			select.emptyList();
-			failure(term);
-		}
-	};
-	
-	function parse(data) {
-		var parsed = [];
-		var rows = data.split("\n");
-		for (var i=0; i < rows.length; i++) {
-			var row = $.trim(rows[i]);
-			if (row) {
-				row = row.split("|");
-				parsed[parsed.length] = {
-					data: row,
-					value: row[0],
-					result: options.formatResult && options.formatResult(row, row[0]) || row[0]
-				};
-			}
-		}
-		return parsed;
-	};
-
-	function stopLoading() {
-		$input.removeClass(options.loadingClass);
-	};
-
-};
-
-$.Autocompleter.defaults = {
-	inputClass: "ac_input",
-	resultsClass: "ac_results",
-	loadingClass: "ac_loading",
-	minChars: 1,
-	delay: 400,
-	matchCase: false,
-	matchSubset: true,
-	matchContains: false,
-	cacheLength: 10,
-	max: 100,
-	mustMatch: false,
-	extraParams: {},
-	selectFirst: true,
-	formatItem: function(row) { return row[0]; },
-	formatMatch: null,
-	autoFill: false,
-	width: 0,
-	multiple: false,
-	multipleSeparator: ", ",
-	highlight: function(value, term) {
-		return value.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1") + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");
-	},
-    scroll: true,
-    scrollHeight: 180
-};
-
-$.Autocompleter.Cache = function(options) {
-
-	var data = {};
-	var length = 0;
-	
-	function matchSubset(s, sub) {
-		if (!options.matchCase) 
-			s = s.toLowerCase();
-		var i = s.indexOf(sub);
-		if (i == -1) return false;
-		return i == 0 || options.matchContains;
-	};
-	
-	function add(q, value) {
-		if (length > options.cacheLength){
-			flush();
-		}
-		if (!data[q]){ 
-			length++;
-		}
-		data[q] = value;
-	}
-	
-	function populate(){
-		if( !options.data ) return false;
-		// track the matches
-		var stMatchSets = {},
-			nullData = 0;
-
-		// no url was specified, we need to adjust the cache length to make sure it fits the local data store
-		if( !options.url ) options.cacheLength = 1;
-		
-		// track all options for minChars = 0
-		stMatchSets[""] = [];
-		
-		// loop through the array and create a lookup structure
-		for ( var i = 0, ol = options.data.length; i < ol; i++ ) {
-			var rawValue = options.data[i];
-			// if rawValue is a string, make an array otherwise just reference the array
-			rawValue = (typeof rawValue == "string") ? [rawValue] : rawValue;
-			
-			var value = options.formatMatch(rawValue, i+1, options.data.length);
-			if ( value === false )
-				continue;
-				
-			var firstChar = value.charAt(0).toLowerCase();
-			// if no lookup array for this character exists, look it up now
-			if( !stMatchSets[firstChar] ) 
-				stMatchSets[firstChar] = [];
-
-			// if the match is a string
-			var row = {
-				value: value,
-				data: rawValue,
-				result: options.formatResult && options.formatResult(rawValue) || value
-			};
-			
-			// push the current match into the set list
-			stMatchSets[firstChar].push(row);
-
-			// keep track of minChars zero items
-			if ( nullData++ < options.max ) {
-				stMatchSets[""].push(row);
-			}
-		};
-
-		// add the data items to the cache
-		$.each(stMatchSets, function(i, value) {
-			// increase the cache size
-			options.cacheLength++;
-			// add to the cache
-			add(i, value);
-		});
-	}
-	
-	// populate any existing data
-	setTimeout(populate, 25);
-	
-	function flush(){
-		data = {};
-		length = 0;
-	}
-	
-	return {
-		flush: flush,
-		add: add,
-		populate: populate,
-		load: function(q) {
-			if (!options.cacheLength || !length)
-				return null;
-			/* 
-			 * if dealing w/local data and matchContains than we must make sure
-			 * to loop through all the data collections looking for matches
-			 */
-			if( !options.url && options.matchContains ){
-				// track all matches
-				var csub = [];
-				// loop through all the data grids for matches
-				for( var k in data ){
-					// don't search through the stMatchSets[""] (minChars: 0) cache
-					// this prevents duplicates
-					if( k.length > 0 ){
-						var c = data[k];
-						$.each(c, function(i, x) {
-							// if we've got a match, add it to the array
-							if (matchSubset(x.value, q)) {
-								csub.push(x);
-							}
-						});
-					}
-				}				
-				return csub;
-			} else 
-			// if the exact item exists, use it
-			if (data[q]){
-				return data[q];
-			} else
-			if (options.matchSubset) {
-				for (var i = q.length - 1; i >= options.minChars; i--) {
-					var c = data[q.substr(0, i)];
-					if (c) {
-						var csub = [];
-						$.each(c, function(i, x) {
-							if (matchSubset(x.value, q)) {
-								csub[csub.length] = x;
-							}
-						});
-						return csub;
-					}
-				}
-			}
-			return null;
-		}
-	};
-};
-
-$.Autocompleter.Select = function (options, input, select, config) {
-	var CLASSES = {
-		ACTIVE: "ac_over"
-	};
-	
-	var listItems,
-		active = -1,
-		data,
-		term = "",
-		needsInit = true,
-		element,
-		list;
-	
-	// Create results
-	function init() {
-		if (!needsInit)
-			return;
-		element = $("<div/>")
-		.hide()
-		.addClass(options.resultsClass)
-		.css("position", "absolute")
-		.appendTo(document.body);
-	
-		list = $("<ul/>").appendTo(element).mouseover( function(event) {
-			if(target(event).nodeName && target(event).nodeName.toUpperCase() == 'LI') {
-	            active = $("li", list).removeClass(CLASSES.ACTIVE).index(target(event));
-			    $(target(event)).addClass(CLASSES.ACTIVE);            
-	        }
-		}).click(function(event) {
-			$(target(event)).addClass(CLASSES.ACTIVE);
-			select();
-			// TODO provide option to avoid setting focus again after selection? useful for cleanup-on-focus
-			input.focus();
-			return false;
-		}).mousedown(function() {
-			config.mouseDownOnSelect = true;
-		}).mouseup(function() {
-			config.mouseDownOnSelect = false;
-		});
-		
-		if( options.width > 0 )
-			element.css("width", options.width);
-			
-		needsInit = false;
-	} 
-	
-	function target(event) {
-		var element = event.target;
-		while(element && element.tagName != "LI")
-			element = element.parentNode;
-		// more fun with IE, sometimes event.target is empty, just ignore it then
-		if(!element)
-			return [];
-		return element;
-	}
-
-	function moveSelect(step) {
-		listItems.slice(active, active + 1).removeClass(CLASSES.ACTIVE);
-		movePosition(step);
-        var activeItem = listItems.slice(active, active + 1).addClass(CLASSES.ACTIVE);
-        if(options.scroll) {
-            var offset = 0;
-            listItems.slice(0, active).each(function() {
-				offset += this.offsetHeight;
-			});
-            if((offset + activeItem[0].offsetHeight - list.scrollTop()) > list[0].clientHeight) {
-                list.scrollTop(offset + activeItem[0].offsetHeight - list.innerHeight());
-            } else if(offset < list.scrollTop()) {
-                list.scrollTop(offset);
-            }
-        }
-	};
-	
-	function movePosition(step) {
-		active += step;
-		if (active < 0) {
-			active = listItems.size() - 1;
-		} else if (active >= listItems.size()) {
-			active = 0;
-		}
-	}
-	
-	function limitNumberOfItems(available) {
-		return options.max && options.max < available
-			? options.max
-			: available;
-	}
-	
-	function fillList() {
-		list.empty();
-		var max = limitNumberOfItems(data.length);
-		for (var i=0; i < max; i++) {
-			if (!data[i])
-				continue;
-			var formatted = options.formatItem(data[i].data, i+1, max, data[i].value, term);
-			if ( formatted === false )
-				continue;
-			var li = $("<li/>").html( options.highlight(formatted, term) ).addClass(i%2 == 0 ? "ac_even" : "ac_odd").appendTo(list)[0];
-			$.data(li, "ac_data", data[i]);
-		}
-		listItems = list.find("li");
-		if ( options.selectFirst ) {
-			listItems.slice(0, 1).addClass(CLASSES.ACTIVE);
-			active = 0;
-		}
-		// apply bgiframe if available
-		if ( $.fn.bgiframe )
-			list.bgiframe();
-	}
-	
-	return {
-		display: function(d, q) {
-			init();
-			data = d;
-			term = q;
-			fillList();
-		},
-		next: function() {
-			moveSelect(1);
-		},
-		prev: function() {
-			moveSelect(-1);
-		},
-		pageUp: function() {
-			if (active != 0 && active - 8 < 0) {
-				moveSelect( -active );
-			} else {
-				moveSelect(-8);
-			}
-		},
-		pageDown: function() {
-			if (active != listItems.size() - 1 && active + 8 > listItems.size()) {
-				moveSelect( listItems.size() - 1 - active );
-			} else {
-				moveSelect(8);
-			}
-		},
-		hide: function() {
-			element && element.hide();
-			listItems && listItems.removeClass(CLASSES.ACTIVE);
-			active = -1;
-		},
-		visible : function() {
-			return element && element.is(":visible");
-		},
-		current: function() {
-			return this.visible() && (listItems.filter("." + CLASSES.ACTIVE)[0] || options.selectFirst && listItems[0]);
-		},
-		show: function() {
-			var offset = $(input).offset();
-			element.css({
-				width: typeof options.width == "string" || options.width > 0 ? options.width : $(input).width(),
-				top: offset.top + input.offsetHeight,
-				left: offset.left
-			}).show();
-            if(options.scroll) {
-                list.scrollTop(0);
-                list.css({
-					maxHeight: options.scrollHeight,
-					overflow: 'auto'
-				});
-				
-                if($.browser.msie && typeof document.body.style.maxHeight === "undefined") {
-					var listHeight = 0;
-					listItems.each(function() {
-						listHeight += this.offsetHeight;
-					});
-					var scrollbarsVisible = listHeight > options.scrollHeight;
-                    list.css('height', scrollbarsVisible ? options.scrollHeight : listHeight );
-					if (!scrollbarsVisible) {
-						// IE doesn't recalculate width when scrollbar disappears
-						listItems.width( list.width() - parseInt(listItems.css("padding-left")) - parseInt(listItems.css("padding-right")) );
-					}
-                }
-                
-            }
-		},
-		selected: function() {
-			var selected = listItems && listItems.filter("." + CLASSES.ACTIVE).removeClass(CLASSES.ACTIVE);
-			return selected && selected.length && $.data(selected[0], "ac_data");
-		},
-		emptyList: function (){
-			list && list.empty();
-		},
-		unbind: function() {
-			element && element.remove();
-		}
-	};
-};
-
-$.Autocompleter.Selection = function(field, start, end) {
-	if( field.createTextRange ){
-		var selRange = field.createTextRange();
-		selRange.collapse(true);
-		selRange.moveStart("character", start);
-		selRange.moveEnd("character", end);
-		selRange.select();
-	} else if( field.setSelectionRange ){
-		field.setSelectionRange(start, end);
-	} else {
-		if( field.selectionStart ){
-			field.selectionStart = start;
-			field.selectionEnd = end;
-		}
-	}
-	field.focus();
-};
-
-})(jQuery);
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.bgiframe.min.js b/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.bgiframe.min.js
deleted file mode 100644
index 7faef4b..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.bgiframe.min.js
+++ /dev/null
@@ -1,10 +0,0 @@
-/* Copyright (c) 2006 Brandon Aaron (http://brandonaaron.net)
- * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) 
- * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
- *
- * $LastChangedDate: 2007-07-22 01:45:56 +0200 (Son, 22 Jul 2007) $
- * $Rev: 2447 $
- *
- * Version 2.1.1
- */
-(function($){$.fn.bgIframe=$.fn.bgiframe=function(s){if($.browser.msie&&/6.0/.test(navigator.userAgent)){s=$.extend({top:'auto',left:'auto',width:'auto',height:'auto',opacity:true,src:'javascript:false;'},s||{});var prop=function(n){return n&&n.constructor==Number?n+'px':n;},html='<iframe class="bgiframe"frameborder="0"tabindex="-1"src="'+s.src+'"'+'style="display:block;position:absolute;z-index:-1;'+(s.opacity!==false?'filter:Alpha(Opacity=\'0\');':'')+'top:'+(s.top=='auto'?'expression(((parseInt(this.parentNode.currentStyle.borderTopWidth)||0)*-1)+\'px\')':prop(s.top))+';'+'left:'+(s.left=='auto'?'expression(((parseInt(this.parentNode.currentStyle.borderLeftWidth)||0)*-1)+\'px\')':prop(s.left))+';'+'width:'+(s.width=='auto'?'expression(this.parentNode.offsetWidth+\'px\')':prop(s.width))+';'+'height:'+(s.height=='auto'?'expression(this.parentNode.offsetHeight+\'px\')':prop(s.height))+';'+'"/>';return this.each(function(){if($('> iframe.bgiframe',this).length==0)this.insertBefore(document.createElement(html),this.firstChild);});}return this;};})(jQuery);
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.js b/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.js
deleted file mode 100644
index 400531a..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/media/django_extensions/js/jquery.js
+++ /dev/null
@@ -1,3558 +0,0 @@
-(function(){
-/*
- * jQuery 1.2.6 - New Wave Javascript
- *
- * Copyright (c) 2008 John Resig (jquery.com)
- * Dual licensed under the MIT (MIT-LICENSE.txt)
- * and GPL (GPL-LICENSE.txt) licenses.
- *
- * $Date: 2008-05-27 21:17:26 +0200 (Di, 27 Mai 2008) $
- * $Rev: 5700 $
- */
-
-// Map over jQuery in case of overwrite
-var _jQuery = window.jQuery,
-// Map over the $ in case of overwrite
-	_$ = window.$;
-
-var jQuery = window.jQuery = window.$ = function( selector, context ) {
-	// The jQuery object is actually just the init constructor 'enhanced'
-	return new jQuery.fn.init( selector, context );
-};
-
-// A simple way to check for HTML strings or ID strings
-// (both of which we optimize for)
-var quickExpr = /^[^<]*(<(.|\s)+>)[^>]*$|^#(\w+)$/,
-
-// Is it a simple selector
-	isSimple = /^.[^:#\[\.]*$/,
-
-// Will speed up references to undefined, and allows munging its name.
-	undefined;
-
-jQuery.fn = jQuery.prototype = {
-	init: function( selector, context ) {
-		// Make sure that a selection was provided
-		selector = selector || document;
-
-		// Handle $(DOMElement)
-		if ( selector.nodeType ) {
-			this[0] = selector;
-			this.length = 1;
-			return this;
-		}
-		// Handle HTML strings
-		if ( typeof selector == "string" ) {
-			// Are we dealing with HTML string or an ID?
-			var match = quickExpr.exec( selector );
-
-			// Verify a match, and that no context was specified for #id
-			if ( match && (match[1] || !context) ) {
-
-				// HANDLE: $(html) -> $(array)
-				if ( match[1] )
-					selector = jQuery.clean( [ match[1] ], context );
-
-				// HANDLE: $("#id")
-				else {
-					var elem = document.getElementById( match[3] );
-
-					// Make sure an element was located
-					if ( elem ){
-						// Handle the case where IE and Opera return items
-						// by name instead of ID
-						if ( elem.id != match[3] )
-							return jQuery().find( selector );
-
-						// Otherwise, we inject the element directly into the jQuery object
-						return jQuery( elem );
-					}
-					selector = [];
-				}
-
-			// HANDLE: $(expr, [context])
-			// (which is just equivalent to: $(content).find(expr)
-			} else
-				return jQuery( context ).find( selector );
-
-		// HANDLE: $(function)
-		// Shortcut for document ready
-		} else if ( jQuery.isFunction( selector ) )
-			return jQuery( document )[ jQuery.fn.ready ? "ready" : "load" ]( selector );
-
-		return this.setArray(jQuery.makeArray(selector));
-	},
-
-	// The current version of jQuery being used
-	jquery: "1.2.6",
-
-	// The number of elements contained in the matched element set
-	size: function() {
-		return this.length;
-	},
-
-	// The number of elements contained in the matched element set
-	length: 0,
-
-	// Get the Nth element in the matched element set OR
-	// Get the whole matched element set as a clean array
-	get: function( num ) {
-		return num == undefined ?
-
-			// Return a 'clean' array
-			jQuery.makeArray( this ) :
-
-			// Return just the object
-			this[ num ];
-	},
-
-	// Take an array of elements and push it onto the stack
-	// (returning the new matched element set)
-	pushStack: function( elems ) {
-		// Build a new jQuery matched element set
-		var ret = jQuery( elems );
-
-		// Add the old object onto the stack (as a reference)
-		ret.prevObject = this;
-
-		// Return the newly-formed element set
-		return ret;
-	},
-
-	// Force the current matched set of elements to become
-	// the specified array of elements (destroying the stack in the process)
-	// You should use pushStack() in order to do this, but maintain the stack
-	setArray: function( elems ) {
-		// Resetting the length to 0, then using the native Array push
-		// is a super-fast way to populate an object with array-like properties
-		this.length = 0;
-		Array.prototype.push.apply( this, elems );
-
-		return this;
-	},
-
-	// Execute a callback for every element in the matched set.
-	// (You can seed the arguments with an array of args, but this is
-	// only used internally.)
-	each: function( callback, args ) {
-		return jQuery.each( this, callback, args );
-	},
-
-	// Determine the position of an element within
-	// the matched set of elements
-	index: function( elem ) {
-		var ret = -1;
-
-		// Locate the position of the desired element
-		return jQuery.inArray(
-			// If it receives a jQuery object, the first element is used
-			elem && elem.jquery ? elem[0] : elem
-		, this );
-	},
-
-	attr: function( name, value, type ) {
-		var options = name;
-
-		// Look for the case where we're accessing a style value
-		if ( name.constructor == String )
-			if ( value === undefined )
-				return this[0] && jQuery[ type || "attr" ]( this[0], name );
-
-			else {
-				options = {};
-				options[ name ] = value;
-			}
-
-		// Check to see if we're setting style values
-		return this.each(function(i){
-			// Set all the styles
-			for ( name in options )
-				jQuery.attr(
-					type ?
-						this.style :
-						this,
-					name, jQuery.prop( this, options[ name ], type, i, name )
-				);
-		});
-	},
-
-	css: function( key, value ) {
-		// ignore negative width and height values
-		if ( (key == 'width' || key == 'height') && parseFloat(value) < 0 )
-			value = undefined;
-		return this.attr( key, value, "curCSS" );
-	},
-
-	text: function( text ) {
-		if ( typeof text != "object" && text != null )
-			return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );
-
-		var ret = "";
-
-		jQuery.each( text || this, function(){
-			jQuery.each( this.childNodes, function(){
-				if ( this.nodeType != 8 )
-					ret += this.nodeType != 1 ?
-						this.nodeValue :
-						jQuery.fn.text( [ this ] );
-			});
-		});
-
-		return ret;
-	},
-
-	wrapAll: function( html ) {
-		if ( this[0] )
-			// The elements to wrap the target around
-			jQuery( html, this[0].ownerDocument )
-				.clone()
-				.insertBefore( this[0] )
-				.map(function(){
-					var elem = this;
-
-					while ( elem.firstChild )
-						elem = elem.firstChild;
-
-					return elem;
-				})
-				.append(this);
-
-		return this;
-	},
-
-	wrapInner: function( html ) {
-		return this.each(function(){
-			jQuery( this ).contents().wrapAll( html );
-		});
-	},
-
-	wrap: function( html ) {
-		return this.each(function(){
-			jQuery( this ).wrapAll( html );
-		});
-	},
-
-	append: function() {
-		return this.domManip(arguments, true, false, function(elem){
-			if (this.nodeType == 1)
-				this.appendChild( elem );
-		});
-	},
-
-	prepend: function() {
-		return this.domManip(arguments, true, true, function(elem){
-			if (this.nodeType == 1)
-				this.insertBefore( elem, this.firstChild );
-		});
-	},
-
-	before: function() {
-		return this.domManip(arguments, false, false, function(elem){
-			this.parentNode.insertBefore( elem, this );
-		});
-	},
-
-	after: function() {
-		return this.domManip(arguments, false, true, function(elem){
-			this.parentNode.insertBefore( elem, this.nextSibling );
-		});
-	},
-
-	end: function() {
-		return this.prevObject || jQuery( [] );
-	},
-
-	find: function( selector ) {
-		var elems = jQuery.map(this, function(elem){
-			return jQuery.find( selector, elem );
-		});
-
-		return this.pushStack( /[^+>] [^+>]/.test( selector ) || selector.indexOf("..") > -1 ?
-			jQuery.unique( elems ) :
-			elems );
-	},
-
-	clone: function( events ) {
-		// Do the clone
-		var ret = this.map(function(){
-			if ( jQuery.browser.msie && !jQuery.isXMLDoc(this) ) {
-				// IE copies events bound via attachEvent when
-				// using cloneNode. Calling detachEvent on the
-				// clone will also remove the events from the orignal
-				// In order to get around this, we use innerHTML.
-				// Unfortunately, this means some modifications to
-				// attributes in IE that are actually only stored
-				// as properties will not be copied (such as the
-				// the name attribute on an input).
-				var clone = this.cloneNode(true),
-					container = document.createElement("div");
-				container.appendChild(clone);
-				return jQuery.clean([container.innerHTML])[0];
-			} else
-				return this.cloneNode(true);
-		});
-
-		// Need to set the expando to null on the cloned set if it exists
-		// removeData doesn't work here, IE removes it from the original as well
-		// this is primarily for IE but the data expando shouldn't be copied over in any browser
-		var clone = ret.find("*").andSelf().each(function(){
-			if ( this[ expando ] != undefined )
-				this[ expando ] = null;
-		});
-
-		// Copy the events from the original to the clone
-		if ( events === true )
-			this.find("*").andSelf().each(function(i){
-				if (this.nodeType == 3)
-					return;
-				var events = jQuery.data( this, "events" );
-
-				for ( var type in events )
-					for ( var handler in events[ type ] )
-						jQuery.event.add( clone[ i ], type, events[ type ][ handler ], events[ type ][ handler ].data );
-			});
-
-		// Return the cloned set
-		return ret;
-	},
-
-	filter: function( selector ) {
-		return this.pushStack(
-			jQuery.isFunction( selector ) &&
-			jQuery.grep(this, function(elem, i){
-				return selector.call( elem, i );
-			}) ||
-
-			jQuery.multiFilter( selector, this ) );
-	},
-
-	not: function( selector ) {
-		if ( selector.constructor == String )
-			// test special case where just one selector is passed in
-			if ( isSimple.test( selector ) )
-				return this.pushStack( jQuery.multiFilter( selector, this, true ) );
-			else
-				selector = jQuery.multiFilter( selector, this );
-
-		var isArrayLike = selector.length && selector[selector.length - 1] !== undefined && !selector.nodeType;
-		return this.filter(function() {
-			return isArrayLike ? jQuery.inArray( this, selector ) < 0 : this != selector;
-		});
-	},
-
-	add: function( selector ) {
-		return this.pushStack( jQuery.unique( jQuery.merge(
-			this.get(),
-			typeof selector == 'string' ?
-				jQuery( selector ) :
-				jQuery.makeArray( selector )
-		)));
-	},
-
-	is: function( selector ) {
-		return !!selector && jQuery.multiFilter( selector, this ).length > 0;
-	},
-
-	hasClass: function( selector ) {
-		return this.is( "." + selector );
-	},
-
-	val: function( value ) {
-		if ( value == undefined ) {
-
-			if ( this.length ) {
-				var elem = this[0];
-
-				// We need to handle select boxes special
-				if ( jQuery.nodeName( elem, "select" ) ) {
-					var index = elem.selectedIndex,
-						values = [],
-						options = elem.options,
-						one = elem.type == "select-one";
-
-					// Nothing was selected
-					if ( index < 0 )
-						return null;
-
-					// Loop through all the selected options
-					for ( var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++ ) {
-						var option = options[ i ];
-
-						if ( option.selected ) {
-							// Get the specifc value for the option
-							value = jQuery.browser.msie && !option.attributes.value.specified ? option.text : option.value;
-
-							// We don't need an array for one selects
-							if ( one )
-								return value;
-
-							// Multi-Selects return an array
-							values.push( value );
-						}
-					}
-
-					return values;
-
-				// Everything else, we just grab the value
-				} else
-					return (this[0].value || "").replace(/\r/g, "");
-
-			}
-
-			return undefined;
-		}
-
-		if( value.constructor == Number )
-			value += '';
-
-		return this.each(function(){
-			if ( this.nodeType != 1 )
-				return;
-
-			if ( value.constructor == Array && /radio|checkbox/.test( this.type ) )
-				this.checked = (jQuery.inArray(this.value, value) >= 0 ||
-					jQuery.inArray(this.name, value) >= 0);
-
-			else if ( jQuery.nodeName( this, "select" ) ) {
-				var values = jQuery.makeArray(value);
-
-				jQuery( "option", this ).each(function(){
-					this.selected = (jQuery.inArray( this.value, values ) >= 0 ||
-						jQuery.inArray( this.text, values ) >= 0);
-				});
-
-				if ( !values.length )
-					this.selectedIndex = -1;
-
-			} else
-				this.value = value;
-		});
-	},
-
-	html: function( value ) {
-		return value == undefined ?
-			(this[0] ?
-				this[0].innerHTML :
-				null) :
-			this.empty().append( value );
-	},
-
-	replaceWith: function( value ) {
-		return this.after( value ).remove();
-	},
-
-	eq: function( i ) {
-		return this.slice( i, i + 1 );
-	},
-
-	slice: function() {
-		return this.pushStack( Array.prototype.slice.apply( this, arguments ) );
-	},
-
-	map: function( callback ) {
-		return this.pushStack( jQuery.map(this, function(elem, i){
-			return callback.call( elem, i, elem );
-		}));
-	},
-
-	andSelf: function() {
-		return this.add( this.prevObject );
-	},
-
-	data: function( key, value ){
-		var parts = key.split(".");
-		parts[1] = parts[1] ? "." + parts[1] : "";
-
-		if ( value === undefined ) {
-			var data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
-
-			if ( data === undefined && this.length )
-				data = jQuery.data( this[0], key );
-
-			return data === undefined && parts[1] ?
-				this.data( parts[0] ) :
-				data;
-		} else
-			return this.trigger("setData" + parts[1] + "!", [parts[0], value]).each(function(){
-				jQuery.data( this, key, value );
-			});
-	},
-
-	removeData: function( key ){
-		return this.each(function(){
-			jQuery.removeData( this, key );
-		});
-	},
-
-	domManip: function( args, table, reverse, callback ) {
-		var clone = this.length > 1, elems;
-
-		return this.each(function(){
-			if ( !elems ) {
-				elems = jQuery.clean( args, this.ownerDocument );
-
-				if ( reverse )
-					elems.reverse();
-			}
-
-			var obj = this;
-
-			if ( table && jQuery.nodeName( this, "table" ) && jQuery.nodeName( elems[0], "tr" ) )
-				obj = this.getElementsByTagName("tbody")[0] || this.appendChild( this.ownerDocument.createElement("tbody") );
-
-			var scripts = jQuery( [] );
-
-			jQuery.each(elems, function(){
-				var elem = clone ?
-					jQuery( this ).clone( true )[0] :
-					this;
-
-				// execute all scripts after the elements have been injected
-				if ( jQuery.nodeName( elem, "script" ) )
-					scripts = scripts.add( elem );
-				else {
-					// Remove any inner scripts for later evaluation
-					if ( elem.nodeType == 1 )
-						scripts = scripts.add( jQuery( "script", elem ).remove() );
-
-					// Inject the elements into the document
-					callback.call( obj, elem );
-				}
-			});
-
-			scripts.each( evalScript );
-		});
-	}
-};
-
-// Give the init function the jQuery prototype for later instantiation
-jQuery.fn.init.prototype = jQuery.fn;
-
-function evalScript( i, elem ) {
-	if ( elem.src )
-		jQuery.ajax({
-			url: elem.src,
-			async: false,
-			dataType: "script"
-		});
-
-	else
-		jQuery.globalEval( elem.text || elem.textContent || elem.innerHTML || "" );
-
-	if ( elem.parentNode )
-		elem.parentNode.removeChild( elem );
-}
-
-function now(){
-	return +new Date;
-}
-
-jQuery.extend = jQuery.fn.extend = function() {
-	// copy reference to target object
-	var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;
-
-	// Handle a deep copy situation
-	if ( target.constructor == Boolean ) {
-		deep = target;
-		target = arguments[1] || {};
-		// skip the boolean and the target
-		i = 2;
-	}
-
-	// Handle case when target is a string or something (possible in deep copy)
-	if ( typeof target != "object" && typeof target != "function" )
-		target = {};
-
-	// extend jQuery itself if only one argument is passed
-	if ( length == i ) {
-		target = this;
-		--i;
-	}
-
-	for ( ; i < length; i++ )
-		// Only deal with non-null/undefined values
-		if ( (options = arguments[ i ]) != null )
-			// Extend the base object
-			for ( var name in options ) {
-				var src = target[ name ], copy = options[ name ];
-
-				// Prevent never-ending loop
-				if ( target === copy )
-					continue;
-
-				// Recurse if we're merging object values
-				if ( deep && copy && typeof copy == "object" && !copy.nodeType )
-					target[ name ] = jQuery.extend( deep, 
-						// Never move original objects, clone them
-						src || ( copy.length != null ? [ ] : { } )
-					, copy );
-
-				// Don't bring in undefined values
-				else if ( copy !== undefined )
-					target[ name ] = copy;
-
-			}
-
-	// Return the modified object
-	return target;
-};
-
-var expando = "jQuery" + now(), uuid = 0, windowData = {},
-	// exclude the following css properties to add px
-	exclude = /z-?index|font-?weight|opacity|zoom|line-?height/i,
-	// cache defaultView
-	defaultView = document.defaultView || {};
-
-jQuery.extend({
-	noConflict: function( deep ) {
-		window.$ = _$;
-
-		if ( deep )
-			window.jQuery = _jQuery;
-
-		return jQuery;
-	},
-
-	// See test/unit/core.js for details concerning this function.
-	isFunction: function( fn ) {
-		return !!fn && typeof fn != "string" && !fn.nodeName &&
-			fn.constructor != Array && /^[\s[]?function/.test( fn + "" );
-	},
-
-	// check if an element is in a (or is an) XML document
-	isXMLDoc: function( elem ) {
-		return elem.documentElement && !elem.body ||
-			elem.tagName && elem.ownerDocument && !elem.ownerDocument.body;
-	},
-
-	// Evalulates a script in a global context
-	globalEval: function( data ) {
-		data = jQuery.trim( data );
-
-		if ( data ) {
-			// Inspired by code by Andrea Giammarchi
-			// http://webreflection.blogspot.com/2007/08/global-scope-evaluation-and-dom.html
-			var head = document.getElementsByTagName("head")[0] || document.documentElement,
-				script = document.createElement("script");
-
-			script.type = "text/javascript";
-			if ( jQuery.browser.msie )
-				script.text = data;
-			else
-				script.appendChild( document.createTextNode( data ) );
-
-			// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
-			// This arises when a base node is used (#2709).
-			head.insertBefore( script, head.firstChild );
-			head.removeChild( script );
-		}
-	},
-
-	nodeName: function( elem, name ) {
-		return elem.nodeName && elem.nodeName.toUpperCase() == name.toUpperCase();
-	},
-
-	cache: {},
-
-	data: function( elem, name, data ) {
-		elem = elem == window ?
-			windowData :
-			elem;
-
-		var id = elem[ expando ];
-
-		// Compute a unique ID for the element
-		if ( !id )
-			id = elem[ expando ] = ++uuid;
-
-		// Only generate the data cache if we're
-		// trying to access or manipulate it
-		if ( name && !jQuery.cache[ id ] )
-			jQuery.cache[ id ] = {};
-
-		// Prevent overriding the named cache with undefined values
-		if ( data !== undefined )
-			jQuery.cache[ id ][ name ] = data;
-
-		// Return the named cache data, or the ID for the element
-		return name ?
-			jQuery.cache[ id ][ name ] :
-			id;
-	},
-
-	removeData: function( elem, name ) {
-		elem = elem == window ?
-			windowData :
-			elem;
-
-		var id = elem[ expando ];
-
-		// If we want to remove a specific section of the element's data
-		if ( name ) {
-			if ( jQuery.cache[ id ] ) {
-				// Remove the section of cache data
-				delete jQuery.cache[ id ][ name ];
-
-				// If we've removed all the data, remove the element's cache
-				name = "";
-
-				for ( name in jQuery.cache[ id ] )
-					break;
-
-				if ( !name )
-					jQuery.removeData( elem );
-			}
-
-		// Otherwise, we want to remove all of the element's data
-		} else {
-			// Clean up the element expando
-			try {
-				delete elem[ expando ];
-			} catch(e){
-				// IE has trouble directly removing the expando
-				// but it's ok with using removeAttribute
-				if ( elem.removeAttribute )
-					elem.removeAttribute( expando );
-			}
-
-			// Completely remove the data cache
-			delete jQuery.cache[ id ];
-		}
-	},
-
-	// args is for internal usage only
-	each: function( object, callback, args ) {
-		var name, i = 0, length = object.length;
-
-		if ( args ) {
-			if ( length == undefined ) {
-				for ( name in object )
-					if ( callback.apply( object[ name ], args ) === false )
-						break;
-			} else
-				for ( ; i < length; )
-					if ( callback.apply( object[ i++ ], args ) === false )
-						break;
-
-		// A special, fast, case for the most common use of each
-		} else {
-			if ( length == undefined ) {
-				for ( name in object )
-					if ( callback.call( object[ name ], name, object[ name ] ) === false )
-						break;
-			} else
-				for ( var value = object[0];
-					i < length && callback.call( value, i, value ) !== false; value = object[++i] ){}
-		}
-
-		return object;
-	},
-
-	prop: function( elem, value, type, i, name ) {
-		// Handle executable functions
-		if ( jQuery.isFunction( value ) )
-			value = value.call( elem, i );
-
-		// Handle passing in a number to a CSS property
-		return value && value.constructor == Number && type == "curCSS" && !exclude.test( name ) ?
-			value + "px" :
-			value;
-	},
-
-	className: {
-		// internal only, use addClass("class")
-		add: function( elem, classNames ) {
-			jQuery.each((classNames || "").split(/\s+/), function(i, className){
-				if ( elem.nodeType == 1 && !jQuery.className.has( elem.className, className ) )
-					elem.className += (elem.className ? " " : "") + className;
-			});
-		},
-
-		// internal only, use removeClass("class")
-		remove: function( elem, classNames ) {
-			if (elem.nodeType == 1)
-				elem.className = classNames != undefined ?
-					jQuery.grep(elem.className.split(/\s+/), function(className){
-						return !jQuery.className.has( classNames, className );
-					}).join(" ") :
-					"";
-		},
-
-		// internal only, use hasClass("class")
-		has: function( elem, className ) {
-			return jQuery.inArray( className, (elem.className || elem).toString().split(/\s+/) ) > -1;
-		}
-	},
-
-	// A method for quickly swapping in/out CSS properties to get correct calculations
-	swap: function( elem, options, callback ) {
-		var old = {};
-		// Remember the old values, and insert the new ones
-		for ( var name in options ) {
-			old[ name ] = elem.style[ name ];
-			elem.style[ name ] = options[ name ];
-		}
-
-		callback.call( elem );
-
-		// Revert the old values
-		for ( var name in options )
-			elem.style[ name ] = old[ name ];
-	},
-
-	css: function( elem, name, force ) {
-		if ( name == "width" || name == "height" ) {
-			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = name == "width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ];
-
-			function getWH() {
-				val = name == "width" ? elem.offsetWidth : elem.offsetHeight;
-				var padding = 0, border = 0;
-				jQuery.each( which, function() {
-					padding += parseFloat(jQuery.curCSS( elem, "padding" + this, true)) || 0;
-					border += parseFloat(jQuery.curCSS( elem, "border" + this + "Width", true)) || 0;
-				});
-				val -= Math.round(padding + border);
-			}
-
-			if ( jQuery(elem).is(":visible") )
-				getWH();
-			else
-				jQuery.swap( elem, props, getWH );
-
-			return Math.max(0, val);
-		}
-
-		return jQuery.curCSS( elem, name, force );
-	},
-
-	curCSS: function( elem, name, force ) {
-		var ret, style = elem.style;
-
-		// A helper method for determining if an element's values are broken
-		function color( elem ) {
-			if ( !jQuery.browser.safari )
-				return false;
-
-			// defaultView is cached
-			var ret = defaultView.getComputedStyle( elem, null );
-			return !ret || ret.getPropertyValue("color") == "";
-		}
-
-		// We need to handle opacity special in IE
-		if ( name == "opacity" && jQuery.browser.msie ) {
-			ret = jQuery.attr( style, "opacity" );
-
-			return ret == "" ?
-				"1" :
-				ret;
-		}
-		// Opera sometimes will give the wrong display answer, this fixes it, see #2037
-		if ( jQuery.browser.opera && name == "display" ) {
-			var save = style.outline;
-			style.outline = "0 solid black";
-			style.outline = save;
-		}
-
-		// Make sure we're using the right name for getting the float value
-		if ( name.match( /float/i ) )
-			name = styleFloat;
-
-		if ( !force && style && style[ name ] )
-			ret = style[ name ];
-
-		else if ( defaultView.getComputedStyle ) {
-
-			// Only "float" is needed here
-			if ( name.match( /float/i ) )
-				name = "float";
-
-			name = name.replace( /([A-Z])/g, "-$1" ).toLowerCase();
-
-			var computedStyle = defaultView.getComputedStyle( elem, null );
-
-			if ( computedStyle && !color( elem ) )
-				ret = computedStyle.getPropertyValue( name );
-
-			// If the element isn't reporting its values properly in Safari
-			// then some display: none elements are involved
-			else {
-				var swap = [], stack = [], a = elem, i = 0;
-
-				// Locate all of the parent display: none elements
-				for ( ; a && color(a); a = a.parentNode )
-					stack.unshift(a);
-
-				// Go through and make them visible, but in reverse
-				// (It would be better if we knew the exact display type that they had)
-				for ( ; i < stack.length; i++ )
-					if ( color( stack[ i ] ) ) {
-						swap[ i ] = stack[ i ].style.display;
-						stack[ i ].style.display = "block";
-					}
-
-				// Since we flip the display style, we have to handle that
-				// one special, otherwise get the value
-				ret = name == "display" && swap[ stack.length - 1 ] != null ?
-					"none" :
-					( computedStyle && computedStyle.getPropertyValue( name ) ) || "";
-
-				// Finally, revert the display styles back
-				for ( i = 0; i < swap.length; i++ )
-					if ( swap[ i ] != null )
-						stack[ i ].style.display = swap[ i ];
-			}
-
-			// We should always get a number back from opacity
-			if ( name == "opacity" && ret == "" )
-				ret = "1";
-
-		} else if ( elem.currentStyle ) {
-			var camelCase = name.replace(/\-(\w)/g, function(all, letter){
-				return letter.toUpperCase();
-			});
-
-			ret = elem.currentStyle[ name ] || elem.currentStyle[ camelCase ];
-
-			// From the awesome hack by Dean Edwards
-			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
-
-			// If we're not dealing with a regular pixel number
-			// but a number that has a weird ending, we need to convert it to pixels
-			if ( !/^\d+(px)?$/i.test( ret ) && /^\d/.test( ret ) ) {
-				// Remember the original values
-				var left = style.left, rsLeft = elem.runtimeStyle.left;
-
-				// Put in the new values to get a computed value out
-				elem.runtimeStyle.left = elem.currentStyle.left;
-				style.left = ret || 0;
-				ret = style.pixelLeft + "px";
-
-				// Revert the changed values
-				style.left = left;
-				elem.runtimeStyle.left = rsLeft;
-			}
-		}
-
-		return ret;
-	},
-
-	clean: function( elems, context ) {
-		var ret = [];
-		context = context || document;
-		// !context.createElement fails in IE with an error but returns typeof 'object'
-		if (typeof context.createElement == 'undefined')
-			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
-
-		jQuery.each(elems, function(i, elem){
-			if ( !elem )
-				return;
-
-			if ( elem.constructor == Number )
-				elem += '';
-
-			// Convert html string into DOM nodes
-			if ( typeof elem == "string" ) {
-				// Fix "XHTML"-style tags in all browsers
-				elem = elem.replace(/(<(\w+)[^>]*?)\/>/g, function(all, front, tag){
-					return tag.match(/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i) ?
-						all :
-						front + "></" + tag + ">";
-				});
-
-				// Trim whitespace, otherwise indexOf won't work as expected
-				var tags = jQuery.trim( elem ).toLowerCase(), div = context.createElement("div");
-
-				var wrap =
-					// option or optgroup
-					!tags.indexOf("<opt") &&
-					[ 1, "<select multiple='multiple'>", "</select>" ] ||
-
-					!tags.indexOf("<leg") &&
-					[ 1, "<fieldset>", "</fieldset>" ] ||
-
-					tags.match(/^<(thead|tbody|tfoot|colg|cap)/) &&
-					[ 1, "<table>", "</table>" ] ||
-
-					!tags.indexOf("<tr") &&
-					[ 2, "<table><tbody>", "</tbody></table>" ] ||
-
-				 	// <thead> matched above
-					(!tags.indexOf("<td") || !tags.indexOf("<th")) &&
-					[ 3, "<table><tbody><tr>", "</tr></tbody></table>" ] ||
-
-					!tags.indexOf("<col") &&
-					[ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ] ||
-
-					// IE can't serialize <link> and <script> tags normally
-					jQuery.browser.msie &&
-					[ 1, "div<div>", "</div>" ] ||
-
-					[ 0, "", "" ];
-
-				// Go to html and back, then peel off extra wrappers
-				div.innerHTML = wrap[1] + elem + wrap[2];
-
-				// Move to the right depth
-				while ( wrap[0]-- )
-					div = div.lastChild;
-
-				// Remove IE's autoinserted <tbody> from table fragments
-				if ( jQuery.browser.msie ) {
-
-					// String was a <table>, *may* have spurious <tbody>
-					var tbody = !tags.indexOf("<table") && tags.indexOf("<tbody") < 0 ?
-						div.firstChild && div.firstChild.childNodes :
-
-						// String was a bare <thead> or <tfoot>
-						wrap[1] == "<table>" && tags.indexOf("<tbody") < 0 ?
-							div.childNodes :
-							[];
-
-					for ( var j = tbody.length - 1; j >= 0 ; --j )
-						if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length )
-							tbody[ j ].parentNode.removeChild( tbody[ j ] );
-
-					// IE completely kills leading whitespace when innerHTML is used
-					if ( /^\s/.test( elem ) )
-						div.insertBefore( context.createTextNode( elem.match(/^\s*/)[0] ), div.firstChild );
-
-				}
-
-				elem = jQuery.makeArray( div.childNodes );
-			}
-
-			if ( elem.length === 0 && (!jQuery.nodeName( elem, "form" ) && !jQuery.nodeName( elem, "select" )) )
-				return;
-
-			if ( elem[0] == undefined || jQuery.nodeName( elem, "form" ) || elem.options )
-				ret.push( elem );
-
-			else
-				ret = jQuery.merge( ret, elem );
-
-		});
-
-		return ret;
-	},
-
-	attr: function( elem, name, value ) {
-		// don't set attributes on text and comment nodes
-		if (!elem || elem.nodeType == 3 || elem.nodeType == 8)
-			return undefined;
-
-		var notxml = !jQuery.isXMLDoc( elem ),
-			// Whether we are setting (or getting)
-			set = value !== undefined,
-			msie = jQuery.browser.msie;
-
-		// Try to normalize/fix the name
-		name = notxml && jQuery.props[ name ] || name;
-
-		// Only do all the following if this is a node (faster for style)
-		// IE elem.getAttribute passes even for style
-		if ( elem.tagName ) {
-
-			// These attributes require special treatment
-			var special = /href|src|style/.test( name );
-
-			// Safari mis-reports the default selected property of a hidden option
-			// Accessing the parent's selectedIndex property fixes it
-			if ( name == "selected" && jQuery.browser.safari )
-				elem.parentNode.selectedIndex;
-
-			// If applicable, access the attribute via the DOM 0 way
-			if ( name in elem && notxml && !special ) {
-				if ( set ){
-					// We can't allow the type property to be changed (since it causes problems in IE)
-					if ( name == "type" && jQuery.nodeName( elem, "input" ) && elem.parentNode )
-						throw "type property can't be changed";
-
-					elem[ name ] = value;
-				}
-
-				// browsers index elements by id/name on forms, give priority to attributes.
-				if( jQuery.nodeName( elem, "form" ) && elem.getAttributeNode(name) )
-					return elem.getAttributeNode( name ).nodeValue;
-
-				return elem[ name ];
-			}
-
-			if ( msie && notxml &&  name == "style" )
-				return jQuery.attr( elem.style, "cssText", value );
-
-			if ( set )
-				// convert the value to a string (all browsers do this but IE) see #1070
-				elem.setAttribute( name, "" + value );
-
-			var attr = msie && notxml && special
-					// Some attributes require a special call on IE
-					? elem.getAttribute( name, 2 )
-					: elem.getAttribute( name );
-
-			// Non-existent attributes return null, we normalize to undefined
-			return attr === null ? undefined : attr;
-		}
-
-		// elem is actually elem.style ... set the style
-
-		// IE uses filters for opacity
-		if ( msie && name == "opacity" ) {
-			if ( set ) {
-				// IE has trouble with opacity if it does not have layout
-				// Force it by setting the zoom level
-				elem.zoom = 1;
-
-				// Set the alpha filter to set the opacity
-				elem.filter = (elem.filter || "").replace( /alpha\([^)]*\)/, "" ) +
-					(parseInt( value ) + '' == "NaN" ? "" : "alpha(opacity=" + value * 100 + ")");
-			}
-
-			return elem.filter && elem.filter.indexOf("opacity=") >= 0 ?
-				(parseFloat( elem.filter.match(/opacity=([^)]*)/)[1] ) / 100) + '':
-				"";
-		}
-
-		name = name.replace(/-([a-z])/ig, function(all, letter){
-			return letter.toUpperCase();
-		});
-
-		if ( set )
-			elem[ name ] = value;
-
-		return elem[ name ];
-	},
-
-	trim: function( text ) {
-		return (text || "").replace( /^\s+|\s+$/g, "" );
-	},
-
-	makeArray: function( array ) {
-		var ret = [];
-
-		if( array != null ){
-			var i = array.length;
-			//the window, strings and functions also have 'length'
-			if( i == null || array.split || array.setInterval || array.call )
-				ret[0] = array;
-			else
-				while( i )
-					ret[--i] = array[i];
-		}
-
-		return ret;
-	},
-
-	inArray: function( elem, array ) {
-		for ( var i = 0, length = array.length; i < length; i++ )
-		// Use === because on IE, window == document
-			if ( array[ i ] === elem )
-				return i;
-
-		return -1;
-	},
-
-	merge: function( first, second ) {
-		// We have to loop this way because IE & Opera overwrite the length
-		// expando of getElementsByTagName
-		var i = 0, elem, pos = first.length;
-		// Also, we need to make sure that the correct elements are being returned
-		// (IE returns comment nodes in a '*' query)
-		if ( jQuery.browser.msie ) {
-			while ( elem = second[ i++ ] )
-				if ( elem.nodeType != 8 )
-					first[ pos++ ] = elem;
-
-		} else
-			while ( elem = second[ i++ ] )
-				first[ pos++ ] = elem;
-
-		return first;
-	},
-
-	unique: function( array ) {
-		var ret = [], done = {};
-
-		try {
-
-			for ( var i = 0, length = array.length; i < length; i++ ) {
-				var id = jQuery.data( array[ i ] );
-
-				if ( !done[ id ] ) {
-					done[ id ] = true;
-					ret.push( array[ i ] );
-				}
-			}
-
-		} catch( e ) {
-			ret = array;
-		}
-
-		return ret;
-	},
-
-	grep: function( elems, callback, inv ) {
-		var ret = [];
-
-		// Go through the array, only saving the items
-		// that pass the validator function
-		for ( var i = 0, length = elems.length; i < length; i++ )
-			if ( !inv != !callback( elems[ i ], i ) )
-				ret.push( elems[ i ] );
-
-		return ret;
-	},
-
-	map: function( elems, callback ) {
-		var ret = [];
-
-		// Go through the array, translating each of the items to their
-		// new value (or values).
-		for ( var i = 0, length = elems.length; i < length; i++ ) {
-			var value = callback( elems[ i ], i );
-
-			if ( value != null )
-				ret[ ret.length ] = value;
-		}
-
-		return ret.concat.apply( [], ret );
-	}
-});
-
-var userAgent = navigator.userAgent.toLowerCase();
-
-// Figure out what browser is being used
-jQuery.browser = {
-	version: (userAgent.match( /.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/ ) || [])[1],
-	safari: /webkit/.test( userAgent ),
-	opera: /opera/.test( userAgent ),
-	msie: /msie/.test( userAgent ) && !/opera/.test( userAgent ),
-	mozilla: /mozilla/.test( userAgent ) && !/(compatible|webkit)/.test( userAgent )
-};
-
-var styleFloat = jQuery.browser.msie ?
-	"styleFloat" :
-	"cssFloat";
-
-jQuery.extend({
-	// Check to see if the W3C box model is being used
-	boxModel: !jQuery.browser.msie || document.compatMode == "CSS1Compat",
-
-	props: {
-		"for": "htmlFor",
-		"class": "className",
-		"float": styleFloat,
-		cssFloat: styleFloat,
-		styleFloat: styleFloat,
-		readonly: "readOnly",
-		maxlength: "maxLength",
-		cellspacing: "cellSpacing",
-		rowspan: "rowSpan"
-	}
-});
-
-jQuery.each({
-	parent: function(elem){return elem.parentNode;},
-	parents: function(elem){return jQuery.dir(elem,"parentNode");},
-	next: function(elem){return jQuery.nth(elem,2,"nextSibling");},
-	prev: function(elem){return jQuery.nth(elem,2,"previousSibling");},
-	nextAll: function(elem){return jQuery.dir(elem,"nextSibling");},
-	prevAll: function(elem){return jQuery.dir(elem,"previousSibling");},
-	siblings: function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},
-	children: function(elem){return jQuery.sibling(elem.firstChild);},
-	contents: function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.makeArray(elem.childNodes);}
-}, function(name, fn){
-	jQuery.fn[ name ] = function( selector ) {
-		var ret = jQuery.map( this, fn );
-
-		if ( selector && typeof selector == "string" )
-			ret = jQuery.multiFilter( selector, ret );
-
-		return this.pushStack( jQuery.unique( ret ) );
-	};
-});
-
-jQuery.each({
-	appendTo: "append",
-	prependTo: "prepend",
-	insertBefore: "before",
-	insertAfter: "after",
-	replaceAll: "replaceWith"
-}, function(name, original){
-	jQuery.fn[ name ] = function() {
-		var args = arguments;
-
-		return this.each(function(){
-			for ( var i = 0, length = args.length; i < length; i++ )
-				jQuery( args[ i ] )[ original ]( this );
-		});
-	};
-});
-
-jQuery.each({
-	removeAttr: function( name ) {
-		jQuery.attr( this, name, "" );
-		if (this.nodeType == 1)
-			this.removeAttribute( name );
-	},
-
-	addClass: function( classNames ) {
-		jQuery.className.add( this, classNames );
-	},
-
-	removeClass: function( classNames ) {
-		jQuery.className.remove( this, classNames );
-	},
-
-	toggleClass: function( classNames ) {
-		jQuery.className[ jQuery.className.has( this, classNames ) ? "remove" : "add" ]( this, classNames );
-	},
-
-	remove: function( selector ) {
-		if ( !selector || jQuery.filter( selector, [ this ] ).r.length ) {
-			// Prevent memory leaks
-			jQuery( "*", this ).add(this).each(function(){
-				jQuery.event.remove(this);
-				jQuery.removeData(this);
-			});
-			if (this.parentNode)
-				this.parentNode.removeChild( this );
-		}
-	},
-
-	empty: function() {
-		// Remove element nodes and prevent memory leaks
-		jQuery( ">*", this ).remove();
-
-		// Remove any remaining nodes
-		while ( this.firstChild )
-			this.removeChild( this.firstChild );
-	}
-}, function(name, fn){
-	jQuery.fn[ name ] = function(){
-		return this.each( fn, arguments );
-	};
-});
-
-jQuery.each([ "Height", "Width" ], function(i, name){
-	var type = name.toLowerCase();
-
-	jQuery.fn[ type ] = function( size ) {
-		// Get window width or height
-		return this[0] == window ?
-			// Opera reports document.body.client[Width/Height] properly in both quirks and standards
-			jQuery.browser.opera && document.body[ "client" + name ] ||
-
-			// Safari reports inner[Width/Height] just fine (Mozilla and Opera include scroll bar widths)
-			jQuery.browser.safari && window[ "inner" + name ] ||
-
-			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
-			document.compatMode == "CSS1Compat" && document.documentElement[ "client" + name ] || document.body[ "client" + name ] :
-
-			// Get document width or height
-			this[0] == document ?
-				// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
-				Math.max(
-					Math.max(document.body["scroll" + name], document.documentElement["scroll" + name]),
-					Math.max(document.body["offset" + name], document.documentElement["offset" + name])
-				) :
-
-				// Get or set width or height on the element
-				size == undefined ?
-					// Get width or height on the element
-					(this.length ? jQuery.css( this[0], type ) : null) :
-
-					// Set the width or height on the element (default to pixels if value is unitless)
-					this.css( type, size.constructor == String ? size : size + "px" );
-	};
-});
-
-// Helper function used by the dimensions and offset modules
-function num(elem, prop) {
-	return elem[0] && parseInt( jQuery.curCSS(elem[0], prop, true), 10 ) || 0;
-}var chars = jQuery.browser.safari && parseInt(jQuery.browser.version) < 417 ?
-		"(?:[\\w*_-]|\\\\.)" :
-		"(?:[\\w\u0128-\uFFFF*_-]|\\\\.)",
-	quickChild = new RegExp("^>\\s*(" + chars + "+)"),
-	quickID = new RegExp("^(" + chars + "+)(#)(" + chars + "+)"),
-	quickClass = new RegExp("^([#.]?)(" + chars + "*)");
-
-jQuery.extend({
-	expr: {
-		"": function(a,i,m){return m[2]=="*"||jQuery.nodeName(a,m[2]);},
-		"#": function(a,i,m){return a.getAttribute("id")==m[2];},
-		":": {
-			// Position Checks
-			lt: function(a,i,m){return i<m[3]-0;},
-			gt: function(a,i,m){return i>m[3]-0;},
-			nth: function(a,i,m){return m[3]-0==i;},
-			eq: function(a,i,m){return m[3]-0==i;},
-			first: function(a,i){return i==0;},
-			last: function(a,i,m,r){return i==r.length-1;},
-			even: function(a,i){return i%2==0;},
-			odd: function(a,i){return i%2;},
-
-			// Child Checks
-			"first-child": function(a){return a.parentNode.getElementsByTagName("*")[0]==a;},
-			"last-child": function(a){return jQuery.nth(a.parentNode.lastChild,1,"previousSibling")==a;},
-			"only-child": function(a){return !jQuery.nth(a.parentNode.lastChild,2,"previousSibling");},
-
-			// Parent Checks
-			parent: function(a){return a.firstChild;},
-			empty: function(a){return !a.firstChild;},
-
-			// Text Check
-			contains: function(a,i,m){return (a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m[3])>=0;},
-
-			// Visibility
-			visible: function(a){return "hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"visibility")!="hidden";},
-			hidden: function(a){return "hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"visibility")=="hidden";},
-
-			// Form attributes
-			enabled: function(a){return !a.disabled;},
-			disabled: function(a){return a.disabled;},
-			checked: function(a){return a.checked;},
-			selected: function(a){return a.selected||jQuery.attr(a,"selected");},
-
-			// Form elements
-			text: function(a){return "text"==a.type;},
-			radio: function(a){return "radio"==a.type;},
-			checkbox: function(a){return "checkbox"==a.type;},
-			file: function(a){return "file"==a.type;},
-			password: function(a){return "password"==a.type;},
-			submit: function(a){return "submit"==a.type;},
-			image: function(a){return "image"==a.type;},
-			reset: function(a){return "reset"==a.type;},
-			button: function(a){return "button"==a.type||jQuery.nodeName(a,"button");},
-			input: function(a){return /input|select|textarea|button/i.test(a.nodeName);},
-
-			// :has()
-			has: function(a,i,m){return jQuery.find(m[3],a).length;},
-
-			// :header
-			header: function(a){return /h\d/i.test(a.nodeName);},
-
-			// :animated
-			animated: function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).length;}
-		}
-	},
-
-	// The regular expressions that power the parsing engine
-	parse: [
-		// Match: [@value='test'], [@foo]
-		/^(\[) *@?([\w-]+) *([!*$^~=]*) *('?"?)(.*?)\4 *\]/,
-
-		// Match: :contains('foo')
-		/^(:)([\w-]+)\("?'?(.*?(\(.*?\))?[^(]*?)"?'?\)/,
-
-		// Match: :even, :last-child, #id, .class
-		new RegExp("^([:.#]*)(" + chars + "+)")
-	],
-
-	multiFilter: function( expr, elems, not ) {
-		var old, cur = [];
-
-		while ( expr && expr != old ) {
-			old = expr;
-			var f = jQuery.filter( expr, elems, not );
-			expr = f.t.replace(/^\s*,\s*/, "" );
-			cur = not ? elems = f.r : jQuery.merge( cur, f.r );
-		}
-
-		return cur;
-	},
-
-	find: function( t, context ) {
-		// Quickly handle non-string expressions
-		if ( typeof t != "string" )
-			return [ t ];
-
-		// check to make sure context is a DOM element or a document
-		if ( context && context.nodeType != 1 && context.nodeType != 9)
-			return [ ];
-
-		// Set the correct context (if none is provided)
-		context = context || document;
-
-		// Initialize the search
-		var ret = [context], done = [], last, nodeName;
-
-		// Continue while a selector expression exists, and while
-		// we're no longer looping upon ourselves
-		while ( t && last != t ) {
-			var r = [];
-			last = t;
-
-			t = jQuery.trim(t);
-
-			var foundToken = false,
-
-			// An attempt at speeding up child selectors that
-			// point to a specific element tag
-				re = quickChild,
-
-				m = re.exec(t);
-
-			if ( m ) {
-				nodeName = m[1].toUpperCase();
-
-				// Perform our own iteration and filter
-				for ( var i = 0; ret[i]; i++ )
-					for ( var c = ret[i].firstChild; c; c = c.nextSibling )
-						if ( c.nodeType == 1 && (nodeName == "*" || c.nodeName.toUpperCase() == nodeName) )
-							r.push( c );
-
-				ret = r;
-				t = t.replace( re, "" );
-				if ( t.indexOf(" ") == 0 ) continue;
-				foundToken = true;
-			} else {
-				re = /^([>+~])\s*(\w*)/i;
-
-				if ( (m = re.exec(t)) != null ) {
-					r = [];
-
-					var merge = {};
-					nodeName = m[2].toUpperCase();
-					m = m[1];
-
-					for ( var j = 0, rl = ret.length; j < rl; j++ ) {
-						var n = m == "~" || m == "+" ? ret[j].nextSibling : ret[j].firstChild;
-						for ( ; n; n = n.nextSibling )
-							if ( n.nodeType == 1 ) {
-								var id = jQuery.data(n);
-
-								if ( m == "~" && merge[id] ) break;
-
-								if (!nodeName || n.nodeName.toUpperCase() == nodeName ) {
-									if ( m == "~" ) merge[id] = true;
-									r.push( n );
-								}
-
-								if ( m == "+" ) break;
-							}
-					}
-
-					ret = r;
-
-					// And remove the token
-					t = jQuery.trim( t.replace( re, "" ) );
-					foundToken = true;
-				}
-			}
-
-			// See if there's still an expression, and that we haven't already
-			// matched a token
-			if ( t && !foundToken ) {
-				// Handle multiple expressions
-				if ( !t.indexOf(",") ) {
-					// Clean the result set
-					if ( context == ret[0] ) ret.shift();
-
-					// Merge the result sets
-					done = jQuery.merge( done, ret );
-
-					// Reset the context
-					r = ret = [context];
-
-					// Touch up the selector string
-					t = " " + t.substr(1,t.length);
-
-				} else {
-					// Optimize for the case nodeName#idName
-					var re2 = quickID;
-					var m = re2.exec(t);
-
-					// Re-organize the results, so that they're consistent
-					if ( m ) {
-						m = [ 0, m[2], m[3], m[1] ];
-
-					} else {
-						// Otherwise, do a traditional filter check for
-						// ID, class, and element selectors
-						re2 = quickClass;
-						m = re2.exec(t);
-					}
-
-					m[2] = m[2].replace(/\\/g, "");
-
-					var elem = ret[ret.length-1];
-
-					// Try to do a global search by ID, where we can
-					if ( m[1] == "#" && elem && elem.getElementById && !jQuery.isXMLDoc(elem) ) {
-						// Optimization for HTML document case
-						var oid = elem.getElementById(m[2]);
-
-						// Do a quick check for the existence of the actual ID attribute
-						// to avoid selecting by the name attribute in IE
-						// also check to insure id is a string to avoid selecting an element with the name of 'id' inside a form
-						if ( (jQuery.browser.msie||jQuery.browser.opera) && oid && typeof oid.id == "string" && oid.id != m[2] )
-							oid = jQuery('[@id="'+m[2]+'"]', elem)[0];
-
-						// Do a quick check for node name (where applicable) so
-						// that div#foo searches will be really fast
-						ret = r = oid && (!m[3] || jQuery.nodeName(oid, m[3])) ? [oid] : [];
-					} else {
-						// We need to find all descendant elements
-						for ( var i = 0; ret[i]; i++ ) {
-							// Grab the tag name being searched for
-							var tag = m[1] == "#" && m[3] ? m[3] : m[1] != "" || m[0] == "" ? "*" : m[2];
-
-							// Handle IE7 being really dumb about <object>s
-							if ( tag == "*" && ret[i].nodeName.toLowerCase() == "object" )
-								tag = "param";
-
-							r = jQuery.merge( r, ret[i].getElementsByTagName( tag ));
-						}
-
-						// It's faster to filter by class and be done with it
-						if ( m[1] == "." )
-							r = jQuery.classFilter( r, m[2] );
-
-						// Same with ID filtering
-						if ( m[1] == "#" ) {
-							var tmp = [];
-
-							// Try to find the element with the ID
-							for ( var i = 0; r[i]; i++ )
-								if ( r[i].getAttribute("id") == m[2] ) {
-									tmp = [ r[i] ];
-									break;
-								}
-
-							r = tmp;
-						}
-
-						ret = r;
-					}
-
-					t = t.replace( re2, "" );
-				}
-
-			}
-
-			// If a selector string still exists
-			if ( t ) {
-				// Attempt to filter it
-				var val = jQuery.filter(t,r);
-				ret = r = val.r;
-				t = jQuery.trim(val.t);
-			}
-		}
-
-		// An error occurred with the selector;
-		// just return an empty set instead
-		if ( t )
-			ret = [];
-
-		// Remove the root context
-		if ( ret && context == ret[0] )
-			ret.shift();
-
-		// And combine the results
-		done = jQuery.merge( done, ret );
-
-		return done;
-	},
-
-	classFilter: function(r,m,not){
-		m = " " + m + " ";
-		var tmp = [];
-		for ( var i = 0; r[i]; i++ ) {
-			var pass = (" " + r[i].className + " ").indexOf( m ) >= 0;
-			if ( !not && pass || not && !pass )
-				tmp.push( r[i] );
-		}
-		return tmp;
-	},
-
-	filter: function(t,r,not) {
-		var last;
-
-		// Look for common filter expressions
-		while ( t && t != last ) {
-			last = t;
-
-			var p = jQuery.parse, m;
-
-			for ( var i = 0; p[i]; i++ ) {
-				m = p[i].exec( t );
-
-				if ( m ) {
-					// Remove what we just matched
-					t = t.substring( m[0].length );
-
-					m[2] = m[2].replace(/\\/g, "");
-					break;
-				}
-			}
-
-			if ( !m )
-				break;
-
-			// :not() is a special case that can be optimized by
-			// keeping it out of the expression list
-			if ( m[1] == ":" && m[2] == "not" )
-				// optimize if only one selector found (most common case)
-				r = isSimple.test( m[3] ) ?
-					jQuery.filter(m[3], r, true).r :
-					jQuery( r ).not( m[3] );
-
-			// We can get a big speed boost by filtering by class here
-			else if ( m[1] == "." )
-				r = jQuery.classFilter(r, m[2], not);
-
-			else if ( m[1] == "[" ) {
-				var tmp = [], type = m[3];
-
-				for ( var i = 0, rl = r.length; i < rl; i++ ) {
-					var a = r[i], z = a[ jQuery.props[m[2]] || m[2] ];
-
-					if ( z == null || /href|src|selected/.test(m[2]) )
-						z = jQuery.attr(a,m[2]) || '';
-
-					if ( (type == "" && !!z ||
-						 type == "=" && z == m[5] ||
-						 type == "!=" && z != m[5] ||
-						 type == "^=" && z && !z.indexOf(m[5]) ||
-						 type == "$=" && z.substr(z.length - m[5].length) == m[5] ||
-						 (type == "*=" || type == "~=") && z.indexOf(m[5]) >= 0) ^ not )
-							tmp.push( a );
-				}
-
-				r = tmp;
-
-			// We can get a speed boost by handling nth-child here
-			} else if ( m[1] == ":" && m[2] == "nth-child" ) {
-				var merge = {}, tmp = [],
-					// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
-					test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
-						m[3] == "even" && "2n" || m[3] == "odd" && "2n+1" ||
-						!/\D/.test(m[3]) && "0n+" + m[3] || m[3]),
-					// calculate the numbers (first)n+(last) including if they are negative
-					first = (test[1] + (test[2] || 1)) - 0, last = test[3] - 0;
-
-				// loop through all the elements left in the jQuery object
-				for ( var i = 0, rl = r.length; i < rl; i++ ) {
-					var node = r[i], parentNode = node.parentNode, id = jQuery.data(parentNode);
-
-					if ( !merge[id] ) {
-						var c = 1;
-
-						for ( var n = parentNode.firstChild; n; n = n.nextSibling )
-							if ( n.nodeType == 1 )
-								n.nodeIndex = c++;
-
-						merge[id] = true;
-					}
-
-					var add = false;
-
-					if ( first == 0 ) {
-						if ( node.nodeIndex == last )
-							add = true;
-					} else if ( (node.nodeIndex - last) % first == 0 && (node.nodeIndex - last) / first >= 0 )
-						add = true;
-
-					if ( add ^ not )
-						tmp.push( node );
-				}
-
-				r = tmp;
-
-			// Otherwise, find the expression to execute
-			} else {
-				var fn = jQuery.expr[ m[1] ];
-				if ( typeof fn == "object" )
-					fn = fn[ m[2] ];
-
-				if ( typeof fn == "string" )
-					fn = eval("false||function(a,i){return " + fn + ";}");
-
-				// Execute it against the current filter
-				r = jQuery.grep( r, function(elem, i){
-					return fn(elem, i, m, r);
-				}, not );
-			}
-		}
-
-		// Return an array of filtered elements (r)
-		// and the modified expression string (t)
-		return { r: r, t: t };
-	},
-
-	dir: function( elem, dir ){
-		var matched = [],
-			cur = elem[dir];
-		while ( cur && cur != document ) {
-			if ( cur.nodeType == 1 )
-				matched.push( cur );
-			cur = cur[dir];
-		}
-		return matched;
-	},
-
-	nth: function(cur,result,dir,elem){
-		result = result || 1;
-		var num = 0;
-
-		for ( ; cur; cur = cur[dir] )
-			if ( cur.nodeType == 1 && ++num == result )
-				break;
-
-		return cur;
-	},
-
-	sibling: function( n, elem ) {
-		var r = [];
-
-		for ( ; n; n = n.nextSibling ) {
-			if ( n.nodeType == 1 && n != elem )
-				r.push( n );
-		}
-
-		return r;
-	}
-});
-/*
- * A number of helper functions used for managing events.
- * Many of the ideas behind this code orignated from
- * Dean Edwards' addEvent library.
- */
-jQuery.event = {
-
-	// Bind an event to an element
-	// Original by Dean Edwards
-	add: function(elem, types, handler, data) {
-		if ( elem.nodeType == 3 || elem.nodeType == 8 )
-			return;
-
-		// For whatever reason, IE has trouble passing the window object
-		// around, causing it to be cloned in the process
-		if ( jQuery.browser.msie && elem.setInterval )
-			elem = window;
-
-		// Make sure that the function being executed has a unique ID
-		if ( !handler.guid )
-			handler.guid = this.guid++;
-
-		// if data is passed, bind to handler
-		if( data != undefined ) {
-			// Create temporary function pointer to original handler
-			var fn = handler;
-
-			// Create unique handler function, wrapped around original handler
-			handler = this.proxy( fn, function() {
-				// Pass arguments and context to original handler
-				return fn.apply(this, arguments);
-			});
-
-			// Store data in unique handler
-			handler.data = data;
-		}
-
-		// Init the element's event structure
-		var events = jQuery.data(elem, "events") || jQuery.data(elem, "events", {}),
-			handle = jQuery.data(elem, "handle") || jQuery.data(elem, "handle", function(){
-				// Handle the second event of a trigger and when
-				// an event is called after a page has unloaded
-				if ( typeof jQuery != "undefined" && !jQuery.event.triggered )
-					return jQuery.event.handle.apply(arguments.callee.elem, arguments);
-			});
-		// Add elem as a property of the handle function
-		// This is to prevent a memory leak with non-native
-		// event in IE.
-		handle.elem = elem;
-
-		// Handle multiple events separated by a space
-		// jQuery(...).bind("mouseover mouseout", fn);
-		jQuery.each(types.split(/\s+/), function(index, type) {
-			// Namespaced event handlers
-			var parts = type.split(".");
-			type = parts[0];
-			handler.type = parts[1];
-
-			// Get the current list of functions bound to this event
-			var handlers = events[type];
-
-			// Init the event handler queue
-			if (!handlers) {
-				handlers = events[type] = {};
-
-				// Check for a special event handler
-				// Only use addEventListener/attachEvent if the special
-				// events handler returns false
-				if ( !jQuery.event.special[type] || jQuery.event.special[type].setup.call(elem) === false ) {
-					// Bind the global event handler to the element
-					if (elem.addEventListener)
-						elem.addEventListener(type, handle, false);
-					else if (elem.attachEvent)
-						elem.attachEvent("on" + type, handle);
-				}
-			}
-
-			// Add the function to the element's handler list
-			handlers[handler.guid] = handler;
-
-			// Keep track of which events have been used, for global triggering
-			jQuery.event.global[type] = true;
-		});
-
-		// Nullify elem to prevent memory leaks in IE
-		elem = null;
-	},
-
-	guid: 1,
-	global: {},
-
-	// Detach an event or set of events from an element
-	remove: function(elem, types, handler) {
-		// don't do events on text and comment nodes
-		if ( elem.nodeType == 3 || elem.nodeType == 8 )
-			return;
-
-		var events = jQuery.data(elem, "events"), ret, index;
-
-		if ( events ) {
-			// Unbind all events for the element
-			if ( types == undefined || (typeof types == "string" && types.charAt(0) == ".") )
-				for ( var type in events )
-					this.remove( elem, type + (types || "") );
-			else {
-				// types is actually an event object here
-				if ( types.type ) {
-					handler = types.handler;
-					types = types.type;
-				}
-
-				// Handle multiple events seperated by a space
-				// jQuery(...).unbind("mouseover mouseout", fn);
-				jQuery.each(types.split(/\s+/), function(index, type){
-					// Namespaced event handlers
-					var parts = type.split(".");
-					type = parts[0];
-
-					if ( events[type] ) {
-						// remove the given handler for the given type
-						if ( handler )
-							delete events[type][handler.guid];
-
-						// remove all handlers for the given type
-						else
-							for ( handler in events[type] )
-								// Handle the removal of namespaced events
-								if ( !parts[1] || events[type][handler].type == parts[1] )
-									delete events[type][handler];
-
-						// remove generic event handler if no more handlers exist
-						for ( ret in events[type] ) break;
-						if ( !ret ) {
-							if ( !jQuery.event.special[type] || jQuery.event.special[type].teardown.call(elem) === false ) {
-								if (elem.removeEventListener)
-									elem.removeEventListener(type, jQuery.data(elem, "handle"), false);
-								else if (elem.detachEvent)
-									elem.detachEvent("on" + type, jQuery.data(elem, "handle"));
-							}
-							ret = null;
-							delete events[type];
-						}
-					}
-				});
-			}
-
-			// Remove the expando if it's no longer used
-			for ( ret in events ) break;
-			if ( !ret ) {
-				var handle = jQuery.data( elem, "handle" );
-				if ( handle ) handle.elem = null;
-				jQuery.removeData( elem, "events" );
-				jQuery.removeData( elem, "handle" );
-			}
-		}
-	},
-
-	trigger: function(type, data, elem, donative, extra) {
-		// Clone the incoming data, if any
-		data = jQuery.makeArray(data);
-
-		if ( type.indexOf("!") >= 0 ) {
-			type = type.slice(0, -1);
-			var exclusive = true;
-		}
-
-		// Handle a global trigger
-		if ( !elem ) {
-			// Only trigger if we've ever bound an event for it
-			if ( this.global[type] )
-				jQuery("*").add([window, document]).trigger(type, data);
-
-		// Handle triggering a single element
-		} else {
-			// don't do events on text and comment nodes
-			if ( elem.nodeType == 3 || elem.nodeType == 8 )
-				return undefined;
-
-			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),
-				// Check to see if we need to provide a fake event, or not
-				event = !data[0] || !data[0].preventDefault;
-
-			// Pass along a fake event
-			if ( event ) {
-				data.unshift({
-					type: type,
-					target: elem,
-					preventDefault: function(){},
-					stopPropagation: function(){},
-					timeStamp: now()
-				});
-				data[0][expando] = true; // no need to fix fake event
-			}
-
-			// Enforce the right trigger type
-			data[0].type = type;
-			if ( exclusive )
-				data[0].exclusive = true;
-
-			// Trigger the event, it is assumed that "handle" is a function
-			var handle = jQuery.data(elem, "handle");
-			if ( handle )
-				val = handle.apply( elem, data );
-
-			// Handle triggering native .onfoo handlers (and on links since we don't call .click() for links)
-			if ( (!fn || (jQuery.nodeName(elem, 'a') && type == "click")) && elem["on"+type] && elem["on"+type].apply( elem, data ) === false )
-				val = false;
-
-			// Extra functions don't get the custom event object
-			if ( event )
-				data.shift();
-
-			// Handle triggering of extra function
-			if ( extra && jQuery.isFunction( extra ) ) {
-				// call the extra function and tack the current return value on the end for possible inspection
-				ret = extra.apply( elem, val == null ? data : data.concat( val ) );
-				// if anything is returned, give it precedence and have it overwrite the previous value
-				if (ret !== undefined)
-					val = ret;
-			}
-
-			// Trigger the native events (except for clicks on links)
-			if ( fn && donative !== false && val !== false && !(jQuery.nodeName(elem, 'a') && type == "click") ) {
-				this.triggered = true;
-				try {
-					elem[ type ]();
-				// prevent IE from throwing an error for some hidden elements
-				} catch (e) {}
-			}
-
-			this.triggered = false;
-		}
-
-		return val;
-	},
-
-	handle: function(event) {
-		// returned undefined or false
-		var val, ret, namespace, all, handlers;
-
-		event = arguments[0] = jQuery.event.fix( event || window.event );
-
-		// Namespaced event handlers
-		namespace = event.type.split(".");
-		event.type = namespace[0];
-		namespace = namespace[1];
-		// Cache this now, all = true means, any handler
-		all = !namespace && !event.exclusive;
-
-		handlers = ( jQuery.data(this, "events") || {} )[event.type];
-
-		for ( var j in handlers ) {
-			var handler = handlers[j];
-
-			// Filter the functions by class
-			if ( all || handler.type == namespace ) {
-				// Pass in a reference to the handler function itself
-				// So that we can later remove it
-				event.handler = handler;
-				event.data = handler.data;
-
-				ret = handler.apply( this, arguments );
-
-				if ( val !== false )
-					val = ret;
-
-				if ( ret === false ) {
-					event.preventDefault();
-					event.stopPropagation();
-				}
-			}
-		}
-
-		return val;
-	},
-
-	props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode metaKey newValue originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target timeStamp toElement type view wheelDelta which".split(" "),
-
-	fix: function(event) {
-		if ( event[expando] == true )
-			return event;
-
-		// store a copy of the original event object
-		// and "clone" to set read-only properties
-		var originalEvent = event;
-		event = { originalEvent: originalEvent };
-
-		for ( var i = this.props.length, prop; i; ){
-			prop = this.props[ --i ];
-			event[ prop ] = originalEvent[ prop ];
-		}
-
-		// Mark it as fixed
-		event[expando] = true;
-
-		// add preventDefault and stopPropagation since
-		// they will not work on the clone
-		event.preventDefault = function() {
-			// if preventDefault exists run it on the original event
-			if (originalEvent.preventDefault)
-				originalEvent.preventDefault();
-			// otherwise set the returnValue property of the original event to false (IE)
-			originalEvent.returnValue = false;
-		};
-		event.stopPropagation = function() {
-			// if stopPropagation exists run it on the original event
-			if (originalEvent.stopPropagation)
-				originalEvent.stopPropagation();
-			// otherwise set the cancelBubble property of the original event to true (IE)
-			originalEvent.cancelBubble = true;
-		};
-
-		// Fix timeStamp
-		event.timeStamp = event.timeStamp || now();
-
-		// Fix target property, if necessary
-		if ( !event.target )
-			event.target = event.srcElement || document; // Fixes #1925 where srcElement might not be defined either
-
-		// check if target is a textnode (safari)
-		if ( event.target.nodeType == 3 )
-			event.target = event.target.parentNode;
-
-		// Add relatedTarget, if necessary
-		if ( !event.relatedTarget && event.fromElement )
-			event.relatedTarget = event.fromElement == event.target ? event.toElement : event.fromElement;
-
-		// Calculate pageX/Y if missing and clientX/Y available
-		if ( event.pageX == null && event.clientX != null ) {
-			var doc = document.documentElement, body = document.body;
-			event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc.clientLeft || 0);
-			event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc.clientTop || 0);
-		}
-
-		// Add which for key events
-		if ( !event.which && ((event.charCode || event.charCode === 0) ? event.charCode : event.keyCode) )
-			event.which = event.charCode || event.keyCode;
-
-		// Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for Macs)
-		if ( !event.metaKey && event.ctrlKey )
-			event.metaKey = event.ctrlKey;
-
-		// Add which for click: 1 == left; 2 == middle; 3 == right
-		// Note: button is not normalized, so don't use it
-		if ( !event.which && event.button )
-			event.which = (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) ));
-
-		return event;
-	},
-
-	proxy: function( fn, proxy ){
-		// Set the guid of unique handler to the same of original handler, so it can be removed
-		proxy.guid = fn.guid = fn.guid || proxy.guid || this.guid++;
-		// So proxy can be declared as an argument
-		return proxy;
-	},
-
-	special: {
-		ready: {
-			setup: function() {
-				// Make sure the ready event is setup
-				bindReady();
-				return;
-			},
-
-			teardown: function() { return; }
-		},
-
-		mouseenter: {
-			setup: function() {
-				if ( jQuery.browser.msie ) return false;
-				jQuery(this).bind("mouseover", jQuery.event.special.mouseenter.handler);
-				return true;
-			},
-
-			teardown: function() {
-				if ( jQuery.browser.msie ) return false;
-				jQuery(this).unbind("mouseover", jQuery.event.special.mouseenter.handler);
-				return true;
-			},
-
-			handler: function(event) {
-				// If we actually just moused on to a sub-element, ignore it
-				if ( withinElement(event, this) ) return true;
-				// Execute the right handlers by setting the event type to mouseenter
-				event.type = "mouseenter";
-				return jQuery.event.handle.apply(this, arguments);
-			}
-		},
-
-		mouseleave: {
-			setup: function() {
-				if ( jQuery.browser.msie ) return false;
-				jQuery(this).bind("mouseout", jQuery.event.special.mouseleave.handler);
-				return true;
-			},
-
-			teardown: function() {
-				if ( jQuery.browser.msie ) return false;
-				jQuery(this).unbind("mouseout", jQuery.event.special.mouseleave.handler);
-				return true;
-			},
-
-			handler: function(event) {
-				// If we actually just moused on to a sub-element, ignore it
-				if ( withinElement(event, this) ) return true;
-				// Execute the right handlers by setting the event type to mouseleave
-				event.type = "mouseleave";
-				return jQuery.event.handle.apply(this, arguments);
-			}
-		}
-	}
-};
-
-jQuery.fn.extend({
-	bind: function( type, data, fn ) {
-		return type == "unload" ? this.one(type, data, fn) : this.each(function(){
-			jQuery.event.add( this, type, fn || data, fn && data );
-		});
-	},
-
-	one: function( type, data, fn ) {
-		var one = jQuery.event.proxy( fn || data, function(event) {
-			jQuery(this).unbind(event, one);
-			return (fn || data).apply( this, arguments );
-		});
-		return this.each(function(){
-			jQuery.event.add( this, type, one, fn && data);
-		});
-	},
-
-	unbind: function( type, fn ) {
-		return this.each(function(){
-			jQuery.event.remove( this, type, fn );
-		});
-	},
-
-	trigger: function( type, data, fn ) {
-		return this.each(function(){
-			jQuery.event.trigger( type, data, this, true, fn );
-		});
-	},
-
-	triggerHandler: function( type, data, fn ) {
-		return this[0] && jQuery.event.trigger( type, data, this[0], false, fn );
-	},
-
-	toggle: function( fn ) {
-		// Save reference to arguments for access in closure
-		var args = arguments, i = 1;
-
-		// link all the functions, so any of them can unbind this click handler
-		while( i < args.length )
-			jQuery.event.proxy( fn, args[i++] );
-
-		return this.click( jQuery.event.proxy( fn, function(event) {
-			// Figure out which function to execute
-			this.lastToggle = ( this.lastToggle || 0 ) % i;
-
-			// Make sure that clicks stop
-			event.preventDefault();
-
-			// and execute the function
-			return args[ this.lastToggle++ ].apply( this, arguments ) || false;
-		}));
-	},
-
-	hover: function(fnOver, fnOut) {
-		return this.bind('mouseenter', fnOver).bind('mouseleave', fnOut);
-	},
-
-	ready: function(fn) {
-		// Attach the listeners
-		bindReady();
-
-		// If the DOM is already ready
-		if ( jQuery.isReady )
-			// Execute the function immediately
-			fn.call( document, jQuery );
-
-		// Otherwise, remember the function for later
-		else
-			// Add the function to the wait list
-			jQuery.readyList.push( function() { return fn.call(this, jQuery); } );
-
-		return this;
-	}
-});
-
-jQuery.extend({
-	isReady: false,
-	readyList: [],
-	// Handle when the DOM is ready
-	ready: function() {
-		// Make sure that the DOM is not already loaded
-		if ( !jQuery.isReady ) {
-			// Remember that the DOM is ready
-			jQuery.isReady = true;
-
-			// If there are functions bound, to execute
-			if ( jQuery.readyList ) {
-				// Execute all of them
-				jQuery.each( jQuery.readyList, function(){
-					this.call( document );
-				});
-
-				// Reset the list of functions
-				jQuery.readyList = null;
-			}
-
-			// Trigger any bound ready events
-			jQuery(document).triggerHandler("ready");
-		}
-	}
-});
-
-var readyBound = false;
-
-function bindReady(){
-	if ( readyBound ) return;
-	readyBound = true;
-
-	// Mozilla, Opera (see further below for it) and webkit nightlies currently support this event
-	if ( document.addEventListener && !jQuery.browser.opera)
-		// Use the handy event callback
-		document.addEventListener( "DOMContentLoaded", jQuery.ready, false );
-
-	// If IE is used and is not in a frame
-	// Continually check to see if the document is ready
-	if ( jQuery.browser.msie && window == top ) (function(){
-		if (jQuery.isReady) return;
-		try {
-			// If IE is used, use the trick by Diego Perini
-			// http://javascript.nwbox.com/IEContentLoaded/
-			document.documentElement.doScroll("left");
-		} catch( error ) {
-			setTimeout( arguments.callee, 0 );
-			return;
-		}
-		// and execute any waiting functions
-		jQuery.ready();
-	})();
-
-	if ( jQuery.browser.opera )
-		document.addEventListener( "DOMContentLoaded", function () {
-			if (jQuery.isReady) return;
-			for (var i = 0; i < document.styleSheets.length; i++)
-				if (document.styleSheets[i].disabled) {
-					setTimeout( arguments.callee, 0 );
-					return;
-				}
-			// and execute any waiting functions
-			jQuery.ready();
-		}, false);
-
-	if ( jQuery.browser.safari ) {
-		var numStyles;
-		(function(){
-			if (jQuery.isReady) return;
-			if ( document.readyState != "loaded" && document.readyState != "complete" ) {
-				setTimeout( arguments.callee, 0 );
-				return;
-			}
-			if ( numStyles === undefined )
-				numStyles = jQuery("style, link[rel=stylesheet]").length;
-			if ( document.styleSheets.length != numStyles ) {
-				setTimeout( arguments.callee, 0 );
-				return;
-			}
-			// and execute any waiting functions
-			jQuery.ready();
-		})();
-	}
-
-	// A fallback to window.onload, that will always work
-	jQuery.event.add( window, "load", jQuery.ready );
-}
-
-jQuery.each( ("blur,focus,load,resize,scroll,unload,click,dblclick," +
-	"mousedown,mouseup,mousemove,mouseover,mouseout,change,select," +
-	"submit,keydown,keypress,keyup,error").split(","), function(i, name){
-
-	// Handle event binding
-	jQuery.fn[name] = function(fn){
-		return fn ? this.bind(name, fn) : this.trigger(name);
-	};
-});
-
-// Checks if an event happened on an element within another element
-// Used in jQuery.event.special.mouseenter and mouseleave handlers
-var withinElement = function(event, elem) {
-	// Check if mouse(over|out) are still within the same parent element
-	var parent = event.relatedTarget;
-	// Traverse up the tree
-	while ( parent && parent != elem ) try { parent = parent.parentNode; } catch(error) { parent = elem; }
-	// Return true if we actually just moused on to a sub-element
-	return parent == elem;
-};
-
-// Prevent memory leaks in IE
-// And prevent errors on refresh with events like mouseover in other browsers
-// Window isn't included so as not to unbind existing unload events
-jQuery(window).bind("unload", function() {
-	jQuery("*").add(document).unbind();
-});
-jQuery.fn.extend({
-	// Keep a copy of the old load
-	_load: jQuery.fn.load,
-
-	load: function( url, params, callback ) {
-		if ( typeof url != 'string' )
-			return this._load( url );
-
-		var off = url.indexOf(" ");
-		if ( off >= 0 ) {
-			var selector = url.slice(off, url.length);
-			url = url.slice(0, off);
-		}
-
-		callback = callback || function(){};
-
-		// Default to a GET request
-		var type = "GET";
-
-		// If the second parameter was provided
-		if ( params )
-			// If it's a function
-			if ( jQuery.isFunction( params ) ) {
-				// We assume that it's the callback
-				callback = params;
-				params = null;
-
-			// Otherwise, build a param string
-			} else if( typeof params == 'object' ) {
-				params = jQuery.param( params );
-				type = "POST";
-			}
-
-		var self = this;
-
-		// Request the remote document
-		jQuery.ajax({
-			url: url,
-			type: type,
-			dataType: "html",
-			data: params,
-			complete: function(res, status){
-				// If successful, inject the HTML into all the matched elements
-				if ( status == "success" || status == "notmodified" )
-					// See if a selector was specified
-					self.html( selector ?
-						// Create a dummy div to hold the results
-						jQuery("<div/>")
-							// inject the contents of the document in, removing the scripts
-							// to avoid any 'Permission Denied' errors in IE
-							.append(res.responseText.replace(/<script(.|\s)*?\/script>/g, ""))
-
-							// Locate the specified elements
-							.find(selector) :
-
-						// If not, just inject the full result
-						res.responseText );
-
-				self.each( callback, [res.responseText, status, res] );
-			}
-		});
-		return this;
-	},
-
-	serialize: function() {
-		return jQuery.param(this.serializeArray());
-	},
-	serializeArray: function() {
-		return this.map(function(){
-			return jQuery.nodeName(this, "form") ?
-				jQuery.makeArray(this.elements) : this;
-		})
-		.filter(function(){
-			return this.name && !this.disabled &&
-				(this.checked || /select|textarea/i.test(this.nodeName) ||
-					/text|hidden|password/i.test(this.type));
-		})
-		.map(function(i, elem){
-			var val = jQuery(this).val();
-			return val == null ? null :
-				val.constructor == Array ?
-					jQuery.map( val, function(val, i){
-						return {name: elem.name, value: val};
-					}) :
-					{name: elem.name, value: val};
-		}).get();
-	}
-});
-
-// Attach a bunch of functions for handling common AJAX events
-jQuery.each( "ajaxStart,ajaxStop,ajaxComplete,ajaxError,ajaxSuccess,ajaxSend".split(","), function(i,o){
-	jQuery.fn[o] = function(f){
-		return this.bind(o, f);
-	};
-});
-
-var jsc = now();
-
-jQuery.extend({
-	get: function( url, data, callback, type ) {
-		// shift arguments if data argument was ommited
-		if ( jQuery.isFunction( data ) ) {
-			callback = data;
-			data = null;
-		}
-
-		return jQuery.ajax({
-			type: "GET",
-			url: url,
-			data: data,
-			success: callback,
-			dataType: type
-		});
-	},
-
-	getScript: function( url, callback ) {
-		return jQuery.get(url, null, callback, "script");
-	},
-
-	getJSON: function( url, data, callback ) {
-		return jQuery.get(url, data, callback, "json");
-	},
-
-	post: function( url, data, callback, type ) {
-		if ( jQuery.isFunction( data ) ) {
-			callback = data;
-			data = {};
-		}
-
-		return jQuery.ajax({
-			type: "POST",
-			url: url,
-			data: data,
-			success: callback,
-			dataType: type
-		});
-	},
-
-	ajaxSetup: function( settings ) {
-		jQuery.extend( jQuery.ajaxSettings, settings );
-	},
-
-	ajaxSettings: {
-		url: location.href,
-		global: true,
-		type: "GET",
-		timeout: 0,
-		contentType: "application/x-www-form-urlencoded",
-		processData: true,
-		async: true,
-		data: null,
-		username: null,
-		password: null,
-		accepts: {
-			xml: "application/xml, text/xml",
-			html: "text/html",
-			script: "text/javascript, application/javascript",
-			json: "application/json, text/javascript",
-			text: "text/plain",
-			_default: "*/*"
-		}
-	},
-
-	// Last-Modified header cache for next request
-	lastModified: {},
-
-	ajax: function( s ) {
-		// Extend the settings, but re-extend 's' so that it can be
-		// checked again later (in the test suite, specifically)
-		s = jQuery.extend(true, s, jQuery.extend(true, {}, jQuery.ajaxSettings, s));
-
-		var jsonp, jsre = /=\?(&|$)/g, status, data,
-			type = s.type.toUpperCase();
-
-		// convert data if not already a string
-		if ( s.data && s.processData && typeof s.data != "string" )
-			s.data = jQuery.param(s.data);
-
-		// Handle JSONP Parameter Callbacks
-		if ( s.dataType == "jsonp" ) {
-			if ( type == "GET" ) {
-				if ( !s.url.match(jsre) )
-					s.url += (s.url.match(/\?/) ? "&" : "?") + (s.jsonp || "callback") + "=?";
-			} else if ( !s.data || !s.data.match(jsre) )
-				s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";
-			s.dataType = "json";
-		}
-
-		// Build temporary JSONP function
-		if ( s.dataType == "json" && (s.data && s.data.match(jsre) || s.url.match(jsre)) ) {
-			jsonp = "jsonp" + jsc++;
-
-			// Replace the =? sequence both in the query string and the data
-			if ( s.data )
-				s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");
-			s.url = s.url.replace(jsre, "=" + jsonp + "$1");
-
-			// We need to make sure
-			// that a JSONP style response is executed properly
-			s.dataType = "script";
-
-			// Handle JSONP-style loading
-			window[ jsonp ] = function(tmp){
-				data = tmp;
-				success();
-				complete();
-				// Garbage collect
-				window[ jsonp ] = undefined;
-				try{ delete window[ jsonp ]; } catch(e){}
-				if ( head )
-					head.removeChild( script );
-			};
-		}
-
-		if ( s.dataType == "script" && s.cache == null )
-			s.cache = false;
-
-		if ( s.cache === false && type == "GET" ) {
-			var ts = now();
-			// try replacing _= if it is there
-			var ret = s.url.replace(/(\?|&)_=.*?(&|$)/, "$1_=" + ts + "$2");
-			// if nothing was replaced, add timestamp to the end
-			s.url = ret + ((ret == s.url) ? (s.url.match(/\?/) ? "&" : "?") + "_=" + ts : "");
-		}
-
-		// If data is available, append data to url for get requests
-		if ( s.data && type == "GET" ) {
-			s.url += (s.url.match(/\?/) ? "&" : "?") + s.data;
-
-			// IE likes to send both get and post data, prevent this
-			s.data = null;
-		}
-
-		// Watch for a new set of requests
-		if ( s.global && ! jQuery.active++ )
-			jQuery.event.trigger( "ajaxStart" );
-
-		// Matches an absolute URL, and saves the domain
-		var remote = /^(?:\w+:)?\/\/([^\/?#]+)/;
-
-		// If we're requesting a remote document
-		// and trying to load JSON or Script with a GET
-		if ( s.dataType == "script" && type == "GET"
-				&& remote.test(s.url) && remote.exec(s.url)[1] != location.host ){
-			var head = document.getElementsByTagName("head")[0];
-			var script = document.createElement("script");
-			script.src = s.url;
-			if (s.scriptCharset)
-				script.charset = s.scriptCharset;
-
-			// Handle Script loading
-			if ( !jsonp ) {
-				var done = false;
-
-				// Attach handlers for all browsers
-				script.onload = script.onreadystatechange = function(){
-					if ( !done && (!this.readyState ||
-							this.readyState == "loaded" || this.readyState == "complete") ) {
-						done = true;
-						success();
-						complete();
-						head.removeChild( script );
-					}
-				};
-			}
-
-			head.appendChild(script);
-
-			// We handle everything using the script element injection
-			return undefined;
-		}
-
-		var requestDone = false;
-
-		// Create the request object; Microsoft failed to properly
-		// implement the XMLHttpRequest in IE7, so we use the ActiveXObject when it is available
-		var xhr = window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();
-
-		// Open the socket
-		// Passing null username, generates a login popup on Opera (#2865)
-		if( s.username )
-			xhr.open(type, s.url, s.async, s.username, s.password);
-		else
-			xhr.open(type, s.url, s.async);
-
-		// Need an extra try/catch for cross domain requests in Firefox 3
-		try {
-			// Set the correct header, if data is being sent
-			if ( s.data )
-				xhr.setRequestHeader("Content-Type", s.contentType);
-
-			// Set the If-Modified-Since header, if ifModified mode.
-			if ( s.ifModified )
-				xhr.setRequestHeader("If-Modified-Since",
-					jQuery.lastModified[s.url] || "Thu, 01 Jan 1970 00:00:00 GMT" );
-
-			// Set header so the called script knows that it's an XMLHttpRequest
-			xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
-
-			// Set the Accepts header for the server, depending on the dataType
-			xhr.setRequestHeader("Accept", s.dataType && s.accepts[ s.dataType ] ?
-				s.accepts[ s.dataType ] + ", */*" :
-				s.accepts._default );
-		} catch(e){}
-
-		// Allow custom headers/mimetypes
-		if ( s.beforeSend && s.beforeSend(xhr, s) === false ) {
-			// cleanup active request counter
-			s.global && jQuery.active--;
-			// close opended socket
-			xhr.abort();
-			return false;
-		}
-
-		if ( s.global )
-			jQuery.event.trigger("ajaxSend", [xhr, s]);
-
-		// Wait for a response to come back
-		var onreadystatechange = function(isTimeout){
-			// The transfer is complete and the data is available, or the request timed out
-			if ( !requestDone && xhr && (xhr.readyState == 4 || isTimeout == "timeout") ) {
-				requestDone = true;
-
-				// clear poll interval
-				if (ival) {
-					clearInterval(ival);
-					ival = null;
-				}
-
-				status = isTimeout == "timeout" ? "timeout" :
-					!jQuery.httpSuccess( xhr ) ? "error" :
-					s.ifModified && jQuery.httpNotModified( xhr, s.url ) ? "notmodified" :
-					"success";
-
-				if ( status == "success" ) {
-					// Watch for, and catch, XML document parse errors
-					try {
-						// process the data (runs the xml through httpData regardless of callback)
-						data = jQuery.httpData( xhr, s.dataType, s.dataFilter );
-					} catch(e) {
-						status = "parsererror";
-					}
-				}
-
-				// Make sure that the request was successful or notmodified
-				if ( status == "success" ) {
-					// Cache Last-Modified header, if ifModified mode.
-					var modRes;
-					try {
-						modRes = xhr.getResponseHeader("Last-Modified");
-					} catch(e) {} // swallow exception thrown by FF if header is not available
-
-					if ( s.ifModified && modRes )
-						jQuery.lastModified[s.url] = modRes;
-
-					// JSONP handles its own success callback
-					if ( !jsonp )
-						success();
-				} else
-					jQuery.handleError(s, xhr, status);
-
-				// Fire the complete handlers
-				complete();
-
-				// Stop memory leaks
-				if ( s.async )
-					xhr = null;
-			}
-		};
-
-		if ( s.async ) {
-			// don't attach the handler to the request, just poll it instead
-			var ival = setInterval(onreadystatechange, 13);
-
-			// Timeout checker
-			if ( s.timeout > 0 )
-				setTimeout(function(){
-					// Check to see if the request is still happening
-					if ( xhr ) {
-						// Cancel the request
-						xhr.abort();
-
-						if( !requestDone )
-							onreadystatechange( "timeout" );
-					}
-				}, s.timeout);
-		}
-
-		// Send the data
-		try {
-			xhr.send(s.data);
-		} catch(e) {
-			jQuery.handleError(s, xhr, null, e);
-		}
-
-		// firefox 1.5 doesn't fire statechange for sync requests
-		if ( !s.async )
-			onreadystatechange();
-
-		function success(){
-			// If a local callback was specified, fire it and pass it the data
-			if ( s.success )
-				s.success( data, status );
-
-			// Fire the global callback
-			if ( s.global )
-				jQuery.event.trigger( "ajaxSuccess", [xhr, s] );
-		}
-
-		function complete(){
-			// Process result
-			if ( s.complete )
-				s.complete(xhr, status);
-
-			// The request was completed
-			if ( s.global )
-				jQuery.event.trigger( "ajaxComplete", [xhr, s] );
-
-			// Handle the global AJAX counter
-			if ( s.global && ! --jQuery.active )
-				jQuery.event.trigger( "ajaxStop" );
-		}
-
-		// return XMLHttpRequest to allow aborting the request etc.
-		return xhr;
-	},
-
-	handleError: function( s, xhr, status, e ) {
-		// If a local callback was specified, fire it
-		if ( s.error ) s.error( xhr, status, e );
-
-		// Fire the global callback
-		if ( s.global )
-			jQuery.event.trigger( "ajaxError", [xhr, s, e] );
-	},
-
-	// Counter for holding the number of active queries
-	active: 0,
-
-	// Determines if an XMLHttpRequest was successful or not
-	httpSuccess: function( xhr ) {
-		try {
-			// IE error sometimes returns 1223 when it should be 204 so treat it as success, see #1450
-			return !xhr.status && location.protocol == "file:" ||
-				( xhr.status >= 200 && xhr.status < 300 ) || xhr.status == 304 || xhr.status == 1223 ||
-				jQuery.browser.safari && xhr.status == undefined;
-		} catch(e){}
-		return false;
-	},
-
-	// Determines if an XMLHttpRequest returns NotModified
-	httpNotModified: function( xhr, url ) {
-		try {
-			var xhrRes = xhr.getResponseHeader("Last-Modified");
-
-			// Firefox always returns 200. check Last-Modified date
-			return xhr.status == 304 || xhrRes == jQuery.lastModified[url] ||
-				jQuery.browser.safari && xhr.status == undefined;
-		} catch(e){}
-		return false;
-	},
-
-	httpData: function( xhr, type, filter ) {
-		var ct = xhr.getResponseHeader("content-type"),
-			xml = type == "xml" || !type && ct && ct.indexOf("xml") >= 0,
-			data = xml ? xhr.responseXML : xhr.responseText;
-
-		if ( xml && data.documentElement.tagName == "parsererror" )
-			throw "parsererror";
-			
-		// Allow a pre-filtering function to sanitize the response
-		if( filter )
-			data = filter( data, type );
-
-		// If the type is "script", eval it in global context
-		if ( type == "script" )
-			jQuery.globalEval( data );
-
-		// Get the JavaScript object, if JSON is used.
-		if ( type == "json" )
-			data = eval("(" + data + ")");
-
-		return data;
-	},
-
-	// Serialize an array of form elements or a set of
-	// key/values into a query string
-	param: function( a ) {
-		var s = [ ];
-
-		function add( key, value ){
-			s[ s.length ] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
-		};
-
-		// If an array was passed in, assume that it is an array
-		// of form elements
-		if ( a.constructor == Array || a.jquery )
-			// Serialize the form elements
-			jQuery.each( a, function(){
-				add( this.name, this.value );
-			});
-
-		// Otherwise, assume that it's an object of key/value pairs
-		else
-			// Serialize the key/values
-			for ( var j in a )
-				// If the value is an array then the key names need to be repeated
-				if ( a[j] && a[j].constructor == Array )
-					jQuery.each( a[j], function(){
-						add( j, this );
-					});
-				else
-					add( j, jQuery.isFunction(a[j]) ? a[j]() : a[j] );
-
-		// Return the resulting serialization
-		return s.join("&").replace(/%20/g, "+");
-	}
-
-});
-jQuery.fn.extend({
-	show: function(speed,callback){
-		return speed ?
-			this.animate({
-				height: "show", width: "show", opacity: "show"
-			}, speed, callback) :
-
-			this.filter(":hidden").each(function(){
-				this.style.display = this.oldblock || "";
-				if ( jQuery.css(this,"display") == "none" ) {
-					var elem = jQuery("<" + this.tagName + " />").appendTo("body");
-					this.style.display = elem.css("display");
-					// handle an edge condition where css is - div { display:none; } or similar
-					if (this.style.display == "none")
-						this.style.display = "block";
-					elem.remove();
-				}
-			}).end();
-	},
-
-	hide: function(speed,callback){
-		return speed ?
-			this.animate({
-				height: "hide", width: "hide", opacity: "hide"
-			}, speed, callback) :
-
-			this.filter(":visible").each(function(){
-				this.oldblock = this.oldblock || jQuery.css(this,"display");
-				this.style.display = "none";
-			}).end();
-	},
-
-	// Save the old toggle function
-	_toggle: jQuery.fn.toggle,
-
-	toggle: function( fn, fn2 ){
-		return jQuery.isFunction(fn) && jQuery.isFunction(fn2) ?
-			this._toggle.apply( this, arguments ) :
-			fn ?
-				this.animate({
-					height: "toggle", width: "toggle", opacity: "toggle"
-				}, fn, fn2) :
-				this.each(function(){
-					jQuery(this)[ jQuery(this).is(":hidden") ? "show" : "hide" ]();
-				});
-	},
-
-	slideDown: function(speed,callback){
-		return this.animate({height: "show"}, speed, callback);
-	},
-
-	slideUp: function(speed,callback){
-		return this.animate({height: "hide"}, speed, callback);
-	},
-
-	slideToggle: function(speed, callback){
-		return this.animate({height: "toggle"}, speed, callback);
-	},
-
-	fadeIn: function(speed, callback){
-		return this.animate({opacity: "show"}, speed, callback);
-	},
-
-	fadeOut: function(speed, callback){
-		return this.animate({opacity: "hide"}, speed, callback);
-	},
-
-	fadeTo: function(speed,to,callback){
-		return this.animate({opacity: to}, speed, callback);
-	},
-
-	animate: function( prop, speed, easing, callback ) {
-		var optall = jQuery.speed(speed, easing, callback);
-
-		return this[ optall.queue === false ? "each" : "queue" ](function(){
-			if ( this.nodeType != 1)
-				return false;
-
-			var opt = jQuery.extend({}, optall), p,
-				hidden = jQuery(this).is(":hidden"), self = this;
-
-			for ( p in prop ) {
-				if ( prop[p] == "hide" && hidden || prop[p] == "show" && !hidden )
-					return opt.complete.call(this);
-
-				if ( p == "height" || p == "width" ) {
-					// Store display property
-					opt.display = jQuery.css(this, "display");
-
-					// Make sure that nothing sneaks out
-					opt.overflow = this.style.overflow;
-				}
-			}
-
-			if ( opt.overflow != null )
-				this.style.overflow = "hidden";
-
-			opt.curAnim = jQuery.extend({}, prop);
-
-			jQuery.each( prop, function(name, val){
-				var e = new jQuery.fx( self, opt, name );
-
-				if ( /toggle|show|hide/.test(val) )
-					e[ val == "toggle" ? hidden ? "show" : "hide" : val ]( prop );
-				else {
-					var parts = val.toString().match(/^([+-]=)?([\d+-.]+)(.*)$/),
-						start = e.cur(true) || 0;
-
-					if ( parts ) {
-						var end = parseFloat(parts[2]),
-							unit = parts[3] || "px";
-
-						// We need to compute starting value
-						if ( unit != "px" ) {
-							self.style[ name ] = (end || 1) + unit;
-							start = ((end || 1) / e.cur(true)) * start;
-							self.style[ name ] = start + unit;
-						}
-
-						// If a +=/-= token was provided, we're doing a relative animation
-						if ( parts[1] )
-							end = ((parts[1] == "-=" ? -1 : 1) * end) + start;
-
-						e.custom( start, end, unit );
-					} else
-						e.custom( start, val, "" );
-				}
-			});
-
-			// For JS strict compliance
-			return true;
-		});
-	},
-
-	queue: function(type, fn){
-		if ( jQuery.isFunction(type) || ( type && type.constructor == Array )) {
-			fn = type;
-			type = "fx";
-		}
-
-		if ( !type || (typeof type == "string" && !fn) )
-			return queue( this[0], type );
-
-		return this.each(function(){
-			if ( fn.constructor == Array )
-				queue(this, type, fn);
-			else {
-				queue(this, type).push( fn );
-
-				if ( queue(this, type).length == 1 )
-					fn.call(this);
-			}
-		});
-	},
-
-	stop: function(clearQueue, gotoEnd){
-		var timers = jQuery.timers;
-
-		if (clearQueue)
-			this.queue([]);
-
-		this.each(function(){
-			// go in reverse order so anything added to the queue during the loop is ignored
-			for ( var i = timers.length - 1; i >= 0; i-- )
-				if ( timers[i].elem == this ) {
-					if (gotoEnd)
-						// force the next step to be the last
-						timers[i](true);
-					timers.splice(i, 1);
-				}
-		});
-
-		// start the next in the queue if the last step wasn't forced
-		if (!gotoEnd)
-			this.dequeue();
-
-		return this;
-	}
-
-});
-
-var queue = function( elem, type, array ) {
-	if ( elem ){
-
-		type = type || "fx";
-
-		var q = jQuery.data( elem, type + "queue" );
-
-		if ( !q || array )
-			q = jQuery.data( elem, type + "queue", jQuery.makeArray(array) );
-
-	}
-	return q;
-};
-
-jQuery.fn.dequeue = function(type){
-	type = type || "fx";
-
-	return this.each(function(){
-		var q = queue(this, type);
-
-		q.shift();
-
-		if ( q.length )
-			q[0].call( this );
-	});
-};
-
-jQuery.extend({
-
-	speed: function(speed, easing, fn) {
-		var opt = speed && speed.constructor == Object ? speed : {
-			complete: fn || !fn && easing ||
-				jQuery.isFunction( speed ) && speed,
-			duration: speed,
-			easing: fn && easing || easing && easing.constructor != Function && easing
-		};
-
-		opt.duration = (opt.duration && opt.duration.constructor == Number ?
-			opt.duration :
-			jQuery.fx.speeds[opt.duration]) || jQuery.fx.speeds.def;
-
-		// Queueing
-		opt.old = opt.complete;
-		opt.complete = function(){
-			if ( opt.queue !== false )
-				jQuery(this).dequeue();
-			if ( jQuery.isFunction( opt.old ) )
-				opt.old.call( this );
-		};
-
-		return opt;
-	},
-
-	easing: {
-		linear: function( p, n, firstNum, diff ) {
-			return firstNum + diff * p;
-		},
-		swing: function( p, n, firstNum, diff ) {
-			return ((-Math.cos(p*Math.PI)/2) + 0.5) * diff + firstNum;
-		}
-	},
-
-	timers: [],
-	timerId: null,
-
-	fx: function( elem, options, prop ){
-		this.options = options;
-		this.elem = elem;
-		this.prop = prop;
-
-		if ( !options.orig )
-			options.orig = {};
-	}
-
-});
-
-jQuery.fx.prototype = {
-
-	// Simple function for setting a style value
-	update: function(){
-		if ( this.options.step )
-			this.options.step.call( this.elem, this.now, this );
-
-		(jQuery.fx.step[this.prop] || jQuery.fx.step._default)( this );
-
-		// Set display property to block for height/width animations
-		if ( this.prop == "height" || this.prop == "width" )
-			this.elem.style.display = "block";
-	},
-
-	// Get the current size
-	cur: function(force){
-		if ( this.elem[this.prop] != null && this.elem.style[this.prop] == null )
-			return this.elem[ this.prop ];
-
-		var r = parseFloat(jQuery.css(this.elem, this.prop, force));
-		return r && r > -10000 ? r : parseFloat(jQuery.curCSS(this.elem, this.prop)) || 0;
-	},
-
-	// Start an animation from one number to another
-	custom: function(from, to, unit){
-		this.startTime = now();
-		this.start = from;
-		this.end = to;
-		this.unit = unit || this.unit || "px";
-		this.now = this.start;
-		this.pos = this.state = 0;
-		this.update();
-
-		var self = this;
-		function t(gotoEnd){
-			return self.step(gotoEnd);
-		}
-
-		t.elem = this.elem;
-
-		jQuery.timers.push(t);
-
-		if ( jQuery.timerId == null ) {
-			jQuery.timerId = setInterval(function(){
-				var timers = jQuery.timers;
-
-				for ( var i = 0; i < timers.length; i++ )
-					if ( !timers[i]() )
-						timers.splice(i--, 1);
-
-				if ( !timers.length ) {
-					clearInterval( jQuery.timerId );
-					jQuery.timerId = null;
-				}
-			}, 13);
-		}
-	},
-
-	// Simple 'show' function
-	show: function(){
-		// Remember where we started, so that we can go back to it later
-		this.options.orig[this.prop] = jQuery.attr( this.elem.style, this.prop );
-		this.options.show = true;
-
-		// Begin the animation
-		this.custom(0, this.cur());
-
-		// Make sure that we start at a small width/height to avoid any
-		// flash of content
-		if ( this.prop == "width" || this.prop == "height" )
-			this.elem.style[this.prop] = "1px";
-
-		// Start by showing the element
-		jQuery(this.elem).show();
-	},
-
-	// Simple 'hide' function
-	hide: function(){
-		// Remember where we started, so that we can go back to it later
-		this.options.orig[this.prop] = jQuery.attr( this.elem.style, this.prop );
-		this.options.hide = true;
-
-		// Begin the animation
-		this.custom(this.cur(), 0);
-	},
-
-	// Each step of an animation
-	step: function(gotoEnd){
-		var t = now();
-
-		if ( gotoEnd || t > this.options.duration + this.startTime ) {
-			this.now = this.end;
-			this.pos = this.state = 1;
-			this.update();
-
-			this.options.curAnim[ this.prop ] = true;
-
-			var done = true;
-			for ( var i in this.options.curAnim )
-				if ( this.options.curAnim[i] !== true )
-					done = false;
-
-			if ( done ) {
-				if ( this.options.display != null ) {
-					// Reset the overflow
-					this.elem.style.overflow = this.options.overflow;
-
-					// Reset the display
-					this.elem.style.display = this.options.display;
-					if ( jQuery.css(this.elem, "display") == "none" )
-						this.elem.style.display = "block";
-				}
-
-				// Hide the element if the "hide" operation was done
-				if ( this.options.hide )
-					this.elem.style.display = "none";
-
-				// Reset the properties, if the item has been hidden or shown
-				if ( this.options.hide || this.options.show )
-					for ( var p in this.options.curAnim )
-						jQuery.attr(this.elem.style, p, this.options.orig[p]);
-			}
-
-			if ( done )
-				// Execute the complete function
-				this.options.complete.call( this.elem );
-
-			return false;
-		} else {
-			var n = t - this.startTime;
-			this.state = n / this.options.duration;
-
-			// Perform the easing function, defaults to swing
-			this.pos = jQuery.easing[this.options.easing || (jQuery.easing.swing ? "swing" : "linear")](this.state, n, 0, 1, this.options.duration);
-			this.now = this.start + ((this.end - this.start) * this.pos);
-
-			// Perform the next step of the animation
-			this.update();
-		}
-
-		return true;
-	}
-
-};
-
-jQuery.extend( jQuery.fx, {
-	speeds:{
-		slow: 600,
- 		fast: 200,
- 		// Default speed
- 		def: 400
-	},
-	step: {
-		scrollLeft: function(fx){
-			fx.elem.scrollLeft = fx.now;
-		},
-
-		scrollTop: function(fx){
-			fx.elem.scrollTop = fx.now;
-		},
-
-		opacity: function(fx){
-			jQuery.attr(fx.elem.style, "opacity", fx.now);
-		},
-
-		_default: function(fx){
-			fx.elem.style[ fx.prop ] = fx.now + fx.unit;
-		}
-	}
-});
-// The Offset Method
-// Originally By Brandon Aaron, part of the Dimension Plugin
-// http://jquery.com/plugins/project/dimensions
-jQuery.fn.offset = function() {
-	var left = 0, top = 0, elem = this[0], results;
-
-	if ( elem ) with ( jQuery.browser ) {
-		var parent       = elem.parentNode,
-		    offsetChild  = elem,
-		    offsetParent = elem.offsetParent,
-		    doc          = elem.ownerDocument,
-		    safari2      = safari && parseInt(version) < 522 && !/adobeair/i.test(userAgent),
-		    css          = jQuery.curCSS,
-		    fixed        = css(elem, "position") == "fixed";
-
-		// Use getBoundingClientRect if available
-		if ( !(mozilla && elem == document.body) && elem.getBoundingClientRect ) {
-			var box = elem.getBoundingClientRect();
-
-			// Add the document scroll offsets
-			add(box.left + Math.max(doc.documentElement.scrollLeft, doc.body.scrollLeft),
-				box.top  + Math.max(doc.documentElement.scrollTop,  doc.body.scrollTop));
-
-			// IE adds the HTML element's border, by default it is medium which is 2px
-			// IE 6 and 7 quirks mode the border width is overwritable by the following css html { border: 0; }
-			// IE 7 standards mode, the border is always 2px
-			// This border/offset is typically represented by the clientLeft and clientTop properties
-			// However, in IE6 and 7 quirks mode the clientLeft and clientTop properties are not updated when overwriting it via CSS
-			// Therefore this method will be off by 2px in IE while in quirksmode
-			add( -doc.documentElement.clientLeft, -doc.documentElement.clientTop );
-
-		// Otherwise loop through the offsetParents and parentNodes
-		} else {
-
-			// Initial element offsets
-			add( elem.offsetLeft, elem.offsetTop );
-
-			// Get parent offsets
-			while ( offsetParent ) {
-				// Add offsetParent offsets
-				add( offsetParent.offsetLeft, offsetParent.offsetTop );
-
-				// Mozilla and Safari > 2 does not include the border on offset parents
-				// However Mozilla adds the border for table or table cells
-				if ( mozilla && !/^t(able|d|h)$/i.test(offsetParent.tagName) || safari && !safari2 )
-					border( offsetParent );
-
-				// Add the document scroll offsets if position is fixed on any offsetParent
-				if ( !fixed && css(offsetParent, "position") == "fixed" )
-					fixed = true;
-
-				// Set offsetChild to previous offsetParent unless it is the body element
-				offsetChild  = /^body$/i.test(offsetParent.tagName) ? offsetChild : offsetParent;
-				// Get next offsetParent
-				offsetParent = offsetParent.offsetParent;
-			}
-
-			// Get parent scroll offsets
-			while ( parent && parent.tagName && !/^body|html$/i.test(parent.tagName) ) {
-				// Remove parent scroll UNLESS that parent is inline or a table to work around Opera inline/table scrollLeft/Top bug
-				if ( !/^inline|table.*$/i.test(css(parent, "display")) )
-					// Subtract parent scroll offsets
-					add( -parent.scrollLeft, -parent.scrollTop );
-
-				// Mozilla does not add the border for a parent that has overflow != visible
-				if ( mozilla && css(parent, "overflow") != "visible" )
-					border( parent );
-
-				// Get next parent
-				parent = parent.parentNode;
-			}
-
-			// Safari <= 2 doubles body offsets with a fixed position element/offsetParent or absolutely positioned offsetChild
-			// Mozilla doubles body offsets with a non-absolutely positioned offsetChild
-			if ( (safari2 && (fixed || css(offsetChild, "position") == "absolute")) ||
-				(mozilla && css(offsetChild, "position") != "absolute") )
-					add( -doc.body.offsetLeft, -doc.body.offsetTop );
-
-			// Add the document scroll offsets if position is fixed
-			if ( fixed )
-				add(Math.max(doc.documentElement.scrollLeft, doc.body.scrollLeft),
-					Math.max(doc.documentElement.scrollTop,  doc.body.scrollTop));
-		}
-
-		// Return an object with top and left properties
-		results = { top: top, left: left };
-	}
-
-	function border(elem) {
-		add( jQuery.curCSS(elem, "borderLeftWidth", true), jQuery.curCSS(elem, "borderTopWidth", true) );
-	}
-
-	function add(l, t) {
-		left += parseInt(l, 10) || 0;
-		top += parseInt(t, 10) || 0;
-	}
-
-	return results;
-};
-
-
-jQuery.fn.extend({
-	position: function() {
-		var left = 0, top = 0, results;
-
-		if ( this[0] ) {
-			// Get *real* offsetParent
-			var offsetParent = this.offsetParent(),
-
-			// Get correct offsets
-			offset       = this.offset(),
-			parentOffset = /^body|html$/i.test(offsetParent[0].tagName) ? { top: 0, left: 0 } : offsetParent.offset();
-
-			// Subtract element margins
-			// note: when an element has margin: auto the offsetLeft and marginLeft 
-			// are the same in Safari causing offset.left to incorrectly be 0
-			offset.top  -= num( this, 'marginTop' );
-			offset.left -= num( this, 'marginLeft' );
-
-			// Add offsetParent borders
-			parentOffset.top  += num( offsetParent, 'borderTopWidth' );
-			parentOffset.left += num( offsetParent, 'borderLeftWidth' );
-
-			// Subtract the two offsets
-			results = {
-				top:  offset.top  - parentOffset.top,
-				left: offset.left - parentOffset.left
-			};
-		}
-
-		return results;
-	},
-
-	offsetParent: function() {
-		var offsetParent = this[0].offsetParent;
-		while ( offsetParent && (!/^body|html$/i.test(offsetParent.tagName) && jQuery.css(offsetParent, 'position') == 'static') )
-			offsetParent = offsetParent.offsetParent;
-		return jQuery(offsetParent);
-	}
-});
-
-
-// Create scrollLeft and scrollTop methods
-jQuery.each( ['Left', 'Top'], function(i, name) {
-	var method = 'scroll' + name;
-	
-	jQuery.fn[ method ] = function(val) {
-		if (!this[0]) return;
-
-		return val != undefined ?
-
-			// Set the scroll offset
-			this.each(function() {
-				this == window || this == document ?
-					window.scrollTo(
-						!i ? val : jQuery(window).scrollLeft(),
-						 i ? val : jQuery(window).scrollTop()
-					) :
-					this[ method ] = val;
-			}) :
-
-			// Return the scroll offset
-			this[0] == window || this[0] == document ?
-				self[ i ? 'pageYOffset' : 'pageXOffset' ] ||
-					jQuery.boxModel && document.documentElement[ method ] ||
-					document.body[ method ] :
-				this[0][ method ];
-	};
-});
-// Create innerHeight, innerWidth, outerHeight and outerWidth methods
-jQuery.each([ "Height", "Width" ], function(i, name){
-
-	var tl = i ? "Left"  : "Top",  // top or left
-		br = i ? "Right" : "Bottom"; // bottom or right
-
-	// innerHeight and innerWidth
-	jQuery.fn["inner" + name] = function(){
-		return this[ name.toLowerCase() ]() +
-			num(this, "padding" + tl) +
-			num(this, "padding" + br);
-	};
-
-	// outerHeight and outerWidth
-	jQuery.fn["outer" + name] = function(margin) {
-		return this["inner" + name]() +
-			num(this, "border" + tl + "Width") +
-			num(this, "border" + br + "Width") +
-			(margin ?
-				num(this, "margin" + tl) + num(this, "margin" + br) : 0);
-	};
-
-});})();
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/models.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/models.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templates/django_extensions/widgets/foreignkey_searchinput.html b/desktop/core/ext-py/django-extensions-0.5/django_extensions/templates/django_extensions/widgets/foreignkey_searchinput.html
deleted file mode 100644
index b0192c9..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templates/django_extensions/widgets/foreignkey_searchinput.html
+++ /dev/null
@@ -1,60 +0,0 @@
-{% load i18n %}
-<input type="text" id="lookup_{{ name }}" value="{{ label }}" style="display:none;" />
-<a href="{{ related_url }}{{ url }}" class="related-lookup" id="lookup_id_{{ name }}" onclick="return showRelatedObjectLookupPopup(this);">
-  <img src="{{ admin_media_prefix }}img/admin/selector-search.gif" width="16" height="16" alt="{% trans "Lookup" %}" />
-</a>
-<script type="text/javascript">
-$(document).ready(function() {
-    // Show lookup input
-    $("#lookup_{{ name }}").show();
-    function reset() {
-        $('#id_{{ name }}').val('');
-        $('#lookup_{{ name }}').val('');
-    };
-    function lookup(query) {
-        $.get('{{ search_path }}', {
-            'search_fields': '{{ search_fields }}',
-            'app_label': '{{ app_label }}',
-            'model_name': '{{ model_name }}',
-            'object_pk': query
-        }, function(data){
-            $('#lookup_{{ name }}').val(data);
-            {{ name }}_value = query;
-        });
-    };
-    $('#id_{{ name }}').bind(($.browser.opera ? "keypress" : "keyup"), function(event) {
-        if ($(this).val()) {
-            if (event.keyCode == 27) {
-                reset();
-            } else {
-                lookup($(this).val());
-            };
-        };
-    });
-    $('#lookup_{{ name }}').autocomplete('{{ search_path }}', {
-        extraParams: {
-            'search_fields': '{{ search_fields }}',
-            'app_label': '{{ app_label }}',
-            'model_name': '{{ model_name }}'
-        }
-    }).result(function(event, data, formatted) {
-        if (data) {
-            $('#id_{{ name }}').val(data[1]);
-        }
-    }).keyup(function(event){
-        if (event.keyCode == 27) {
-            reset();
-        };
-    });
-    var {{ name }}_value = $('#id_{{ name }}').val();
-    function check() {
-        {{ name }}_check = $('#id_{{ name }}').val();
-        if ({{ name }}_check) {
-            if ({{ name }}_check != {{ name }}_value) {
-                lookup({{ name }}_check);
-            }
-        }
-    }
-    timeout = window.setInterval(check, 300);
-});
-</script>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/highlighting.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/highlighting.py
deleted file mode 100644
index 4695749..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/highlighting.py
+++ /dev/null
@@ -1,89 +0,0 @@
-"""
-Similar to syntax_color.py but this is intended more for being able to
-copy+paste actual code into your Django templates without needing to
-escape or anything crazy.
-
-http://lobstertech.com/2008/aug/30/django_syntax_highlight_template_tag/
-
-Example:
-
- {% load highlighting %}
-
- <style>
- @import url("http://lobstertech.com/media/css/highlight.css");
- .highlight { background: #f8f8f8; }
- .highlight { font-size: 11px; margin: 1em; border: 1px solid #ccc;
-              border-left: 3px solid #F90; padding: 0; }
- .highlight pre { padding: 1em; overflow: auto; line-height: 120%; margin: 0; }
- .predesc { margin: 1.5em 1.5em -2.5em 1em; text-align: right;
-            font: bold 12px Tahoma, Arial, sans-serif;
-            letter-spacing: 1px; color: #333; }
- </style>
-
- <h2>check out this code</h2>
- 
- {% highlight 'python' 'Excerpt: blah.py' %}
- def need_food(self):
-     print "Love is <colder> than &death&"
- {% endhighlight %}
-
-"""
-
-from pygments import highlight as pyghighlight
-from pygments.lexers import get_lexer_by_name, guess_lexer
-from pygments.formatters import HtmlFormatter
-from django.conf import settings
-from django import template
-from django.template import Template, Context, Node, Variable
-from django.template.defaultfilters import stringfilter
-from django.utils.safestring import mark_safe
-
-register = template.Library()
-
-@register.filter
-@stringfilter
-def parse_template(value):
-    return mark_safe(Template(value).render(Context()))
-parse_template.is_safe = True
-
-class CodeNode(Node):
-    def __init__(self, language, nodelist, name=''):
-        self.language = Variable(language)
-        self.nodelist = nodelist
-        if name:
-            self.name = Variable(name)
-        else:
-            self.name = None
-
-    def render(self, context):
-        code = self.nodelist.render(context).strip()
-        lexer = get_lexer_by_name(self.language.resolve(context))
-        formatter = HtmlFormatter(linenos=False)
-        html = ""
-        if self.name:
-            name = self.name.resolve(context)
-            html = '<div class="predesc"><span>%s</span></div>' % (name)
-        return html + pyghighlight(code, lexer, formatter)
-
-@register.tag
-def highlight(parser, token):
-    """
-    Allows you to put a highlighted source code <pre> block in your code.
-    This takes two arguments, the language and a little explaination message
-    that will be generated before the code.  The second argument is optional.
-    
-    Your code will be fed through pygments so you can use any language it
-    supports.
-    
-    {% load highlighting %}
-    {% highlight 'python' 'Excerpt: blah.py' %}
-    def need_food(self):
-        print "Love is colder than death"
-    {% endhighlight %}
-    """
-    nodelist = parser.parse(('endhighlight',))
-    parser.delete_first_token()
-    bits = token.split_contents()[1:]
-    if len(bits) < 1:
-        raise TemplateSyntaxError("'highlight' statement requires an argument")
-    return CodeNode(bits[0], nodelist, *bits[1:])
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/syntax_color.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/syntax_color.py
deleted file mode 100644
index 38346af..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/syntax_color.py
+++ /dev/null
@@ -1,96 +0,0 @@
-r"""
-Template filter for rendering a string with syntax highlighting.
-It relies on Pygments to accomplish this.
-
-Some standard usage examples (from within Django templates).
-Coloring a string with the Python lexer:
-
-    {% load syntax_color %}
-    {{ code_string|colorize:"python" }}
-
-You may use any lexer in Pygments. The complete list of which
-can be found [on the Pygments website][1].
-
-[1]: http://pygments.org/docs/lexers/
-
-You may also have Pygments attempt to guess the correct lexer for
-a particular string. However, if may not be able to choose a lexer,
-in which case it will simply return the string unmodified. This is
-less efficient compared to specifying the lexer to use.
-
-    {{ code_string|colorize }}
-
-You may also render the syntax highlighed text with line numbers.
-
-    {% load syntax_color %}
-    {{ some_code|colorize_table:"html+django" }}
-    {{ let_pygments_pick_for_this_code|colorize_table }}
-
-Please note that before you can load the ``syntax_color`` template filters
-you will need to add the ``django_extensions.utils`` application to the
-``INSTALLED_APPS``setting in your project's ``settings.py`` file.
-"""
-
-__author__ = 'Will Larson <lethain@gmail.com>'
-
-
-from django import template
-from django.template.defaultfilters import stringfilter
-from django.utils.safestring import mark_safe
-from django.core.exceptions import ImproperlyConfigured
-
-try :
-    from pygments import highlight
-    from pygments.formatters import HtmlFormatter
-    from pygments.lexers import get_lexer_by_name,guess_lexer,ClassNotFound
-except ImportError:
-    raise ImproperlyConfigured(
-        "Please install 'pygments' library to use syntax_color.")
-
-register = template.Library()
-
-@register.simple_tag
-def pygments_css():
-    return HtmlFormatter().get_style_defs('.highlight')
-
-
-def generate_pygments_css(path=None):
-    if path is None:
-        import os
-        path = os.path.join(os.getcwd(),'pygments.css')
-    f = open(path,'w')
-    f.write(pygments_css())
-    f.close()
-
-
-def get_lexer(value,arg):
-    if arg is None:
-        return guess_lexer(value)
-    return get_lexer_by_name(arg)
-
-@register.filter(name='colorize')
-@stringfilter
-def colorize(value, arg=None):
-    try:
-        return mark_safe(highlight(value,get_lexer(value,arg),HtmlFormatter()))
-    except ClassNotFound:
-        return value
-
-
-@register.filter(name='colorize_table')
-@stringfilter
-def colorize_table(value,arg=None):
-    try:
-        return mark_safe(highlight(value,get_lexer(value,arg),HtmlFormatter(linenos='table')))
-    except ClassNotFound:
-        return value
-
-
-@register.filter(name='colorize_noclasses')
-@stringfilter
-def colorize_noclasses(value,arg=None):
-    try:
-        return mark_safe(highlight(value,get_lexer(value,arg),HtmlFormatter(noclasses=True)))
-    except ClassNotFound:
-        return value
-
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/truncate_letters.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/truncate_letters.py
deleted file mode 100644
index 2688d7e..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/truncate_letters.py
+++ /dev/null
@@ -1,21 +0,0 @@
-from django import template
-from django.template.defaultfilters import stringfilter
-
-register = template.Library()
-
-def truncateletters(value, arg):
-    """
-    Truncates a string after a certain number of letters
-    
-    Argument: Number of letters to truncate after
-    """
-    from django_extensions.utils.text import truncate_letters
-    try:
-        length = int(arg)
-    except ValueError: # invalid literal for int()
-        return value # Fail silently
-    return truncate_letters(value, length)
-
-truncateletters.is_safe = True
-truncateletters = stringfilter(truncateletters)
-register.filter(truncateletters)
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/widont.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/widont.py
deleted file mode 100644
index 6723e80..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/templatetags/widont.py
+++ /dev/null
@@ -1,62 +0,0 @@
-from django.template import Library
-from django.utils.encoding import force_unicode
-import re
-
-register = Library()
-
-re_widont = re.compile(r'\s+(\S+\s*)$')
-def widont(value, count=1):
-    """
-    Adds an HTML non-breaking space between the final two words of the string to
-    avoid "widowed" words.
-
-    Examples:
-
-    >>> print widont('Test   me   out')
-    Test   me&nbsp;out
-
-    >>> widont('It works with trailing spaces too  ')
-    u'It works with trailing spaces&nbsp;too  '
-
-    >>> print widont('NoEffect')
-    NoEffect
-    """
-    def replace(matchobj):
-        return u'&nbsp;%s' % matchobj.group(1)
-    for i in range(count):
-        value = re_widont.sub(replace, force_unicode(value))
-    return value
-
-re_widont_html = re.compile(r'([^<>\s])\s+([^<>\s]+\s*)(</?(?:address|blockquote|br|dd|div|dt|fieldset|form|h[1-6]|li|noscript|p|td|th)[^>]*>|$)', re.IGNORECASE)
-def widont_html(value):
-    """
-    Adds an HTML non-breaking space between the final two words at the end of
-    (and in sentences just outside of) block level tags to avoid "widowed"
-    words.
-
-    Examples:
-
-    >>> print widont_html('<h2>Here is a simple  example  </h2> <p>Single</p>')
-    <h2>Here is a simple&nbsp;example  </h2> <p>Single</p>
-
-    >>> print widont_html('<p>test me<br /> out</p><h2>Ok?</h2>Not in a p<p title="test me">and this</p>')
-    <p>test&nbsp;me<br /> out</p><h2>Ok?</h2>Not in a&nbsp;p<p title="test me">and&nbsp;this</p>
-
-    >>> print widont_html('leading text  <p>test me out</p>  trailing text')
-    leading&nbsp;text  <p>test me&nbsp;out</p>  trailing&nbsp;text
-    """
-    def replace(matchobj):
-        return u'%s&nbsp;%s%s' % matchobj.groups()
-    return re_widont_html.sub(replace, force_unicode(value))
-
-register.filter(widont)
-register.filter(widont_html)
-
-def _test():
-    import doctest
-    doctest.testmod()
-
-if __name__ == "__main__":
-    _test()
-
-
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/__init__.py
deleted file mode 100644
index 10ada9d..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/__init__.py
+++ /dev/null
@@ -1,11 +0,0 @@
-from django.db import models
-from django_extensions.tests.utils import UTILS_TESTS
-try:
-    from django_extensions.tests.encrypted_fields import EncryptedFieldsTestCase
-    from django_extensions.tests.models import Secret
-except ImportError:
-    pass
-
-__test__ = {
-    'UTILS_TESTS': UTILS_TESTS,
-}
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/encrypted_fields.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/encrypted_fields.py
deleted file mode 100644
index 4b8931f..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/encrypted_fields.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import unittest
-
-
-from django.db import connection
-from django.conf import settings
-from django.core.management import call_command
-from django.db.models import loading
-
-# Only perform encrypted fields tests if keyczar is present
-# Resolves http://github.com/django-extensions/django-extensions/issues/#issue/17
-try:
-    from keyczar import keyczar
-    from django_extensions.tests.models import Secret
-    from django_extensions.db.fields.encrypted import EncryptedTextField, EncryptedCharField
-    keyczar_active = True
-except ImportError:
-    keyczar_active = False
-
-class EncryptedFieldsTestCase(unittest.TestCase):
-    
-    def __init__(self, *args, **kwargs):
-        if keyczar_active:
-            self.crypt = keyczar.Crypter.Read(settings.ENCRYPTED_FIELD_KEYS_DIR)
-        
-        super(EncryptedFieldsTestCase, self).__init__(*args, **kwargs)
-        
-    def setUp(self):
-        self.old_installed_apps = settings.INSTALLED_APPS
-        settings.INSTALLED_APPS.append('django_extensions.tests')
-        loading.cache.loaded = False
-        call_command('syncdb', verbosity=0)
-    
-    def tearDown(self):
-        settings.INSTALLED_APPS = self.old_installed_apps
-    
-    def testCharFieldCreate(self):
-        if not keyczar_active:
-            return    
-        test_val = "Test Secret"
-        secret = Secret.objects.create(name=test_val)
-        cursor = connection.cursor()
-        query = "SELECT name FROM %s WHERE id = %d" % (Secret._meta.db_table, secret.id)
-        cursor.execute(query)
-        db_val, = cursor.fetchone()
-        decrypted_val = self.crypt.Decrypt(db_val[len(EncryptedCharField.prefix):])
-        self.assertEqual(test_val, decrypted_val)
-        
-    def testCharFieldRead(self):
-        if not keyczar_active:
-            return    
-        test_val = "Test Secret"
-        secret = Secret.objects.create(name=test_val)
-        retrieved_secret = Secret.objects.get(id=secret.id)
-        self.assertEqual(test_val, retrieved_secret.name)
-        
-    def testTextFieldCreate(self):
-        if not keyczar_active:
-            return    
-        test_val = "Test Secret"
-        secret = Secret.objects.create(text=test_val)
-        cursor = connection.cursor()
-        query = "SELECT text FROM %s WHERE id = %d" % (Secret._meta.db_table, secret.id)
-        cursor.execute(query)
-        db_val, = cursor.fetchone()
-        decrypted_val = self.crypt.Decrypt(db_val[len(EncryptedCharField.prefix):])
-        self.assertEqual(test_val, decrypted_val)
-        
-    def testTextFieldRead(self):
-        if not keyczar_active:
-            return    
-        test_val = "Test Secret"
-        secret = Secret.objects.create(text=test_val)
-        retrieved_secret = Secret.objects.get(id=secret.id)
-        self.assertEqual(test_val, retrieved_secret.text)
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/models.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/models.py
deleted file mode 100644
index 815f13b..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/models.py
+++ /dev/null
@@ -1,18 +0,0 @@
-from django.db import models
-
-try:
-    from django_extensions.db.fields.encrypted import EncryptedTextField, EncryptedCharField
-except ImportError:
-
-    class EncryptedCharField(object):
-         def __init__(self, **kwargs):
-             pass;
-
-    class EncryptedTextField(object):
-         def __init__(self, **kwargs):
-             pass;
-
-
-class Secret(models.Model):
-    name = EncryptedCharField(blank=True, max_length=255)
-    text = EncryptedTextField(blank=True)
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/utils.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/utils.py
deleted file mode 100644
index 1b9fd36..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/tests/utils.py
+++ /dev/null
@@ -1,49 +0,0 @@
-# -*- coding: utf-8 -*-
-
-UTILS_TESTS = """
->>> from django_extensions.utils.text import truncate_letters
->>> truncate_letters("hello tests", 100)
-u'hello tests'
->>> truncate_letters("hello tests", 5)
-u'hello...'
->>> for i in range(10,-1,-1): truncate_letters("hello tests", i),i
-(u'hello test...', 10)
-(u'hello tes...', 9)
-(u'hello te...', 8)
-(u'hello t...', 7)
-(u'hello ...', 6)
-(u'hello...', 5)
-(u'hell...', 4)
-(u'hel...', 3)
-(u'he...', 2)
-(u'h...', 1)
-(u'...', 0)
->>> truncate_letters("峠 (とうげ tōge - mountain pass)", 10)
-u'\u5ce0 (\u3068\u3046\u3052 t\u014dg...'
-
-
->>> from django_extensions.utils import uuid
-
-# make a UUID using an MD5 hash of a namespace UUID and a name
->>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
-UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')
-
-# make a UUID using a SHA-1 hash of a namespace UUID and a name
->>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
-UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')
-
-# make a UUID from a string of hex digits (braces and hyphens ignored)
->>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')
-
-# convert a UUID to a string of hex digits in standard form
->>> str(x)
-'00010203-0405-0607-0809-0a0b0c0d0e0f'
-
-# get the raw 16 bytes of the UUID
->>> x.bytes
-'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'
-
-# make a UUID from a 16-byte string
->>> uuid.UUID(bytes=x.bytes)
-UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')
-"""
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/__init__.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/dia2django.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/dia2django.py
deleted file mode 100755
index 4000d60..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/dia2django.py
+++ /dev/null
@@ -1,196 +0,0 @@
-#!/usr/bin/python
-# -*- coding: UTF-8 -*-
-##Author Igor Támara igor@tamarapatino.org
-##Use this little program as you wish, if you
-#include it in your work, let others know you
-#are using it preserving this note, you have
-#the right to make derivative works, Use it
-#at your own risk.
-#Tested to work on(etch testing 13-08-2007):
-#  Python 2.4.4 (#2, Jul 17 2007, 11:56:54)
-#  [GCC 4.1.3 20070629 (prerelease) (Debian 4.1.2-13)] on linux2
-
-dependclasses=["User","Group" ,"Permission" , "Message"]
-
-import codecs
-import sys
-import gzip
-from xml.dom.minidom import *
-import re
-
-#Type dictionary translation types SQL -> Django
-tsd = {"text":"TextField" , "date":"DateField" , "varchar":"CharField" , "int":"IntegerField" , "float":"FloatField" , "serial":"AutoField" , "boolean":"BooleanField" , "numeric":"FloatField" , "timestamp":"DateTimeField" , "bigint":"IntegerField" , "datetime":"DateTimeField"  , "date":"DateField" , "time" : "TimeField" , "bool" : "BooleanField" , "int" : "IntegerField"}
-
-#convert varchar -> CharField
-v2c = re.compile('varchar\((\d+)\)')
-
-def index(fks,id):
-    """Looks for the id on fks, fks is an array of arrays, each array has on [1]
-    the id of the class in a dia diagram.  When not present returns None, else
-    it returns the position of the class with id on fks"""
-    for i,j in fks.items():
-        if fks[i][1]==id:
-            return i
-    return None
-
-def addparentstofks(rels,fks):
-    """Gets a list of relations, between parents and sons and a dict of
-    clases named in dia, and modifies the fks to add the parent as fk to get
-    order on the output of classes and replaces the base class of the son, to
-    put the class parent name.
-    """
-    for j in rels :
-        son=index(fks,j[1])
-        parent=index(fks,j[0])
-        fks[son][2]=fks[son][2].replace("models.Model",parent)
-        if parent not in fks[son][0]:
-            fks[son][0].append(parent)
-
-
-def dia2django(archivo):
-    models_txt = ''
-    f=codecs.open(archivo,"rb")
-    #dia files are gzipped
-    data = gzip.GzipFile(fileobj=f).read()
-    ppal=parseString(data)
-    #diagram -> layer -> object -> UML - Class -> name, (attribs : composite -> name,type)
-    datos=ppal.getElementsByTagName("dia:diagram")[0].getElementsByTagName("dia:layer")[0].getElementsByTagName("dia:object")
-    clases={}
-    herit=[]
-    imports=u""
-    for i in datos:
-        #Look for the classes
-        if i.getAttribute("type")=="UML - Class":
-            myid=i.getAttribute("id")
-            for j in i.childNodes:
-                if j.nodeType==Node.ELEMENT_NODE and j.hasAttributes():
-                    if j.getAttribute("name")=="name":
-                        actclas=j.getElementsByTagName("dia:string")[0].childNodes[0].data[1:-1]
-                        myname= "\nclass %s(models.Model) :\n" % actclas
-                        clases[actclas]=[[],myid,myname,0]
-                    if j.getAttribute("name")=="attributes":
-                        for l in j.getElementsByTagName("dia:composite") :
-                            if l.getAttribute("type")=="umlattribute":
-                                #Look for the attribute name and type
-                                for k in l.getElementsByTagName("dia:attribute") :
-                                    if k.getAttribute("name")=="name":
-                                         nc = k.getElementsByTagName("dia:string")[0].childNodes[0].data[1:-1]
-                                    elif k.getAttribute("name")=="type":
-                                        tc = k.getElementsByTagName("dia:string")[0].childNodes[0].data[1:-1]
-                                    elif k.getAttribute("name")=="value":
-                                        val = k.getElementsByTagName("dia:string")[0].childNodes[0].data[1:-1]
-                                        if val=='##':
-                                            val=''
-                                    elif k.getAttribute("name")=="visibility" and k.getElementsByTagName("dia:enum")[0].getAttribute("val")=="2":
-                                        if tc.replace(" ","").lower().startswith("manytomanyfield("):
-                                                #If we find a class not in our model that is marked as being to another model
-                                                newc=tc.replace(" ","")[16:-1]
-                                                if dependclasses.count(newc)==0:
-                                                        dependclasses.append(newc)
-                                        if tc.replace(" ","").lower().startswith("foreignkey("):
-                                                #If we find a class not in our model that is marked as being to another model
-                                                newc=tc.replace(" ","")[11:-1]
-                                                if dependclasses.count(newc)==0:
-                                                        dependclasses.append(newc)
-
-                                #Mapping SQL types to Django
-                                varch=v2c.search(tc)
-                                if tc.replace(" ","").startswith("ManyToManyField(") :
-                                    myfor=tc.replace(" ","")[16:-1]
-                                    if actclas==myfor:
-                                        #In case of a recursive type, we use 'self'
-                                        tc=tc.replace(myfor,"'self'")
-                                    elif clases[actclas][0].count(myfor)==0 :
-                                        #Adding related class
-                                        if myfor not in dependclasses:
-                                            #In case we are using Auth classes or external via protected dia visibility
-                                            clases[actclas][0].append(myfor)
-                                    tc="models."+tc
-                                    if len(val)>0:
-                                        tc=tc.replace(")",","+val+")")
-                                elif tc.find("Field")!=-1 :
-                                    if tc.count("()")>0 and len(val)>0:
-                                        tc="models.%s" % tc.replace(")",","+val+")")
-                                    else :
-                                        tc="models.%s(%s)" %(tc ,val)
-                                elif tc.replace(" ","").startswith("ForeignKey(") :
-                                    myfor=tc.replace(" ","")[11:-1]
-                                    if actclas==myfor:
-                                        #In case of a recursive type, we use 'self'
-                                        tc=tc.replace(myfor,"'self'")
-                                    elif clases[actclas][0].count(myfor)==0 :
-                                        #Adding foreign classes
-                                        if myfor not in dependclasses:
-                                            #In case we are using Auth classes
-                                            clases[actclas][0].append(myfor)
-                                    tc="models."+tc
-                                    if len(val)>0:
-                                        tc=tc.replace(")",","+val+")")
-                                elif varch==None :
-                                    tc="models."+tsd[tc.strip().lower()]+"("+val+")"
-                                else :
-                                    tc="models.CharField(max_length="+varch.group(1)+")"
-                                    if len(val)>0 :
-                                        tc=tc.replace(")",", "+val+" )")
-                                if not (nc=="id" and tc=="AutoField()"):
-                                    clases[actclas][2]=clases[actclas][2]+("    %s = %s\n" % (nc,tc))
-        elif i.getAttribute("type")=="UML - Generalization":
-            mycons=['A','A']
-            a=i.getElementsByTagName("dia:connection")
-            for j in a:
-                if len(j.getAttribute("to")) : mycons[int(j.getAttribute("handle"))]=j.getAttribute("to")
-            print mycons
-            if not 'A' in mycons : herit.append(mycons)
-        elif i.getAttribute("type")=="UML - SmallPackage":
-            a=i.getElementsByTagName("dia:string")
-            for j in a:
-                if len(j.childNodes[0].data[1:-1]):
-                   imports+=u"from %s.models import *" % j.childNodes[0].data[1:-1]
-
-    addparentstofks(herit,clases)
-    #Ordering the appearance of classes
-    #First we make a list of the classes each classs is related to.
-    ordered=[]
-    for j,k in clases.iteritems():
-        k[2]=k[2]+"\n    def __unicode__(self):\n        return u\"\"\n"
-        for fk in k[0] :
-            if fk not in dependclasses:
-                clases[fk][3]+=1
-        ordered.append([j]+k)
-
-    i=0
-    while i<len(ordered):
-        mark=i
-        j=i+1
-        while j<len(ordered) :
-            if ordered[i][0] in ordered[j][1]:
-                mark=j
-            j+=1
-        if mark==i:
-            i+=1
-        else:
-            # swap %s in %s" % ( ordered[i] , ordered[mark]) to make ordered[i] to be at the end
-            if ordered[i][0] in ordered[mark][1] and ordered[mark][0] in ordered[i][1]:
-                #Resolving simplistic circular ForeignKeys
-                print "Not able to resolve circular ForeignKeys between %s and %s" % (ordered[i][1],ordered[mark][0])
-                break
-            a=ordered[i]
-            ordered[i]=ordered[mark]
-            ordered[mark]=a
-        if i==len(ordered)-1:
-            break
-    ordered.reverse()
-    if imports :
-        models_txt = str(imports)
-    for i in ordered:
-        models_txt += '%s\n' % str(i[3])
-
-    return models_txt
-
-if __name__ == '__main__':
-
-        if len(sys.argv) == 2:
-            dia2django(sys.argv[1])
-        else :
-            print " Uso:\n \n   "+sys.argv[0]+" diagram.dia\n\n"
-
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/text.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/text.py
deleted file mode 100644
index b8977a2..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/text.py
+++ /dev/null
@@ -1,13 +0,0 @@
-from django.utils.encoding import force_unicode
-from django.utils.functional import allow_lazy
-
-def truncate_letters(s, num):
-    """ truncates a string to a number of letters, similar to truncate_words """
-    s = force_unicode(s)
-    length = int(num)
-    if len(s)>length:
-        s = s[:length]
-        if not s.endswith('...'):
-            s += '...'
-    return s
-truncate_letters = allow_lazy(truncate_letters, unicode)
diff --git a/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/uuid.py b/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/uuid.py
deleted file mode 100644
index b77a12d..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/django_extensions/utils/uuid.py
+++ /dev/null
@@ -1,547 +0,0 @@
-r"""UUID objects (universally unique identifiers) according to RFC 4122.
-
-This module provides immutable UUID objects (class UUID) and the functions
-uuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5
-UUIDs as specified in RFC 4122.
-
-If all you want is a unique ID, you should probably call uuid1() or uuid4().
-Note that uuid1() may compromise privacy since it creates a UUID containing
-the computer's network address.  uuid4() creates a random UUID.
-
-Typical usage:
-
-    >>> import uuid
-
-    # make a UUID based on the host ID and current time
-    >>> uuid.uuid1()
-    UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')
-
-    # make a UUID using an MD5 hash of a namespace UUID and a name
-    >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
-    UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')
-
-    # make a random UUID
-    >>> uuid.uuid4()
-    UUID('16fd2706-8baf-433b-82eb-8c7fada847da')
-
-    # make a UUID using a SHA-1 hash of a namespace UUID and a name
-    >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
-    UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')
-
-    # make a UUID from a string of hex digits (braces and hyphens ignored)
-    >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')
-
-    # convert a UUID to a string of hex digits in standard form
-    >>> str(x)
-    '00010203-0405-0607-0809-0a0b0c0d0e0f'
-
-    # get the raw 16 bytes of the UUID
-    >>> x.bytes
-    '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'
-
-    # make a UUID from a 16-byte string
-    >>> uuid.UUID(bytes=x.bytes)
-    UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')
-"""
-
-__author__ = 'Ka-Ping Yee <ping@zesty.ca>'
-
-RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, RESERVED_FUTURE = [
-    'reserved for NCS compatibility', 'specified in RFC 4122',
-    'reserved for Microsoft compatibility', 'reserved for future definition']
-
-class UUID(object):
-    """Instances of the UUID class represent UUIDs as specified in RFC 4122.
-    UUID objects are immutable, hashable, and usable as dictionary keys.
-    Converting a UUID to a string with str() yields something in the form
-    '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts
-    five possible forms: a similar string of hexadecimal digits, or a tuple
-    of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and
-    48-bit values respectively) as an argument named 'fields', or a string
-    of 16 bytes (with all the integer fields in big-endian order) as an
-    argument named 'bytes', or a string of 16 bytes (with the first three
-    fields in little-endian order) as an argument named 'bytes_le', or a
-    single 128-bit integer as an argument named 'int'.
-
-    UUIDs have these read-only attributes:
-
-        bytes       the UUID as a 16-byte string (containing the six
-                    integer fields in big-endian byte order)
-
-        bytes_le    the UUID as a 16-byte string (with time_low, time_mid,
-                    and time_hi_version in little-endian byte order)
-
-        fields      a tuple of the six integer fields of the UUID,
-                    which are also available as six individual attributes
-                    and two derived attributes:
-
-            time_low                the first 32 bits of the UUID
-            time_mid                the next 16 bits of the UUID
-            time_hi_version         the next 16 bits of the UUID
-            clock_seq_hi_variant    the next 8 bits of the UUID
-            clock_seq_low           the next 8 bits of the UUID
-            node                    the last 48 bits of the UUID
-
-            time                    the 60-bit timestamp
-            clock_seq               the 14-bit sequence number
-
-        hex         the UUID as a 32-character hexadecimal string
-
-        int         the UUID as a 128-bit integer
-
-        urn         the UUID as a URN as specified in RFC 4122
-
-        variant     the UUID variant (one of the constants RESERVED_NCS,
-                    RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)
-
-        version     the UUID version number (1 through 5, meaningful only
-                    when the variant is RFC_4122)
-    """
-
-    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
-                       int=None, version=None):
-        r"""Create a UUID from either a string of 32 hexadecimal digits,
-        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
-        in little-endian order as the 'bytes_le' argument, a tuple of six
-        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
-        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
-        the 'fields' argument, or a single 128-bit integer as the 'int'
-        argument.  When a string of hex digits is given, curly braces,
-        hyphens, and a URN prefix are all optional.  For example, these
-        expressions all yield the same UUID:
-
-        UUID('{12345678-1234-5678-1234-567812345678}')
-        UUID('12345678123456781234567812345678')
-        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
-        UUID(bytes='\x12\x34\x56\x78'*4)
-        UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
-                      '\x12\x34\x56\x78\x12\x34\x56\x78')
-        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
-        UUID(int=0x12345678123456781234567812345678)
-
-        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
-        be given.  The 'version' argument is optional; if given, the resulting
-        UUID will have its variant and version set according to RFC 4122,
-        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
-        """
-
-        if [hex, bytes, bytes_le, fields, int].count(None) != 4:
-            raise TypeError('need one of hex, bytes, bytes_le, fields, or int')
-        if hex is not None:
-            hex = hex.replace('urn:', '').replace('uuid:', '')
-            hex = hex.strip('{}').replace('-', '')
-            if len(hex) != 32:
-                raise ValueError('badly formed hexadecimal UUID string')
-            int = long(hex, 16)
-        if bytes_le is not None:
-            if len(bytes_le) != 16:
-                raise ValueError('bytes_le is not a 16-char string')
-            bytes = (bytes_le[3] + bytes_le[2] + bytes_le[1] + bytes_le[0] +
-                     bytes_le[5] + bytes_le[4] + bytes_le[7] + bytes_le[6] +
-                     bytes_le[8:])
-        if bytes is not None:
-            if len(bytes) != 16:
-                raise ValueError('bytes is not a 16-char string')
-            int = long(('%02x'*16) % tuple(map(ord, bytes)), 16)
-        if fields is not None:
-            if len(fields) != 6:
-                raise ValueError('fields is not a 6-tuple')
-            (time_low, time_mid, time_hi_version,
-             clock_seq_hi_variant, clock_seq_low, node) = fields
-            if not 0 <= time_low < 1<<32L:
-                raise ValueError('field 1 out of range (need a 32-bit value)')
-            if not 0 <= time_mid < 1<<16L:
-                raise ValueError('field 2 out of range (need a 16-bit value)')
-            if not 0 <= time_hi_version < 1<<16L:
-                raise ValueError('field 3 out of range (need a 16-bit value)')
-            if not 0 <= clock_seq_hi_variant < 1<<8L:
-                raise ValueError('field 4 out of range (need an 8-bit value)')
-            if not 0 <= clock_seq_low < 1<<8L:
-                raise ValueError('field 5 out of range (need an 8-bit value)')
-            if not 0 <= node < 1<<48L:
-                raise ValueError('field 6 out of range (need a 48-bit value)')
-            clock_seq = (clock_seq_hi_variant << 8L) | clock_seq_low
-            int = ((time_low << 96L) | (time_mid << 80L) |
-                   (time_hi_version << 64L) | (clock_seq << 48L) | node)
-        if int is not None:
-            if not 0 <= int < 1<<128L:
-                raise ValueError('int is out of range (need a 128-bit value)')
-        if version is not None:
-            if not 1 <= version <= 5:
-                raise ValueError('illegal version number')
-            # Set the variant to RFC 4122.
-            int &= ~(0xc000 << 48L)
-            int |= 0x8000 << 48L
-            # Set the version number.
-            int &= ~(0xf000 << 64L)
-            int |= version << 76L
-        self.__dict__['int'] = int
-
-    def __cmp__(self, other):
-        if isinstance(other, UUID):
-            return cmp(self.int, other.int)
-        return NotImplemented
-
-    def __hash__(self):
-        return hash(self.int)
-
-    def __int__(self):
-        return self.int
-
-    def __repr__(self):
-        return 'UUID(%r)' % str(self)
-
-    def __setattr__(self, name, value):
-        raise TypeError('UUID objects are immutable')
-
-    def __str__(self):
-        hex = '%032x' % self.int
-        return '%s-%s-%s-%s-%s' % (
-            hex[:8], hex[8:12], hex[12:16], hex[16:20], hex[20:])
-
-    def get_bytes(self):
-        bytes = ''
-        for shift in range(0, 128, 8):
-            bytes = chr((self.int >> shift) & 0xff) + bytes
-        return bytes
-
-    bytes = property(get_bytes)
-
-    def get_bytes_le(self):
-        bytes = self.bytes
-        return (bytes[3] + bytes[2] + bytes[1] + bytes[0] +
-                bytes[5] + bytes[4] + bytes[7] + bytes[6] + bytes[8:])
-
-    bytes_le = property(get_bytes_le)
-
-    def get_fields(self):
-        return (self.time_low, self.time_mid, self.time_hi_version,
-                self.clock_seq_hi_variant, self.clock_seq_low, self.node)
-
-    fields = property(get_fields)
-
-    def get_time_low(self):
-        return self.int >> 96L
-
-    time_low = property(get_time_low)
-
-    def get_time_mid(self):
-        return (self.int >> 80L) & 0xffff
-
-    time_mid = property(get_time_mid)
-
-    def get_time_hi_version(self):
-        return (self.int >> 64L) & 0xffff
-
-    time_hi_version = property(get_time_hi_version)
-
-    def get_clock_seq_hi_variant(self):
-        return (self.int >> 56L) & 0xff
-
-    clock_seq_hi_variant = property(get_clock_seq_hi_variant)
-
-    def get_clock_seq_low(self):
-        return (self.int >> 48L) & 0xff
-
-    clock_seq_low = property(get_clock_seq_low)
-
-    def get_time(self):
-        return (((self.time_hi_version & 0x0fffL) << 48L) |
-                (self.time_mid << 32L) | self.time_low)
-
-    time = property(get_time)
-
-    def get_clock_seq(self):
-        return (((self.clock_seq_hi_variant & 0x3fL) << 8L) |
-                self.clock_seq_low)
-
-    clock_seq = property(get_clock_seq)
-
-    def get_node(self):
-        return self.int & 0xffffffffffff
-
-    node = property(get_node)
-
-    def get_hex(self):
-        return '%032x' % self.int
-
-    hex = property(get_hex)
-
-    def get_urn(self):
-        return 'urn:uuid:' + str(self)
-
-    urn = property(get_urn)
-
-    def get_variant(self):
-        if not self.int & (0x8000 << 48L):
-            return RESERVED_NCS
-        elif not self.int & (0x4000 << 48L):
-            return RFC_4122
-        elif not self.int & (0x2000 << 48L):
-            return RESERVED_MICROSOFT
-        else:
-            return RESERVED_FUTURE
-
-    variant = property(get_variant)
-
-    def get_version(self):
-        # The version bits are only meaningful for RFC 4122 UUIDs.
-        if self.variant == RFC_4122:
-            return int((self.int >> 76L) & 0xf)
-
-    version = property(get_version)
-
-def _find_mac(command, args, hw_identifiers, get_index):
-    import os
-    for dir in ['', '/sbin/', '/usr/sbin']:
-        executable = os.path.join(dir, command)
-        if not os.path.exists(executable):
-            continue
-
-        try:
-            # LC_ALL to get English output, 2>/dev/null to
-            # prevent output on stderr
-            cmd = 'LC_ALL=C %s %s 2>/dev/null' % (executable, args)
-            pipe = os.popen(cmd)
-        except IOError:
-            continue
-
-        for line in pipe:
-            words = line.lower().split()
-            for i in range(len(words)):
-                if words[i] in hw_identifiers:
-                    return int(words[get_index(i)].replace(':', ''), 16)
-    return None
-
-def _ifconfig_getnode():
-    """Get the hardware address on Unix by running ifconfig."""
-
-    # This works on Linux ('' or '-a'), Tru64 ('-av'), but not all Unixes.
-    for args in ('', '-a', '-av'):
-        mac = _find_mac('ifconfig', args, ['hwaddr', 'ether'], lambda i: i+1)
-        if mac:
-            return mac
-
-    import socket
-    ip_addr = socket.gethostbyname(socket.gethostname())
-
-    # Try getting the MAC addr from arp based on our IP address (Solaris).
-    mac = _find_mac('arp', '-an', [ip_addr], lambda i: -1)
-    if mac:
-        return mac
-
-    # This might work on HP-UX.
-    mac = _find_mac('lanscan', '-ai', ['lan0'], lambda i: 0)
-    if mac:
-        return mac
-
-    return None
-
-def _ipconfig_getnode():
-    """Get the hardware address on Windows by running ipconfig.exe."""
-    import os, re
-    dirs = ['', r'c:\windows\system32', r'c:\winnt\system32']
-    try:
-        import ctypes
-        buffer = ctypes.create_string_buffer(300)
-        ctypes.windll.kernel32.GetSystemDirectoryA(buffer, 300)
-        dirs.insert(0, buffer.value.decode('mbcs'))
-    except:
-        pass
-    for dir in dirs:
-        try:
-            pipe = os.popen(os.path.join(dir, 'ipconfig') + ' /all')
-        except IOError:
-            continue
-        for line in pipe:
-            value = line.split(':')[-1].strip().lower()
-            if re.match('([0-9a-f][0-9a-f]-){5}[0-9a-f][0-9a-f]', value):
-                return int(value.replace('-', ''), 16)
-
-def _netbios_getnode():
-    """Get the hardware address on Windows using NetBIOS calls.
-    See http://support.microsoft.com/kb/118623 for details."""
-    import win32wnet, netbios
-    ncb = netbios.NCB()
-    ncb.Command = netbios.NCBENUM
-    ncb.Buffer = adapters = netbios.LANA_ENUM()
-    adapters._pack()
-    if win32wnet.Netbios(ncb) != 0:
-        return
-    adapters._unpack()
-    for i in range(adapters.length):
-        ncb.Reset()
-        ncb.Command = netbios.NCBRESET
-        ncb.Lana_num = ord(adapters.lana[i])
-        if win32wnet.Netbios(ncb) != 0:
-            continue
-        ncb.Reset()
-        ncb.Command = netbios.NCBASTAT
-        ncb.Lana_num = ord(adapters.lana[i])
-        ncb.Callname = '*'.ljust(16)
-        ncb.Buffer = status = netbios.ADAPTER_STATUS()
-        if win32wnet.Netbios(ncb) != 0:
-            continue
-        status._unpack()
-        bytes = map(ord, status.adapter_address)
-        return ((bytes[0]<<40L) + (bytes[1]<<32L) + (bytes[2]<<24L) +
-                (bytes[3]<<16L) + (bytes[4]<<8L) + bytes[5])
-
-# Thanks to Thomas Heller for ctypes and for his help with its use here.
-
-# If ctypes is available, use it to find system routines for UUID generation.
-_uuid_generate_random = _uuid_generate_time = _UuidCreate = None
-try:
-    import ctypes, ctypes.util
-    _buffer = ctypes.create_string_buffer(16)
-
-    # The uuid_generate_* routines are provided by libuuid on at least
-    # Linux and FreeBSD, and provided by libc on Mac OS X.
-    for libname in ['uuid', 'c']:
-        try:
-            lib = ctypes.CDLL(ctypes.util.find_library(libname))
-        except:
-            continue
-        if hasattr(lib, 'uuid_generate_random'):
-            _uuid_generate_random = lib.uuid_generate_random
-        if hasattr(lib, 'uuid_generate_time'):
-            _uuid_generate_time = lib.uuid_generate_time
-
-    # On Windows prior to 2000, UuidCreate gives a UUID containing the
-    # hardware address.  On Windows 2000 and later, UuidCreate makes a
-    # random UUID and UuidCreateSequential gives a UUID containing the
-    # hardware address.  These routines are provided by the RPC runtime.
-    # NOTE:  at least on Tim's WinXP Pro SP2 desktop box, while the last
-    # 6 bytes returned by UuidCreateSequential are fixed, they don't appear
-    # to bear any relationship to the MAC address of any network device
-    # on the box.
-    try:
-        lib = ctypes.windll.rpcrt4
-    except:
-        lib = None
-    _UuidCreate = getattr(lib, 'UuidCreateSequential',
-                          getattr(lib, 'UuidCreate', None))
-except:
-    pass
-
-def _unixdll_getnode():
-    """Get the hardware address on Unix using ctypes."""
-    _uuid_generate_time(_buffer)
-    return UUID(bytes=_buffer.raw).node
-
-def _windll_getnode():
-    """Get the hardware address on Windows using ctypes."""
-    if _UuidCreate(_buffer) == 0:
-        return UUID(bytes=_buffer.raw).node
-
-def _random_getnode():
-    """Get a random node ID, with eighth bit set as suggested by RFC 4122."""
-    import random
-    return random.randrange(0, 1<<48L) | 0x010000000000L
-
-_node = None
-
-def getnode():
-    """Get the hardware address as a 48-bit positive integer.
-
-    The first time this runs, it may launch a separate program, which could
-    be quite slow.  If all attempts to obtain the hardware address fail, we
-    choose a random 48-bit number with its eighth bit set to 1 as recommended
-    in RFC 4122.
-    """
-
-    global _node
-    if _node is not None:
-        return _node
-
-    import sys
-    if sys.platform == 'win32':
-        getters = [_windll_getnode, _netbios_getnode, _ipconfig_getnode]
-    else:
-        getters = [_unixdll_getnode, _ifconfig_getnode]
-
-    for getter in getters + [_random_getnode]:
-        try:
-            _node = getter()
-        except:
-            continue
-        if _node is not None:
-            return _node
-
-_last_timestamp = None
-
-def uuid1(node=None, clock_seq=None):
-    """Generate a UUID from a host ID, sequence number, and the current time.
-    If 'node' is not given, getnode() is used to obtain the hardware
-    address.  If 'clock_seq' is given, it is used as the sequence number;
-    otherwise a random 14-bit sequence number is chosen."""
-
-    # When the system provides a version-1 UUID generator, use it (but don't
-    # use UuidCreate here because its UUIDs don't conform to RFC 4122).
-    if _uuid_generate_time and node is clock_seq is None:
-        _uuid_generate_time(_buffer)
-        return UUID(bytes=_buffer.raw)
-
-    global _last_timestamp
-    import time
-    nanoseconds = int(time.time() * 1e9)
-    # 0x01b21dd213814000 is the number of 100-ns intervals between the
-    # UUID epoch 1582-10-15 00:00:00 and the Unix epoch 1970-01-01 00:00:00.
-    timestamp = int(nanoseconds/100) + 0x01b21dd213814000L
-    if timestamp <= _last_timestamp:
-        timestamp = _last_timestamp + 1
-    _last_timestamp = timestamp
-    if clock_seq is None:
-        import random
-        clock_seq = random.randrange(1<<14L) # instead of stable storage
-    time_low = timestamp & 0xffffffffL
-    time_mid = (timestamp >> 32L) & 0xffffL
-    time_hi_version = (timestamp >> 48L) & 0x0fffL
-    clock_seq_low = clock_seq & 0xffL
-    clock_seq_hi_variant = (clock_seq >> 8L) & 0x3fL
-    if node is None:
-        node = getnode()
-    return UUID(fields=(time_low, time_mid, time_hi_version,
-                        clock_seq_hi_variant, clock_seq_low, node), version=1)
-
-def uuid3(namespace, name):
-    """Generate a UUID from the MD5 hash of a namespace UUID and a name."""
-    try:
-        from hashlib import md5
-    except ImportError:
-        from md5 import md5
-    hash = md5(namespace.bytes + name).digest()
-    return UUID(bytes=hash[:16], version=3)
-
-def uuid4():
-    """Generate a random UUID."""
-
-    # When the system provides a version-4 UUID generator, use it.
-    if _uuid_generate_random:
-        _uuid_generate_random(_buffer)
-        return UUID(bytes=_buffer.raw)
-
-    # Otherwise, get randomness from urandom or the 'random' module.
-    try:
-        import os
-        return UUID(bytes=os.urandom(16), version=4)
-    except:
-        import random
-        bytes = [chr(random.randrange(256)) for i in range(16)]
-        return UUID(bytes=bytes, version=4)
-
-def uuid5(namespace, name):
-    """Generate a UUID from the SHA-1 hash of a namespace UUID and a name."""
-    try:
-        from hashlib import sha1 as sha
-    except ImportError:
-        from sha import sha
-    hash = sha(namespace.bytes + name).digest()
-    return UUID(bytes=hash[:16], version=5)
-
-# The following standard UUIDs are for use with uuid3() or uuid5().
-
-NAMESPACE_DNS = UUID('6ba7b810-9dad-11d1-80b4-00c04fd430c8')
-NAMESPACE_URL = UUID('6ba7b811-9dad-11d1-80b4-00c04fd430c8')
-NAMESPACE_OID = UUID('6ba7b812-9dad-11d1-80b4-00c04fd430c8')
-NAMESPACE_X500 = UUID('6ba7b814-9dad-11d1-80b4-00c04fd430c8')
diff --git a/desktop/core/ext-py/django-extensions-0.5/setup.py b/desktop/core/ext-py/django-extensions-0.5/setup.py
deleted file mode 100644
index 1d19ac0..0000000
--- a/desktop/core/ext-py/django-extensions-0.5/setup.py
+++ /dev/null
@@ -1,92 +0,0 @@
-"""
-Based entirely on Django's own ``setup.py``.
-"""
-import os
-import sys
-from distutils.command.install_data import install_data
-from distutils.command.install import INSTALL_SCHEMES
-from distutils.core import setup
-
-class osx_install_data(install_data):
-    # On MacOS, the platform-specific lib dir is /System/Library/Framework/Python/.../
-    # which is wrong. Python 2.5 supplied with MacOS 10.5 has an Apple-specific fix
-    # for this in distutils.command.install_data#306. It fixes install_lib but not
-    # install_data, which is why we roll our own install_data class.
-
-    def finalize_options(self):
-        # By the time finalize_options is called, install.install_lib is set to the
-        # fixed directory, so we set the installdir to install_lib. The
-        # install_data class uses ('install_data', 'install_dir') instead.
-        self.set_undefined_options('install', ('install_lib', 'install_dir'))
-        install_data.finalize_options(self)
-
-if sys.platform == "darwin":
-    cmdclasses = {'install_data': osx_install_data}
-else:
-    cmdclasses = {'install_data': install_data}
-
-def fullsplit(path, result=None):
-    """
-    Split a pathname into components (the opposite of os.path.join) in a
-    platform-neutral way.
-    """
-    if result is None:
-        result = []
-    head, tail = os.path.split(path)
-    if head == '':
-        return [tail] + result
-    if head == path:
-        return result
-    return fullsplit(head, [tail] + result)
-
-# Tell distutils to put the data_files in platform-specific installation
-# locations. See here for an explanation:
-# http://groups.google.com/group/comp.lang.python/browse_thread/thread/35ec7b2fed36eaec/2105ee4d9e8042cb
-for scheme in INSTALL_SCHEMES.values():
-    scheme['data'] = scheme['purelib']
-
-# Compile the list of packages available, because distutils doesn't have
-# an easy way to do this.
-packages, data_files = [], []
-root_dir = os.path.dirname(__file__)
-if root_dir != '':
-    os.chdir(root_dir)
-extensions_dir = 'django_extensions'
-
-for dirpath, dirnames, filenames in os.walk(extensions_dir):
-    # Ignore dirnames that start with '.'
-    for i, dirname in enumerate(dirnames):
-        if dirname.startswith('.'):
-            del dirnames[i]
-    if '__init__.py' in filenames:
-        packages.append('.'.join(fullsplit(dirpath)))
-    elif filenames:
-        data_files.append([dirpath, [os.path.join(dirpath, f) for f in filenames]])
-
-version = __import__('django_extensions').__version__
-
-setup(
-    name = 'django-extensions',
-    version = version,
-    description = "Extensions for Django",
-    long_description = """django-extensions bundles several useful
-additions for Django projects. See the project page for more information:
-  http://code.google.com/p/django-command-extensions/""",
-    author = 'Michael Trier',
-    author_email = 'mtrier@gmail.com',
-    url = 'http://code.google.com/p/django-command-extensions/',
-    license = 'New BSD License',
-    platforms = ['any'],
-    packages = packages,
-    cmdclass = cmdclasses,
-    data_files = data_files,
-    classifiers = ['Development Status :: 4 - Beta',
-                   'Environment :: Web Environment',
-                   'Framework :: Django',
-                   'Intended Audience :: Developers',
-                   'License :: OSI Approved :: BSD License',
-                   'Operating System :: OS Independent',
-                   'Programming Language :: Python',
-                   'Topic :: Utilities'],
-)
-
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/LICENSE b/desktop/core/ext-py/django-extensions-1.5.0/LICENSE
new file mode 100644
index 0000000..e2e53d5
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/LICENSE
@@ -0,0 +1,19 @@
+Copyright (c) 2007 Michael Trier
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/MANIFEST.in b/desktop/core/ext-py/django-extensions-1.5.0/MANIFEST.in
new file mode 100644
index 0000000..f9b717a
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/MANIFEST.in
@@ -0,0 +1,8 @@
+recursive-include django_extensions/conf *.tmpl
+recursive-include django_extensions/templates *
+recursive-include django_extensions/static *
+recursive-include django_extensions/locale *
+recursive-include docs *
+include LICENSE
+include run_tests.py
+include tox.ini
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/PKG-INFO b/desktop/core/ext-py/django-extensions-1.5.0/PKG-INFO
new file mode 100644
index 0000000..7713bcf
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/PKG-INFO
@@ -0,0 +1,23 @@
+Metadata-Version: 1.1
+Name: django-extensions
+Version: 1.5.0
+Summary: Extensions for Django
+Home-page: http://github.com/django-extensions/django-extensions
+Author: Bas van Oostveen
+Author-email: v.oostveen@gmail.com
+License: MIT License
+Description: django-extensions bundles several useful
+        additions for Django projects. See the project page for more information:
+          http://github.com/django-extensions/django-extensions
+Platform: any
+Classifier: Development Status :: 4 - Beta
+Classifier: Development Status :: 5 - Production/Stable
+Classifier: Environment :: Web Environment
+Classifier: Framework :: Django
+Classifier: Intended Audience :: Developers
+Classifier: License :: OSI Approved :: MIT License
+Classifier: Operating System :: OS Independent
+Classifier: Programming Language :: Python
+Classifier: Programming Language :: Python :: 3
+Classifier: Programming Language :: Python :: Implementation :: PyPy
+Classifier: Topic :: Utilities
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/README.rst b/desktop/core/ext-py/django-extensions-1.5.0/README.rst
new file mode 100644
index 0000000..06d839d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/README.rst
@@ -0,0 +1,155 @@
+===================
+ Django Extensions
+===================
+
+.. image:: https://img.shields.io/badge/license-MIT-blue.svg
+   :target: https://raw.githubusercontent.com/django-extensions/django-extensions/master/LICENSE
+
+.. image:: https://secure.travis-ci.org/django-extensions/django-extensions.png?branch=master
+    :alt: Build Status
+    :target: http://travis-ci.org/django-extensions/django-extensions
+
+.. image:: https://pypip.in/v/django-extensions/badge.png
+    :target: https://pypi.python.org/pypi/django-extensions/
+    :alt: Latest PyPI version
+
+.. image:: https://pypip.in/d/django-extensions/badge.png
+    :target: https://pypi.python.org/pypi/django-extensions/
+    :alt: Number of PyPI downloads
+
+
+Django Extensions is a collection of custom extensions for the Django Framework.
+
+
+Getting Started
+===============
+
+The easiest way to figure out what Django Extensions are all about is to watch the 
+`excellent screencast by Eric Holscher`__ (`watch the video on vimeo`__). In a couple 
+minutes Eric walks you through a half a dozen command extensions. There is also a 
+`short screencast on GoDjango`__ to help show you even more.
+
+
+Requirements
+============
+
+Django Extensions requires Django 1.4 or later.
+
+
+Getting It
+==========
+
+You can get Django Extensions by using pip or easy_install::
+
+    $ pip install django-extensions
+    or
+    $ easy_install django-extensions
+
+If you want to install it from source, grab the git repository from GitHub and run setup.py::
+
+    $ git clone git://github.com/django-extensions/django-extensions.git
+    $ cd django-extensions
+    $ python setup.py install
+
+
+Installing It
+=============
+
+To enable `django_extensions` in your project you need to add it to `INSTALLED_APPS` in your projects 
+`settings.py` file::
+
+    INSTALLED_APPS = (
+        ...
+        'django_extensions',
+        ...
+    )
+
+
+Using It
+========
+
+Generate (and view) a graphviz graph of app models::
+
+    $ python manage.py graph_models -a -o myapp_models.png
+
+Produce a tab-separated list of `(url_pattern, view_function, name)` tuples for a project::
+
+    $ python manage.py show_urls
+
+Check templates for rendering errors::
+
+    $ python manage.py validate_templates
+
+Run the enchanced django shell::
+
+    $ python manage.py shell_plus
+
+Run the enchanced django runserver, (requires Werkzeug install)::
+
+    $ python manage.py runserver_plus
+
+
+Getting Involved
+================
+
+Open Source projects can always use more help. Fixing a problem, documenting a feature, adding
+translation in your language. If you have some time to spare and like to help us, here are the places to do so:
+
+- GitHub: https://github.com/django-extensions/django-extensions
+- Mailing list: http://groups.google.com/group/django-extensions
+- Translations: https://www.transifex.net/projects/p/django-extensions/
+
+
+Documentation
+=============
+
+You can view documentation online at:
+
+- http://django-extensions.readthedocs.org
+
+Or you can look at the docs/ directory in the repository.
+
+
+Donations
+=========
+
+Django Extensions is free and always will be. From time to time people and company's have expressed the willingness
+to donation to the project to help foster it's development. We prefer people to become active in the project and support
+us by sending pull requests but will humbly accept donations as well.
+
+Donations will be used to make Django Extensions better by allowing developers to spend more time on it, paying to go
+to conferences, paying for infrastructure, etc. If for some reason we would receive more donations then needed they will
+go towards the Django and Python foundations.
+
+We have setup a couple of ways you can donate towards Django Extensions using the buttons below:
+
+ - Bountysource
+ - Bitcoins at address: 13V3AaapCRz2i2HnJiFoqVECe1t5H26yCg
+ - Gratipay (formerly Gittip)
+ - Flattr
+ - PayPal
+ - Patreon `here <https://patreon.com/trbs>`_
+
+.. image:: https://www.bountysource.com/badge/team?team_id=7470&style=bounties_posted
+    :target: https://www.bountysource.com/teams/django-extensions/bounties?utm_source=django-extensions&utm_medium=shield&utm_campaign=bounties_posted
+    :alt: BountySource
+
+.. image:: https://img.shields.io/bitcoin/donate.png
+    :target: bitcoin:13V3AaapCRz2i2HnJiFoqVECe1t5H26yCg?label=DjangoExtensions
+
+.. image:: https://img.shields.io/flattr/donate.png
+    :target: https://flattr.com/submit/auto?user_id=Trbs&url=https%3A%2F%2Fgithub.com%2Fdjango-extensions%2Fdjango-extensions
+    :alt: Flattr this
+
+.. image:: https://img.shields.io/paypal/donate.png
+    :target: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=P57EJJ9QYL232
+    :alt: PayPal Donations
+
+.. image:: https://img.shields.io/gratipay/trbs.png
+    :target: https://gratipay.com/trbs/
+    :alt: Gifts received
+
+
+__ http://ericholscher.com/blog/2008/sep/12/screencast-django-command-extensions/
+__ http://vimeo.com/1720508
+__ https://godjango.com/39-be-more-productive-with-django_extensions/
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/__init__.py
new file mode 100644
index 0000000..65ff1ac
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/__init__.py
@@ -0,0 +1,13 @@
+
+VERSION = (1, 5, 0)
+
+# Dynamically calculate the version based on VERSION tuple
+if len(VERSION) > 2 and VERSION[2] is not None:
+    if isinstance(VERSION[2], int):
+        str_version = "%s.%s.%s" % VERSION[:3]
+    else:
+        str_version = "%s.%s_%s" % VERSION[:3]
+else:
+    str_version = "%s.%s" % VERSION[:2]
+
+__version__ = str_version
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/admin/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/admin/__init__.py
new file mode 100644
index 0000000..46e10f4
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/admin/__init__.py
@@ -0,0 +1,146 @@
+#
+# Autocomplete feature for admin panel
+#
+import six
+import operator
+from six.moves import reduce
+
+from django.http import HttpResponse, HttpResponseNotFound
+from django.conf import settings
+from django.db import models
+from django.db.models.query import QuerySet
+from django.utils.encoding import smart_str
+from django.utils.translation import ugettext as _
+from django.utils.text import get_text_list
+from django.contrib.admin import ModelAdmin
+
+try:
+    from functools import update_wrapper
+    assert update_wrapper
+except ImportError:
+    from django.utils.functional import update_wrapper
+
+from django_extensions.admin.widgets import ForeignKeySearchInput
+
+
+class ForeignKeyAutocompleteAdmin(ModelAdmin):
+    """Admin class for models using the autocomplete feature.
+
+    There are two additional fields:
+       - related_search_fields: defines fields of managed model that
+         have to be represented by autocomplete input, together with
+         a list of target model fields that are searched for
+         input string, e.g.:
+
+         related_search_fields = {
+            'author': ('first_name', 'email'),
+         }
+
+       - related_string_functions: contains optional functions which
+         take target model instance as only argument and return string
+         representation. By default __unicode__() method of target
+         object is used.
+
+    And also an optional additional field to set the limit on the
+    results returned by the autocomplete query. You can set this integer
+    value in your settings file using FOREIGNKEY_AUTOCOMPLETE_LIMIT or
+    you can set this per ForeignKeyAutocompleteAdmin basis. If any value
+    is set the results will not be limited.
+    """
+
+    related_search_fields = {}
+    related_string_functions = {}
+    autocomplete_limit = getattr(settings, 'FOREIGNKEY_AUTOCOMPLETE_LIMIT', None)
+
+    def get_urls(self):
+        from django.conf.urls import patterns, url
+
+        def wrap(view):
+            def wrapper(*args, **kwargs):
+                return self.admin_site.admin_view(view)(*args, **kwargs)
+            return update_wrapper(wrapper, view)
+
+        info = self.model._meta.app_label, self.model._meta.module_name
+
+        urlpatterns = patterns('', url(r'foreignkey_autocomplete/$', wrap(self.foreignkey_autocomplete), name='%s_%s_autocomplete' % info))
+        urlpatterns += super(ForeignKeyAutocompleteAdmin, self).get_urls()
+        return urlpatterns
+
+    def foreignkey_autocomplete(self, request):
+        """
+        Searches in the fields of the given related model and returns the
+        result as a simple string to be used by the jQuery Autocomplete plugin
+        """
+        query = request.GET.get('q', None)
+        app_label = request.GET.get('app_label', None)
+        model_name = request.GET.get('model_name', None)
+        search_fields = request.GET.get('search_fields', None)
+        object_pk = request.GET.get('object_pk', None)
+
+        try:
+            to_string_function = self.related_string_functions[model_name]
+        except KeyError:
+            if six.PY3:
+                to_string_function = lambda x: x.__str__()
+            else:
+                to_string_function = lambda x: x.__unicode__()
+
+        if search_fields and app_label and model_name and (query or object_pk):
+            def construct_search(field_name):
+                # use different lookup methods depending on the notation
+                if field_name.startswith('^'):
+                    return "%s__istartswith" % field_name[1:]
+                elif field_name.startswith('='):
+                    return "%s__iexact" % field_name[1:]
+                elif field_name.startswith('@'):
+                    return "%s__search" % field_name[1:]
+                else:
+                    return "%s__icontains" % field_name
+            model = models.get_model(app_label, model_name)
+            queryset = model._default_manager.all()
+            data = ''
+            if query:
+                for bit in query.split():
+                    or_queries = [models.Q(**{construct_search(smart_str(field_name)): smart_str(bit)}) for field_name in search_fields.split(',')]
+                    other_qs = QuerySet(model)
+                    other_qs.query.select_related = queryset.query.select_related
+                    other_qs = other_qs.filter(reduce(operator.or_, or_queries))
+                    queryset = queryset & other_qs
+
+                if self.autocomplete_limit:
+                    queryset = queryset[:self.autocomplete_limit]
+
+                data = ''.join([six.u('%s|%s\n') % (to_string_function(f), f.pk) for f in queryset])
+            elif object_pk:
+                try:
+                    obj = queryset.get(pk=object_pk)
+                except:
+                    pass
+                else:
+                    data = to_string_function(obj)
+            return HttpResponse(data)
+        return HttpResponseNotFound()
+
+    def get_help_text(self, field_name, model_name):
+        searchable_fields = self.related_search_fields.get(field_name, None)
+        if searchable_fields:
+            help_kwargs = {
+                'model_name': model_name,
+                'field_list': get_text_list(searchable_fields, _('and')),
+            }
+            return _('Use the left field to do %(model_name)s lookups in the fields %(field_list)s.') % help_kwargs
+        return ''
+
+    def formfield_for_dbfield(self, db_field, **kwargs):
+        """
+        Overrides the default widget for Foreignkey fields if they are
+        specified in the related_search_fields class attribute.
+        """
+        if (isinstance(db_field, models.ForeignKey) and db_field.name in self.related_search_fields):
+            model_name = db_field.rel.to._meta.object_name
+            help_text = self.get_help_text(db_field.name, model_name)
+            if kwargs.get('help_text'):
+                help_text = six.u('%s %s' % (kwargs['help_text'], help_text))
+            kwargs['widget'] = ForeignKeySearchInput(db_field.rel, self.related_search_fields[db_field.name])
+            kwargs['help_text'] = help_text
+        return super(ForeignKeyAutocompleteAdmin, self).formfield_for_dbfield(db_field, **kwargs)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/admin/widgets.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/admin/widgets.py
new file mode 100644
index 0000000..e48e090
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/admin/widgets.py
@@ -0,0 +1,88 @@
+import six
+import django
+
+from django import forms
+from django.contrib.admin.sites import site
+from django.utils.safestring import mark_safe
+from django.utils.text import Truncator
+from django.template.loader import render_to_string
+from django.contrib.admin.widgets import ForeignKeyRawIdWidget
+
+
+class ForeignKeySearchInput(ForeignKeyRawIdWidget):
+    """
+    A Widget for displaying ForeignKeys in an autocomplete search input
+    instead in a <select> box.
+    """
+    # Set in subclass to render the widget with a different template
+    widget_template = None
+    # Set this to the patch of the search view
+    search_path = '../foreignkey_autocomplete/'
+
+    def _media(self):
+        js_files = ['django_extensions/js/jquery.bgiframe.min.js',
+                    'django_extensions/js/jquery.ajaxQueue.js',
+                    'django_extensions/js/jquery.autocomplete.js']
+
+        # Use a newer version of jquery if django version <= 1.5.x
+        # When removing this compatibility code also remove jquery-1.7.2.min.js file.
+        if int(django.get_version()[2]) <= 5:
+            js_files.insert(0, 'django_extensions/js/jquery-1.7.2.min.js')
+
+        return forms.Media(css={'all': ('django_extensions/css/jquery.autocomplete.css',)},
+                           js=js_files)
+
+    media = property(_media)
+
+    def label_for_value(self, value):
+        key = self.rel.get_related_field().name
+        obj = self.rel.to._default_manager.get(**{key: value})
+
+        return Truncator(obj).words(14, truncate='...')
+
+    def __init__(self, rel, search_fields, attrs=None):
+        self.search_fields = search_fields
+        super(ForeignKeySearchInput, self).__init__(rel, site, attrs)
+
+    def render(self, name, value, attrs=None):
+        if attrs is None:
+            attrs = {}
+        #output = [super(ForeignKeySearchInput, self).render(name, value, attrs)]
+        opts = self.rel.to._meta
+        app_label = opts.app_label
+        model_name = opts.object_name.lower()
+        related_url = '../../../%s/%s/' % (app_label, model_name)
+        params = self.url_parameters()
+        if params:
+            url = '?' + '&amp;'.join(['%s=%s' % (k, v) for k, v in params.items()])
+        else:
+            url = ''
+
+        if 'class' not in attrs:
+            attrs['class'] = 'vForeignKeyRawIdAdminField'
+        # Call the TextInput render method directly to have more control
+        output = [forms.TextInput.render(self, name, value, attrs)]
+
+        if value:
+            label = self.label_for_value(value)
+        else:
+            label = six.u('')
+
+        context = {
+            'url': url,
+            'related_url': related_url,
+            'search_path': self.search_path,
+            'search_fields': ','.join(self.search_fields),
+            'app_label': app_label,
+            'model_name': model_name,
+            'label': label,
+            'name': name,
+        }
+        output.append(render_to_string(self.widget_template or (
+            'django_extensions/widgets/%s/%s/foreignkey_searchinput.html' % (app_label, model_name),
+            'django_extensions/widgets/%s/foreignkey_searchinput.html' % app_label,
+            'django_extensions/widgets/foreignkey_searchinput.html',
+        ), context))
+        output.reverse()
+
+        return mark_safe(six.u('').join(output))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/forms.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/forms.py.tmpl
new file mode 100644
index 0000000..6b477f9
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/forms.py.tmpl
@@ -0,0 +1,3 @@
+from django import forms
+
+# place form definition here
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/models.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/models.py.tmpl
new file mode 100644
index 0000000..71a8362
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/models.py.tmpl
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/urls.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/urls.py.tmpl
new file mode 100644
index 0000000..96ef53f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/urls.py.tmpl
@@ -0,0 +1,6 @@
+try:
+    from django.conf.urls import *
+except ImportError:  # django < 1.4
+    from django.conf.urls.defaults import *
+
+# place app url patterns here
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/views.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/views.py.tmpl
new file mode 100644
index 0000000..60f00ef
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/app_template/views.py.tmpl
@@ -0,0 +1 @@
+# Create your views here.
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/commands/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/commands/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/commands/sample.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/commands/sample.py.tmpl
new file mode 100644
index 0000000..eb9df1b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/command_template/management/commands/sample.py.tmpl
@@ -0,0 +1,7 @@
+from django.core.management.base import {{ base_command }}
+
+class Command({{ base_command }}):
+    help = "My shiny new management command."
+
+    def {{ handle_method }}:
+        raise NotImplementedError()
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/daily/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/daily/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/hourly/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/hourly/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/monthly/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/monthly/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/sample.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/sample.py.tmpl
new file mode 100644
index 0000000..1a15179
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/sample.py.tmpl
@@ -0,0 +1,8 @@
+from django_extensions.management.jobs import BaseJob
+
+class Job(BaseJob):
+    help = "My sample job."
+
+    def execute(self):
+        # executing empty sample job
+        pass
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/weekly/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/weekly/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/yearly/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/jobs_template/jobs/yearly/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/template_tags_template/templatetags/__init__.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/template_tags_template/templatetags/__init__.py.tmpl
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/template_tags_template/templatetags/sample.py.tmpl b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/template_tags_template/templatetags/sample.py.tmpl
new file mode 100644
index 0000000..d0b4881
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/conf/template_tags_template/templatetags/sample.py.tmpl
@@ -0,0 +1,4 @@
+from django import template
+
+register = template.Library()
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/__init__.py
new file mode 100644
index 0000000..d68c04e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/__init__.py
@@ -0,0 +1,390 @@
+"""
+Django Extensions additional model fields
+"""
+import re
+import six
+import warnings
+
+try:
+    import uuid
+    HAS_UUID = True
+except ImportError:
+    HAS_UUID = False
+
+try:
+    import shortuuid
+    HAS_SHORT_UUID = True
+except ImportError:
+    HAS_SHORT_UUID = False
+
+from django.core.exceptions import ImproperlyConfigured
+from django.template.defaultfilters import slugify
+from django.db.models import DateTimeField, CharField, SlugField
+
+try:
+    from django.utils.timezone import now as datetime_now
+    assert datetime_now
+except ImportError:
+    import datetime
+    datetime_now = datetime.datetime.now
+
+try:
+    from django.utils.encoding import force_unicode  # NOQA
+except ImportError:
+    from django.utils.encoding import force_text as force_unicode  # NOQA
+
+
+class AutoSlugField(SlugField):
+    """ AutoSlugField
+
+    By default, sets editable=False, blank=True.
+
+    Required arguments:
+
+    populate_from
+        Specifies which field or list of fields the slug is populated from.
+
+    Optional arguments:
+
+    separator
+        Defines the used separator (default: '-')
+
+    overwrite
+        If set to True, overwrites the slug on every save (default: False)
+
+    Inspired by SmileyChris' Unique Slugify snippet:
+    http://www.djangosnippets.org/snippets/690/
+    """
+    def __init__(self, *args, **kwargs):
+        kwargs.setdefault('blank', True)
+        kwargs.setdefault('editable', False)
+
+        populate_from = kwargs.pop('populate_from', None)
+        if populate_from is None:
+            raise ValueError("missing 'populate_from' argument")
+        else:
+            self._populate_from = populate_from
+
+        self.slugify_function = kwargs.pop('slugify_function', slugify)
+        self.separator = kwargs.pop('separator', six.u('-'))
+        self.overwrite = kwargs.pop('overwrite', False)
+        if not isinstance(self.overwrite, bool):
+            raise ValueError("'overwrite' argument must be True or False")
+        self.allow_duplicates = kwargs.pop('allow_duplicates', False)
+        if not isinstance(self.allow_duplicates, bool):
+            raise ValueError("'allow_duplicates' argument must be True or False")
+        super(AutoSlugField, self).__init__(*args, **kwargs)
+
+    def _slug_strip(self, value):
+        """
+        Cleans up a slug by removing slug separator characters that occur at
+        the beginning or end of a slug.
+
+        If an alternate separator is used, it will also replace any instances
+        of the default '-' separator with the new separator.
+        """
+        re_sep = '(?:-|%s)' % re.escape(self.separator)
+        value = re.sub('%s+' % re_sep, self.separator, value)
+        return re.sub(r'^%s+|%s+$' % (re_sep, re_sep), '', value)
+
+    def get_queryset(self, model_cls, slug_field):
+        for field, model in model_cls._meta.get_fields_with_model():
+            if model and field == slug_field:
+                return model._default_manager.all()
+        return model_cls._default_manager.all()
+
+    def slugify_func(self, content):
+        if content:
+            return self.slugify_function(content)
+        return ''
+
+    def create_slug(self, model_instance, add):
+        # get fields to populate from and slug field to set
+        if not isinstance(self._populate_from, (list, tuple)):
+            self._populate_from = (self._populate_from, )
+        slug_field = model_instance._meta.get_field(self.attname)
+
+        if add or self.overwrite:
+            # slugify the original field content and set next step to 2
+            slug_for_field = lambda field: self.slugify_func(getattr(model_instance, field))
+            slug = self.separator.join(map(slug_for_field, self._populate_from))
+            next = 2
+        else:
+            # get slug from the current model instance
+            slug = getattr(model_instance, self.attname)
+            # model_instance is being modified, and overwrite is False,
+            # so instead of doing anything, just return the current slug
+            return slug
+
+        # strip slug depending on max_length attribute of the slug field
+        # and clean-up
+        slug_len = slug_field.max_length
+        if slug_len:
+            slug = slug[:slug_len]
+        slug = self._slug_strip(slug)
+        original_slug = slug
+
+        if self.allow_duplicates:
+            return slug
+
+        # exclude the current model instance from the queryset used in finding
+        # the next valid slug
+        queryset = self.get_queryset(model_instance.__class__, slug_field)
+        if model_instance.pk:
+            queryset = queryset.exclude(pk=model_instance.pk)
+
+        # form a kwarg dict used to impliment any unique_together contraints
+        kwargs = {}
+        for params in model_instance._meta.unique_together:
+            if self.attname in params:
+                for param in params:
+                    kwargs[param] = getattr(model_instance, param, None)
+        kwargs[self.attname] = slug
+
+        # increases the number while searching for the next valid slug
+        # depending on the given slug, clean-up
+        while not slug or queryset.filter(**kwargs):
+            slug = original_slug
+            end = '%s%s' % (self.separator, next)
+            end_len = len(end)
+            if slug_len and len(slug) + end_len > slug_len:
+                slug = slug[:slug_len - end_len]
+                slug = self._slug_strip(slug)
+            slug = '%s%s' % (slug, end)
+            kwargs[self.attname] = slug
+            next += 1
+        return slug
+
+    def pre_save(self, model_instance, add):
+        value = force_unicode(self.create_slug(model_instance, add))
+        setattr(model_instance, self.attname, value)
+        return value
+
+    def get_internal_type(self):
+        return "SlugField"
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        # We'll just introspect the _actual_ field.
+        from south.modelsinspector import introspector
+        field_class = '%s.AutoSlugField' % self.__module__
+        args, kwargs = introspector(self)
+        kwargs.update({
+            'populate_from': repr(self._populate_from),
+            'separator': repr(self.separator),
+            'overwrite': repr(self.overwrite),
+            'allow_duplicates': repr(self.allow_duplicates),
+        })
+        # That's our definition!
+        return (field_class, args, kwargs)
+
+    def deconstruct(self):
+        name, path, args, kwargs = super(AutoSlugField, self).deconstruct()
+        kwargs['populate_from'] = self._populate_from
+        if not self.separator == six.u('-'):
+            kwargs['separator'] = self.separator
+        if self.overwrite is not False:
+            kwargs['overwrite'] = True
+        if self.allow_duplicates is not False:
+            kwargs['allow_duplicates'] = True
+        return name, path, args, kwargs
+
+
+class CreationDateTimeField(DateTimeField):
+    """ CreationDateTimeField
+
+    By default, sets editable=False, blank=True, default=datetime.now
+    """
+
+    def __init__(self, *args, **kwargs):
+        kwargs.setdefault('editable', False)
+        kwargs.setdefault('blank', True)
+        kwargs.setdefault('default', datetime_now)
+        DateTimeField.__init__(self, *args, **kwargs)
+
+    def get_internal_type(self):
+        return "DateTimeField"
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        # We'll just introspect ourselves, since we inherit.
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.DateTimeField"
+        args, kwargs = introspector(self)
+        return (field_class, args, kwargs)
+
+    def deconstruct(self):
+        name, path, args, kwargs = super(CreationDateTimeField, self).deconstruct()
+        if self.editable is not False:
+            kwargs['editable'] = True
+        if self.blank is not True:
+            kwargs['blank'] = False
+        if self.default is not datetime_now:
+            kwargs['default'] = self.default
+        return name, path, args, kwargs
+
+
+class ModificationDateTimeField(CreationDateTimeField):
+    """ ModificationDateTimeField
+
+    By default, sets editable=False, blank=True, default=datetime.now
+
+    Sets value to datetime.now() on each save of the model.
+    """
+
+    def pre_save(self, model, add):
+        value = datetime_now()
+        setattr(model, self.attname, value)
+        return value
+
+    def get_internal_type(self):
+        return "DateTimeField"
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        # We'll just introspect ourselves, since we inherit.
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.DateTimeField"
+        args, kwargs = introspector(self)
+        return (field_class, args, kwargs)
+
+
+class UUIDVersionError(Exception):
+    pass
+
+
+class UUIDField(CharField):
+    """ UUIDField
+
+    By default uses UUID version 4 (randomly generated UUID).
+
+    The field support all uuid versions which are natively supported by the uuid python module, except version 2.
+    For more information see: http://docs.python.org/lib/module-uuid.html
+    """
+    DEFAULT_MAX_LENGTH = 36
+
+    def __init__(self, verbose_name=None, name=None, auto=True, version=4, node=None, clock_seq=None, namespace=None, uuid_name=None, *args, **kwargs):
+        warnings.warn("Django 1.8 features a native UUIDField, this UUIDField will be removed after Django 1.7 becomes unsupported.", DeprecationWarning)
+
+        if not HAS_UUID:
+            raise ImproperlyConfigured("'uuid' module is required for UUIDField. (Do you have Python 2.5 or higher installed ?)")
+        kwargs.setdefault('max_length', self.DEFAULT_MAX_LENGTH)
+        if auto:
+            self.empty_strings_allowed = False
+            kwargs['blank'] = True
+            kwargs.setdefault('editable', False)
+        self.auto = auto
+        self.version = version
+        self.node = node
+        self.clock_seq = clock_seq
+        self.namespace = namespace
+        self.uuid_name = uuid_name or name
+        super(UUIDField, self).__init__(verbose_name=verbose_name, *args, **kwargs)
+
+    def create_uuid(self):
+        if not self.version or self.version == 4:
+            return uuid.uuid4()
+        elif self.version == 1:
+            return uuid.uuid1(self.node, self.clock_seq)
+        elif self.version == 2:
+            raise UUIDVersionError("UUID version 2 is not supported.")
+        elif self.version == 3:
+            return uuid.uuid3(self.namespace, self.uuid_name)
+        elif self.version == 5:
+            return uuid.uuid5(self.namespace, self.uuid_name)
+        else:
+            raise UUIDVersionError("UUID version %s is not valid." % self.version)
+
+    def pre_save(self, model_instance, add):
+        value = super(UUIDField, self).pre_save(model_instance, add)
+        if self.auto and add and value is None:
+            value = force_unicode(self.create_uuid())
+            setattr(model_instance, self.attname, value)
+            return value
+        else:
+            if self.auto and not value:
+                value = force_unicode(self.create_uuid())
+                setattr(model_instance, self.attname, value)
+        return value
+
+    def formfield(self, **kwargs):
+        if self.auto:
+            return None
+        return super(UUIDField, self).formfield(**kwargs)
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        # We'll just introspect the _actual_ field.
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.CharField"
+        args, kwargs = introspector(self)
+        # That's our definition!
+        return (field_class, args, kwargs)
+
+    def deconstruct(self):
+        name, path, args, kwargs = super(UUIDField, self).deconstruct()
+        if kwargs.get('max_length', None) == self.DEFAULT_MAX_LENGTH:
+            del kwargs['max_length']
+        if self.auto is not True:
+            kwargs['auto'] = self.auto
+        if self.version != 4:
+            kwargs['version'] = self.version
+        if self.node is not None:
+            kwargs['node'] = self.node
+        if self.clock_seq is not None:
+            kwargs['clock_seq'] = self.clock_seq
+        if self.namespace is not None:
+            kwargs['namespace'] = self.namespace
+        if self.uuid_name is not None:
+            kwargs['uuid_name'] = self.name
+        return name, path, args, kwargs
+
+
+class PostgreSQLUUIDField(UUIDField):
+    def __init__(self, *args, **kwargs):
+        warnings.warn("Django 1.8 features a native UUIDField, this UUIDField will be removed after Django 1.7 becomes unsupported.", DeprecationWarning)
+        super(PostgreSQLUUIDField, self).__init__(*args, **kwargs)
+
+    def db_type(self, connection=None):
+        return "UUID"
+
+    def get_db_prep_value(self, value, connection, prepared=False):
+        if isinstance(value, six.integer_types):
+            value = uuid.UUID(int=value)
+        elif isinstance(value, (six.string_types, six.binary_type)):
+            if len(value) == 16:
+                value = uuid.UUID(bytes=value)
+            else:
+                value = uuid.UUID(value)
+        return super(PostgreSQLUUIDField, self).get_db_prep_value(
+            value, connection, prepared=False)
+
+
+class ShortUUIDField(UUIDField):
+    """ ShortUUIDFied
+
+    Generates concise (22 characters instead of 36), unambiguous, URL-safe UUIDs.
+
+    Based on `shortuuid`: https://github.com/stochastic-technologies/shortuuid
+    """
+    DEFAULT_MAX_LENGTH = 22
+
+    def __init__(self, *args, **kwargs):
+        super(ShortUUIDField, self).__init__(*args, **kwargs)
+        if not HAS_SHORT_UUID:
+            raise ImproperlyConfigured("'shortuuid' module is required for ShortUUIDField. (Do you have Python 2.5 or higher installed ?)")
+        kwargs.setdefault('max_length', self.DEFAULT_MAX_LENGTH)
+
+    def create_uuid(self):
+        if not self.version or self.version == 4:
+            return shortuuid.uuid()
+        elif self.version == 1:
+            return shortuuid.uuid()
+        elif self.version == 2:
+            raise UUIDVersionError("UUID version 2 is not supported.")
+        elif self.version == 3:
+            raise UUIDVersionError("UUID version 3 is not supported.")
+        elif self.version == 5:
+            return shortuuid.uuid(name=self.namespace)
+        else:
+            raise UUIDVersionError("UUID version %s is not valid." % self.version)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/encrypted.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/encrypted.py
new file mode 100644
index 0000000..8eddba1
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/encrypted.py
@@ -0,0 +1,150 @@
+import sys
+import six
+from django.db import models
+from django.core.exceptions import ImproperlyConfigured
+from django import forms
+from django.conf import settings
+import warnings
+
+try:
+    from keyczar import keyczar
+except ImportError:
+    raise ImportError('Using an encrypted field requires the Keyczar module. '
+                      'You can obtain Keyczar from http://www.keyczar.org/.')
+
+
+class EncryptionWarning(RuntimeWarning):
+    pass
+
+
+class BaseEncryptedField(models.Field):
+    prefix = 'enc_str:::'
+
+    def __init__(self, *args, **kwargs):
+        if not hasattr(settings, 'ENCRYPTED_FIELD_KEYS_DIR'):
+            raise ImproperlyConfigured('You must set the settings.ENCRYPTED_FIELD_KEYS_DIR '
+                                       'setting to your Keyczar keys directory.')
+        crypt_class = self.get_crypt_class()
+        self.crypt = crypt_class.Read(settings.ENCRYPTED_FIELD_KEYS_DIR)
+
+        # Encrypted size is larger than unencrypted
+        self.unencrypted_length = max_length = kwargs.get('max_length', None)
+        if max_length:
+            kwargs['max_length'] = self.calculate_crypt_max_length(max_length)
+
+        super(BaseEncryptedField, self).__init__(*args, **kwargs)
+
+    def calculate_crypt_max_length(self, unencrypted_length):
+        # TODO: Re-examine if this logic will actually make a large-enough
+        # max-length for unicode strings that have non-ascii characters in them.
+        # For PostGreSQL we might as well always use textfield since there is little
+        # difference (except for length checking) between varchar and text in PG.
+        return len(self.prefix) + len(self.crypt.Encrypt('x' * unencrypted_length))
+
+    def get_crypt_class(self):
+        """
+        Get the Keyczar class to use.
+
+        The class can be customized with the ENCRYPTED_FIELD_MODE setting. By default,
+        this setting is DECRYPT_AND_ENCRYPT. Set this to ENCRYPT to disable decryption.
+        This is necessary if you are only providing public keys to Keyczar.
+
+        Returns:
+            keyczar.Encrypter if ENCRYPTED_FIELD_MODE is ENCRYPT.
+            keyczar.Crypter if ENCRYPTED_FIELD_MODE is DECRYPT_AND_ENCRYPT.
+
+        Override this method to customize the type of Keyczar class returned.
+        """
+
+        crypt_type = getattr(settings, 'ENCRYPTED_FIELD_MODE', 'DECRYPT_AND_ENCRYPT')
+        if crypt_type == 'ENCRYPT':
+            crypt_class_name = 'Encrypter'
+        elif crypt_type == 'DECRYPT_AND_ENCRYPT':
+            crypt_class_name = 'Crypter'
+        else:
+            raise ImproperlyConfigured(
+                'ENCRYPTED_FIELD_MODE must be either DECRYPT_AND_ENCRYPT '
+                'or ENCRYPT, not %s.' % crypt_type)
+        return getattr(keyczar, crypt_class_name)
+
+    def to_python(self, value):
+        if isinstance(self.crypt.primary_key, keyczar.keys.RsaPublicKey):
+            retval = value
+        elif value and (value.startswith(self.prefix)):
+            if hasattr(self.crypt, 'Decrypt'):
+                retval = self.crypt.Decrypt(value[len(self.prefix):])
+                if sys.version_info < (3,):
+                    if retval:
+                        retval = retval.decode('utf-8')
+            else:
+                retval = value
+        else:
+            retval = value
+        return retval
+
+    def get_db_prep_value(self, value, connection, prepared=False):
+        if value and not value.startswith(self.prefix):
+            # We need to encode a unicode string into a byte string, first.
+            # keyczar expects a bytestring, not a unicode string.
+            if sys.version_info < (3,):
+                if type(value) == six.types.UnicodeType:
+                    value = value.encode('utf-8')
+            # Truncated encrypted content is unreadable,
+            # so truncate before encryption
+            max_length = self.unencrypted_length
+            if max_length and len(value) > max_length:
+                warnings.warn("Truncating field %s from %d to %d bytes" % (
+                    self.name, len(value), max_length), EncryptionWarning
+                )
+                value = value[:max_length]
+
+            value = self.prefix + self.crypt.Encrypt(value)
+        return value
+
+    def deconstruct(self):
+        name, path, args, kwargs = super(BaseEncryptedField, self).deconstruct()
+        kwargs['max_length'] = self.unencrypted_length
+        return name, path, args, kwargs
+
+
+class EncryptedTextField(six.with_metaclass(models.SubfieldBase,
+                                            BaseEncryptedField)):
+    def get_internal_type(self):
+        return 'TextField'
+
+    def formfield(self, **kwargs):
+        defaults = {'widget': forms.Textarea}
+        defaults.update(kwargs)
+        return super(EncryptedTextField, self).formfield(**defaults)
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        # We'll just introspect the _actual_ field.
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.TextField"
+        args, kwargs = introspector(self)
+        # That's our definition!
+        return (field_class, args, kwargs)
+
+
+class EncryptedCharField(six.with_metaclass(models.SubfieldBase,
+                                            BaseEncryptedField)):
+    def __init__(self, *args, **kwargs):
+        super(EncryptedCharField, self).__init__(*args, **kwargs)
+
+    def get_internal_type(self):
+        return "CharField"
+
+    def formfield(self, **kwargs):
+        defaults = {'max_length': self.max_length}
+        defaults.update(kwargs)
+        return super(EncryptedCharField, self).formfield(**defaults)
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        # We'll just introspect the _actual_ field.
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.CharField"
+        args, kwargs = introspector(self)
+        # That's our definition!
+        return (field_class, args, kwargs)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/json.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/json.py
new file mode 100644
index 0000000..0d69a6e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/fields/json.py
@@ -0,0 +1,116 @@
+"""
+JSONField automatically serializes most Python terms to JSON data.
+Creates a TEXT field with a default value of "{}".  See test_json.py for
+more information.
+
+ from django.db import models
+ from django_extensions.db.fields import json
+
+ class LOL(models.Model):
+     extra = json.JSONField()
+"""
+from __future__ import absolute_import
+import six
+from decimal import Decimal
+from django.db import models
+from django.conf import settings
+from django.core.serializers.json import DjangoJSONEncoder
+
+try:
+    # Django >= 1.7
+    import json
+except ImportError:
+    # Django <= 1.6 backwards compatibility
+    from django.utils import simplejson as json
+
+
+def dumps(value):
+    return DjangoJSONEncoder().encode(value)
+
+
+def loads(txt):
+    value = json.loads(
+        txt,
+        parse_float=Decimal,
+        encoding=settings.DEFAULT_CHARSET
+    )
+    return value
+
+
+class JSONDict(dict):
+    """
+    Hack so repr() called by dumpdata will output JSON instead of
+    Python formatted data.  This way fixtures will work!
+    """
+    def __repr__(self):
+        return dumps(self)
+
+
+class JSONUnicode(six.text_type):
+    """
+    As above
+    """
+    def __repr__(self):
+        return dumps(self)
+
+
+class JSONList(list):
+    """
+    As above
+    """
+    def __repr__(self):
+        return dumps(self)
+
+
+class JSONField(six.with_metaclass(models.SubfieldBase, models.TextField)):
+    """JSONField is a generic textfield that neatly serializes/unserializes
+    JSON objects seamlessly.  Main thingy must be a dict object."""
+
+    def __init__(self, *args, **kwargs):
+        default = kwargs.get('default', None)
+        if default is None:
+            kwargs['default'] = '{}'
+        elif isinstance(default, (list, dict)):
+            kwargs['default'] = dumps(default)
+        models.TextField.__init__(self, *args, **kwargs)
+
+    def to_python(self, value):
+        """Convert our string value to JSON after we load it from the DB"""
+        if value is None or value == '':
+            return {}
+        elif isinstance(value, six.string_types):
+            res = loads(value)
+            if isinstance(res, dict):
+                return JSONDict(**res)
+            elif isinstance(res, six.string_types):
+                return JSONUnicode(res)
+            elif isinstance(res, list):
+                return JSONList(res)
+            return res
+        else:
+            return value
+
+    def get_db_prep_save(self, value, connection, **kwargs):
+        """Convert our JSON object to a string before we save"""
+        if value is None and self.null:
+            return None
+        # default values come in as strings; only non-strings should be
+        # run through `dumps`
+        if not isinstance(value, six.string_types):
+            value = dumps(value)
+        return super(JSONField, self).get_db_prep_save(value, connection=connection)
+
+    def south_field_triple(self):
+        """Returns a suitable description of this field for South."""
+        # We'll just introspect the _actual_ field.
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.TextField"
+        args, kwargs = introspector(self)
+        # That's our definition!
+        return (field_class, args, kwargs)
+
+    def deconstruct(self):
+        name, path, args, kwargs = super(JSONField, self).deconstruct()
+        if self.default == '{}':
+            del kwargs['default']
+        return name, path, args, kwargs
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/models.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/models.py
new file mode 100644
index 0000000..a50314d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/db/models.py
@@ -0,0 +1,101 @@
+"""
+Django Extensions abstract base model classes.
+"""
+from django.db import models
+from django.utils.translation import ugettext_lazy as _
+from django_extensions.db.fields import (ModificationDateTimeField,
+                                         CreationDateTimeField, AutoSlugField)
+
+try:
+    from django.utils.timezone import now as datetime_now
+    assert datetime_now
+except ImportError:
+    import datetime
+    datetime_now = datetime.datetime.now
+
+
+class TimeStampedModel(models.Model):
+    """ TimeStampedModel
+    An abstract base class model that provides self-managed "created" and
+    "modified" fields.
+    """
+    created = CreationDateTimeField(_('created'))
+    modified = ModificationDateTimeField(_('modified'))
+
+    class Meta:
+        get_latest_by = 'modified'
+        ordering = ('-modified', '-created',)
+        abstract = True
+
+
+class TitleSlugDescriptionModel(models.Model):
+    """ TitleSlugDescriptionModel
+    An abstract base class model that provides title and description fields
+    and a self-managed "slug" field that populates from the title.
+    """
+    title = models.CharField(_('title'), max_length=255)
+    slug = AutoSlugField(_('slug'), populate_from='title')
+    description = models.TextField(_('description'), blank=True, null=True)
+
+    class Meta:
+        abstract = True
+
+
+class ActivatorQuerySet(models.query.QuerySet):
+    """ ActivatorQuerySet
+    Query set that returns statused results
+    """
+    def active(self):
+        """ Returns active query set """
+        return self.filter(status=ActivatorModel.ACTIVE_STATUS)
+
+    def inactive(self):
+        """ Returns inactive query set """
+        return self.filter(status=ActivatorModel.INACTIVE_STATUS)
+
+
+class ActivatorModelManager(models.Manager):
+    """ ActivatorModelManager
+    Manager to return instances of ActivatorModel: SomeModel.objects.active() / .inactive()
+    """
+    def get_query_set(self):
+        """ Proxy to `get_queryset`, drop this when Django < 1.6 is no longer supported """
+        return self.get_queryset()
+
+    def get_queryset(self):
+        """ Use ActivatorQuerySet for all results """
+        return ActivatorQuerySet(model=self.model, using=self._db)
+
+    def active(self):
+        """ Returns active instances of ActivatorModel: SomeModel.objects.active(),
+        proxy to ActivatorQuerySet.active """
+        return self.get_query_set().active()
+
+    def inactive(self):
+        """ Returns inactive instances of ActivatorModel: SomeModel.objects.inactive(),
+        proxy to ActivatorQuerySet.inactive """
+        return self.get_query_set().inactive()
+
+
+class ActivatorModel(models.Model):
+    """ ActivatorModel
+    An abstract base class model that provides activate and deactivate fields.
+    """
+    INACTIVE_STATUS, ACTIVE_STATUS = range(2)
+    STATUS_CHOICES = (
+        (INACTIVE_STATUS, _('Inactive')),
+        (ACTIVE_STATUS, _('Active')),
+    )
+    status = models.IntegerField(_('status'), choices=STATUS_CHOICES, default=ACTIVE_STATUS)
+    activate_date = models.DateTimeField(blank=True, null=True, help_text=_('keep empty for an immediate activation'))
+    deactivate_date = models.DateTimeField(blank=True, null=True, help_text=_('keep empty for indefinite activation'))
+    objects = ActivatorModelManager()
+
+    class Meta:
+        ordering = ('status', '-activate_date',)
+        abstract = True
+
+    def save(self, *args, **kwargs):
+        if not self.activate_date:
+            self.activate_date = datetime_now()
+        super(ActivatorModel, self).save(*args, **kwargs)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/future_1_5.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/future_1_5.py
new file mode 100644
index 0000000..d7144ca
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/future_1_5.py
@@ -0,0 +1,16 @@
+"""
+A forwards compatibility module.
+
+Implements some features of Django 1.5 related to the 'Custom User Model' feature
+when the application is run with a lower version of Django.
+"""
+from __future__ import unicode_literals
+
+from django.contrib.auth.models import User
+
+User.USERNAME_FIELD = "username"
+User.get_username = lambda self: self.username
+
+
+def get_user_model():
+    return User
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/cache_cleanup.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/cache_cleanup.py
new file mode 100644
index 0000000..bbc75b5
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/cache_cleanup.py
@@ -0,0 +1,61 @@
+"""
+Daily cleanup job.
+
+Can be run as a cronjob to clean out old data from the database (only expired
+sessions at the moment).
+"""
+
+import six
+from contextlib import contextmanager
+from django_extensions.management.jobs import DailyJob
+
+
+class Job(DailyJob):
+    help = "Cache (db) cleanup Job"
+
+    def execute(self):
+        from django.conf import settings
+        from django.db import transaction
+        import os
+
+        try:
+            from django.utils import timezone
+        except ImportError:
+            timezone = None
+
+        if hasattr(transaction, 'atomic'):
+            atomic = transaction.atomic
+        else:
+            @contextmanager
+            def atomic(using=None):
+                yield
+                transaction.commit_unless_managed(using=using)
+
+        if hasattr(settings, 'CACHES') and timezone:
+            from django.core.cache import get_cache
+            from django.db import router, connections
+
+            for cache_name, cache_options in six.iteritems(settings.CACHES):
+                if cache_options['BACKEND'].endswith("DatabaseCache"):
+                    cache = get_cache(cache_name)
+                    db = router.db_for_write(cache.cache_model_class)
+                    with atomic(using=db):
+                        cursor = connections[db].cursor()
+                        now = timezone.now()
+                        cache._cull(db, cursor, now)
+            return
+
+        if hasattr(settings, 'CACHE_BACKEND'):
+            if settings.CACHE_BACKEND.startswith('db://'):
+                from django.db import connection
+                os.environ['TZ'] = settings.TIME_ZONE
+                table_name = settings.CACHE_BACKEND[5:]
+
+                with atomic():
+                    cursor = connection.cursor()
+                    cursor.execute(
+                        "DELETE FROM %s WHERE %s < current_timestamp;" % (
+                            connection.ops.quote_name(table_name),
+                            connection.ops.quote_name('expires')
+                        )
+                    )
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/daily_cleanup.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/daily_cleanup.py
new file mode 100644
index 0000000..614e9ec
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/daily/daily_cleanup.py
@@ -0,0 +1,21 @@
+"""
+Daily cleanup job.
+
+Can be run as a cronjob to clean out old data from the database (only expired
+sessions at the moment).
+"""
+
+from django_extensions.management.jobs import DailyJob
+
+
+class Job(DailyJob):
+    help = "Django Daily Cleanup Job"
+
+    def execute(self):
+        from django.core import management
+        from django import VERSION
+
+        if VERSION[:2] < (1, 5):
+            management.call_command("cleanup")
+        else:
+            management.call_command("clearsessions")
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/hourly/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/hourly/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/minutely/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/minutely/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/monthly/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/monthly/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/weekly/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/weekly/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/yearly/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/jobs/yearly/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/cs/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/cs/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..c2635d7ec15efbe0746bc75210332ea5ddccf6a7
GIT binary patch
literal 451
zcmZvX(N4lJ6oxT+wM(zPI2VRswAf89urOr8AS4?S7~a>d&XLhBZ87=?K7g<1vv`IH
z-1w(|+Ma&tIsec3*>?kVg1$gsqEFE`=vrO$7e3zOUNZ+RwAzT&l37Ncg*Jtf46+TE
zxgz4j3Rzc-vlNxmmc%A6GV-{~4M`LOXYrJfkrvz{M8@0-1|D@?LOopIx~$_}Q<qW%
z$x^%*^=JQZbk9-bB5o{6G?%92R%r&4briuoh(qXyaWIR9!Faq3SE~V{GT-rBkVNn;
zgD99!*TEFIC>oYUTj_k@#Ira&#&X-#87YaOu*YYG!&;1ZTa~<!JxJfUHp2SrWJ0<}
zuAb#pXcEd)WrfTcbYBX4=*}QD&Z69DUXqE@Tf;zB`>XNqdhmDjThjO4D|i433|eyF
Rd(dox?E9U%=wi`x8o$m@dw2i<

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/cs/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/cs/LC_MESSAGES/django.po
new file mode 100644
index 0000000..0bf050e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/cs/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: django-extensions\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:42+0100\n"
+"PO-Revision-Date: 2011-02-02 10:42+0000\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: cs\n"
+"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr ""
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+
+#: db/models.py:15
+msgid "created"
+msgstr ""
+
+#: db/models.py:16
+msgid "modified"
+msgstr ""
+
+#: db/models.py:26
+msgid "title"
+msgstr ""
+
+#: db/models.py:27
+msgid "slug"
+msgstr ""
+
+#: db/models.py:28
+msgid "description"
+msgstr ""
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr ""
+
+#: db/models.py:51
+msgid "Active"
+msgstr ""
+
+#: db/models.py:53
+msgid "status"
+msgstr ""
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr ""
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr ""
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr ""
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr ""
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/da/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/da/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..1972c4f810fe8a171483e0d5b51ffd60e8c425dd
GIT binary patch
literal 797
zcmZ{h%We}f6ow6y+aNaGuwijFNK}=>qykh;OVvp-EfF(GluHo^sd6$WQxnIIY$t*T
zL1M>_6>q_NAlUH&NURXY;Zm{SX#V*u`S*W3b3ScuykS(=Nw-NQ=_cs|Db#1u719?{
zLHbI%M0$9Ev8%*{c!Ss=UL$sh8^ou?%fuJN2c$76<h;Ge*ogR!NDuo)ui*Pm3^_lD
zAvdBXA!m~q_HPj>VqGC8?1c*6kP~``3U><?z9*bxxiPclf{h%4KSNMB^)QvFO7I3s
z19$GuO^NDMi#cvNP;0vbsn_<k(~)VtI91a5EmvbgmuzBDcr00oZer!aOQRV@NphCV
zsb$5y^a@$enwL27yj}7Ww2o{E^wQ>&^f-f)tUqXXJ5e7O#(G}3N|wB_tQ;Sj1fpJd
z$eW=J9pWwOmcUM2uk(0^9;nxo`#allJ&wu9`?!)J{I~B}miBqk<*gJRcax&M{k+@B
zqFgx7hgN8(gf}*UqfwqiCoMAA&x*92AEvEVKN}1V$f~QQsE`j)%oE7d&haQ*c|Xq&
zm8=<C9YjUD$j(2iUW=oq(H=GRc)g&@dVJ;YEtHUY4<={AI`of5!y~?X?hALBqUD*M
z(7)4F0=r}Bqd#M7*kuJ%R31HesbGcLc}t_DweX<C3jaI7U+1h2j(^8zD&}Tl?AaLI
U%*quihwS5fU0U>iM~9021pbQ3g8%>k

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/da/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/da/LC_MESSAGES/django.po
new file mode 100644
index 0000000..42e323e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/da/LC_MESSAGES/django.po
@@ -0,0 +1,79 @@
+# django_extentions in Danish.
+# django_extensions på Dansk.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# Michael Lind Mortensen <illio@cs.au.dk>, 2009.
+#
+#, fuzzy
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:42+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "og"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Brug feltet til venstre til at lave %(model_name)s lookups i felterne %"
+"(field_list)s."
+
+#: db/models.py:15
+msgid "created"
+msgstr "skabt"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "ændret"
+
+#: db/models.py:26
+msgid "title"
+msgstr "titel"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "beskrivelse"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr ""
+
+#: db/models.py:51
+msgid "Active"
+msgstr ""
+
+#: db/models.py:53
+msgid "status"
+msgstr ""
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr ""
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr ""
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr ""
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Lookup"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/de/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/de/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..6367477a60131e171dced2207a9dd526008a3235
GIT binary patch
literal 1227
zcmZvaPmj|^7{;fC76`ORaNq*cdnl+Y@RF=RLgtS!8!tpSn{ARsY7eX?@f&A|Gh@w+
z5pd@l05@)^x2nBXs(L|OIdQBw@hy62pYd+RQZe%Q=dqr7-^ZTk{fUFm1;%mA)0odN
zPhlSW0ym5~cmY)4*We5AF!*wB{WI9d`WNs3_&0b6{0BS=9{N&<bKptvJ1_>r{vGfj
zI0r-BCHNKS!OPhD1U!TFZzvkxzXe0xcYFK`+`;+-h)Z-)EY!UN9s_>>L*M)03iuQ}
z0{#l(62IdX`u+)q`fotAZ9IPihIiqg>>r{2e*^X!Ki`6(Ug#O>hniuucG28}KXKMk
zZrG7Fo@7<AwB!v<m?YJ<tfcpBHJQl+o_di?y?V%^r{(TLX3V0l#I|GdbEcAKo@R>6
zJk-byo&A1kaxQnYT=I&evXMJdx{)_Z2T}8|Q!3|I+^Uc|7gNj9b1rgrQ>!Ykj1~*#
zig;Q1$22pRq$agoa;_kx#*h4*OzE6wN~=#ru%*y77p|-e;k@*<6JGg}#g;YUTcchc
z-DB&}Ii{^-{cdtQrF-dc)EjKJhFlrzqrNLt9^I-77mZC!t*ya0S`W^#DeA&kOl$2<
zCu*<ZqE08iw06GTX}2MahWt>4;(NLu(_|R+2T?bnJA=62JO9&QGi_zk`DkpVcBS;j
z#<a1WWwe>}Q@WP+lU{Z+>2`<dXmkToUDUGRXv}gMQ<iMr-VT<pW!cSAtr}b0X!U#j
z^y5c$R@<$0qdjZ%cwE7(=STixRZ69=(sVAZV}E^nyb)dbs0&_ZY@<|9@e6ek)0K(x
ztq>y|A1xSXyDv8b<Ys}~ERdTJn}*3`X5mzHB_g5pf@vc}X2QDmPgq}|dinq4>}|o3
zYsy(S8$vEW%?{<Yoz7>k|Cn3WtD;7baDtx8(u-S25?-rGtqYMcTPme<C<VDCXAmi`
o3Z}-YV*6QHttULQ_)tci_A3j1{R%;|UW`JZM!SI;BXy<t7knN+<p2Nx

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/de/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/de/LC_MESSAGES/django.po
new file mode 100644
index 0000000..81a35db
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/de/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:42+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "und"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Das linke Feld benutzen, um %(model_name)s Abfragen in den Feldern %"
+"(field_list)s durchführen."
+
+#: db/models.py:15
+msgid "created"
+msgstr "erstellt"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "geändert"
+
+#: db/models.py:26
+msgid "title"
+msgstr "Titel"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "Slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "Beschreibung"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "Inaktiv"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Aktiv"
+
+#: db/models.py:53
+msgid "status"
+msgstr "Status"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "Leer lassen für sofortige Aktivierung"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "Leer lassen für unbefristete Aktivierung"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "%s ist kein urlpattern Objekt"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Abfrage"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/el/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/el/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..de23560b7e65bd11cb60ed170e0a0721bc4b953a
GIT binary patch
literal 1581
zcmaiz&2C#o6vqcBw3rr9yFfxn93)aTDmU1HMReO#NlQ`%*$`C@%SIF5u`})U%;nCw
zqO9oWDjOsUE4Hx7hc3kgmqvbrxo^-H=o26o^grW}q@{vU#=ki;=i`5l<44C2-D6m9
zV84U?9rjz;M_<4P)++b`D8X02@4+MBkGu9yU<39B_!9URco_T}d<{JOB4a1P6X5$`
z4Ep$G@DR8P`n+B6Wzd2dV!sBPupcAoQE&#%Z-Nc*ICvS{0KWu%{JRK#8$1d6_gU~f
z*aYXnA9mj#fhS=933|U{2=@62MA@ME7>MUE6JT$7-Ty4e3w^#0LPE&#D(JQNRT&|C
z`nj+%Lx~oKl(xjPOz@nnrWHY)dU=|0YelX|uUru=%Vt|vUK4CV@zJ5K_0?X+mW&{~
zDkv3gOKmCA#OFvfjh*W1M5N1#cg47&G`Jg*D!2zv1E+9UPNlKqW`c2*uvRX(6$wj(
zY2`ArQY&^<h>S!xv)8GubK;6*w<{6}M+$oQ^W3CLL|ZEPv=d}WR85#kdmUyhw>`tG
zw5ec=x%RzA3rX~a$PFsTlw9Geqa*Q^70Tb3$|aHM+(r%4kx6vE*D+C3$5dJTycu2a
z+Tj#^0%b8xR%^AWI*C83)#8sQPgiTzDjcIr;+piyp5s@IKbksS#j4b~u~9SU%B0-t
zJf=^%Qqs^_C<13vAu-?ysoMG+oK>gCJ0fZd-i@g~``N{%*^6^@wqBn}<%G^V=PHeb
z#@v2mwTWuwf>vk?Rjy}{YtiI~S<0n4L#<Vw8)2uHn)A`rzMogq7I`$MS{S41#5A=c
z?OyemL|R!)dpS>|d7XDnOezbenVvjDqvP}`Mej{hZM?$9$dLQh_1zAYcU|GO+>Yy)
zw{aQ}js@Y#-vxVPbW^w;cnsWw@b=ILyWxR<Smy5GreEH0_scbgP#6a<zJ*b^-`pm$
zY?rs(HgiA2*&he)p&ORpxFL#qyHD^Lk}L2&C~v_)+H#HH(ueFV|8^fy&>6%&aO<Jk
zpuCBoXX}Jy<(+4L8K~JO_lsNi1<^OE6#Es5fBi<#IL5(He;c6#2)^Tcb(`*Y++Zrq
z%kzpcfE&<$*KJ}99-|frD*en6x+j0#tMJ3{6W^WQQ=`C?{wGCIuI-KKKhl)9;T47)
m20b{S8yftVJ&4LRU<k8dzFSNL!|`+R3K<St*nc3)P4)yTxo8sr

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/el/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/el/LC_MESSAGES/django.po
new file mode 100644
index 0000000..19355db
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/el/LC_MESSAGES/django.po
@@ -0,0 +1,79 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: django-extensions\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:42+0100\n"
+"PO-Revision-Date: 2011-02-02 10:38+0000\n"
+"Last-Translator: Jannis <jannis@leidel.info>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: el\n"
+"Plural-Forms: nplurals=2; plural=(n != 1)\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "και"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Χρησιμοποίησε το αριστερό πεδίο για να κάνεις αναζήτηση του %(model_name)s "
+"με βάσει τα πεδία %(field_list)s."
+
+#: db/models.py:15
+msgid "created"
+msgstr "δημιουργήθηκε"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "τροποποιήθηκε"
+
+#: db/models.py:26
+msgid "title"
+msgstr "τίτλος"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "μίνι-όνομα"
+
+#: db/models.py:28
+msgid "description"
+msgstr "περιγραφή"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "ανενεργό"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Ενεργό"
+
+#: db/models.py:53
+msgid "status"
+msgstr "κατάσταση"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "αφήστε άδειο για άμεση ενεργοποίηση"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "αφήστε άδειο για αόριστη ενεργοποίηση"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "% s δεν φαίνεται να είναι ένα αντικείμενο urlpattern"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Αναζήτηση"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/en/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/en/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..4ed8824d31092b07af760f84f33aad2e54a619d0
GIT binary patch
literal 367
zcmYL^K~KUk7=|@^+R?Lz9=zd)8_@(S5-KaW*luJD61`QZvj$tz6{A1Izvpl9TVmu*
zpY+hDU*G<m9Dg5R4v|yj3^_v1kv4tg3J<SwZ=L_lynEBD0NEOr+Be2oN@i^Qz^0rm
zc{$IDJSz3p`2e!1%^L1@bpw^7B$^c!jJ;L?FF~q;rlc1q3B)~IBuVIHuM;P6j3Si!
z!?eTyyhqMTkOicS+!s`4ou?w_kx)&5$}8J!RB)b>$wCN{Gs($-OO}ZdOVg6i=R;I&
zy;HS@N~?ED1k0z3w(>xT(Z+P0uZNM$B;S83>BiC6*`O`H@wLUWL4Sse?M4}ULsqZK
eH#*!dstNS>UfbnGd*F8E*2dP9^q)<L4t@dhc4DCb

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/en/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/en/LC_MESSAGES/django.po
new file mode 100644
index 0000000..8fd54f3
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/en/LC_MESSAGES/django.po
@@ -0,0 +1,76 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+#, fuzzy
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:42+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr ""
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+
+#: db/models.py:15
+msgid "created"
+msgstr ""
+
+#: db/models.py:16
+msgid "modified"
+msgstr ""
+
+#: db/models.py:26
+msgid "title"
+msgstr ""
+
+#: db/models.py:27
+msgid "slug"
+msgstr ""
+
+#: db/models.py:28
+msgid "description"
+msgstr ""
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr ""
+
+#: db/models.py:51
+msgid "Active"
+msgstr ""
+
+#: db/models.py:53
+msgid "status"
+msgstr ""
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr ""
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr ""
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr ""
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr ""
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/es/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/es/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..8ff3f06505ed1a813b53b4ce90f7a41f80d2b2eb
GIT binary patch
literal 1260
zcmZvaPmdHu7{*IP&=D}fgBK6)!8H=-VFoZEEfSjD1}4tzY-VR5dT>+Q{mx9W-BnFh
z^~U9Ms0S0T-bhTmdEGl#!ewv98()9}Jk>Mfy2dwM{i{kp@1N>CM;A~3BoH5AeTwxX
z)+bo!-oXno2d{t%JOlm=z7PJoJpTp`aDE293%&-=f^WbN!Lz4?_#FHg{0xl2kiP?-
z2IpX?TY~R_9{duyPr;D)JBo(yFTjv@v^@U}PH}z(LM|pK7IcrmbKv)28{7l0gTH_+
z@HvP_yu>T$kCyxk40XcH=dr>p;h+3FLjP4@yyl)4z)&yr`~WM|3=w**0wW5s<|sGp
zNE=VGs#sd`hIW}G)wZal_iQzp-N&4Hkz`)&v*>BL*z}Frt1B^aOn%N(@YK^(agm1_
zxuLZ$N|ST3qh-mL92Je+k<yL4Q96j4%}$}5zvS9N>Re=&rRQAa>@uq=uZ$LZ%oTB2
z`2(67OHz|6OU@O9)XXFQPo{LvQ>E2O5yn#JnhRIdGvU1SwG&?Xg2k3K;jU3Hj~=ph
z=p55lvi?nSKc$E1XuCJuY>l`w)<*+3Q+af^p1EjjVrp#-$I*J297)jz=8EZBr`wG>
z*YHrc8{fEoxzp`*AdE)5uR`&q?%OmOMT23qk<f!-Jm_8iZn&AY`qKGmY^8RE^v1??
zZ_@A6W->_WRys&}{X5CV#wgw1z746K)pEwsm}MDLKiRxL2_xU?_wN*{ZS3rJYtS2{
z$Cv81JFRu2J!|whs4%SOAN<v-kV=0=*<4!3{_Dy3UUc(V7iO8VjZ&TA7wTC|H+Pk9
zi8TrqqDorMm>gTG7p{R3j(xN+kXaeXh`Y7Rq!kmd3WYo_D3fIc@4!rw)YB)mVw=lQ
zSJGT&sJnakr+ZR!E*-IkrQ9Orzdi~jPTH?64jNzOW@W2P9sZ$3DZ@WN<$akQK5Om(
w?`yd<RU?9B7gm$Veat7M|Kwxhg%4LL3+LrhEbNv^v~CQ?a2)n9TwNIP7L3$RFaQ7m

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/es/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/es/LC_MESSAGES/django.po
new file mode 100644
index 0000000..e85b113
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/es/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "y"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Utilice el campo de la izquierda para hacer búsquedas en los campos %"
+"(field_list)s de %(model_name)s."
+
+#: db/models.py:15
+msgid "created"
+msgstr "creado"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "modificado"
+
+#: db/models.py:26
+msgid "title"
+msgstr "titulo"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "descripción"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "Inactivo"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Activo"
+
+#: db/models.py:53
+msgid "status"
+msgstr "estado"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "mantener vacío para una activación inmediata"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "deje vacío para mantener la activación indefinida"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "% s no parece ser un objeto urlpattern"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Buscar"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/et/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/et/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..caac6b973f5d044ef484ca2035fbc750731cf248
GIT binary patch
literal 398
zcmYL^O-{ow5QW3vCQH^Vyf0Id0#ap4Rnxd7B56XJRDzvpOh{Gi%5f2#fi>6TEKCrh
zPxHxR>5b?4`}pw7LG2?a$SHD!43JhSa)8_;mwS#=;MsaVvB&yVd;gbErIQ-Hl1mF=
z2@7eOS}RIYHojw1P8K|yhsn&%<VG6{aZ}YL+-$1`a!rYwCOM3a6c&dd5LQys^L!t?
z9v1O^dU4+Ie9uE8Wb&<UAOG_`aF#)wK)}dtLgTRWn9R5viN->1glg8pYD3ASh$1p$
zF((5avoIR5AjtT9K18dkwxW`dOYurc#Aef?jXa2=(Yo$xQw`lXjQQ?Ue%EuyT3M-Z
w$HxZ4TKR6zHfvF<E3$kMrjho#$S2U>`PwYc(g0UWUDm3ir2kY~*I5bY2ZYvT(*OVf

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/et/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/et/LC_MESSAGES/django.po
new file mode 100644
index 0000000..8a3c51a
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/et/LC_MESSAGES/django.po
@@ -0,0 +1,75 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "ja"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+
+#: db/models.py:15
+msgid "created"
+msgstr ""
+
+#: db/models.py:16
+msgid "modified"
+msgstr ""
+
+#: db/models.py:26
+msgid "title"
+msgstr ""
+
+#: db/models.py:27
+msgid "slug"
+msgstr ""
+
+#: db/models.py:28
+msgid "description"
+msgstr ""
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr ""
+
+#: db/models.py:51
+msgid "Active"
+msgstr ""
+
+#: db/models.py:53
+msgid "status"
+msgstr ""
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr ""
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr ""
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr ""
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr ""
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/fr/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/fr/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..bc4e1cd7c3416b1264193e62b7fe6e494248a863
GIT binary patch
literal 743
zcmZvZzi$&U6vtg?`Ek&N4T-^G0aQ8Mr5z%-i5f~;1tkzwS9WvfI~-l?lkKbE4`F9u
zi5QWXV9LZlz=DLte*haJUndb25>Ni#$3NbCe!lnp*5(@mi=aDD1#Ls0pkP0tE6^|K
z8uS~w3~g)>auwVHZ-CoiIKK^Uf_K3XcMseGTcCmV*8A@+t>WK<7~}&!!T%!|@_hzx
zf?vRp?<*Mcd|UGeh*ZnELtO9)7HY!LvX-z8F~P1wp>ER8ygHX;sKsg`bWSoWg_k+W
zrOT|Uy)v52Os)!rO;<G~abEbw5wCnD$;6te%sd<B?76fK-kj!Bp-aQ$D=&4}anY%)
zjrDBoN|m!mP3c%_IE^OHQg#&XgA;p<YdLMlNy6eb22B#ax4RQ3aSTUxD$i9&_8-5P
z?{;=#STqvOv(yUhD&dXg^oh_~IeLJKz{5(aTvjcm3)6$ME*nuwmP#?>bku)(a@Ic?
z(1X$Fuu?5!%U(1djt3VHOImSsWHg?ITVB^F*W-~7>q;oSPqUZ8I_bM-=`rhE_=Rc;
zY1u$$_>H>cwDUswzqfN**l1EUR#fcR*qP&0*UP2rw)g33+P$x7k0uWyvhI{xwyYr1
eqhX8rV*YQxl#_JvmQGD$S3O(I(X`MqE6E=Q1-A(R

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/fr/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/fr/LC_MESSAGES/django.po
new file mode 100644
index 0000000..02a00a0
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/fr/LC_MESSAGES/django.po
@@ -0,0 +1,81 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# 
+# Translators:
+# mathiasuk, 2014
+# mathiasuk, 2014
+# stevandoh <stevandoh@gmail.com>, 2013
+msgid ""
+msgstr ""
+"Project-Id-Version: django-extensions\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:42+0100\n"
+"PO-Revision-Date: 2014-01-11 11:14+0000\n"
+"Last-Translator: mathiasuk\n"
+"Language-Team: French (http://www.transifex.com/projects/p/django-extensions/language/fr/)\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: fr\n"
+"Plural-Forms: nplurals=2; plural=(n > 1);\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "et"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields "
+"%(field_list)s."
+msgstr "Utilisez le champ de gauche pour faire des recheres de %(model_name)s dans les champs %(field_list)s."
+
+#: db/models.py:15
+msgid "created"
+msgstr "créé"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "mis à jour"
+
+#: db/models.py:26
+msgid "title"
+msgstr "titre"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "description"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "Inactif"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Actif"
+
+#: db/models.py:53
+msgid "status"
+msgstr "état"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "laisser vide pour activation immédiate"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "laisser vide pour activation indéterminée"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "%s ne semble pas etre un object urlpattern"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Recherche"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/hu/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/hu/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..2f98573ee24df46945ece336df0b4ad3a4b4c3e2
GIT binary patch
literal 1242
zcmZvav5y-?6vhV<NH75;DAG{8f}liU4?BPqIU&k&w@ED4=acO_37XT``)m)pJF}V@
zTbw)o1Q1XlDAFKZVF`(na)r{QrA4BnrA7k2u@8k<jArIHqxs%@->%-Tub%%(V7!9$
zI@Xt1m$5EAgAHQ_z6C1qdGKrSBKY0e{d=&B`wBb<{s~?H{{~+KFFY&6o8W8U8(<p@
z@yFnKa0Z6FCHNfZ!S@im1e>`3fTZF5H!#Hg4qgKP00-b-Ag1UeS*Uje2Hgk@b#w44
z_{G`#Pavjvge~YEpWS}}QFfi<B`|mi|Kz_T=>HwCxBkwT!H_R_dI2kV4WqHadJq1@
z6-Sw2N7{IjRmIYhH#B0BG`B@1y=SY*j6UJ97xCDu1&fZBn?q_$KCi@~WAZbmf+wCP
zii<4d$P8V%TAGZDV=YU*=BQZ99Vxw*uayp>_2IZs&R=soLh4M6Elbat$k>gos=P8<
z<jfUuS@{#17)w%<Dof53gtYb}|4*iL#uKI0(<0bXsG12^%%{S6>E}*(<qH-E)`V}3
zI$3nY)}eBn4&vPp<NFC6CH+CCx8LY<Wvq|7ZmP2AgZb1&L(`_lL2nrC2ImNh_TZ~c
zH=3<h)VzU7tycTpcdj>E%_f9VpBE}5Khu4b#Qmt-i}qrA&}(-)*FWy<Cyi7(9}TV4
zu8`i?Hr+c+Q`(Qa3EfV*aVNbS@9p)I!Qc+0dODX=j)pADHl^|Y{lj4ScADNT)Q+*!
zJB@Cqn>_ib)=smrYqV#L8YdOZdj8bET@_O4TQr_Y>)5}4IJ_6#e4-0pCTycbkMRrj
zv`sfh$~Q#)&GdwHeY&Jv(ahk2#?o98<G9sGxu2IJ&V9XFgjU)dQqJpBoAI(fb>e|^
zOI<%iA4wX?!W5Y-6qUUE`E$R?p0j1=@VwPxTg|kIQ6ttO<Spt`Z+T{x3n@~rSGIoW
zMExyNv8I`vo@hmKX|xXIU`#Dw0vbeY%W`A!;tRClmawdU%#5p79z_PBz3R`3LRQ9$
J-Fj7ue*n!dR388U

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/hu/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/hu/LC_MESSAGES/django.po
new file mode 100644
index 0000000..50ec58e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/hu/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "és"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Használd a baloldali mezőt hogy keress a %(model_name)s %(field_list)s. "
+"mezőiben"
+
+#: db/models.py:15
+msgid "created"
+msgstr "létrehozva"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "módosítva"
+
+#: db/models.py:26
+msgid "title"
+msgstr "Cím"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "Slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "Leírás"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "Inaktív"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Aktív"
+
+#: db/models.py:53
+msgid "status"
+msgstr "Állapot"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "Üresen hagyni azonnali aktiváláshoz"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "Üresen hagyni korlátlan aktiváláshoz"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "Úgy néz ki hogy %s nem egy urlpattern objektum"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Lekérdezés"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/it/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/it/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..c7fa82971b769f7fc126b8bef6d9f0d9e721d052
GIT binary patch
literal 1247
zcmZvbPjA#l7{-S}3tiG8l>-+J@1d!PQm4BVq{xIQZer+)-E6ekMFJs3v-Z2*A@+<l
zGaEJe94+dl*WN1iGjQj^sfVhUUVG%mfj;9TO+!2K>z}Q8-aob<|MA(S9|YDl#7)Ha
zh#QE73pioTz%M}segwV%uYf<D-2V*rasLZ=5qt|?2H$~K!OI^A@dbDt{2YwIkiQ3B
z0%u^TTY(>f9=wa(BXAk_zoKZ^{~Zi@e}bX@Um$~TK*+^Y6brg%VCb8Hw?G3ffj@#R
z@Fj>tyuvB;dku!X-@s5O<bHw(d*Pk@dxid|3*$9&d<uqo3y6;qp;lO-*XhEDLM%GU
z4Lj1tldNl&mb{?}lcc#VYw0~(O=j|(GcS_Ns{<BYEsrmH#_Z2)F?LLT##Hju(^PSp
zhZ?z|#aorhx!lvT;w49ABX^{9BX5)rqUK_+RL(EC6(MylGRx9)E^>C6Rkc?}i+$#r
zxT^gjO^qd~NmUi+3PNh;k^d)CI_Ig<>bwYJDRj++E9Zr9Ui!HcUip&6jy2&~qi!BO
zX6w*7rk!N-QSvaQ$LVmlJJ@awxi;2EeOIVF`et6ZXk=n)?F>fIW|$mF(H7>4>2|x*
ziQ2buP^S~$`FgqCX}2MahJ2tx@e|#XG#N(yL9~_7w}ZIfU4A;)PFp?cd^ECByHa{%
zV|p;|^=Lckr?i&#lWuP#+1eVWySwX<>S8Vnjz%o2n0m?f!*LjSt=HQq)rzsjdaK{<
zr)Lk<S!uU6jrOe3<FLlCp1<>7)umMW9%VCW9sB#^(SvC9Oc!REvW-%m;T7s4rqzk^
zEwM<!LYf>`6Dx_GW6Ly$bBcmJ+yFD}9Ggib9xgJ$MaLIIm9fpF7<*N!qa%q#RZ=Fa
z+Q5YlAJ2Kztl82uY}!T-ziC#DOugqJg6F7lUirQUSMYZ><}xSVI>I+#QA(GoQ2StR
lFl=bm3@4lIe~c#23)O#xr*4zt*kT#J+nLEs@R%u$_#4cjM;rhE

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/it/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/it/LC_MESSAGES/django.po
new file mode 100644
index 0000000..14af204
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/it/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "e"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Utilizzare il campo a sinistra per fare ricerche nei campi %(field_list)s "
+"del modello %(model_name)s."
+
+#: db/models.py:15
+msgid "created"
+msgstr "creato"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "modificato"
+
+#: db/models.py:26
+msgid "title"
+msgstr "titolo"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "descrizione"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "Inattivo"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Attivo"
+
+#: db/models.py:53
+msgid "status"
+msgstr "stato"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "lasciare vuoto per attivazione immediata"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "lasciare vuoti per attivazione indefinita"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "% s non sembra essere un oggetto urlPattern"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Ricerca"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ja/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ja/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..95b488d8cfefb148f58a0efc5ea6ea9a1f526061
GIT binary patch
literal 1397
zcmb7?&2QX97{&)E6qfR#a_EJ_94MkHPIn7P)e@?@iCb3Pk7%>0fJ@}8XLpBsZOb!T
zQBK%fqNYU<RZYr5TA+lqO`xezBpTGv|AfnAcj<v6CxqY`Cr}b`VdU{|Ui*39_ZfSB
z-o0anU_68QJmw|LJ(#;5!VRMVz6^5kF>n@q9K5m_FMtKa-+_;Szk@r$Kfx!#oevZ8
zBKREm0+<DL{y4Y;Y=F9M6MPhu;A_Zz9~?w{8%4FZU%}nrAE4Ghi{u#G1M0q?fxEz~
zpnksu9tFP#Pk_H|zBke23B*NE*L@4rc?}S46VFe92$T1~KSTTed%#|@&!<6@PHO17
zy0;#w4J3E%kL(rH@tL5WFR2{_%nqsa=>(%TZG~=NOUXiy`V;T6sw8Gr^3#muJbPo2
z_x)3?fQ$)7WrI<d)g-NP<~q8D<I}w_HGPM<<DT7Q`vi3pxuD!j<cU&1lq|+wF62Hj
zKy1$;)sWeeImBV28uCDL-y^3O3n*&_@(iu{A+<fqn@#3$2x;QS{x2E#99H8V-ztJF
zj;;<7ZmUj&v}H>W$)(H4Na*Xm8ac-}$wGn7Svq14oiLAE^rTfD&6SF&G7J1r8U<13
zj&ZbA7e>X;($q+)Vhm~LNHT`uD@zZiGZ`a&5Esp4vai0fKb=XZAvDVDG}py9b#Gf{
z*(j8ZVUxaD$`*3_-zgQXRNfZSsD!pBTwD5KmL40+=V{R_Sai@Tn7RBBb9lIHjgB6M
z)T_7bIx{NFZf0rTEFK@zmIw3sBQ78C!}{S=Ay=>-Y$`L5P7V2<WFC5)31C*T_vC@V
zwYm2?tv2jXF!{z<<(P5kflhm=vCy!*Dn6lC&(cE^T&DCfQql6ikBo{JReM&&cT{{`
z#mlOFPDR(DQPHA`&Z-#UWb&j#RD3N_Ose>6<dFMUu5N$So1g2iTq9f03RUfyB;~GZ
zFRAvFif(l$KkVLGRnY|%Pi;SbD!#Z;MnxSJUr^B!>~w!vK-%^~@x}GEd;Lo{RCHNI
z3+s0vp3$y9h>41BkoC2>-nr@C<!^eOnEbN%ZST{M@w}s=X%y|vO?A(&c0ZckXw&_2
zr8|wyF86Q#*zc_AX3<Z{h4x#jlm6MSdUIdg?`*50MJhV4qEG%ut?v9(@AH*Siz;4K
b?VBpTjZcl$q-x()@ja{&1M~Xlw3o<Vwixt#

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ja/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ja/LC_MESSAGES/django.po
new file mode 100644
index 0000000..ed42a0e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ja/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "と"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"%(field_list)s フィールドの内容から %(model_name)s を検索するには左のフィール"
+"ドを使用して下さい。"
+
+#: db/models.py:15
+msgid "created"
+msgstr "作成日時"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "変更日時"
+
+#: db/models.py:26
+msgid "title"
+msgstr "タイトル"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "スラグ"
+
+#: db/models.py:28
+msgid "description"
+msgstr "説明"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "非アクティブ"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "アクティブ"
+
+#: db/models.py:53
+msgid "status"
+msgstr "ステータス"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "すぐに有効化する場合は空白のままにして下さい"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "無期限に有効化しておく場合は空白のままにして下さい"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "%s は urlpattern オブジェクトではないようです"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "検索"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pl/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pl/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..bf43c6447f9f13dc72ccaf8d6776d4b5e8873852
GIT binary patch
literal 1236
zcmZvaKa&(i7{(h#krky10~3Nb5K0PW-30?`1d8=oadH1#-R)hK7+m$vygS#sGu=aX
z59@3uiC;j;OwA0<$b>2rzk*eU=4J%?^z2;$7H>`Wuczker=OX5|2%i{M}azvaUSCb
zj1Mu+oWO)S1h0S!d>ecWz61VrbpJCr!u>Dco8WWs6!<UrE_mt<AufU+fFFS|81^54
zC&5E7_!i(>pa*-{y9R^)2~30EUtkOT8w~n?z%lq7gk0Q%*=cYH2H$;57r<}8Yv6a_
zd*H7iF7ewDe+Pr#A7JnanS(B53E$-93b~I9@tR!kgTe0%MmRrsg$h}Z3lR~<QEJ$c
zHlAczvb5w4&6p%rHZP_3Y&DtLf)g)#iB}I<47A)VhQ=(bQtUY<f5?>c+|yifo(7N9
z(1ni+lX8BbWx<ym<&E5t(v7@PI*6LZL9U#?<k~{&R3w(A=TxNZ601tDj227glDH^+
zO><*OYEnhPse+K2Jo0rirBj|OtzH!&mcps2aCwyp=cTWl@XF^bwyg>88V%BDpRL2m
zF>Uv@zUtlW(|&(vcQ6^ZcDOXwM<bW1H2S>CTr@Q?wYDeIXe%VgrsxiG#dNjP?M9ue
zxTxEWKfQLj)9rL1jCS~;3g$<;ulv27Xf%oL^yte;JQ`fSKN<I1L+N}pwNkrWdShd{
zKU0}jyrNx|C~4PpLuy|?SQvdfE2PTXi79Sjo6ahkaWrLF#5C-U@9u^8H-^L8xoR7m
z-D-^nqyCE*?6y0tEu%eaoL83!?)h8)NtsKfKcnPOTF3t8-t>#;`U_piHD??3b%M{S
zvzV^Wly8NWLPlD!^JpB!OV0)Qx~yL6DA8N`dZlYIRxFQ}yX$Hx7h><(lX^j=$t5QA
z)QT5ZXjapzc0us;`^~dg+lE%uv|9DQo@)ywD!(#zZE%<=l@p~|8~pJVm6h|{ST_mG
wDtMcetXx;GQ-zn>G}A_!O0;6Si7%6d5^F@L=W2<^IPAE!wD7gBo;?!(0U^6c!2kdN

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pl/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pl/LC_MESSAGES/django.po
new file mode 100644
index 0000000..446e142
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pl/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+#, fuzzy
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: Zbigniew Siciarz <antyqjon@gmail.com>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "i"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Użyj pola po lewej, by wyszukać pola %(field_list)s w modelu %(model_name)s."
+
+#: db/models.py:15
+msgid "created"
+msgstr "utworzony"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "zmodyfikowany"
+
+#: db/models.py:26
+msgid "title"
+msgstr "tytuł"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "opis"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "Nieaktywny"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Aktywny"
+
+#: db/models.py:53
+msgid "status"
+msgstr "stan"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "pozostaw puste, by aktywować od razu"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "pozostaw puste, by nie definiować daty deaktywacji"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "%s nie jest obiektem typu urlpattern"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Szukaj"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..7f9a633edef85317e55941a9980ce13b04824d37
GIT binary patch
literal 1262
zcmaKryKWRQ6o$<;umq5xprJTLxI{2vHUWeNh*&}rMQkn#o3xQLb9Un}V-L1xmE<{q
z22mkF#Y>O}pr?S2f{GFe3HUup6c7k&&VKgn?{kj5|9(7k_?f^sjW~~Zia3WDJb(|3
zHSj8^z@y-E@EG`Vcl{ci#riFH2>cEXfIq<#;J`s4E`n#lAus{M{uS^rxCVy21$YGX
z;57DbftRp;hos^C7ck`gy1V`cu44TIgj`4@3wcs7)LjRMz&<zzz5pBGdk~NKfRCX6
z1ctny!H_5HJ&6c4!=3y-Lf?A>?bZ8Efg#@@;y5DY3?tOq8)#983yw0wj<oS4%aWxf
zZ)lZCQf2c}de2sqSzYJUi&pAYpT&%pJCn9CkE>EFIVQixlylcpS8<+&9GRgDmkX0|
zzM^Hp!;bP=?nvocUMn3$^<*Vi&JVj0A$2BF%hGcuGIps|rB_Ca$IK;hQTk2l8cR}>
zDhkdNgjDw<|0Pp8<F3-`PZ8QusG13vS3Tjp^pz7{`JBaqHQ}t$OcpJ(b*P-sLTln-
zYkHEFCl?>h%+ECzxir>Cv#zJI=zi66QO6|ISeWlb6QOf#iXNb^ghu0LGm1y?P_vm_
zAG;Da;~2tdk^3qn-`B+vq|F;NI-0~cqj(Iuwsbz~SgBnuy|D>R;m5%J7<#1gzN9<d
zoi#~Mxq4DnD#NvV((K2vS@$a0<EX>3NT}VKn_dcsxYKUm%hianz46BE%<Sa;F`FZC
zW5Q_98dWz-wC{PtUn_H|^leJlq;>4?E_J4&Tl>1u9omQ{b&5;Xy@YP9D&Gjk(%Y{L
zmC|y`<k(VG)JB3g_N^sau#^dws(HV1sjLlUD3wKNh~1NlEsl&tlDcvWiBeM#-jbo(
zUw;{`v?i@A!_;mk%ik_zcudL6>{@L54SK~~Z7}uamf9^Bnv(T*Fk9_4`Ck!ifjbLr
d2jAhZQz#vZ?D#DW)7o(i%VF-f-})*y;un^HQNREI

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt/LC_MESSAGES/django.po
new file mode 100644
index 0000000..eb6c68b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: 2010-11-15 22:06-0300\n"
+"Last-Translator: Fernando Silva <fernand at liquuid dot net>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "e"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Use o campo esquerdo para fazer com que o modelo %(model_name)s procure nos "
+"campos %(field_list)s."
+
+#: db/models.py:15
+msgid "created"
+msgstr "criado"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "modificado"
+
+#: db/models.py:26
+msgid "title"
+msgstr "título"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "descrição"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "Inativo"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Ativo"
+
+#: db/models.py:53
+msgid "status"
+msgstr "estado"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "deixe vazio para ativação imediata"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "deixe vazio para ativação por tempo indeterminado"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "%s não parece ser um objeto urlpattern"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Busca"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt_BR/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt_BR/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..0282342d4fe7a803a66894a66c40beae1453a01c
GIT binary patch
literal 1310
zcmaKqL2nc{6vs`Q7P`<PaVVD}y#qzNttRXy9AHBb%Qis~8(4)6QZGbi{C48TV-L0`
zN{}k?1yC<-j~wWs>Y<+^$9{+2k&x)Ey;SYrvyl=Cs<m%__RQbU?|J^epPTzZV4OvK
zhWH+F9&zRb{xG(|4?zu{0;|LIK6nA^r{FsH9DE;q1)c=|08fK|ftSF!_k_3zehH>L
zV{i`q8cg{gf**hkev3UjhwGO}n)1B{)B8WcFTlS+1-6j{a`6mIdA<YFxj%w!@CCRC
z{sy+de?a_13(1oHESU0t3Z^`1@5hLwNq2I5q`HrfwC@uHN)cxeA0blCG}2jVq?*x+
z5Q9AGT^4Ir&L$)0cIrypk6zn?+I2<I(dX?_?rj;iMcnR$j@S%Lahu8TG}2VFQAwp5
zp;K(OtSq?`$TZ0UY1_yfWk9xOvSoCLoiHz?RU-E+BP*de<X%@%J1cgWE8?<>`!sc)
zq$ORJtTcqwR4d;l(^m0RTm7b}bV}n?C4#975u%KB5K%|NV(i^FoX2cUWe?Z~oZP4J
zV0dS6dxajXY}{YFcek~{mGd!M4~16Qt-1)=#Pz8)zBkE+sd8+}zCvAnTIlu`v+lL5
zw@3>M{VUh9?qatKVYb1$Iwk*K-AIO*O}w<h$mo2ZhDO$kOYI#E%q|C7WgT6RbY1E6
zw0E;8r8e`qD{r($(iXKWIGeC6`!pKdy}g;bxIP-)G<x3o;z)z)*Voopj#}=`cUwbe
zBU@CkU!j%Ad+~B*q_#_xZ%ZFIE^kg&v#UqCROys`wqkQ!ur2y@^^uOPv8lZ@*{btp
z=##CQWmsNVqS<u0ZRrN}I!i4vfc;#uU&C8<$fX!c#afbL8cL5Z%^r=nWjy%holbO=
z%d&$1Byo6Lv&W>uMw-ee><L#xcuJ070yb}%wDK;mJ(G1|mgv6@6%2c7sobGE4}L!Q
zDb4jB)2@7?-R!iwl$5%V&3kyYv8sGqcuWLW;hIzN$+l>;)HWS7vumEFZy5IA*H{}T
F{slr`UKjuX

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt_BR/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt_BR/LC_MESSAGES/django.po
new file mode 100644
index 0000000..c5e12b0
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/pt_BR/LC_MESSAGES/django.po
@@ -0,0 +1,79 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# Claudemiro Alves Feitosa Neto <dimiro1@gmail.com>, 2013.
+#
+#, fuzzy
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2013-09-13 22:49-0300\n"
+"PO-Revision-Date: 2013-09-13 22:49-0300\n"
+"Last-Translator: Claudemiro Alves Feitosa <dimiro1@gmail.com>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"Language: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Plural-Forms: nplurals=2; plural=(n > 1);\n"
+
+#: admin/__init__.py:128
+msgid "and"
+msgstr "e"
+
+#: admin/__init__.py:130
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr "Use o campo da esquerda para fazer com que o modelo %(model_name)s procure nos "
+"campos %(field_list)s"
+
+#: db/models.py:22 mongodb/models.py:17
+msgid "created"
+msgstr "criado"
+
+#: db/models.py:23 mongodb/models.py:18
+msgid "modified"
+msgstr "modificado"
+
+#: db/models.py:36 mongodb/models.py:29
+msgid "title"
+msgstr "título"
+
+#: db/models.py:37 mongodb/models.py:30
+msgid "slug"
+msgstr "slug"
+
+#: db/models.py:38 mongodb/models.py:31
+msgid "description"
+msgstr "descrição"
+
+#: db/models.py:63 mongodb/models.py:55
+msgid "Inactive"
+msgstr "Inativo"
+
+#: db/models.py:64 mongodb/models.py:56
+msgid "Active"
+msgstr "Ativo"
+
+#: db/models.py:66 mongodb/models.py:58
+msgid "status"
+msgstr "status"
+
+#: db/models.py:67 mongodb/models.py:59
+msgid "keep empty for an immediate activation"
+msgstr "deixe vazio para uma ativação imediata"
+
+#: db/models.py:68 mongodb/models.py:60
+msgid "keep empty for indefinite activation"
+msgstr "deixe vazio para ativação por tempo indeterminado"
+
+#: mongodb/fields/__init__.py:24
+#, python-format
+msgid "String (up to %(max_length)s)"
+msgstr "Cadeia de Caracteres (até %(max_length)s)"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Busca"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ro/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ro/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..00626a0d2b3b73aa10f15b57e2b0938610174fb2
GIT binary patch
literal 1352
zcmaizPj3`A7{*=7ziug&=z&9fcn?jQEuAo%RBAM2Q$k2k(56jc(?c(jGxP4m!DEkX
z4=NS6{R%A-2c(KaZ|#@JBEg9>7rqFG_VH}^E2LWM`PrVw@B7;O%=2@{{}5=OqJM$@
zJNkL_GaulAwhw*-D)1zD4?GP%IGX<jZejj6_#yZLJO%y>ehi*ECd4fG8TcibfpPyX
zcpTgZW84Zn0S53-?EMY=3iHn)itB4&jJpZO{Xc;R;4fgz`v{D>C*VimQ*aJ^27V15
z!^^myfLIdWfl<GF#48}uwl#kO#&_{f-fS`N%ZBpWdd`9|-Wl{5Kb|GF&J^u4)+c5>
z6_!028%WkQOGm-d9+RZT=~{-s&XC<Z;5>-cJgD0&HjSJP2G-tcYO&*)!akGcQJ|4x
zUBnoLrJ1?P7OZ!Tthnn*w{lO)wDMNzA!-M^TKUlR^Fo?J<c?+FLKN(Cr|O`r5x1CY
z;;IgJXk;BpL#nE{P!LjEk9?m@nSw{ksJBHZOCf6^ylzV2gA9!qK?TiX+u3;5WV1+q
zX6KPPqvAlC(kA?CU=vq-=LXl-g=EW@sz|OhrB8-7qt5n^!(=Vi4pDLym1VS$_IgRW
zfFJdG*|&=q(q5WEnB3soDh7LxF3lE~E~IFkf%G96I%&L?!McpDOJkI$WmE)S)~s;B
z^U93u3dE*tWXZ{pWtGuj^@nRatJl_Pc`&%F)x34(N@r_xYyI`Xdh=;#%^DmFS?<&*
zH{g&LYb}+zMESmSo<o0UxRETq*2QW@?2>hp;~Gtw(bAp@ud-+4Y-d|HPU>XCy2@u{
z>UQe;i<f9R?9Z8gzenFwN*Tp*N_X#KFoVmX6|BzA(sZ(n8|-$W>_NHE?L^0#hHB}U
z{A3*cMoo06!oT*0XQyU;=~b~d88-oY#D>+@^W*z4M1J_NsvAu>1o?3I(3FyDT!m}k
zejXuSBPov?Cu66m;CBsu_>VaX;*^eW-*)oj`)cZBakcd^BmFAjW6_hbmsDE)DqZ}Z
k;)&GM(UbB22@PviDHs>hshe{d#LZ~uo9#J=aC0O61Nn?+$N&HU

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ro/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ro/LC_MESSAGES/django.po
new file mode 100644
index 0000000..8f4180e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ro/LC_MESSAGES/django.po
@@ -0,0 +1,80 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: django-extensions\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: 2011-02-02 10:38+0000\n"
+"Last-Translator: Jannis <jannis@leidel.info>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: ro\n"
+"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < "
+"20)) ? 1 : 2)\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr "și"
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Folosește câmpul din stânga pentru a efectua căutări de %(model_name)s în "
+"câmpurile %(field_list)s."
+
+#: db/models.py:15
+msgid "created"
+msgstr "creat"
+
+#: db/models.py:16
+msgid "modified"
+msgstr "modificat"
+
+#: db/models.py:26
+msgid "title"
+msgstr "Titlu"
+
+#: db/models.py:27
+msgid "slug"
+msgstr "Slug"
+
+#: db/models.py:28
+msgid "description"
+msgstr "Descriere"
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr "Inactiv"
+
+#: db/models.py:51
+msgid "Active"
+msgstr "Activ"
+
+#: db/models.py:53
+msgid "status"
+msgstr "Stare"
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr "A se lăsa gol pentru activare imediată"
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr "A se lăsa gol pentru activare nelimitată"
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr "%s nu pare să fie un obiect urlpattern"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Căutare"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ru/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ru/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..9fae25741df6c71c8225fd3769496151a4633252
GIT binary patch
literal 1561
zcma)*-)<X46vl^=7BJ<Ha>ETs2hm2c!iHTZNM#$Bn#QRj*&!r05;sJPckE2F-d*jC
zt41nP(*nI{q<~Z;ZUFHHZm1PEZd~;ZW?z6O;DSrI<C}FLslo+gkAE|>-}%ltWBa%9
zvF{niYnX3h-p70c^Xzl@z*q;*fC79Gj1Tvl;9J<=0;}Lp;Pc?`;0xd%;LG5j-~>2!
zim`Lx6li>w!7=bN(D;82o(4JCN6ZHJD)#3f8V6^<9Jl}$z)!$0!LL9_*(n5{1y6&o
zgX7>5_|72{(D*$CCqWGw{a>K*KZ7EWHmms+5VqN!0RIkC_wix+G@hn!<Mk4z>BS6F
zs~ND*>SLvb64yCf4875!5=9%Gn60Wrge{uv#H1oRKiT$ftOY!5sr9_fv%2J@);R^d
zsi-M<;2V{n2_v5eYoXWXc}YQLCP{>uJX1=zWs9{yNR^k<%nN<iNVuoC&wMT$iHMbm
zLbkzqOuQYdO=?C7c_E2*oBIMn%BuDLOC~~}H$^C(6}2N@Agj-0&}lKLJk^m*2^Da*
zoJ7}nLs^Ty^(jvzGP~qo^TJkS@f(VV=0xUJcpN3ls>+t|t&ch_Y1JZ^a?2mrtShE=
zh^%>3=2F3SW-a@D%l?201$V}tvS(}?LTiOz7sl*J=U8?DZ*pvRwlHO5<SL$2RxR;D
z8F(s6Tw17CDzsFpmT9hBEiG0qm*(eJ%B!oFAPrj`uf?qz_u4L1N=sMkrK`|YDwhK>
z9VM+JjY~-<S6!@@k9u^b?c9|pM2ASY8KZKAe&34&PlOk#vF;_3t75&jU|l%UnZlYp
zvC3fsHyXBFy6}Zix#ggfc!9MLC2i?a7-w5qoV`e+WpOe*@7TqnLlYBZmiF64$Dt3&
zCdjeBR4n}SXs$SGmRW>7=h$@f<|qUjJC7I#F@=1N>2LLZdRzDPuI}jrrhf#w&mR4(
zhq|9`>3ybuNpGjOu-(^PnlxI{5A^`i2YB^#&pq)g*FPZg2|@<xw%$wc=tszgumR+|
zIL0!2s(bHJdKb@z`ayb+5cCj=f$k#X_DGY}U=kevcj(<igLEhT`ozCN_ZggqdJk@0
z)7}u-j1M-bx`%^w3rV|rH{Bi;_9VSyj?#Pjan@YALs@T+QI6>qw}jVFKcZvz)J?yE
zUH^aDJ<vU**fKYn-aTms_pB(`^-;M=e2{);sy{%=JzU#i^_F>tsz=|(eO&Pl)mJKc
X^lW-U6KI7YqN{&J#RE)p<@@Y!K?gNV

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ru/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ru/LC_MESSAGES/django.po
new file mode 100644
index 0000000..eb18bc5
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/ru/LC_MESSAGES/django.po
@@ -0,0 +1,80 @@
+# django_extentions in Russian.
+# django_extensions на Русском.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# Sasha Simkin <sashasimkin@gmail.com>, 2014.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: django-extensions\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2014-05-09 22:30+0300\n"
+"PO-Revision-Date: 2011-02-02 10:42+0000\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"Language: ru\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
+"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
+
+#: admin/__init__.py:126
+msgid "and"
+msgstr "и"
+
+#: admin/__init__.py:128
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+"Используйте левое поле, чтобы сделать поиск %(model_name)s в полях %(field_list)s."
+
+#: db/models.py:22 mongodb/models.py:17
+msgid "created"
+msgstr "создан"
+
+#: db/models.py:23 mongodb/models.py:18
+msgid "modified"
+msgstr "изменён"
+
+#: db/models.py:36 mongodb/models.py:29
+msgid "title"
+msgstr "заголовок"
+
+#: db/models.py:37 mongodb/models.py:30
+msgid "slug"
+msgstr "название-метка (Для URL)"
+
+#: db/models.py:38 mongodb/models.py:31
+msgid "description"
+msgstr "описание"
+
+#: db/models.py:86 mongodb/models.py:55
+msgid "Inactive"
+msgstr "Неактивен"
+
+#: db/models.py:87 mongodb/models.py:56
+msgid "Active"
+msgstr "Активен"
+
+#: db/models.py:89 mongodb/models.py:58
+msgid "status"
+msgstr "статус"
+
+#: db/models.py:90 mongodb/models.py:59
+msgid "keep empty for an immediate activation"
+msgstr "оставьте пустым для немедленной активации"
+
+#: db/models.py:91 mongodb/models.py:60
+msgid "keep empty for indefinite activation"
+msgstr "оставьте пустым для бессрочной активности"
+
+#: mongodb/fields/__init__.py:24
+#, python-format
+msgid "String (up to %(max_length)s)"
+msgstr "Строка (Не длиннее: %(max_length)s)"
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr "Поиск"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/sk/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/sk/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..3fdc5cfe4eda47f04c59935fa3cdb444409e68ad
GIT binary patch
literal 451
zcmZvX(N4lJ6oxT+wM(zPI2VRsu-FYQurOr8AS4?S7~WS_=Ww)3TZ}$}58&(hES_ls
zH~#6Lwx?fu&i{RW_EkfjpfAvu=u`AHx>6VYiI2CqSIj{Rt+rxg$t)$0LYrJk2I-c|
zOcC*Jg{&&ZS&C9=OJbAdDY@Tgh9ruCvv^3zNDFQeB4cg^1CP2cp&l-9UDjzgsY@w>
zWGUYA>a%}1$~s<?qMV2uOA^hcDY#Xd!DJmpFc0Do`e7W*qG2!|FT>SpfT+y&JQE}l
ze8(UP=F@dBMJ|elMcz_68#wVS4v(?i7Ij8SVkqqKQR1)`Bi@t+&t(rbFI*d8{dF=S
z-6L1c@+>q7<wm8s%ouc^a(n2`z`Qz(Vy}5YCQ9!N16lrFjo<FU-_dVK-*>Oz4k$2a
U$bs)cy$-VPcdDX`MbD}I0MW{OfdBvi

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/sk/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/sk/LC_MESSAGES/django.po
new file mode 100644
index 0000000..3396416
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/sk/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: django-extensions\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: 2011-02-02 10:42+0000\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: sk\n"
+"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr ""
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+
+#: db/models.py:15
+msgid "created"
+msgstr ""
+
+#: db/models.py:16
+msgid "modified"
+msgstr ""
+
+#: db/models.py:26
+msgid "title"
+msgstr ""
+
+#: db/models.py:27
+msgid "slug"
+msgstr ""
+
+#: db/models.py:28
+msgid "description"
+msgstr ""
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr ""
+
+#: db/models.py:51
+msgid "Active"
+msgstr ""
+
+#: db/models.py:53
+msgid "status"
+msgstr ""
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr ""
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr ""
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr ""
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr ""
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/tr/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/tr/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..800d1fe15493b61654bf4cf2d6de3229fa8614fa
GIT binary patch
literal 417
zcmZvX%}xR_6ooOm>e97~F5Kb87Fl2s!U!{jWCjTg?kiL4kfEKl#pr|hdOnMHG=YsL
zJ?Y<<d++(ay!dLN&d^urYxFt#2HmKS*7$jkd&3;Hbatn<0p<lfE9XmV1TA*bXbb8i
zDAT-nvQo8m0Wz=40v-?ALv95n%cmSBPRW1}Ol44lb{Xfuy0|FkqIcJ3oG}DprQXY?
z*gqT-y>6SKNGg4R+)3jr8LSgD*`z65L|IH9;w+k{<7hfv#q0G5QKJu1E6A1H3z|lY
z*(RDHm!{*Y>{zEqB%5dPDHiWAGO-3jVUN!mhYc9<wytDp26X!-omXMF$rI?GxMr4D
r<sdd&Ta-o%+J7m-u{+jqWLX`YtRS&&?*%pW@6`|afc_najI@3Lmw0rO

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/tr/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/tr/LC_MESSAGES/django.po
new file mode 100644
index 0000000..45e600a
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/tr/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: django-extensions\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: 2011-02-02 10:42+0000\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: tr\n"
+"Plural-Forms: nplurals=1; plural=0\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr ""
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+
+#: db/models.py:15
+msgid "created"
+msgstr ""
+
+#: db/models.py:16
+msgid "modified"
+msgstr ""
+
+#: db/models.py:26
+msgid "title"
+msgstr ""
+
+#: db/models.py:27
+msgid "slug"
+msgstr ""
+
+#: db/models.py:28
+msgid "description"
+msgstr ""
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr ""
+
+#: db/models.py:51
+msgid "Active"
+msgstr ""
+
+#: db/models.py:53
+msgid "status"
+msgstr ""
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr ""
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr ""
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr ""
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr ""
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/zh_CN/LC_MESSAGES/django.mo b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/zh_CN/LC_MESSAGES/django.mo
new file mode 100644
index 0000000000000000000000000000000000000000..5276f0c2072f39d80b6a26ff4ad932940d186034
GIT binary patch
literal 420
zcmZvX%}xR_6ooOmnx$(OUAV)GExN!Wgb@Zp(m?`)TT_`jlnm{pEk=D0U(aXpjwZ12
zq$mBkUwZHPK0o_vpia;i=u7k|`U+jEgWh8C4)>ZlXzuJ*tpiMRcv8-5YdFcb(i9fd
zdr+o+@zFw6)&)p?p>ufH7alUpNi=`VVCa+#2*F4O#Yvko2DFWfFvf3hnv_wBAS~3I
zu0Q*Sqx`nrq^L+pA0Ttm_)-SzI2o^mAhS44$bFK=Q!$7~qeZe@_7OG3UKR>6C3l>N
zcs5zZ6Xb*#l)7bI(T~z;njB-X7LA71U?}YIQQ@!wBVJdf)TT?;8|l0Xy;U}b&XKEU
wc~uS)v$nZ51t*;s9S+?&`P@7YXVJXeJ6Xcmx}E35RKHi>V_ouh?9r(41Ni85f&c&j

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/zh_CN/LC_MESSAGES/django.po b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/zh_CN/LC_MESSAGES/django.po
new file mode 100644
index 0000000..9354753
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/locale/zh_CN/LC_MESSAGES/django.po
@@ -0,0 +1,77 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: django-extensions\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2011-02-02 11:43+0100\n"
+"PO-Revision-Date: 2011-02-02 10:42+0000\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language: zh_CN\n"
+"Plural-Forms: nplurals=1; plural=0\n"
+
+#: admin/__init__.py:121
+msgid "and"
+msgstr ""
+
+#: admin/__init__.py:123
+#, python-format
+msgid ""
+"Use the left field to do %(model_name)s lookups in the fields %(field_list)s."
+msgstr ""
+
+#: db/models.py:15
+msgid "created"
+msgstr ""
+
+#: db/models.py:16
+msgid "modified"
+msgstr ""
+
+#: db/models.py:26
+msgid "title"
+msgstr ""
+
+#: db/models.py:27
+msgid "slug"
+msgstr ""
+
+#: db/models.py:28
+msgid "description"
+msgstr ""
+
+#: db/models.py:50
+msgid "Inactive"
+msgstr ""
+
+#: db/models.py:51
+msgid "Active"
+msgstr ""
+
+#: db/models.py:53
+msgid "status"
+msgstr ""
+
+#: db/models.py:56
+msgid "keep empty for an immediate activation"
+msgstr ""
+
+#: db/models.py:58
+msgid "keep empty for indefinite activation"
+msgstr ""
+
+#: management/commands/show_urls.py:34
+#, python-format
+msgid "%s does not appear to be a urlpattern object"
+msgstr ""
+
+#: templates/django_extensions/widgets/foreignkey_searchinput.html:4
+msgid "Lookup"
+msgstr ""
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/base.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/base.py
new file mode 100644
index 0000000..6da68b2
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/base.py
@@ -0,0 +1,53 @@
+import sys
+
+from django.core.management.base import BaseCommand
+from django.utils.log import getLogger
+
+
+logger = getLogger('django.commands')
+
+
+class LoggingBaseCommand(BaseCommand):
+    """
+    A subclass of BaseCommand that logs run time errors to `django.commands`.
+    To use this, create a management command subclassing LoggingBaseCommand:
+
+        from django_extensions.management.base import LoggingBaseCommand
+
+        class Command(LoggingBaseCommand):
+            help = 'Test error'
+
+            def handle(self, *args, **options):
+                raise Exception
+
+
+    And then define a logging handler in settings.py:
+
+        LOGGING = {
+            ... # Other stuff here
+
+            'handlers': {
+                'mail_admins': {
+                    'level': 'ERROR',
+                    'filters': ['require_debug_false'],
+                    'class': 'django.utils.log.AdminEmailHandler'
+                },
+            },
+            'loggers': {
+                'django.commands': {
+                    'handlers': ['mail_admins'],
+                    'level': 'ERROR',
+                    'propagate': False,
+                },
+            }
+
+        }
+
+    """
+
+    def execute(self, *args, **options):
+        try:
+            super(LoggingBaseCommand, self).execute(*args, **options)
+        except Exception as e:
+            logger.error(e, exc_info=sys.exc_info(), extra={'status_code': 500})
+            raise
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/color.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/color.py
new file mode 100644
index 0000000..ccd8406
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/color.py
@@ -0,0 +1,19 @@
+"""
+Sets up the terminal color scheme.
+"""
+
+from django.core.management import color
+from django.utils import termcolors
+
+
+def color_style():
+    style = color.color_style()
+    if color.supports_color():
+        style.INFO = termcolors.make_style(fg='green')
+        style.WARN = termcolors.make_style(fg='yellow')
+        style.BOLD = termcolors.make_style(opts=('bold',))
+        style.URL = termcolors.make_style(fg='green', opts=('bold',))
+        style.MODULE = termcolors.make_style(fg='yellow')
+        style.MODULE_NAME = termcolors.make_style(opts=('bold',))
+        style.URL_NAME = termcolors.make_style(fg='red')
+    return style
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/admin_generator.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/admin_generator.py
new file mode 100644
index 0000000..006d0bd
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/admin_generator.py
@@ -0,0 +1,332 @@
+# -*- coding: utf-8 -*-
+
+import re
+import sys
+import optparse
+
+from django.db.models.loading import get_models
+from django.db import models
+from django.core.management.base import BaseCommand
+from django.conf import settings
+
+from django_extensions.management.color import color_style
+from django_extensions.management.utils import signalcommand
+
+# Configurable constants
+MAX_LINE_WIDTH = getattr(settings, 'MAX_LINE_WIDTH', 78)
+INDENT_WIDTH = getattr(settings, 'INDENT_WIDTH', 4)
+LIST_FILTER_THRESHOLD = getattr(settings, 'LIST_FILTER_THRESHOLD', 25)
+RAW_ID_THRESHOLD = getattr(settings, 'RAW_ID_THRESHOLD', 100)
+
+LIST_FILTER = getattr(settings, 'LIST_FILTER', (
+    models.DateField,
+    models.DateTimeField,
+    models.ForeignKey,
+    models.BooleanField,
+))
+
+SEARCH_FIELD_NAMES = getattr(settings, 'SEARCH_FIELD_NAMES', (
+    'name',
+    'slug',
+))
+
+DATE_HIERARCHY_NAMES = getattr(settings, 'DATE_HIERARCHY_NAMES', (
+    'joined_at',
+    'updated_at',
+    'created_at',
+))
+
+PREPOPULATED_FIELD_NAMES = getattr(settings, 'PREPOPULATED_FIELD_NAMES', (
+    'slug=name',
+))
+
+PRINT_IMPORTS = getattr(settings, 'PRINT_IMPORTS', '''# -*- coding: utf-8 -*-
+from django.contrib import admin
+
+from .models import %(models)s
+''')
+
+PRINT_ADMIN_CLASS = getattr(settings, 'PRINT_ADMIN_CLASS', '''
+
+class %(name)sAdmin(admin.ModelAdmin):%(class_)s
+admin.site.register(%(name)s, %(name)sAdmin)
+''')
+
+PRINT_ADMIN_PROPERTY = getattr(settings, 'PRINT_ADMIN_PROPERTY', '''
+    %(key)s = %(value)s''')
+
+
+class UnicodeMixin(object):
+    """Mixin class to handle defining the proper __str__/__unicode__
+    methods in Python 2 or 3."""
+
+    if sys.version_info[0] >= 3:  # Python 3
+        def __str__(self):
+            return self.__unicode__()
+    else:  # Python 2
+        def __str__(self):
+            return self.__unicode__().encode('utf8')
+
+
+class AdminApp(UnicodeMixin):
+    def __init__(self, app, model_res, **options):
+        self.app = app
+        self.model_res = model_res
+        self.options = options
+
+    def __iter__(self):
+        for model in get_models(self.app):
+            admin_model = AdminModel(model, **self.options)
+
+            for model_re in self.model_res:
+                if model_re.search(admin_model.name):
+                    break
+            else:
+                if self.model_res:
+                    continue
+
+            yield admin_model
+
+    def __unicode__(self):
+        return ''.join(self._unicode_generator())
+
+    def _unicode_generator(self):
+        models_list = [admin_model.name for admin_model in self]
+        yield PRINT_IMPORTS % dict(models=', '.join(models_list))
+
+        admin_model_names = []
+        for admin_model in self:
+            yield PRINT_ADMIN_CLASS % dict(
+                name=admin_model.name,
+                class_=admin_model,
+            )
+            admin_model_names.append(admin_model.name)
+
+    def __repr__(self):
+        return '<%s[%s]>' % (
+            self.__class__.__name__,
+            self.app,
+        )
+
+
+class AdminModel(UnicodeMixin):
+    PRINTABLE_PROPERTIES = (
+        'list_display',
+        'list_filter',
+        'raw_id_fields',
+        'search_fields',
+        'prepopulated_fields',
+        'date_hierarchy',
+    )
+
+    def __init__(self, model, raw_id_threshold=RAW_ID_THRESHOLD,
+                 list_filter_threshold=LIST_FILTER_THRESHOLD,
+                 search_field_names=SEARCH_FIELD_NAMES,
+                 date_hierarchy_names=DATE_HIERARCHY_NAMES,
+                 prepopulated_field_names=PREPOPULATED_FIELD_NAMES, **options):
+        self.model = model
+        self.list_display = []
+        self.list_filter = []
+        self.raw_id_fields = []
+        self.search_fields = []
+        self.prepopulated_fields = {}
+        self.date_hierarchy = None
+        self.search_field_names = search_field_names
+        self.raw_id_threshold = raw_id_threshold
+        self.list_filter_threshold = list_filter_threshold
+        self.date_hierarchy_names = date_hierarchy_names
+        self.prepopulated_field_names = prepopulated_field_names
+
+    def __repr__(self):
+        return '<%s[%s]>' % (
+            self.__class__.__name__,
+            self.name,
+        )
+
+    @property
+    def name(self):
+        return self.model.__name__
+
+    def _process_many_to_many(self, meta):
+        raw_id_threshold = self.raw_id_threshold
+        for field in meta.local_many_to_many:
+            related_objects = field.related.parent_model.objects.all()
+            if(related_objects[:raw_id_threshold].count() < raw_id_threshold):
+                yield field.name
+
+    def _process_fields(self, meta):
+        parent_fields = meta.parents.values()
+        for field in meta.fields:
+            name = self._process_field(field, parent_fields)
+            if name:
+                yield name
+
+    def _process_foreign_key(self, field):
+        raw_id_threshold = self.raw_id_threshold
+        list_filter_threshold = self.list_filter_threshold
+        max_count = max(list_filter_threshold, raw_id_threshold)
+        related_count = field.related.parent_model.objects.all()
+        related_count = related_count[:max_count].count()
+
+        if related_count >= raw_id_threshold:
+            self.raw_id_fields.append(field.name)
+
+        elif related_count < list_filter_threshold:
+            self.list_filter.append(field.name)
+
+        else:  # pragma: no cover
+            pass  # Do nothing :)
+
+    def _process_field(self, field, parent_fields):
+        if field in parent_fields:
+            return
+
+        self.list_display.append(field.name)
+        if isinstance(field, LIST_FILTER):
+            if isinstance(field, models.ForeignKey):
+                self._process_foreign_key(field)
+            else:
+                self.list_filter.append(field.name)
+
+        if field.name in self.search_field_names:
+            self.search_fields.append(field.name)
+
+        return field.name
+
+    def __unicode__(self):
+        return ''.join(self._unicode_generator())
+
+    def _yield_value(self, key, value):
+        if isinstance(value, (list, set, tuple)):
+            return self._yield_tuple(key, tuple(value))
+        elif isinstance(value, dict):
+            return self._yield_dict(key, value)
+        elif isinstance(value, str):
+            return self._yield_string(key, value)
+        else:  # pragma: no cover
+            raise TypeError('%s is not supported in %r' % (type(value), value))
+
+    def _yield_string(self, key, value, converter=repr):
+        return PRINT_ADMIN_PROPERTY % dict(
+            key=key,
+            value=converter(value),
+        )
+
+    def _yield_dict(self, key, value):
+        row_parts = []
+        row = self._yield_string(key, value)
+        if len(row) > MAX_LINE_WIDTH:
+            row_parts.append(self._yield_string(key, '{', str))
+            for k, v in value.items():
+                row_parts.append('%s%r: %r' % (2 * INDENT_WIDTH * ' ', k, v))
+
+            row_parts.append(INDENT_WIDTH * ' ' + '}')
+            row = '\n'.join(row_parts)
+
+        return row
+
+    def _yield_tuple(self, key, value):
+        row_parts = []
+        row = self._yield_string(key, value)
+        if len(row) > MAX_LINE_WIDTH:
+            row_parts.append(self._yield_string(key, '(', str))
+            for v in value:
+                row_parts.append(2 * INDENT_WIDTH * ' ' + repr(v) + ',')
+
+            row_parts.append(INDENT_WIDTH * ' ' + ')')
+            row = '\n'.join(row_parts)
+
+        return row
+
+    def _unicode_generator(self):
+        self._process()
+        for key in self.PRINTABLE_PROPERTIES:
+            value = getattr(self, key)
+            if value:
+                yield self._yield_value(key, value)
+
+    def _process(self):
+        meta = self.model._meta
+
+        self.raw_id_fields += list(self._process_many_to_many(meta))
+        field_names = list(self._process_fields(meta))
+
+        for field_name in self.date_hierarchy_names[::-1]:
+            if field_name in field_names and not self.date_hierarchy:
+                self.date_hierarchy = field_name
+                break
+
+        for k in sorted(self.prepopulated_field_names):
+            k, vs = k.split('=', 1)
+            vs = vs.split(',')
+            if k in field_names:
+                incomplete = False
+                for v in vs:
+                    if v not in field_names:
+                        incomplete = True
+                        break
+
+                if not incomplete:
+                    self.prepopulated_fields[k] = vs
+
+        self.processed = True
+
+
+class Command(BaseCommand):
+    help = '''Generate a `admin.py` file for the given app (models)'''
+    option_list = BaseCommand.option_list + (
+        optparse.make_option(
+            '-s', '--search-field', action='append',
+            default=SEARCH_FIELD_NAMES,
+            help='Fields named like this will be added to `search_fields`'
+            ' [default: %default]'),
+        optparse.make_option(
+            '-d', '--date-hierarchy', action='append',
+            default=DATE_HIERARCHY_NAMES,
+            help='A field named like this will be set as `date_hierarchy`'
+            ' [default: %default]'),
+        optparse.make_option(
+            '-p', '--prepopulated-fields', action='append',
+            default=PREPOPULATED_FIELD_NAMES,
+            help='These fields will be prepopulated by the other field.'
+            'The field names can be specified like `spam=eggA,eggB,eggC`'
+            ' [default: %default]'),
+        optparse.make_option(
+            '-l', '--list-filter-threshold', type='int',
+            default=LIST_FILTER_THRESHOLD, metavar='LIST_FILTER_THRESHOLD',
+            help='If a foreign key has less than LIST_FILTER_THRESHOLD items '
+            'it will be added to `list_filter` [default: %default]'),
+        optparse.make_option(
+            '-r', '--raw-id-threshold', type='int',
+            default=RAW_ID_THRESHOLD, metavar='RAW_ID_THRESHOLD',
+            help='If a foreign key has more than RAW_ID_THRESHOLD items '
+            'it will be added to `list_filter` [default: %default]'),
+    )
+    can_import_settings = True
+
+    @signalcommand
+    def handle(self, *args, **kwargs):
+        self.style = color_style()
+
+        installed_apps = dict((a.__name__.rsplit('.', 1)[0], a) for a in models.get_apps())
+
+        # Make sure we always have args
+        if not args:
+            args = [False]
+
+        app = installed_apps.get(args[0])
+        if not app:
+            print(self.style.WARN('This command requires an existing app name as argument'))
+            print(self.style.WARN('Available apps:'))
+            for app in sorted(installed_apps):
+                print(self.style.WARN('    %s' % app))
+            sys.exit(1)
+
+        model_res = []
+        for arg in args[1:]:
+            model_res.append(re.compile(arg, re.IGNORECASE))
+
+        self.handle_app(app, model_res, **kwargs)
+
+    def handle_app(self, app, model_res, **options):
+        print(AdminApp(app, model_res, **options))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/clean_pyc.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/clean_pyc.py
new file mode 100644
index 0000000..4f626e7
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/clean_pyc.py
@@ -0,0 +1,40 @@
+import os
+import fnmatch
+from django.core.management.base import NoArgsCommand, CommandError
+from django.conf import settings
+from optparse import make_option
+from os.path import join as _j
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(NoArgsCommand):
+    option_list = NoArgsCommand.option_list + (
+        make_option('--optimize', '-o', '-O', action='store_true',
+                    dest='optimize',
+                    help='Remove optimized python bytecode files'),
+        make_option('--path', '-p', action='store', dest='path',
+                    help='Specify path to recurse into'),
+    )
+    help = "Removes all python bytecode compiled files from the project."
+
+    requires_model_validation = False
+
+    @signalcommand
+    def handle_noargs(self, **options):
+        project_root = options.get("path", getattr(settings, 'BASE_DIR', None))
+        if not project_root:
+            project_root = getattr(settings, 'BASE_DIR', None)
+
+        verbosity = int(options.get("verbosity"))
+        if not project_root:
+            raise CommandError("No --path specified and settings.py does not contain BASE_DIR")
+
+        exts = options.get("optimize", False) and "*.py[co]" or "*.pyc"
+
+        for root, dirs, filenames in os.walk(project_root):
+            for filename in fnmatch.filter(filenames, exts):
+                full_path = _j(root, filename)
+                if verbosity > 1:
+                    self.stdout.write("%s\n" % full_path)
+                os.remove(full_path)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/clear_cache.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/clear_cache.py
new file mode 100644
index 0000000..abf5b2d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/clear_cache.py
@@ -0,0 +1,16 @@
+# -*- coding: utf-8 -*-
+# Author: AxiaCore S.A.S. http://axiacore.com
+from django.core.cache import cache
+from django.core.management.base import BaseCommand
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(BaseCommand):
+    """A simple management command which clears the site-wide cache."""
+    help = 'Fully clear site-wide cache.'
+
+    @signalcommand
+    def handle(self, *args, **kwargs):
+        cache.clear()
+        self.stdout.write('Cache has been cleared!\n')
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/compile_pyc.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/compile_pyc.py
new file mode 100644
index 0000000..d4dd9b1
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/compile_pyc.py
@@ -0,0 +1,36 @@
+import os
+import fnmatch
+import py_compile
+from django.core.management.base import NoArgsCommand, CommandError
+from django.conf import settings
+from optparse import make_option
+from os.path import join as _j
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(NoArgsCommand):
+    option_list = NoArgsCommand.option_list + (
+        make_option('--path', '-p', action='store', dest='path',
+                    help='Specify path to recurse into'),
+    )
+    help = "Compile python bytecode files for the project."
+
+    requires_model_validation = False
+
+    @signalcommand
+    def handle_noargs(self, **options):
+        project_root = options.get("path", None)
+        if not project_root:
+            project_root = getattr(settings, 'BASE_DIR', None)
+
+        verbosity = int(options.get("verbosity"))
+        if not project_root:
+            raise CommandError("No --path specified and settings.py does not contain BASE_DIR")
+
+        for root, dirs, filenames in os.walk(project_root):
+            for filename in fnmatch.filter(filenames, '*.py'):
+                full_path = _j(root, filename)
+                if verbosity > 1:
+                    self.stdout.write("Compiling %s...\n" % full_path)
+                py_compile.compile(full_path)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_app.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_app.py
new file mode 100644
index 0000000..1d2ce26
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_app.py
@@ -0,0 +1,139 @@
+import os
+import re
+import sys
+import django_extensions
+from django.conf import settings
+from django.db import connection
+from django.core.management.base import CommandError, LabelCommand
+from django.template import Template, Context
+from django_extensions.settings import REPLACEMENTS
+from django_extensions.utils.dia2django import dia2django
+from django_extensions.management.utils import _make_writeable, signalcommand
+from optparse import make_option
+
+
+class Command(LabelCommand):
+    option_list = LabelCommand.option_list + (
+        make_option('--template', '-t', action='store', dest='app_template',
+                    help='The path to the app template'),
+        make_option('--parent_path', '-p', action='store', dest='parent_path',
+                    help='The parent path of the application to be created'),
+        make_option('-d', action='store_true', dest='dia_parse',
+                    help='Generate model.py and admin.py from [APP_NAME].dia file'),
+        make_option('--diagram', action='store', dest='dia_path',
+                    help='The diagram path of the app to be created. -d is implied'),
+    )
+
+    help = ("Creates an application directory structure for the specified application name.")
+    args = "APP_NAME"
+    label = 'application name'
+
+    requires_model_validation = False
+    can_import_settings = True
+
+    @signalcommand
+    def handle_label(self, label, **options):
+        project_dir = os.getcwd()
+        project_name = os.path.split(project_dir)[-1]
+        app_name = label
+        app_template = options.get('app_template') or os.path.join(django_extensions.__path__[0], 'conf', 'app_template')
+        app_dir = os.path.join(options.get('parent_path') or project_dir, app_name)
+        dia_path = options.get('dia_path') or os.path.join(project_dir, '%s.dia' % app_name)
+
+        if not os.path.exists(app_template):
+            raise CommandError("The template path, %r, does not exist." % app_template)
+
+        if not re.search(r'^\w+$', label):
+            raise CommandError("%r is not a valid application name. Please use only numbers, letters and underscores." % label)
+
+        dia_parse = options.get('dia_path') or options.get('dia_parse')
+        if dia_parse:
+            if not os.path.exists(dia_path):
+                raise CommandError("The diagram path, %r, does not exist." % dia_path)
+            if app_name in settings.INSTALLED_APPS:
+                raise CommandError("The application %s should not be defined in the settings file. Please remove %s now, and add it after using this command." % (app_name, app_name))
+            tables = [name for name in connection.introspection.table_names() if name.startswith('%s_' % app_name)]
+            if tables:
+                raise CommandError("%r application has tables in the database. Please delete them." % app_name)
+
+        try:
+            os.makedirs(app_dir)
+        except OSError as e:
+            raise CommandError(e)
+
+        copy_template(app_template, app_dir, project_name, app_name)
+
+        if dia_parse:
+            generate_models_and_admin(dia_path, app_dir, project_name, app_name)
+            print("Application %r created." % app_name)
+            print("Please add now %r and any other dependent application in settings.INSTALLED_APPS, and run 'manage syncdb'" % app_name)
+
+
+def copy_template(app_template, copy_to, project_name, app_name):
+    """copies the specified template directory to the copy_to location"""
+    import shutil
+
+    app_template = os.path.normpath(app_template)
+    # walks the template structure and copies it
+    for d, subdirs, files in os.walk(app_template):
+        relative_dir = d[len(app_template) + 1:]
+        d_new = os.path.join(copy_to, relative_dir).replace('app_name', app_name)
+        if relative_dir and not os.path.exists(d_new):
+            os.mkdir(d_new)
+        for i, subdir in enumerate(subdirs):
+            if subdir.startswith('.'):
+                del subdirs[i]
+        replacements = {'app_name': app_name, 'project_name': project_name}
+        replacements.update(REPLACEMENTS)
+        for f in files:
+            if f.endswith('.pyc') or f.startswith('.DS_Store'):
+                continue
+            path_old = os.path.join(d, f)
+            path_new = os.path.join(d_new, f.replace('app_name', app_name))
+            if os.path.exists(path_new):
+                path_new = os.path.join(d_new, f)
+                if os.path.exists(path_new):
+                    continue
+            if path_new.endswith('.tmpl'):
+                path_new = path_new[:-5]
+            fp_old = open(path_old, 'r')
+            fp_new = open(path_new, 'w')
+            fp_new.write(Template(fp_old.read()).render(Context(replacements)))
+            fp_old.close()
+            fp_new.close()
+            try:
+                shutil.copymode(path_old, path_new)
+                _make_writeable(path_new)
+            except OSError:
+                sys.stderr.write("Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.\n" % path_new)
+
+
+def generate_models_and_admin(dia_path, app_dir, project_name, app_name):
+    """Generates the models.py and admin.py files"""
+
+    def format_text(string, indent=False):
+        """format string in lines of 80 or less characters"""
+        retval = ''
+        while string:
+            line = string[:77]
+            last_space = line.rfind(' ')
+            if last_space != -1 and len(string) > 77:
+                retval += "%s \\\n" % string[:last_space]
+                string = string[last_space + 1:]
+            else:
+                retval += "%s\n" % string
+                string = ''
+            if string and indent:
+                string = '    %s' % string
+        return retval
+
+    model_path = os.path.join(app_dir, 'models.py')
+    admin_path = os.path.join(app_dir, 'admin.py')
+
+    models_txt = 'from django.db import models\n' + dia2django(dia_path)
+    open(model_path, 'w').write(models_txt)
+
+    classes = re.findall('class (\w+)', models_txt)
+    admin_txt = 'from django.contrib.admin import site, ModelAdmin\n' + format_text('from %s.%s.models import %s' % (project_name, app_name, ', '.join(classes)), indent=True)
+    admin_txt += format_text('\n\n%s' % '\n'.join(map((lambda t: 'site.register(%s)' % t), classes)))
+    open(admin_path, 'w').write(admin_txt)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_command.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_command.py
new file mode 100644
index 0000000..9983299
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_command.py
@@ -0,0 +1,74 @@
+import os
+import sys
+from django.core.management.base import AppCommand
+from django_extensions.management.utils import _make_writeable, signalcommand
+from optparse import make_option
+
+
+class Command(AppCommand):
+    option_list = AppCommand.option_list + (
+        make_option('--name', '-n', action='store', dest='command_name', default='sample',
+                    help='The name to use for the management command'),
+        make_option('--base', '-b', action='store', dest='base_command', default='Base',
+                    help='The base class used for implementation of this command. Should be one of Base, App, Label, or NoArgs'),
+    )
+
+    help = ("Creates a Django management command directory structure for the given app name"
+            " in the app's directory.")
+    args = "[appname]"
+    label = 'application name'
+
+    requires_model_validation = False
+    # Can't import settings during this command, because they haven't
+    # necessarily been created.
+    can_import_settings = True
+
+    @signalcommand
+    def handle_app(self, app, **options):
+        app_dir = os.path.dirname(app.__file__)
+        copy_template('command_template', app_dir, options.get('command_name'), '%sCommand' % options.get('base_command'))
+
+
+def copy_template(template_name, copy_to, command_name, base_command):
+    """copies the specified template directory to the copy_to location"""
+    import django_extensions
+    import shutil
+
+    template_dir = os.path.join(django_extensions.__path__[0], 'conf', template_name)
+
+    handle_method = "handle(self, *args, **options)"
+    if base_command == 'AppCommand':
+        handle_method = "handle_app(self, app, **options)"
+    elif base_command == 'LabelCommand':
+        handle_method = "handle_label(self, label, **options)"
+    elif base_command == 'NoArgsCommand':
+        handle_method = "handle_noargs(self, **options)"
+
+    # walks the template structure and copies it
+    for d, subdirs, files in os.walk(template_dir):
+        relative_dir = d[len(template_dir) + 1:]
+        if relative_dir and not os.path.exists(os.path.join(copy_to, relative_dir)):
+            os.mkdir(os.path.join(copy_to, relative_dir))
+        for i, subdir in enumerate(subdirs):
+            if subdir.startswith('.'):
+                del subdirs[i]
+        for f in files:
+            if f.endswith('.pyc') or f.startswith('.DS_Store'):
+                continue
+            path_old = os.path.join(d, f)
+            path_new = os.path.join(copy_to, relative_dir, f.replace('sample', command_name))
+            if os.path.exists(path_new):
+                path_new = os.path.join(copy_to, relative_dir, f)
+                if os.path.exists(path_new):
+                    continue
+            path_new = path_new.rstrip(".tmpl")
+            fp_old = open(path_old, 'r')
+            fp_new = open(path_new, 'w')
+            fp_new.write(fp_old.read().replace('{{ command_name }}', command_name).replace('{{ base_command }}', base_command).replace('{{ handle_method }}', handle_method))
+            fp_old.close()
+            fp_new.close()
+            try:
+                shutil.copymode(path_old, path_new)
+                _make_writeable(path_new)
+            except OSError:
+                sys.stderr.write("Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.\n" % path_new)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_jobs.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_jobs.py
new file mode 100644
index 0000000..19a27c8
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_jobs.py
@@ -0,0 +1,57 @@
+import os
+import sys
+from django.core.management.base import AppCommand
+from django_extensions.management.utils import _make_writeable, signalcommand
+
+
+class Command(AppCommand):
+    help = ("Creates a Django jobs command directory structure for the given app name in the current directory.")
+    args = "[appname]"
+    label = 'application name'
+
+    requires_model_validation = False
+    # Can't import settings during this command, because they haven't
+    # necessarily been created.
+    can_import_settings = True
+
+    @signalcommand
+    def handle_app(self, app, **options):
+        app_dir = os.path.dirname(app.__file__)
+        copy_template('jobs_template', app_dir)
+
+
+def copy_template(template_name, copy_to):
+    """copies the specified template directory to the copy_to location"""
+    import django_extensions
+    import shutil
+
+    template_dir = os.path.join(django_extensions.__path__[0], 'conf', template_name)
+
+    # walks the template structure and copies it
+    for d, subdirs, files in os.walk(template_dir):
+        relative_dir = d[len(template_dir) + 1:]
+        if relative_dir and not os.path.exists(os.path.join(copy_to, relative_dir)):
+            os.mkdir(os.path.join(copy_to, relative_dir))
+        for i, subdir in enumerate(subdirs):
+            if subdir.startswith('.'):
+                del subdirs[i]
+        for f in files:
+            if f.endswith('.pyc') or f.startswith('.DS_Store'):
+                continue
+            path_old = os.path.join(d, f)
+            path_new = os.path.join(copy_to, relative_dir, f)
+            if os.path.exists(path_new):
+                path_new = os.path.join(copy_to, relative_dir, f)
+                if os.path.exists(path_new):
+                    continue
+            path_new = path_new.rstrip(".tmpl")
+            fp_old = open(path_old, 'r')
+            fp_new = open(path_new, 'w')
+            fp_new.write(fp_old.read())
+            fp_old.close()
+            fp_new.close()
+            try:
+                shutil.copymode(path_old, path_new)
+                _make_writeable(path_new)
+            except OSError:
+                sys.stderr.write("Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.\n" % path_new)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_template_tags.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_template_tags.py
new file mode 100644
index 0000000..f92dc23
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/create_template_tags.py
@@ -0,0 +1,69 @@
+import os
+import sys
+from django.core.management.base import AppCommand
+from django_extensions.management.utils import _make_writeable, signalcommand
+from optparse import make_option
+
+
+class Command(AppCommand):
+    option_list = AppCommand.option_list + (
+        make_option('--name', '-n', action='store', dest='tag_library_name', default='appname_tags',
+                    help='The name to use for the template tag base name. Defaults to `appname`_tags.'),
+        make_option('--base', '-b', action='store', dest='base_command', default='Base',
+                    help='The base class used for implementation of this command. Should be one of Base, App, Label, or NoArgs'),
+    )
+
+    help = ("Creates a Django template tags directory structure for the given app name"
+            " in the apps's directory")
+    args = "[appname]"
+    label = 'application name'
+
+    requires_model_validation = False
+    # Can't import settings during this command, because they haven't
+    # necessarily been created.
+    can_import_settings = True
+
+    @signalcommand
+    def handle_app(self, app, **options):
+        app_dir = os.path.dirname(app.__file__)
+        tag_library_name = options.get('tag_library_name')
+        if tag_library_name == 'appname_tags':
+            tag_library_name = '%s_tags' % os.path.basename(app_dir)
+        copy_template('template_tags_template', app_dir, tag_library_name)
+
+
+def copy_template(template_name, copy_to, tag_library_name):
+    """copies the specified template directory to the copy_to location"""
+    import django_extensions
+    import shutil
+
+    template_dir = os.path.join(django_extensions.__path__[0], 'conf', template_name)
+
+    # walks the template structure and copies it
+    for d, subdirs, files in os.walk(template_dir):
+        relative_dir = d[len(template_dir) + 1:]
+        if relative_dir and not os.path.exists(os.path.join(copy_to, relative_dir)):
+            os.mkdir(os.path.join(copy_to, relative_dir))
+        for i, subdir in enumerate(subdirs):
+            if subdir.startswith('.'):
+                del subdirs[i]
+        for f in files:
+            if f.endswith('.pyc') or f.startswith('.DS_Store'):
+                continue
+            path_old = os.path.join(d, f)
+            path_new = os.path.join(copy_to, relative_dir, f.replace('sample', tag_library_name))
+            if os.path.exists(path_new):
+                path_new = os.path.join(copy_to, relative_dir, f)
+                if os.path.exists(path_new):
+                    continue
+            path_new = path_new.rstrip(".tmpl")
+            fp_old = open(path_old, 'r')
+            fp_new = open(path_new, 'w')
+            fp_new.write(fp_old.read())
+            fp_old.close()
+            fp_new.close()
+            try:
+                shutil.copymode(path_old, path_new)
+                _make_writeable(path_new)
+            except OSError:
+                sys.stderr.write("Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.\n" % path_new)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/describe_form.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/describe_form.py
new file mode 100644
index 0000000..23f1a90
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/describe_form.py
@@ -0,0 +1,71 @@
+from django.core.management.base import LabelCommand, CommandError
+from django_extensions.management.utils import signalcommand
+
+try:
+    from django.utils.encoding import force_text
+except:
+    from django.utils.encoding import force_unicode as force_text
+
+
+class Command(LabelCommand):
+    help = "Outputs the specified model as a form definition to the shell."
+    args = "[app.model]"
+    label = 'application name and model name'
+
+    can_import_settings = True
+
+    @signalcommand
+    def handle_label(self, label, **options):
+        return describe_form(label)
+
+
+def describe_form(label, fields=None):
+    """
+    Returns a string describing a form based on the model
+    """
+    from django.db.models.loading import get_model
+    try:
+        app_name, model_name = label.split('.')[-2:]
+    except (IndexError, ValueError):
+        raise CommandError("Need application and model name in the form: appname.model")
+    model = get_model(app_name, model_name)
+
+    opts = model._meta
+    field_list = []
+    for f in opts.fields + opts.many_to_many:
+        if not f.editable:
+            continue
+        if fields and f.name not in fields:
+            continue
+        formfield = f.formfield()
+        if '__dict__' not in dir(formfield):
+            continue
+        attrs = {}
+        valid_fields = ['required', 'initial', 'max_length', 'min_length', 'max_value', 'min_value', 'max_digits', 'decimal_places', 'choices', 'help_text', 'label']
+        for k, v in formfield.__dict__.items():
+            if k in valid_fields and v is not None:
+                # ignore defaults, to minimize verbosity
+                if k == 'required' and v:
+                    continue
+                if k == 'help_text' and not v:
+                    continue
+                if k == 'widget':
+                    attrs[k] = v.__class__
+                elif k in ['help_text', 'label']:
+                    attrs[k] = force_text(v).strip()
+                else:
+                    attrs[k] = v
+
+        params = ', '.join(['%s=%r' % (k, v) for k, v in attrs.items()])
+        field_list.append('    %(field_name)s = forms.%(field_type)s(%(params)s)' % {
+            'field_name': f.name,
+            'field_type': formfield.__class__.__name__,
+            'params': params
+        })
+    return '''
+from django import forms
+from %(app_name)s.models import %(object_name)s
+
+class %(object_name)sForm(forms.Form):
+%(field_list)s
+''' % {'app_name': app_name, 'object_name': opts.object_name, 'field_list': '\n'.join(field_list)}
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/drop_test_database.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/drop_test_database.py
new file mode 100644
index 0000000..a0a072b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/drop_test_database.py
@@ -0,0 +1,147 @@
+import logging
+from optparse import make_option
+
+from django.conf import settings
+from django.core.management.base import CommandError, BaseCommand
+from django.db.backends.creation import TEST_DATABASE_PREFIX
+from six.moves import input, configparser
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--noinput', action='store_false',
+                    dest='interactive', default=True,
+                    help='Tells Django to NOT prompt the user for input of any kind.'),
+        make_option('-U', '--user', action='store',
+                    dest='user', default=None,
+                    help='Use another user for the database then defined in settings.py'),
+        make_option('-P', '--password', action='store',
+                    dest='password', default=None,
+                    help='Use another password for the database then defined in settings.py'),
+        make_option('-D', '--dbname', action='store',
+                    dest='dbname', default=None,
+                    help='Use another database name then defined in settings.py'),
+        make_option('-R', '--router', action='store',
+                    dest='router', default='default',
+                    help='Use this router-database other then defined in settings.py'),
+    )
+    help = "Drops test database for this project."
+
+    @signalcommand
+    def handle(self, *args, **options):
+        """
+        Drop test database for this project.
+        """
+
+        if args:
+            raise CommandError("reset_db takes no arguments")
+
+        router = options.get('router')
+        dbinfo = settings.DATABASES.get(router)
+        if dbinfo is None:
+            raise CommandError("Unknown database router %s" % router)
+
+        engine = dbinfo.get('ENGINE').split('.')[-1]
+
+        user = password = database_name = ''
+        if engine == 'mysql':
+            read_default_file = dbinfo.get('OPTIONS', {}).get('read_default_file')
+            if read_default_file:
+                config = configparser.ConfigParser()
+                config.read(read_default_file)
+                user = config.get('client', 'user')
+                password = config.get('client', 'password')
+                database_name = config.get('client', 'database')
+
+        user = options.get('user') or dbinfo.get('USER') or user
+        password = options.get('password') or dbinfo.get('PASSWORD') or password
+
+        try:
+            database_name = dbinfo['TEST']['NAME']
+        except KeyError:
+            database_name = None
+
+        if database_name is None:
+            database_name = TEST_DATABASE_PREFIX + (options.get('dbname') or dbinfo.get('NAME'))
+
+        if database_name is None or database_name == '':
+            raise CommandError("You need to specify DATABASE_NAME in your Django settings file.")
+
+        database_host = dbinfo.get('HOST')
+        database_port = dbinfo.get('PORT')
+
+        verbosity = int(options.get('verbosity', 1))
+        if options.get('interactive'):
+            confirm = input("""
+You have requested to drop the test database.
+This will IRREVERSIBLY DESTROY
+ALL data in the database "%s".
+Are you sure you want to do this?
+
+Type 'yes' to continue, or 'no' to cancel: """ % (database_name,))
+        else:
+            confirm = 'yes'
+
+        if confirm != 'yes':
+            print("Reset cancelled.")
+            return
+
+        if engine in ('sqlite3', 'spatialite'):
+            import os
+            try:
+                logging.info("Unlinking %s database" % engine)
+                if os.path.isfile(database_name):
+                    os.unlink(database_name)
+            except OSError:
+                pass
+        elif engine in ('mysql',):
+            import MySQLdb as Database
+            kwargs = {
+                'user': user,
+                'passwd': password,
+            }
+            if database_host.startswith('/'):
+                kwargs['unix_socket'] = database_host
+            else:
+                kwargs['host'] = database_host
+
+            if database_port:
+                kwargs['port'] = int(database_port)
+
+            connection = Database.connect(**kwargs)
+            drop_query = 'DROP DATABASE IF EXISTS `%s`' % database_name
+            logging.info('Executing: "' + drop_query + '"')
+            connection.query(drop_query)
+        elif engine in ('postgresql', 'postgresql_psycopg2', 'postgis'):
+            if engine == 'postgresql':
+                import psycopg as Database  # NOQA
+            elif engine in ('postgresql_psycopg2', 'postgis'):
+                import psycopg2 as Database  # NOQA
+
+            conn_string = "dbname=template1"
+            if user:
+                conn_string += " user=%s" % user
+            if password:
+                conn_string += " password='%s'" % password
+            if database_host:
+                conn_string += " host=%s" % database_host
+            if database_port:
+                conn_string += " port=%s" % database_port
+
+            connection = Database.connect(conn_string)
+            connection.set_isolation_level(0)  # autocommit false
+            cursor = connection.cursor()
+            drop_query = "DROP DATABASE IF EXISTS \"%s\";" % database_name
+            logging.info('Executing: "' + drop_query + '"')
+
+            try:
+                cursor.execute(drop_query)
+            except Database.ProgrammingError as e:
+                logging.exception("Error: %s" % str(e))
+        else:
+            raise CommandError("Unknown database engine %s" % engine)
+
+        if verbosity >= 2 or options.get('interactive'):
+            print("Reset successful.")
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/dumpscript.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/dumpscript.py
new file mode 100644
index 0000000..fe84159
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/dumpscript.py
@@ -0,0 +1,786 @@
+# -*- coding: UTF-8 -*-
+"""
+      Title: Dumpscript management command
+    Project: Hardytools (queryset-refactor version)
+     Author: Will Hardy (http://willhardy.com.au)
+       Date: June 2008
+      Usage: python manage.py dumpscript appname > scripts/scriptname.py
+  $Revision: 217 $
+
+Description:
+    Generates a Python script that will repopulate the database using objects.
+    The advantage of this approach is that it is easy to understand, and more
+    flexible than directly populating the database, or using XML.
+
+    * It also allows for new defaults to take effect and only transfers what is
+      needed.
+    * If a new database schema has a NEW ATTRIBUTE, it is simply not
+      populated (using a default value will make the transition smooth :)
+    * If a new database schema REMOVES AN ATTRIBUTE, it is simply ignored
+      and the data moves across safely (I'm assuming we don't want this
+      attribute anymore.
+    * Problems may only occur if there is a new model and is now a required
+      ForeignKey for an existing model. But this is easy to fix by editing the
+      populate script. Half of the job is already done as all ForeingKey
+      lookups occur though the locate_object() function in the generated script.
+
+Improvements:
+    See TODOs and FIXMEs scattered throughout :-)
+
+"""
+
+import sys
+import datetime
+import six
+from optparse import make_option
+
+import django
+from django.db.models import AutoField, BooleanField, FileField, ForeignKey, DateField, DateTimeField
+from django.core.exceptions import ObjectDoesNotExist
+from django.core.management.base import BaseCommand
+
+# conditional import, force_unicode was renamed in Django 1.5
+from django.contrib.contenttypes.models import ContentType
+
+try:
+    from django.utils.encoding import smart_unicode, force_unicode  # NOQA
+except ImportError:
+    from django.utils.encoding import smart_text as smart_unicode, force_text as force_unicode  # NOQA
+
+from django_extensions.management.utils import signalcommand
+
+
+def orm_item_locator(orm_obj):
+    """
+    This function is called every time an object that will not be exported is required.
+    Where orm_obj is the referred object.
+    We postpone the lookup to locate_object() which will be run on the generated script
+
+    """
+
+    the_class = orm_obj._meta.object_name
+    original_class = the_class
+    pk_name = orm_obj._meta.pk.name
+    original_pk_name = pk_name
+    pk_value = getattr(orm_obj, pk_name)
+
+    while hasattr(pk_value, "_meta") and hasattr(pk_value._meta, "pk") and hasattr(pk_value._meta.pk, "name"):
+        the_class = pk_value._meta.object_name
+        pk_name = pk_value._meta.pk.name
+        pk_value = getattr(pk_value, pk_name)
+
+    clean_dict = make_clean_dict(orm_obj.__dict__)
+
+    for key in clean_dict:
+        v = clean_dict[key]
+        if v is not None and not isinstance(v, (six.string_types, six.integer_types, float, datetime.datetime)):
+            clean_dict[key] = six.u("%s" % v)
+
+    output = """ importer.locate_object(%s, "%s", %s, "%s", %s, %s ) """ % (
+        original_class, original_pk_name,
+        the_class, pk_name, pk_value, clean_dict
+    )
+    return output
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--autofield', action='store_false', dest='skip_autofield',
+                    default=True, help='Include Autofields (like pk fields)'),
+    )
+
+    help = 'Dumps the data as a customised python script.'
+    args = '[appname ...]'
+
+    @signalcommand
+    def handle(self, *app_labels, **options):
+
+        # Get the models we want to export
+        models = get_models(app_labels)
+
+        # A dictionary is created to keep track of all the processed objects,
+        # so that foreign key references can be made using python variable names.
+        # This variable "context" will be passed around like the town bicycle.
+        context = {}
+
+        # Create a dumpscript object and let it format itself as a string
+        script = Script(
+            models=models,
+            context=context,
+            stdout=self.stdout,
+            stderr=self.stderr,
+            options=options,
+        )
+        self.stdout.write(str(script))
+        self.stdout.write("\n")
+
+
+def get_models(app_labels):
+    """ Gets a list of models for the given app labels, with some exceptions.
+        TODO: If a required model is referenced, it should also be included.
+        Or at least discovered with a get_or_create() call.
+    """
+
+    from django.db.models import get_app, get_apps, get_model
+    from django.db.models import get_models as get_all_models
+
+    # These models are not to be output, e.g. because they can be generated automatically
+    # TODO: This should be "appname.modelname" string
+    EXCLUDED_MODELS = (ContentType, )
+
+    models = []
+
+    # If no app labels are given, return all
+    if not app_labels:
+        for app in get_apps():
+            models += [m for m in get_all_models(app) if m not in EXCLUDED_MODELS]
+        return models
+
+    # Get all relevant apps
+    for app_label in app_labels:
+        # If a specific model is mentioned, get only that model
+        if "." in app_label:
+            app_label, model_name = app_label.split(".", 1)
+            models.append(get_model(app_label, model_name))
+        # Get all models for a given app
+        else:
+            models += [m for m in get_all_models(get_app(app_label)) if m not in EXCLUDED_MODELS]
+
+    return models
+
+
+class Code(object):
+    """ A snippet of python script.
+        This keeps track of import statements and can be output to a string.
+        In the future, other features such as custom indentation might be included
+        in this class.
+    """
+
+    def __init__(self, indent=-1, stdout=None, stderr=None):
+
+        if not stdout:
+            stdout = sys.stdout
+        if not stderr:
+            stderr = sys.stderr
+
+        self.indent = indent
+        self.stdout = stdout
+        self.stderr = stderr
+
+    def __str__(self):
+        """ Returns a string representation of this script.
+        """
+        if self.imports:
+            self.stderr.write(repr(self.import_lines))
+            return flatten_blocks([""] + self.import_lines + [""] + self.lines, num_indents=self.indent)
+        else:
+            return flatten_blocks(self.lines, num_indents=self.indent)
+
+    def get_import_lines(self):
+        """ Takes the stored imports and converts them to lines
+        """
+        if self.imports:
+            return ["from %s import %s" % (value, key) for key, value in self.imports.items()]
+        else:
+            return []
+    import_lines = property(get_import_lines)
+
+
+class ModelCode(Code):
+    " Produces a python script that can recreate data for a given model class. "
+
+    def __init__(self, model, context=None, stdout=None, stderr=None, options=None):
+        super(ModelCode, self).__init__(indent=0, stdout=stdout, stderr=stderr)
+        self.model = model
+        if context is None:
+            context = {}
+        self.context = context
+        self.options = options
+        self.instances = []
+
+    def get_imports(self):
+        """ Returns a dictionary of import statements, with the variable being
+            defined as the key.
+        """
+        return {self.model.__name__: smart_unicode(self.model.__module__)}
+    imports = property(get_imports)
+
+    def get_lines(self):
+        """ Returns a list of lists or strings, representing the code body.
+            Each list is a block, each string is a statement.
+        """
+        code = []
+
+        for counter, item in enumerate(self.model._default_manager.all()):
+            instance = InstanceCode(instance=item, id=counter + 1, context=self.context, stdout=self.stdout, stderr=self.stderr, options=self.options)
+            self.instances.append(instance)
+            if instance.waiting_list:
+                code += instance.lines
+
+        # After each instance has been processed, try again.
+        # This allows self referencing fields to work.
+        for instance in self.instances:
+            if instance.waiting_list:
+                code += instance.lines
+
+        return code
+
+    lines = property(get_lines)
+
+
+class InstanceCode(Code):
+    " Produces a python script that can recreate data for a given model instance. "
+
+    def __init__(self, instance, id, context=None, stdout=None, stderr=None, options=None):
+        """ We need the instance in question and an id """
+
+        super(InstanceCode, self).__init__(indent=0, stdout=stdout, stderr=stderr)
+        self.imports = {}
+
+        self.options = options
+        self.instance = instance
+        self.model = self.instance.__class__
+        if context is None:
+            context = {}
+        self.context = context
+        self.variable_name = "%s_%s" % (self.instance._meta.db_table, id)
+        self.skip_me = None
+        self.instantiated = False
+
+        self.waiting_list = list(self.model._meta.fields)
+
+        self.many_to_many_waiting_list = {}
+        for field in self.model._meta.many_to_many:
+            self.many_to_many_waiting_list[field] = list(getattr(self.instance, field.name).all())
+
+    def get_lines(self, force=False):
+        """ Returns a list of lists or strings, representing the code body.
+            Each list is a block, each string is a statement.
+
+            force (True or False): if an attribute object cannot be included,
+            it is usually skipped to be processed later. With 'force' set, there
+            will be no waiting: a get_or_create() call is written instead.
+        """
+        code_lines = []
+
+        # Don't return anything if this is an instance that should be skipped
+        if self.skip():
+            return []
+
+        # Initialise our new object
+        # e.g. model_name_35 = Model()
+        code_lines += self.instantiate()
+
+        # Add each field
+        # e.g. model_name_35.field_one = 1034.91
+        #      model_name_35.field_two = "text"
+        code_lines += self.get_waiting_list()
+
+        if force:
+            # TODO: Check that M2M are not affected
+            code_lines += self.get_waiting_list(force=force)
+
+        # Print the save command for our new object
+        # e.g. model_name_35.save()
+        if code_lines:
+            code_lines.append("%s = importer.save_or_locate(%s)\n" % (self.variable_name, self.variable_name))
+
+        code_lines += self.get_many_to_many_lines(force=force)
+
+        return code_lines
+    lines = property(get_lines)
+
+    def skip(self):
+        """ Determine whether or not this object should be skipped.
+            If this model instance is a parent of a single subclassed
+            instance, skip it. The subclassed instance will create this
+            parent instance for us.
+
+            TODO: Allow the user to force its creation?
+        """
+
+        if self.skip_me is not None:
+            return self.skip_me
+
+        def get_skip_version():
+            """ Return which version of the skip code should be run
+
+                Django's deletion code was refactored in r14507 which
+                was just two days before 1.3 alpha 1 (r14519)
+            """
+            if not hasattr(self, '_SKIP_VERSION'):
+                version = django.VERSION
+                # no, it isn't lisp. I swear.
+                self._SKIP_VERSION = (
+                    version[0] > 1 or (  # django 2k... someday :)
+                        version[0] == 1 and (  # 1.x
+                            version[1] >= 4 or  # 1.4+
+                            version[1] == 3 and not (  # 1.3.x
+                                (version[3] == 'alpha' and version[1] == 0)
+                            )
+                        )
+                    )
+                ) and 2 or 1  # NOQA
+            return self._SKIP_VERSION
+
+        if get_skip_version() == 1:
+            try:
+                # Django trunk since r7722 uses CollectedObjects instead of dict
+                from django.db.models.query import CollectedObjects
+                sub_objects = CollectedObjects()
+            except ImportError:
+                # previous versions don't have CollectedObjects
+                sub_objects = {}
+            self.instance._collect_sub_objects(sub_objects)
+            sub_objects = sub_objects.keys()
+
+        elif get_skip_version() == 2:
+            from django.db.models.deletion import Collector
+            from django.db import router
+            cls = self.instance.__class__
+            using = router.db_for_write(cls, instance=self.instance)
+            collector = Collector(using=using)
+            collector.collect([self.instance], collect_related=False)
+
+            # collector stores its instances in two places. I *think* we
+            # only need collector.data, but using the batches is needed
+            # to perfectly emulate the old behaviour
+            # TODO: check if batches are really needed. If not, remove them.
+            sub_objects = sum([list(i) for i in collector.data.values()], [])
+
+            if hasattr(collector, 'batches'):
+                # Django 1.6 removed batches for being dead code
+                # https://github.com/django/django/commit/a170c3f755351beb35f8166ec3c7e9d524d9602
+                for batch in collector.batches.values():
+                    # batch.values can be sets, which must be converted to lists
+                    sub_objects += sum([list(i) for i in batch.values()], [])
+
+        sub_objects_parents = [so._meta.parents for so in sub_objects]
+        if [self.model in p for p in sub_objects_parents].count(True) == 1:
+            # since this instance isn't explicitly created, it's variable name
+            # can't be referenced in the script, so record None in context dict
+            pk_name = self.instance._meta.pk.name
+            key = '%s_%s' % (self.model.__name__, getattr(self.instance, pk_name))
+            self.context[key] = None
+            self.skip_me = True
+        else:
+            self.skip_me = False
+
+        return self.skip_me
+
+    def instantiate(self):
+        " Write lines for instantiation "
+        # e.g. model_name_35 = Model()
+        code_lines = []
+
+        if not self.instantiated:
+            code_lines.append("%s = %s()" % (self.variable_name, self.model.__name__))
+            self.instantiated = True
+
+            # Store our variable name for future foreign key references
+            pk_name = self.instance._meta.pk.name
+            key = '%s_%s' % (self.model.__name__, getattr(self.instance, pk_name))
+            self.context[key] = self.variable_name
+
+        return code_lines
+
+    def get_waiting_list(self, force=False):
+        " Add lines for any waiting fields that can be completed now. "
+
+        code_lines = []
+        skip_autofield = self.options.get('skip_autofield', True)
+
+        # Process normal fields
+        for field in list(self.waiting_list):
+            try:
+                # Find the value, add the line, remove from waiting list and move on
+                value = get_attribute_value(self.instance, field, self.context, force=force, skip_autofield=skip_autofield)
+                code_lines.append('%s.%s = %s' % (self.variable_name, field.name, value))
+                self.waiting_list.remove(field)
+            except SkipValue:
+                # Remove from the waiting list and move on
+                self.waiting_list.remove(field)
+                continue
+            except DoLater:
+                # Move on, maybe next time
+                continue
+
+        return code_lines
+
+    def get_many_to_many_lines(self, force=False):
+        """ Generates lines that define many to many relations for this instance. """
+
+        lines = []
+
+        for field, rel_items in self.many_to_many_waiting_list.items():
+            for rel_item in list(rel_items):
+                try:
+                    pk_name = rel_item._meta.pk.name
+                    key = '%s_%s' % (rel_item.__class__.__name__, getattr(rel_item, pk_name))
+                    value = "%s" % self.context[key]
+                    lines.append('%s.%s.add(%s)' % (self.variable_name, field.name, value))
+                    self.many_to_many_waiting_list[field].remove(rel_item)
+                except KeyError:
+                    if force:
+                        item_locator = orm_item_locator(rel_item)
+                        self.context["__extra_imports"][rel_item._meta.object_name] = rel_item.__module__
+                        lines.append('%s.%s.add( %s )' % (self.variable_name, field.name, item_locator))
+                        self.many_to_many_waiting_list[field].remove(rel_item)
+
+        if lines:
+            lines.append("")
+
+        return lines
+
+
+class Script(Code):
+    " Produces a complete python script that can recreate data for the given apps. "
+
+    def __init__(self, models, context=None, stdout=None, stderr=None, options=None):
+        super(Script, self).__init__(stdout=stdout, stderr=stderr)
+        self.imports = {}
+
+        self.models = models
+        if context is None:
+            context = {}
+        self.context = context
+
+        self.context["__avaliable_models"] = set(models)
+        self.context["__extra_imports"] = {}
+
+        self.options = options
+
+    def _queue_models(self, models, context):
+        """ Works an an appropriate ordering for the models.
+            This isn't essential, but makes the script look nicer because
+            more instances can be defined on their first try.
+        """
+
+        # Max number of cycles allowed before we call it an infinite loop.
+        MAX_CYCLES = 5
+
+        model_queue = []
+        number_remaining_models = len(models)
+        allowed_cycles = MAX_CYCLES
+
+        while number_remaining_models > 0:
+            previous_number_remaining_models = number_remaining_models
+
+            model = models.pop(0)
+
+            # If the model is ready to be processed, add it to the list
+            if check_dependencies(model, model_queue, context["__avaliable_models"]):
+                model_class = ModelCode(model=model, context=context, stdout=self.stdout, stderr=self.stderr, options=self.options)
+                model_queue.append(model_class)
+
+            # Otherwise put the model back at the end of the list
+            else:
+                models.append(model)
+
+            # Check for infinite loops.
+            # This means there is a cyclic foreign key structure
+            # That cannot be resolved by re-ordering
+            number_remaining_models = len(models)
+            if number_remaining_models == previous_number_remaining_models:
+                allowed_cycles -= 1
+                if allowed_cycles <= 0:
+                    # Add the remaining models, but do not remove them from the model list
+                    missing_models = [ModelCode(model=m, context=context, stdout=self.stdout, stderr=self.stderr, options=self.options) for m in models]
+                    model_queue += missing_models
+                    # Replace the models with the model class objects
+                    # (sure, this is a little bit of hackery)
+                    models[:] = missing_models
+                    break
+            else:
+                allowed_cycles = MAX_CYCLES
+
+        return model_queue
+
+    def get_lines(self):
+        """ Returns a list of lists or strings, representing the code body.
+            Each list is a block, each string is a statement.
+        """
+        code = [self.FILE_HEADER.strip()]
+
+        # Queue and process the required models
+        for model_class in self._queue_models(self.models, context=self.context):
+            msg = 'Processing model: %s\n' % model_class.model.__name__
+            self.stderr.write(msg)
+            code.append("    # " + msg)
+            code.append(model_class.import_lines)
+            code.append("")
+            code.append(model_class.lines)
+
+        # Process left over foreign keys from cyclic models
+        for model in self.models:
+            msg = 'Re-processing model: %s\n' % model.model.__name__
+            self.stderr.write(msg)
+            code.append("    # " + msg)
+            for instance in model.instances:
+                if instance.waiting_list or instance.many_to_many_waiting_list:
+                    code.append(instance.get_lines(force=True))
+
+        code.insert(1, "    # Initial Imports")
+        code.insert(2, "")
+        for key, value in self.context["__extra_imports"].items():
+            code.insert(2, "    from %s import %s" % (value, key))
+
+        return code
+
+    lines = property(get_lines)
+
+    # A user-friendly file header
+    FILE_HEADER = """
+
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+
+# This file has been automatically generated.
+# Instead of changing it, create a file called import_helper.py
+# and put there a class called ImportHelper(object) in it.
+#
+# This class will be specially casted so that instead of extending object,
+# it will actually extend the class BasicImportHelper()
+#
+# That means you just have to overload the methods you want to
+# change, leaving the other ones inteact.
+#
+# Something that you might want to do is use transactions, for example.
+#
+# Also, don't forget to add the necessary Django imports.
+#
+# This file was generated with the following command:
+# %s
+#
+# to restore it, run
+# manage.py runscript module_name.this_script_name
+#
+# example: if manage.py is at ./manage.py
+# and the script is at ./some_folder/some_script.py
+# you must make sure ./some_folder/__init__.py exists
+# and run  ./manage.py runscript some_folder.some_script
+
+from django.db import transaction
+
+class BasicImportHelper(object):
+
+    def pre_import(self):
+        pass
+
+    # You probably want to uncomment on of these two lines
+    # @transaction.atomic  # Django 1.6
+    # @transaction.commit_on_success  # Django <1.6
+    def run_import(self, import_data):
+        import_data()
+
+    def post_import(self):
+        pass
+
+    def locate_similar(self, current_object, search_data):
+        # You will probably want to call this method from save_or_locate()
+        # Example:
+        #   new_obj = self.locate_similar(the_obj, {"national_id": the_obj.national_id } )
+
+        the_obj = current_object.__class__.objects.get(**search_data)
+        return the_obj
+
+    def locate_object(self, original_class, original_pk_name, the_class, pk_name, pk_value, obj_content):
+        # You may change this function to do specific lookup for specific objects
+        #
+        # original_class class of the django orm's object that needs to be located
+        # original_pk_name the primary key of original_class
+        # the_class      parent class of original_class which contains obj_content
+        # pk_name        the primary key of original_class
+        # pk_value       value of the primary_key
+        # obj_content    content of the object which was not exported.
+        #
+        # You should use obj_content to locate the object on the target db
+        #
+        # An example where original_class and the_class are different is
+        # when original_class is Farmer and the_class is Person. The table
+        # may refer to a Farmer but you will actually need to locate Person
+        # in order to instantiate that Farmer
+        #
+        # Example:
+        #   if the_class == SurveyResultFormat or the_class == SurveyType or the_class == SurveyState:
+        #       pk_name="name"
+        #       pk_value=obj_content[pk_name]
+        #   if the_class == StaffGroup:
+        #       pk_value=8
+
+        search_data = { pk_name: pk_value }
+        the_obj = the_class.objects.get(**search_data)
+        #print(the_obj)
+        return the_obj
+
+
+    def save_or_locate(self, the_obj):
+        # Change this if you want to locate the object in the database
+        try:
+            the_obj.save()
+        except:
+            print("---------------")
+            print("Error saving the following object:")
+            print(the_obj.__class__)
+            print(" ")
+            print(the_obj.__dict__)
+            print(" ")
+            print(the_obj)
+            print(" ")
+            print("---------------")
+
+            raise
+        return the_obj
+
+
+importer = None
+try:
+    import import_helper
+    # We need this so ImportHelper can extend BasicImportHelper, although import_helper.py
+    # has no knowlodge of this class
+    importer = type("DynamicImportHelper", (import_helper.ImportHelper, BasicImportHelper ) , {} )()
+except ImportError as e:
+    # From Python 3.3 we can check e.name - string match is for backward compatibility.
+    if 'import_helper' in str(e):
+        importer = BasicImportHelper()
+    else:
+        raise
+
+import datetime
+from decimal import Decimal
+from django.contrib.contenttypes.models import ContentType
+
+try:
+    import dateutil.parser
+except ImportError:
+    print("Please install python-dateutil")
+    sys.exit(os.EX_USAGE)
+
+def run():
+    importer.pre_import()
+    importer.run_import(import_data)
+    importer.post_import()
+
+def import_data():
+
+""" % " ".join(sys.argv)
+
+
+# HELPER FUNCTIONS
+#-------------------------------------------------------------------------------
+
+def flatten_blocks(lines, num_indents=-1):
+    """ Takes a list (block) or string (statement) and flattens it into a string
+        with indentation.
+    """
+
+    # The standard indent is four spaces
+    INDENTATION = " " * 4
+
+    if not lines:
+        return ""
+
+    # If this is a string, add the indentation and finish here
+    if isinstance(lines, six.string_types):
+        return INDENTATION * num_indents + lines
+
+    # If this is not a string, join the lines and recurse
+    return "\n".join([flatten_blocks(line, num_indents + 1) for line in lines])
+
+
+def get_attribute_value(item, field, context, force=False, skip_autofield=True):
+    """ Gets a string version of the given attribute's value, like repr() might. """
+
+    # Find the value of the field, catching any database issues
+    try:
+        value = getattr(item, field.name)
+    except ObjectDoesNotExist:
+        raise SkipValue('Could not find object for %s.%s, ignoring.\n' % (item.__class__.__name__, field.name))
+
+    # AutoField: We don't include the auto fields, they'll be automatically recreated
+    if skip_autofield and isinstance(field, AutoField):
+        raise SkipValue()
+
+    # Some databases (eg MySQL) might store boolean values as 0/1, this needs to be cast as a bool
+    elif isinstance(field, BooleanField) and value is not None:
+        return repr(bool(value))
+
+    # Post file-storage-refactor, repr() on File/ImageFields no longer returns the path
+    elif isinstance(field, FileField):
+        return repr(force_unicode(value))
+
+    # ForeignKey fields, link directly using our stored python variable name
+    elif isinstance(field, ForeignKey) and value is not None:
+
+        # Special case for contenttype foreign keys: no need to output any
+        # content types in this script, as they can be generated again
+        # automatically.
+        # NB: Not sure if "is" will always work
+        if field.rel.to is ContentType:
+            return 'ContentType.objects.get(app_label="%s", model="%s")' % (value.app_label, value.model)
+
+        # Generate an identifier (key) for this foreign object
+        pk_name = value._meta.pk.name
+        key = '%s_%s' % (value.__class__.__name__, getattr(value, pk_name))
+
+        if key in context:
+            variable_name = context[key]
+            # If the context value is set to None, this should be skipped.
+            # This identifies models that have been skipped (inheritance)
+            if variable_name is None:
+                raise SkipValue()
+            # Return the variable name listed in the context
+            return "%s" % variable_name
+        elif value.__class__ not in context["__avaliable_models"] or force:
+            context["__extra_imports"][value._meta.object_name] = value.__module__
+            item_locator = orm_item_locator(value)
+            return item_locator
+        else:
+            raise DoLater('(FK) %s.%s\n' % (item.__class__.__name__, field.name))
+
+    elif isinstance(field, (DateField, DateTimeField)) and value is not None:
+        return "dateutil.parser.parse(\"%s\")" % value.isoformat()
+
+    # A normal field (e.g. a python built-in)
+    else:
+        return repr(value)
+
+
+def make_clean_dict(the_dict):
+    if "_state" in the_dict:
+        clean_dict = the_dict.copy()
+        del clean_dict["_state"]
+        return clean_dict
+    return the_dict
+
+
+def check_dependencies(model, model_queue, avaliable_models):
+    " Check that all the depenedencies for this model are already in the queue. "
+
+    # A list of allowed links: existing fields, itself and the special case ContentType
+    allowed_links = [m.model.__name__ for m in model_queue] + [model.__name__, 'ContentType']
+
+    # For each ForeignKey or ManyToMany field, check that a link is possible
+
+    for field in model._meta.fields:
+        if field.rel and field.rel.to.__name__ not in allowed_links:
+            if field.rel.to not in avaliable_models:
+                continue
+            return False
+
+    for field in model._meta.many_to_many:
+        if field.rel and field.rel.to.__name__ not in allowed_links:
+            return False
+
+    return True
+
+
+# EXCEPTIONS
+#-------------------------------------------------------------------------------
+
+class SkipValue(Exception):
+    """ Value could not be parsed or should simply be skipped. """
+
+
+class DoLater(Exception):
+    """ Value could not be parsed or should simply be skipped. """
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/export_emails.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/export_emails.py
new file mode 100644
index 0000000..26e7923
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/export_emails.py
@@ -0,0 +1,135 @@
+from django.core.management.base import BaseCommand, CommandError
+try:
+    from django.contrib.auth import get_user_model  # Django 1.5
+except ImportError:
+    from django_extensions.future_1_5 import get_user_model
+from django.contrib.auth.models import Group
+from optparse import make_option
+from sys import stdout
+from csv import writer
+import six
+
+from django_extensions.management.utils import signalcommand
+
+FORMATS = [
+    'address',
+    'emails',
+    'google',
+    'outlook',
+    'linkedin',
+    'vcard',
+]
+
+
+def full_name(first_name, last_name, username, **extra):
+    name = six.u(" ").join(n for n in [first_name, last_name] if n)
+    if not name:
+        return username
+    return name
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--group', '-g', action='store', dest='group', default=None,
+                    help='Limit to users which are part of the supplied group name'),
+        make_option('--format', '-f', action='store', dest='format', default=FORMATS[0],
+                    help="output format. May be one of '" + "', '".join(FORMATS) + "'."),
+    )
+
+    help = ("Export user email address list in one of a number of formats.")
+    args = "[output file]"
+    label = 'filename to save to'
+
+    can_import_settings = True
+    encoding = 'utf-8'  # RED_FLAG: add as an option -DougN
+
+    @signalcommand
+    def handle(self, *args, **options):
+        if len(args) > 1:
+            raise CommandError("extra arguments supplied")
+        group = options['group']
+        if group and not Group.objects.filter(name=group).count() == 1:
+            names = six.u("', '").join(g['name'] for g in Group.objects.values('name')).encode('utf-8')
+            if names:
+                names = "'" + names + "'."
+            raise CommandError("Unknown group '" + group + "'. Valid group names are: " + names)
+        if len(args) and args[0] != '-':
+            outfile = open(args[0], 'w')
+        else:
+            outfile = stdout
+
+        User = get_user_model()
+        qs = User.objects.all().order_by('last_name', 'first_name', 'username', 'email')
+        if group:
+            qs = qs.filter(groups__name=group).distinct()
+        qs = qs.values('last_name', 'first_name', 'username', 'email')
+        getattr(self, options['format'])(qs, outfile)
+
+    def address(self, qs, out):
+        """simple single entry per line in the format of:
+            "full name" <my@address.com>;
+        """
+        out.write(six.u("\n").join('"%s" <%s>;' % (full_name(**ent), ent['email'])
+                                   for ent in qs).encode(self.encoding))
+        out.write("\n")
+
+    def emails(self, qs, out):
+        """simpler single entry with email only in the format of:
+            my@address.com,
+        """
+        out.write(six.u(",\n").join(ent['email'] for ent in qs).encode(self.encoding))
+        out.write("\n")
+
+    def google(self, qs, out):
+        """CSV format suitable for importing into google GMail
+        """
+        csvf = writer(out)
+        csvf.writerow(['Name', 'Email'])
+        for ent in qs:
+            csvf.writerow([full_name(**ent).encode(self.encoding),
+                           ent['email'].encode(self.encoding)])
+
+    def outlook(self, qs, out):
+        """CSV format suitable for importing into outlook
+        """
+        csvf = writer(out)
+        columns = ['Name', 'E-mail Address', 'Notes', 'E-mail 2 Address', 'E-mail 3 Address',
+                   'Mobile Phone', 'Pager', 'Company', 'Job Title', 'Home Phone', 'Home Phone 2',
+                   'Home Fax', 'Home Address', 'Business Phone', 'Business Phone 2',
+                   'Business Fax', 'Business Address', 'Other Phone', 'Other Fax', 'Other Address']
+        csvf.writerow(columns)
+        empty = [''] * (len(columns) - 2)
+        for ent in qs:
+            csvf.writerow([full_name(**ent).encode(self.encoding),
+                           ent['email'].encode(self.encoding)] + empty)
+
+    def linkedin(self, qs, out):
+        """CSV format suitable for importing into linkedin Groups.
+        perfect for pre-approving members of a linkedin group.
+        """
+        csvf = writer(out)
+        csvf.writerow(['First Name', 'Last Name', 'Email'])
+        for ent in qs:
+            csvf.writerow([ent['first_name'].encode(self.encoding),
+                           ent['last_name'].encode(self.encoding),
+                           ent['email'].encode(self.encoding)])
+
+    def vcard(self, qs, out):
+        try:
+            import vobject
+        except ImportError:
+            print(self.style.ERROR("Please install python-vobject to use the vcard export format."))
+            import sys
+            sys.exit(1)
+        for ent in qs:
+            card = vobject.vCard()
+            card.add('fn').value = full_name(**ent)
+            if not ent['last_name'] and not ent['first_name']:
+                # fallback to fullname, if both first and lastname are not declared
+                card.add('n').value = vobject.vcard.Name(full_name(**ent))
+            else:
+                card.add('n').value = vobject.vcard.Name(ent['last_name'], ent['first_name'])
+            emailpart = card.add('email')
+            emailpart.value = ent['email']
+            emailpart.type_param = 'INTERNET'
+            out.write(card.serialize().encode(self.encoding))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/find_template.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/find_template.py
new file mode 100644
index 0000000..b030fd8
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/find_template.py
@@ -0,0 +1,38 @@
+from django.core.management.base import LabelCommand
+from django.template import loader
+from django.template import TemplateDoesNotExist
+import sys
+
+from django_extensions.management.utils import signalcommand
+
+
+def get_template_path(path):
+    try:
+        template = loader.find_template(path)
+        if template[1]:
+            return template[1].name
+        # work arround https://code.djangoproject.com/ticket/17199 issue
+        for template_loader in loader.template_source_loaders:
+            try:
+                source, origin = template_loader.load_template_source(path)
+                return origin
+            except TemplateDoesNotExist:
+                pass
+        raise TemplateDoesNotExist(path)
+    except TemplateDoesNotExist:
+        return None
+
+
+class Command(LabelCommand):
+    help = "Finds the location of the given template by resolving its path"
+    args = "[template_path]"
+    label = 'template path'
+
+    @signalcommand
+    def handle_label(self, template_path, **options):
+        path = get_template_path(template_path)
+        if path is None:
+            sys.stderr.write("No template found\n")
+            sys.exit(1)
+        else:
+            print(path)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/generate_secret_key.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/generate_secret_key.py
new file mode 100644
index 0000000..4624140
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/generate_secret_key.py
@@ -0,0 +1,14 @@
+from random import choice
+from django.core.management.base import NoArgsCommand
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(NoArgsCommand):
+    help = "Generates a new SECRET_KEY that can be used in a project settings file."
+
+    requires_model_validation = False
+
+    @signalcommand
+    def handle_noargs(self, **options):
+        return ''.join([choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)') for i in range(50)])
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/graph_models.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/graph_models.py
new file mode 100644
index 0000000..aff56f5
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/graph_models.py
@@ -0,0 +1,151 @@
+import six
+import sys
+from optparse import make_option, NO_DEFAULT
+from django.core.management.base import BaseCommand, CommandError
+from django.conf import settings
+from django_extensions.management.modelviz import generate_dot
+from django_extensions.management.utils import signalcommand
+
+
+try:
+    import pygraphviz
+    HAS_PYGRAPHVIZ = True
+except ImportError:
+    HAS_PYGRAPHVIZ = False
+
+try:
+    import pydot
+    HAS_PYDOT = True
+except ImportError:
+    HAS_PYDOT = False
+
+
+class Command(BaseCommand):
+    graph_models_options = (
+        make_option('--pygraphviz', action='store_true', dest='pygraphviz',
+                    help='Use PyGraphViz to generate the image.'),
+        make_option('--pydot', action='store_true', dest='pydot',
+                    help='Use PyDot to generate the image.'),
+        make_option('--disable-fields', '-d', action='store_true', dest='disable_fields',
+                    help='Do not show the class member fields'),
+        make_option('--group-models', '-g', action='store_true', dest='group_models',
+                    help='Group models together respective to their application'),
+        make_option('--all-applications', '-a', action='store_true', dest='all_applications',
+                    help='Automatically include all applications from INSTALLED_APPS'),
+        make_option('--output', '-o', action='store', dest='outputfile',
+                    help='Render output file. Type of output dependend on file extensions. Use png or jpg to render graph to image.'),
+        make_option('--layout', '-l', action='store', dest='layout', default='dot',
+                    help='Layout to be used by GraphViz for visualization. Layouts: circo dot fdp neato nop nop1 nop2 twopi'),
+        make_option('--verbose-names', '-n', action='store_true', dest='verbose_names',
+                    help='Use verbose_name of models and fields'),
+        make_option('--language', '-L', action='store', dest='language',
+                    help='Specify language used for verbose_name localization'),
+        make_option('--exclude-columns', '-x', action='store', dest='exclude_columns',
+                    help='Exclude specific column(s) from the graph. Can also load exclude list from file.'),
+        make_option('--exclude-models', '-X', action='store', dest='exclude_models',
+                    help='Exclude specific model(s) from the graph. Can also load exclude list from file.'),
+        make_option('--include-models', '-I', action='store', dest='include_models',
+                    help='Restrict the graph to specified models.'),
+        make_option('--inheritance', '-e', action='store_true', dest='inheritance', default=True,
+                    help='Include inheritance arrows (default)'),
+        make_option('--no-inheritance', '-E', action='store_false', dest='inheritance',
+                    help='Do not include inheritance arrows'),
+        make_option('--hide-relations-from-fields', '-R', action='store_false', dest="relations_as_fields",
+                    default=True, help="Do not show relations as fields in the graph."),
+        make_option('--disable-sort-fields', '-S', action="store_false", dest="sort_fields",
+                    default=True, help="Do not sort fields"),
+    )
+    option_list = BaseCommand.option_list + graph_models_options
+
+    help = "Creates a GraphViz dot file for the specified app names.  You can pass multiple app names and they will all be combined into a single model.  Output is usually directed to a dot file."
+    args = "[appname]"
+    label = 'application name'
+
+    can_import_settings = True
+
+    @signalcommand
+    def handle(self, *args, **options):
+        self.options_from_settings(options)
+
+        if len(args) < 1 and not options['all_applications']:
+            raise CommandError("need one or more arguments for appname")
+
+        use_pygraphviz = options.get('pygraphviz', False)
+        use_pydot = options.get('pydot', False)
+        cli_options = ' '.join(sys.argv[2:])
+        dotdata = generate_dot(args, cli_options=cli_options, **options)
+        if not six.PY3:
+            dotdata = dotdata.encode('utf-8')
+        if options['outputfile']:
+            if not use_pygraphviz and not use_pydot:
+                if HAS_PYGRAPHVIZ:
+                    use_pygraphviz = True
+                elif HAS_PYDOT:
+                    use_pydot = True
+            if use_pygraphviz:
+                self.render_output_pygraphviz(dotdata, **options)
+            elif use_pydot:
+                self.render_output_pydot(dotdata, **options)
+            else:
+                raise CommandError("Neither pygraphviz nor pydot could be found to generate the image")
+        else:
+            self.print_output(dotdata)
+
+    def options_from_settings(self, options):
+        defaults = getattr(settings, 'GRAPH_MODELS', None)
+        if defaults:
+            for option in self.graph_models_options:
+                long_opt = option._long_opts[0]
+                if long_opt:
+                    long_opt = long_opt.lstrip("-").replace("-", "_")
+                    if long_opt in defaults:
+                        default_value = None
+                        if not option.default == NO_DEFAULT:
+                            default_value = option.default
+                        if options[option.dest] == default_value:
+                            options[option.dest] = defaults[long_opt]
+
+    def print_output(self, dotdata):
+        if six.PY3 and isinstance(dotdata, six.binary_type):
+            dotdata = dotdata.decode()
+
+        print(dotdata)
+
+    def render_output_pygraphviz(self, dotdata, **kwargs):
+        """Renders the image using pygraphviz"""
+        if not HAS_PYGRAPHVIZ:
+            raise CommandError("You need to install pygraphviz python module")
+
+        version = pygraphviz.__version__.rstrip("-svn")
+        try:
+            if tuple(int(v) for v in version.split('.')) < (0, 36):
+                # HACK around old/broken AGraph before version 0.36 (ubuntu ships with this old version)
+                import tempfile
+                tmpfile = tempfile.NamedTemporaryFile()
+                tmpfile.write(dotdata)
+                tmpfile.seek(0)
+                dotdata = tmpfile.name
+        except ValueError:
+            pass
+
+        graph = pygraphviz.AGraph(dotdata)
+        graph.layout(prog=kwargs['layout'])
+        graph.draw(kwargs['outputfile'])
+
+    def render_output_pydot(self, dotdata, **kwargs):
+        """Renders the image using pydot"""
+        if not HAS_PYDOT:
+            raise CommandError("You need to install pydot python module")
+
+        graph = pydot.graph_from_dot_data(dotdata)
+        if not graph:
+            raise CommandError("pydot returned an error")
+        output_file = kwargs['outputfile']
+        formats = ['bmp', 'canon', 'cmap', 'cmapx', 'cmapx_np', 'dot', 'dia', 'emf',
+                   'em', 'fplus', 'eps', 'fig', 'gd', 'gd2', 'gif', 'gv', 'imap',
+                   'imap_np', 'ismap', 'jpe', 'jpeg', 'jpg', 'metafile', 'pdf',
+                   'pic', 'plain', 'plain-ext', 'png', 'pov', 'ps', 'ps2', 'svg',
+                   'svgz', 'tif', 'tiff', 'tk', 'vml', 'vmlz', 'vrml', 'wbmp', 'xdot']
+        ext = output_file[output_file.rfind('.') + 1:]
+        format = ext if ext in formats else 'raw'
+        graph.write(output_file, format=format)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/mail_debug.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/mail_debug.py
new file mode 100644
index 0000000..c2b3664
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/mail_debug.py
@@ -0,0 +1,81 @@
+from django_extensions.management.utils import setup_logger, signalcommand
+from django.core.management.base import BaseCommand, CommandError
+from optparse import make_option
+from smtpd import SMTPServer
+import sys
+import asyncore
+from logging import getLogger
+
+
+logger = getLogger(__name__)
+
+
+class ExtensionDebuggingServer(SMTPServer):
+    """Duplication of smtpd.DebuggingServer, but using logging instead of print."""
+    # Do something with the gathered message
+    def process_message(self, peer, mailfrom, rcpttos, data):
+        """Output will be sent to the module logger at INFO level."""
+        inheaders = 1
+        lines = data.split('\n')
+        logger.info('---------- MESSAGE FOLLOWS ----------')
+        for line in lines:
+            # headers first
+            if inheaders and not line:
+                logger.info('X-Peer: %s' % peer[0])
+                inheaders = 0
+            logger.info(line)
+        logger.info('------------ END MESSAGE ------------')
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--output', dest='output_file', default=None,
+                    help='Specifies an output file to send a copy of all messages (not flushed immediately).'),
+        make_option('--use-settings', dest='use_settings',
+                    action='store_true', default=False,
+                    help='Uses EMAIL_HOST and HOST_PORT from Django settings.'),
+    )
+    help = "Starts a test mail server for development."
+    args = '[optional port number or ippaddr:port]'
+
+    requires_model_validation = False
+
+    @signalcommand
+    def handle(self, addrport='', *args, **options):
+        if args:
+            raise CommandError('Usage is mail_debug %s' % self.args)
+        if not addrport:
+            if options.get('use_settings', False):
+                from django.conf import settings
+                addr = getattr(settings, 'EMAIL_HOST', '')
+                port = str(getattr(settings, 'EMAIL_PORT', '1025'))
+            else:
+                addr = ''
+                port = '1025'
+        else:
+            try:
+                addr, port = addrport.split(':')
+            except ValueError:
+                addr, port = '', addrport
+        if not addr:
+            addr = '127.0.0.1'
+
+        if not port.isdigit():
+            raise CommandError("%r is not a valid port number." % port)
+        else:
+            port = int(port)
+
+        # Add console handler
+        setup_logger(logger, stream=self.stdout, filename=options.get('output_file', None))
+
+        def inner_run():
+            quit_command = (sys.platform == 'win32') and 'CTRL-BREAK' or 'CONTROL-C'
+            print("Now accepting mail at %s:%s -- use %s to quit" % (addr, port, quit_command))
+
+            ExtensionDebuggingServer((addr, port), None)
+            asyncore.loop()
+
+        try:
+            inner_run()
+        except KeyboardInterrupt:
+            pass
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/notes.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/notes.py
new file mode 100644
index 0000000..45e236f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/notes.py
@@ -0,0 +1,50 @@
+from __future__ import with_statement
+from django.core.management.base import BaseCommand
+from django.conf import settings
+import os
+import re
+from django_extensions.management.utils import signalcommand
+
+ANNOTATION_RE = re.compile("\{?#[\s]*?(TODO|FIXME|BUG|HACK|WARNING|NOTE|XXX)[\s:]?(.+)")
+ANNOTATION_END_RE = re.compile("(.*)#\}(.*)")
+
+
+class Command(BaseCommand):
+    help = 'Show all annotations like TODO, FIXME, BUG, HACK, WARNING, NOTE or XXX in your py and HTML files.'
+    args = 'tag'
+    label = 'annotation tag (TODO, FIXME, BUG, HACK, WARNING, NOTE, XXX)'
+
+    @signalcommand
+    def handle(self, *args, **options):
+        # don't add django internal code
+        apps = filter(lambda app: not app.startswith('django.contrib'), settings.INSTALLED_APPS)
+        template_dirs = getattr(settings, 'TEMPLATE_DIRS', [])
+        if template_dirs:
+            apps += template_dirs
+        for app_dir in apps:
+            app_dir = app_dir.replace(".", "/")
+            for top, dirs, files in os.walk(app_dir):
+                for f in files:
+                    if os.path.splitext(f)[1] in ('.py', '.html'):
+                        fpath = os.path.join(top, f)
+                        annotation_lines = []
+                        with open(fpath, 'r') as f:
+                            i = 0
+                            for line in f.readlines():
+                                i += 1
+                                if ANNOTATION_RE.search(line):
+                                    tag, msg = ANNOTATION_RE.findall(line)[0]
+                                    if len(args) == 1:
+                                        search_for_tag = args[0].upper()
+                                        if not search_for_tag == tag:
+                                            break
+
+                                    if ANNOTATION_END_RE.search(msg.strip()):
+                                        msg = ANNOTATION_END_RE.findall(msg.strip())[0][0]
+
+                                    annotation_lines.append("[%3s] %-5s %s" % (i, tag, msg.strip()))
+                            if annotation_lines:
+                                print("%s:" % fpath)
+                                for annotation in annotation_lines:
+                                    print("  * %s" % annotation)
+                                print("")
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/passwd.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/passwd.py
new file mode 100644
index 0000000..8e9d6d5
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/passwd.py
@@ -0,0 +1,44 @@
+from django.core.management.base import BaseCommand, CommandError
+from django_extensions.management.utils import signalcommand
+try:
+    from django.contrib.auth import get_user_model  # Django 1.5
+except ImportError:
+    from django_extensions.future_1_5 import get_user_model
+import getpass
+
+
+class Command(BaseCommand):
+    help = "Clone of the UNIX program ``passwd'', for django.contrib.auth."
+
+    requires_model_validation = False
+
+    @signalcommand
+    def handle(self, *args, **options):
+        if len(args) > 1:
+            raise CommandError("need exactly one or zero arguments for username")
+
+        if args:
+            username, = args
+        else:
+            username = getpass.getuser()
+
+        User = get_user_model()
+        try:
+            u = User.objects.get(username=username)
+        except User.DoesNotExist:
+            raise CommandError("user %s does not exist" % username)
+
+        print("Changing password for user: %s" % u.username)
+        p1 = p2 = ""
+        while "" in (p1, p2) or p1 != p2:
+            p1 = getpass.getpass()
+            p2 = getpass.getpass("Password (again): ")
+            if p1 != p2:
+                print("Passwords do not match, try again")
+            elif "" in (p1, p2):
+                raise CommandError("aborted")
+
+        u.set_password(p1)
+        u.save()
+
+        return "Password changed successfully for user %s\n" % u.username
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/pipchecker.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/pipchecker.py
new file mode 100644
index 0000000..e8979ca
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/pipchecker.py
@@ -0,0 +1,265 @@
+import os
+import pip
+import sys
+import json
+
+from distutils.version import LooseVersion
+from django.core.management.base import NoArgsCommand
+from django_extensions.management.color import color_style
+from optparse import make_option
+from pip.req import parse_requirements
+from django_extensions.management.utils import signalcommand
+try:
+    from urllib.parse import urlparse
+    from urllib.error import HTTPError
+    from urllib.request import Request, urlopen
+    from xmlrpc.client import ServerProxy
+except ImportError:
+    # Python 2
+    from urlparse import urlparse
+    from urllib2 import HTTPError, Request, urlopen
+    from xmlrpclib import ServerProxy
+
+try:
+    import requests
+    HAS_REQUESTS = True
+except ImportError:
+    HAS_REQUESTS = False
+
+
+class Command(NoArgsCommand):
+    option_list = NoArgsCommand.option_list + (
+        make_option(
+            "-t", "--github-api-token", action="store", dest="github_api_token",
+            help="A github api authentication token."
+        ),
+        make_option(
+            "-r", "--requirement", action="append", dest="requirements",
+            default=[], metavar="FILENAME",
+            help="Check all the packages listed in the given requirements file. "
+                 "This option can be used multiple times."
+        ),
+        make_option(
+            "-n", "--newer", action="store_true", dest="show_newer",
+            help="Also show when newer version then available is installed."
+        ),
+    )
+    help = "Scan pip requirement files for out-of-date packages."
+
+    @signalcommand
+    def handle_noargs(self, **options):
+        self.style = color_style()
+
+        self.options = options
+        if options["requirements"]:
+            req_files = options["requirements"]
+        elif os.path.exists("requirements.txt"):
+            req_files = ["requirements.txt"]
+        elif os.path.exists("requirements"):
+            req_files = ["requirements/{0}".format(f) for f in os.listdir("requirements")
+                         if os.path.isfile(os.path.join("requirements", f)) and
+                         f.lower().endswith(".txt")]
+        else:
+            sys.exit("requirements not found")
+
+        self.reqs = {}
+        for filename in req_files:
+            class Object(object):
+                pass
+            mockoptions = Object()
+            mockoptions.default_vcs = "git"
+            mockoptions.skip_requirements_regex = None
+            for req in parse_requirements(filename, options=mockoptions):
+                self.reqs[req.name] = {
+                    "pip_req": req,
+                    "url": req.url,
+                }
+
+        if options["github_api_token"]:
+            self.github_api_token = options["github_api_token"]
+        elif os.environ.get("GITHUB_API_TOKEN"):
+            self.github_api_token = os.environ.get("GITHUB_API_TOKEN")
+        else:
+            self.github_api_token = None  # only 50 requests per hour
+
+        self.check_pypi()
+        if HAS_REQUESTS:
+            self.check_github()
+        else:
+            print(self.style.ERROR("Cannot check github urls. The requests library is not installed. ( pip install requests )"))
+        self.check_other()
+
+    def _urlopen_as_json(self, url, headers=None):
+        """Shorcut for return contents as json"""
+        req = Request(url, headers=headers)
+        return json.loads(urlopen(req).read())
+
+    def check_pypi(self):
+        """
+        If the requirement is frozen to pypi, check for a new version.
+        """
+        for dist in pip.get_installed_distributions():
+            name = dist.project_name
+            if name in self.reqs.keys():
+                self.reqs[name]["dist"] = dist
+
+        pypi = ServerProxy("http://pypi.python.org/pypi")
+        for name, req in list(self.reqs.items()):
+            if req["url"]:
+                continue  # skipping github packages.
+            elif "dist" in req:
+                dist = req["dist"]
+                dist_version = LooseVersion(dist.version)
+                available = pypi.package_releases(req["pip_req"].url_name)
+                try:
+                    available_version = LooseVersion(available[0])
+                except IndexError:
+                    available_version = None
+
+                if not available_version:
+                    msg = self.style.WARN("release is not on pypi (check capitalization and/or --extra-index-url)")
+                elif self.options['show_newer'] and dist_version > available_version:
+                    msg = self.style.INFO("{0} available (newer installed)".format(available_version))
+                elif available_version > dist_version:
+                    msg = self.style.INFO("{0} available".format(available_version))
+                else:
+                    msg = "up to date"
+                    del self.reqs[name]
+                    continue
+                pkg_info = self.style.BOLD("{dist.project_name} {dist.version}".format(dist=dist))
+            else:
+                msg = "not installed"
+                pkg_info = name
+            print("{pkg_info:40} {msg}".format(pkg_info=pkg_info, msg=msg))
+            del self.reqs[name]
+
+    def check_github(self):
+        """
+        If the requirement is frozen to a github url, check for new commits.
+
+        API Tokens
+        ----------
+        For more than 50 github api calls per hour, pipchecker requires
+        authentication with the github api by settings the environemnt
+        variable ``GITHUB_API_TOKEN`` or setting the command flag
+        --github-api-token='mytoken'``.
+
+        To create a github api token for use at the command line::
+             curl -u 'rizumu' -d '{"scopes":["repo"], "note":"pipchecker"}' https://api.github.com/authorizations
+
+        For more info on github api tokens:
+            https://help.github.com/articles/creating-an-oauth-token-for-command-line-use
+            http://developer.github.com/v3/oauth/#oauth-authorizations-api
+
+        Requirement Format
+        ------------------
+        Pipchecker gets the sha of frozen repo and checks if it is
+        found at the head of any branches. If it is not found then
+        the requirement is considered to be out of date.
+
+        Therefore, freezing at the commit hash will provide the expected
+        results, but if freezing at a branch or tag name, pipchecker will
+        not be able to determine with certainty if the repo is out of date.
+
+        Freeze at the commit hash (sha)::
+            git+git://github.com/django/django.git@393c268e725f5b229ecb554f3fac02cfc250d2df#egg=Django
+
+        Freeze with a branch name::
+            git+git://github.com/django/django.git@master#egg=Django
+
+        Freeze with a tag::
+            git+git://github.com/django/django.git@1.5b2#egg=Django
+
+        Do not freeze::
+            git+git://github.com/django/django.git#egg=Django
+
+        """
+        for name, req in list(self.reqs.items()):
+            req_url = req["url"]
+            if not req_url:
+                continue
+            if req_url.startswith("git") and "github.com/" not in req_url:
+                continue
+            if req_url.endswith(".tar.gz") or req_url.endswith(".tar.bz2") or req_url.endswith(".zip"):
+                continue
+
+            headers = {
+                "content-type": "application/json",
+            }
+            if self.github_api_token:
+                headers["Authorization"] = "token {0}".format(self.github_api_token)
+            try:
+                user, repo = urlparse(req_url).path.split("#")[0].strip("/").rstrip("/").split("/")
+            except (ValueError, IndexError) as e:
+                print(self.style.ERROR("\nFailed to parse %r: %s\n" % (req_url, e)))
+                continue
+
+            try:
+                #test_auth = self._urlopen_as_json("https://api.github.com/django/", headers=headers)
+                test_auth = requests.get("https://api.github.com/django/", headers=headers).json()
+            except HTTPError as e:
+                print("\n%s\n" % str(e))
+                return
+
+            if "message" in test_auth and test_auth["message"] == "Bad credentials":
+                print(self.style.ERROR("\nGithub API: Bad credentials. Aborting!\n"))
+                return
+            elif "message" in test_auth and test_auth["message"].startswith("API Rate Limit Exceeded"):
+                print(self.style.ERROR("\nGithub API: Rate Limit Exceeded. Aborting!\n"))
+                return
+
+            frozen_commit_sha = None
+            if ".git" in repo:
+                repo_name, frozen_commit_full = repo.split(".git")
+                if frozen_commit_full.startswith("@"):
+                    frozen_commit_sha = frozen_commit_full[1:]
+            elif "@" in repo:
+                repo_name, frozen_commit_sha = repo.split("@")
+
+            if frozen_commit_sha is None:
+                msg = self.style.ERROR("repo is not frozen")
+
+            if frozen_commit_sha:
+                branch_url = "https://api.github.com/repos/{0}/{1}/branches".format(user, repo_name)
+                #branch_data = self._urlopen_as_json(branch_url, headers=headers)
+                branch_data = requests.get(branch_url, headers=headers).json()
+
+                frozen_commit_url = "https://api.github.com/repos/{0}/{1}/commits/{2}".format(
+                    user, repo_name, frozen_commit_sha
+                )
+                #frozen_commit_data = self._urlopen_as_json(frozen_commit_url, headers=headers)
+                frozen_commit_data = requests.get(frozen_commit_url, headers=headers).json()
+
+                if "message" in frozen_commit_data and frozen_commit_data["message"] == "Not Found":
+                    msg = self.style.ERROR("{0} not found in {1}. Repo may be private.".format(frozen_commit_sha[:10], name))
+                elif frozen_commit_sha in [branch["commit"]["sha"] for branch in branch_data]:
+                    msg = self.style.BOLD("up to date")
+                else:
+                    msg = self.style.INFO("{0} is not the head of any branch".format(frozen_commit_data["sha"][:10]))
+
+            if "dist" in req:
+                pkg_info = "{dist.project_name} {dist.version}".format(dist=req["dist"])
+            elif frozen_commit_sha is None:
+                pkg_info = name
+            else:
+                pkg_info = "{0} {1}".format(name, frozen_commit_sha[:10])
+            print("{pkg_info:40} {msg}".format(pkg_info=pkg_info, msg=msg))
+            del self.reqs[name]
+
+    def check_other(self):
+        """
+        If the requirement is frozen somewhere other than pypi or github, skip.
+
+        If you have a private pypi or use --extra-index-url, consider contributing
+        support here.
+        """
+        if self.reqs:
+            print(self.style.ERROR("\nOnly pypi and github based requirements are supported:"))
+            for name, req in self.reqs.items():
+                if "dist" in req:
+                    pkg_info = "{dist.project_name} {dist.version}".format(dist=req["dist"])
+                elif "url" in req:
+                    pkg_info = "{url}".format(url=req["url"])
+                else:
+                    pkg_info = "unknown package"
+                print(self.style.BOLD("{pkg_info:40} is not a pypi or github requirement".format(pkg_info=pkg_info)))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/print_settings.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/print_settings.py
new file mode 100644
index 0000000..45c4612
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/print_settings.py
@@ -0,0 +1,82 @@
+"""
+print_settings
+==============
+
+Django command similar to 'diffsettings' but shows all active Django settings.
+"""
+
+from django.core.management.base import BaseCommand, CommandError
+from django.conf import settings
+from optparse import make_option
+from django_extensions.management.utils import signalcommand
+
+
+class Command(BaseCommand):
+    """print_settings command"""
+
+    help = "Print the active Django settings."
+
+    option_list = BaseCommand.option_list + (
+        make_option('--format', default='simple', dest='format',
+                    help='Specifies output format.'),
+        make_option('--indent', default=4, dest='indent', type='int',
+                    help='Specifies indent level for JSON and YAML'),
+    )
+
+    @signalcommand
+    def handle(self, *args, **options):
+        a_dict = {}
+
+        for attr in dir(settings):
+            if self.include_attr(attr, args):
+                value = getattr(settings, attr)
+                a_dict[attr] = value
+
+        for setting in args:
+            if setting not in a_dict:
+                raise CommandError('%s not found in settings.' % setting)
+
+        output_format = options.get('format', 'json')
+        indent = options.get('indent', 4)
+
+        if output_format == 'json':
+            json = self.import_json()
+            print(json.dumps(a_dict, indent=indent))
+        elif output_format == 'yaml':
+            import yaml  # requires PyYAML
+            print(yaml.dump(a_dict, indent=indent))
+        elif output_format == 'pprint':
+            from pprint import pprint
+            pprint(a_dict)
+        else:
+            self.print_simple(a_dict)
+
+    @staticmethod
+    def include_attr(attr, args):
+        """Whether or not to include attribute in output"""
+
+        if not attr.startswith('__'):
+            if args is not ():
+                if attr in args:
+                    return True
+            else:
+                return True
+        else:
+            return False
+
+    @staticmethod
+    def print_simple(a_dict):
+        """A very simple output format"""
+
+        for key, value in a_dict.items():
+            print('%-40s = %r' % (key, value))
+
+    @staticmethod
+    def import_json():
+        """Import a module for JSON"""
+
+        try:
+            import json
+        except ImportError:
+            import simplejson as json  # NOQA
+        return json
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/print_user_for_session.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/print_user_for_session.py
new file mode 100644
index 0000000..daaa086
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/print_user_for_session.py
@@ -0,0 +1,72 @@
+from importlib import import_module
+from django.conf import settings
+from django.core.management.base import BaseCommand, CommandError
+from django_extensions.management.utils import signalcommand
+
+try:
+    from django.contrib.auth import get_user_model  # Django 1.5
+except ImportError:
+    from django_extensions.future_1_5 import get_user_model
+
+try:
+    from django.contrib.sessions.backends.base import VALID_KEY_CHARS  # Django 1.5
+except ImportError:
+    VALID_KEY_CHARS = "abcdef0123456789"
+
+
+class Command(BaseCommand):
+    help = ("print the user information for the provided session key. "
+            "this is very helpful when trying to track down the person who "
+            "experienced a site crash.")
+    args = "session_key"
+    label = 'session key for the user'
+
+    can_import_settings = True
+
+    @signalcommand
+    def handle(self, *args, **options):
+        if len(args) > 1:
+            raise CommandError("extra arguments supplied")
+
+        if len(args) < 1:
+            raise CommandError("session_key argument missing")
+
+        key = args[0].lower()
+
+        if not set(key).issubset(set(VALID_KEY_CHARS)):
+            raise CommandError("malformed session key")
+
+        engine = import_module(settings.SESSION_ENGINE)
+
+        if not engine.SessionStore().exists(key):
+            print("Session Key does not exist. Expired?")
+            return
+
+        session = engine.SessionStore(key)
+        data = session.load()
+
+        print('Session to Expire: %s' % session.get_expiry_date())
+        print('Raw Data: %s' % data)
+
+        uid = data.get('_auth_user_id', None)
+
+        if uid is None:
+            print('No user associated with session')
+            return
+
+        print("User id: %s" % uid)
+
+        User = get_user_model()
+        try:
+            user = User.objects.get(pk=uid)
+        except User.DoesNotExist:
+            print("No user associated with that id.")
+            return
+
+        username_field = 'username'
+
+        if hasattr(User, 'USERNAME_FIELD') and User.USERNAME_FIELD is not None:
+            username_field = User.USERNAME_FIELD
+
+        for key in [username_field, 'email', 'first_name', 'last_name']:
+            print("%s: %s" % (key, getattr(user, key)))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/reset_db.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/reset_db.py
new file mode 100644
index 0000000..02419df
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/reset_db.py
@@ -0,0 +1,178 @@
+"""
+originally from http://www.djangosnippets.org/snippets/828/ by dnordberg
+"""
+import logging
+from optparse import make_option
+
+from django.conf import settings
+from django.core.management.base import CommandError, BaseCommand
+from six.moves import input, configparser
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--noinput', action='store_false',
+                    dest='interactive', default=True,
+                    help='Tells Django to NOT prompt the user for input of any kind.'),
+        make_option('--no-utf8', action='store_true',
+                    dest='no_utf8_support', default=False,
+                    help='Tells Django to not create a UTF-8 charset database'),
+        make_option('-U', '--user', action='store',
+                    dest='user', default=None,
+                    help='Use another user for the database then defined in settings.py'),
+        make_option('-O', '--owner', action='store',
+                    dest='owner', default=None,
+                    help='Use another owner for creating the database then the user defined in settings or via --user'),
+        make_option('-P', '--password', action='store',
+                    dest='password', default=None,
+                    help='Use another password for the database then defined in settings.py'),
+        make_option('-D', '--dbname', action='store',
+                    dest='dbname', default=None,
+                    help='Use another database name then defined in settings.py'),
+        make_option('-R', '--router', action='store',
+                    dest='router', default='default',
+                    help='Use this router-database other then defined in settings.py'),
+    )
+    help = "Resets the database for this project."
+
+    @signalcommand
+    def handle(self, *args, **options):
+        """
+        Resets the database for this project.
+
+        Note: Transaction wrappers are in reverse as a work around for
+        autocommit, anybody know how to do this the right way?
+        """
+
+        if args:
+            raise CommandError("reset_db takes no arguments")
+
+        router = options.get('router')
+        dbinfo = settings.DATABASES.get(router)
+        if dbinfo is None:
+            raise CommandError("Unknown database router %s" % router)
+
+        engine = dbinfo.get('ENGINE').split('.')[-1]
+
+        user = password = database_name = ''
+        if engine == 'mysql':
+            read_default_file = dbinfo.get('OPTIONS', {}).get('read_default_file')
+            if read_default_file:
+                config = configparser.ConfigParser()
+                config.read(read_default_file)
+                user = config.get('client', 'user')
+                password = config.get('client', 'password')
+                database_name = config.get('client', 'database')
+
+        user = options.get('user') or dbinfo.get('USER') or user
+        password = options.get('password') or dbinfo.get('PASSWORD') or password
+        owner = options.get('owner') or user
+
+        database_name = options.get('dbname') or dbinfo.get('NAME') or database_name
+        if database_name == '':
+            raise CommandError("You need to specify DATABASE_NAME in your Django settings file.")
+
+        database_host = dbinfo.get('HOST')
+        database_port = dbinfo.get('PORT')
+
+        verbosity = int(options.get('verbosity', 1))
+        if options.get('interactive'):
+            confirm = input("""
+You have requested a database reset.
+This will IRREVERSIBLY DESTROY
+ALL data in the database "%s".
+Are you sure you want to do this?
+
+Type 'yes' to continue, or 'no' to cancel: """ % (database_name,))
+        else:
+            confirm = 'yes'
+
+        if confirm != 'yes':
+            print("Reset cancelled.")
+            return
+
+        if engine in ('sqlite3', 'spatialite'):
+            import os
+            try:
+                logging.info("Unlinking %s database" % engine)
+                os.unlink(database_name)
+            except OSError:
+                pass
+
+        elif engine in ('mysql',):
+            import MySQLdb as Database
+            kwargs = {
+                'user': user,
+                'passwd': password,
+            }
+            if database_host.startswith('/'):
+                kwargs['unix_socket'] = database_host
+            else:
+                kwargs['host'] = database_host
+
+            if database_port:
+                kwargs['port'] = int(database_port)
+
+            connection = Database.connect(**kwargs)
+            drop_query = 'DROP DATABASE IF EXISTS `%s`' % database_name
+            utf8_support = options.get('no_utf8_support', False) and '' or 'CHARACTER SET utf8'
+            create_query = 'CREATE DATABASE `%s` %s' % (database_name, utf8_support)
+            logging.info('Executing... "' + drop_query + '"')
+            connection.query(drop_query)
+            logging.info('Executing... "' + create_query + '"')
+            connection.query(create_query)
+
+        elif engine in ('postgresql', 'postgresql_psycopg2', 'postgis'):
+            if engine == 'postgresql':
+                import psycopg as Database  # NOQA
+            elif engine in ('postgresql_psycopg2', 'postgis'):
+                import psycopg2 as Database  # NOQA
+
+            conn_string = "dbname=template1"
+            if user:
+                conn_string += " user=%s" % user
+            if password:
+                conn_string += " password='%s'" % password
+            if database_host:
+                conn_string += " host=%s" % database_host
+            if database_port:
+                conn_string += " port=%s" % database_port
+
+            connection = Database.connect(conn_string)
+            connection.set_isolation_level(0)  # autocommit false
+            cursor = connection.cursor()
+            drop_query = "DROP DATABASE \"%s\";" % database_name
+            logging.info('Executing... "' + drop_query + '"')
+
+            try:
+                cursor.execute(drop_query)
+            except Database.ProgrammingError as e:
+                logging.exception("Error: %s" % str(e))
+
+            create_query = "CREATE DATABASE \"%s\"" % database_name
+            if owner:
+                create_query += " WITH OWNER = \"%s\" " % owner
+            create_query += " ENCODING = 'UTF8'"
+
+            if engine == 'postgis':
+                # fetch postgis template name if it exists
+                from django.contrib.gis.db.backends.postgis.creation import PostGISCreation
+                postgis_template = PostGISCreation(connection).template_postgis
+                if postgis_template is not None:
+                    create_query += ' TEMPLATE = %s' % postgis_template
+
+            if settings.DEFAULT_TABLESPACE:
+                create_query += ' TABLESPACE = %s;' % settings.DEFAULT_TABLESPACE
+            else:
+                create_query += ';'
+
+            logging.info('Executing... "' + create_query + '"')
+            cursor.execute(create_query)
+
+        else:
+            raise CommandError("Unknown database engine %s" % engine)
+
+        if verbosity >= 2 or options.get('interactive'):
+            print("Reset successful.")
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runjob.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runjob.py
new file mode 100644
index 0000000..e8b1abf
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runjob.py
@@ -0,0 +1,52 @@
+from django.core.management.base import LabelCommand
+from optparse import make_option
+from django_extensions.management.jobs import get_job, print_jobs
+from django_extensions.management.utils import signalcommand
+
+
+class Command(LabelCommand):
+    option_list = LabelCommand.option_list + (
+        make_option('--list', '-l', action="store_true", dest="list_jobs",
+                    help="List all jobs with their description"),
+    )
+    help = "Run a single maintenance job."
+    args = "[app_name] job_name"
+    label = ""
+
+    def runjob(self, app_name, job_name, options):
+        verbosity = int(options.get('verbosity', 1))
+        if verbosity > 1:
+            print("Executing job: %s (app: %s)" % (job_name, app_name))
+        try:
+            job = get_job(app_name, job_name)
+        except KeyError:
+            if app_name:
+                print("Error: Job %s for applabel %s not found" % (job_name, app_name))
+            else:
+                print("Error: Job %s not found" % job_name)
+            print("Use -l option to view all the available jobs")
+            return
+        try:
+            job().execute()
+        except Exception:
+            import traceback
+            print("ERROR OCCURED IN JOB: %s (APP: %s)" % (job_name, app_name))
+            print("START TRACEBACK:")
+            traceback.print_exc()
+            print("END TRACEBACK\n")
+
+    @signalcommand
+    def handle(self, *args, **options):
+        app_name = None
+        job_name = None
+        if len(args) == 1:
+            job_name = args[0]
+        elif len(args) == 2:
+            app_name, job_name = args
+        if options.get('list_jobs'):
+            print_jobs(only_scheduled=False, show_when=True, show_appname=True)
+        else:
+            if not job_name:
+                print("Run a single maintenance job. Please specify the name of the job.")
+                return
+            self.runjob(app_name, job_name, options)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runjobs.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runjobs.py
new file mode 100644
index 0000000..c290a3e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runjobs.py
@@ -0,0 +1,87 @@
+from django.core.management.base import LabelCommand
+from optparse import make_option
+from django_extensions.management.jobs import get_jobs, print_jobs
+from django_extensions.management.utils import signalcommand
+
+
+class Command(LabelCommand):
+    option_list = LabelCommand.option_list + (
+        make_option('--list', '-l', action="store_true", dest="list_jobs",
+                    help="List all jobs with their description"),
+    )
+    help = "Runs scheduled maintenance jobs."
+    args = "[minutely quarter_hourly hourly daily weekly monthly yearly]"
+    label = ""
+
+    def usage_msg(self):
+        print("Run scheduled jobs. Please specify 'minutely', 'quarter_hourly', 'hourly', 'daily', 'weekly', 'monthly' or 'yearly'")
+
+    def runjobs(self, when, options):
+        verbosity = int(options.get('verbosity', 1))
+        jobs = get_jobs(when, only_scheduled=True)
+        for app_name, job_name in sorted(jobs.keys()):
+            job = jobs[(app_name, job_name)]
+            if verbosity > 1:
+                print("Executing %s job: %s (app: %s)" % (when, job_name, app_name))
+            try:
+                job().execute()
+            except Exception:
+                import traceback
+                print("ERROR OCCURED IN %s JOB: %s (APP: %s)" % (when.upper(), job_name, app_name))
+                print("START TRACEBACK:")
+                traceback.print_exc()
+                print("END TRACEBACK\n")
+
+    def runjobs_by_signals(self, when, options):
+        """ Run jobs from the signals """
+        # Thanks for Ian Holsman for the idea and code
+        from django_extensions.management import signals
+        from django.db import models
+        from django.conf import settings
+
+        verbosity = int(options.get('verbosity', 1))
+        for app_name in settings.INSTALLED_APPS:
+            try:
+                __import__(app_name + '.management', '', '', [''])
+            except ImportError:
+                pass
+
+        for app in models.get_apps():
+            if verbosity > 1:
+                app_name = '.'.join(app.__name__.rsplit('.')[:-1])
+                print("Sending %s job signal for: %s" % (when, app_name))
+            if when == 'minutely':
+                signals.run_minutely_jobs.send(sender=app, app=app)
+            elif when == 'quarter_hourly':
+                signals.run_quarter_hourly_jobs.send(sender=app, app=app)
+            elif when == 'hourly':
+                signals.run_hourly_jobs.send(sender=app, app=app)
+            elif when == 'daily':
+                signals.run_daily_jobs.send(sender=app, app=app)
+            elif when == 'weekly':
+                signals.run_weekly_jobs.send(sender=app, app=app)
+            elif when == 'monthly':
+                signals.run_monthly_jobs.send(sender=app, app=app)
+            elif when == 'yearly':
+                signals.run_yearly_jobs.send(sender=app, app=app)
+
+    @signalcommand
+    def handle(self, *args, **options):
+        when = None
+        if len(args) > 1:
+            self.usage_msg()
+            return
+        elif len(args) == 1:
+            if not args[0] in ['minutely', 'quarter_hourly', 'hourly', 'daily', 'weekly', 'monthly', 'yearly']:
+                self.usage_msg()
+                return
+            else:
+                when = args[0]
+        if options.get('list_jobs'):
+            print_jobs(when, only_scheduled=True, show_when=True, show_appname=True)
+        else:
+            if not when:
+                self.usage_msg()
+                return
+            self.runjobs(when, options)
+            self.runjobs_by_signals(when, options)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runprofileserver.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runprofileserver.py
new file mode 100644
index 0000000..a3224e1
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runprofileserver.py
@@ -0,0 +1,312 @@
+"""
+runprofileserver.py
+
+    Starts a lightweight Web server with profiling enabled.
+
+Credits for kcachegrind support taken from lsprofcalltree.py go to:
+ David Allouche
+ Jp Calderone & Itamar Shtull-Trauring
+ Johan Dahlin
+"""
+
+from django.core.management.base import BaseCommand, CommandError
+from optparse import make_option
+from datetime import datetime
+from django.conf import settings
+import sys
+
+try:
+    from django.contrib.staticfiles.handlers import StaticFilesHandler
+    USE_STATICFILES = 'django.contrib.staticfiles' in settings.INSTALLED_APPS
+except ImportError as e:
+    USE_STATICFILES = False
+
+from django_extensions.management.utils import signalcommand
+
+try:
+    any
+except NameError:
+    # backwards compatibility for <2.5
+    def any(iterable):
+        for element in iterable:
+            if element:
+                return True
+        return False
+
+
+def label(code):
+    if isinstance(code, str):
+        return ('~', 0, code)    # built-in functions ('~' sorts at the end)
+    else:
+        return '%s %s:%d' % (code.co_name,
+                             code.co_filename,
+                             code.co_firstlineno)
+
+
+class KCacheGrind(object):
+    def __init__(self, profiler):
+        self.data = profiler.getstats()
+        self.out_file = None
+
+    def output(self, out_file):
+        self.out_file = out_file
+        self.out_file.write('events: Ticks\n')
+        self._print_summary()
+        for entry in self.data:
+            self._entry(entry)
+
+    def _print_summary(self):
+        max_cost = 0
+        for entry in self.data:
+            totaltime = int(entry.totaltime * 1000)
+            max_cost = max(max_cost, totaltime)
+        self.out_file.write('summary: %d\n' % (max_cost,))
+
+    def _entry(self, entry):
+        out_file = self.out_file
+
+        code = entry.code
+        #print >> out_file, 'ob=%s' % (code.co_filename,)
+        if isinstance(code, str):
+            out_file.write('fi=~\n')
+        else:
+            out_file.write('fi=%s\n' % (code.co_filename,))
+        out_file.write('fn=%s\n' % (label(code),))
+
+        inlinetime = int(entry.inlinetime * 1000)
+        if isinstance(code, str):
+            out_file.write('0  %s\n' % inlinetime)
+        else:
+            out_file.write('%d %d\n' % (code.co_firstlineno, inlinetime))
+
+        # recursive calls are counted in entry.calls
+        if entry.calls:
+            calls = entry.calls
+        else:
+            calls = []
+
+        if isinstance(code, str):
+            lineno = 0
+        else:
+            lineno = code.co_firstlineno
+
+        for subentry in calls:
+            self._subentry(lineno, subentry)
+        out_file.write("\n")
+
+    def _subentry(self, lineno, subentry):
+        out_file = self.out_file
+        code = subentry.code
+        #out_file.write('cob=%s\n' % (code.co_filename,))
+        out_file.write('cfn=%s\n' % (label(code),))
+        if isinstance(code, str):
+            out_file.write('cfi=~\n')
+            out_file.write('calls=%d 0\n' % (subentry.callcount,))
+        else:
+            out_file.write('cfi=%s\n' % (code.co_filename,))
+            out_file.write('calls=%d %d\n' % (subentry.callcount, code.co_firstlineno))
+
+        totaltime = int(subentry.totaltime * 1000)
+        out_file.write('%d %d\n' % (lineno, totaltime))
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--noreload', action='store_false', dest='use_reloader', default=True,
+                    help='Tells Django to NOT use the auto-reloader.'),
+        make_option('--adminmedia', dest='admin_media_path', default='',
+                    help='Specifies the directory from which to serve admin media.'),
+        make_option('--prof-path', dest='prof_path', default='/tmp',
+                    help='Specifies the directory which to save profile information in.'),
+        make_option('--prof-file', dest='prof_file', default='{path}.{duration:06d}ms.{time}',
+                    help='Set filename format, default if "{path}.{duration:06d}ms.{time}".'),
+        make_option('--nomedia', action='store_true', dest='no_media', default=False,
+                    help='Do not profile MEDIA_URL and ADMIN_MEDIA_URL'),
+        make_option('--use-cprofile', action='store_true', dest='use_cprofile', default=False,
+                    help='Use cProfile if available, this is disabled per default because of incompatibilities.'),
+        make_option('--kcachegrind', action='store_true', dest='use_lsprof', default=False,
+                    help='Create kcachegrind compatible lsprof files, this requires and automatically enables cProfile.'),
+    )
+    if USE_STATICFILES:
+        option_list += (
+            make_option('--nostatic', action="store_false", dest='use_static_handler', default=True,
+                        help='Tells Django to NOT automatically serve static files at STATIC_URL.'),
+            make_option('--insecure', action="store_true", dest='insecure_serving', default=False,
+                        help='Allows serving static files even if DEBUG is False.'),
+        )
+    help = "Starts a lightweight Web server with profiling enabled."
+    args = '[optional port number, or ipaddr:port]'
+
+    @signalcommand
+    def handle(self, addrport='', *args, **options):
+        import django
+        import socket
+        import errno
+        from django.core.servers.basehttp import run
+        try:
+            from django.core.servers.basehttp import get_internal_wsgi_application as WSGIHandler
+        except ImportError:
+            from django.core.handlers.wsgi import WSGIHandler  # noqa
+
+        try:
+            from django.core.servers.basehttp import AdminMediaHandler
+            HAS_ADMINMEDIAHANDLER = True
+        except ImportError:
+            HAS_ADMINMEDIAHANDLER = False
+
+        try:
+            from django.core.servers.basehttp import WSGIServerException as wsgi_server_exc_cls
+        except ImportError:  # Django 1.6
+            wsgi_server_exc_cls = socket.error
+
+        if args:
+            raise CommandError('Usage is runserver %s' % self.args)
+        if not addrport:
+            addr = ''
+            port = '8000'
+        else:
+            try:
+                addr, port = addrport.split(':')
+            except ValueError:
+                addr, port = '', addrport
+        if not addr:
+            addr = '127.0.0.1'
+
+        if not port.isdigit():
+            raise CommandError("%r is not a valid port number." % port)
+
+        use_reloader = options.get('use_reloader', True)
+        shutdown_message = options.get('shutdown_message', '')
+        no_media = options.get('no_media', False)
+        quit_command = (sys.platform == 'win32') and 'CTRL-BREAK' or 'CONTROL-C'
+
+        def inner_run():
+            import os
+            import time
+            try:
+                import hotshot
+            except ImportError:
+                pass            # python 3.x
+            USE_CPROFILE = options.get('use_cprofile', False)
+            USE_LSPROF = options.get('use_lsprof', False)
+            if USE_LSPROF:
+                USE_CPROFILE = True
+            if USE_CPROFILE:
+                try:
+                    import cProfile
+                    USE_CPROFILE = True
+                except ImportError:
+                    print("cProfile disabled, module cannot be imported!")
+                    USE_CPROFILE = False
+            if USE_LSPROF and not USE_CPROFILE:
+                raise SystemExit("Kcachegrind compatible output format required cProfile from Python 2.5")
+            prof_path = options.get('prof_path', '/tmp')
+
+            prof_file = options.get('prof_file', '{path}.{duration:06d}ms.{time}')
+            if not prof_file.format(path='1', duration=2, time=3):
+                prof_file = '{path}.{duration:06d}ms.{time}'
+                print("Filename format is wrong. Default format used: '{path}.{duration:06d}ms.{time}'.")
+
+            def get_exclude_paths():
+                exclude_paths = []
+                media_url = getattr(settings, 'MEDIA_URL', None)
+                if media_url:
+                    exclude_paths.append(media_url)
+                static_url = getattr(settings, 'STATIC_URL', None)
+                if static_url:
+                    exclude_paths.append(static_url)
+                admin_media_prefix = getattr(settings, 'ADMIN_MEDIA_PREFIX', None)
+                if admin_media_prefix:
+                    exclude_paths.append(admin_media_prefix)
+                return exclude_paths
+
+            def make_profiler_handler(inner_handler):
+                def handler(environ, start_response):
+                    path_info = environ['PATH_INFO']
+                    # when using something like a dynamic site middleware is could be necessary
+                    # to refetch the exclude_paths every time since they could change per site.
+                    if no_media and any(path_info.startswith(p) for p in get_exclude_paths()):
+                        return inner_handler(environ, start_response)
+                    path_name = path_info.strip("/").replace('/', '.') or "root"
+                    profname = "%s.%d.prof" % (path_name, time.time())
+                    profname = os.path.join(prof_path, profname)
+                    if USE_CPROFILE:
+                        prof = cProfile.Profile()
+                    else:
+                        prof = hotshot.Profile(profname)
+                    start = datetime.now()
+                    try:
+                        return prof.runcall(inner_handler, environ, start_response)
+                    finally:
+                        # seeing how long the request took is important!
+                        elap = datetime.now() - start
+                        elapms = elap.seconds * 1000.0 + elap.microseconds / 1000.0
+                        if USE_LSPROF:
+                            kg = KCacheGrind(prof)
+                            with open(profname, 'w') as f:
+                                kg.output(f)
+                        elif USE_CPROFILE:
+                            prof.dump_stats(profname)
+                        profname2 = prof_file.format(path=path_name, duration=int(elapms), time=int(time.time()))
+                        profname2 = os.path.join(prof_path, "%s.prof" % profname2)
+                        if not USE_CPROFILE:
+                            prof.close()
+                        os.rename(profname, profname2)
+                return handler
+
+            print("Validating models...")
+            if hasattr(self, 'check'):
+                self.check(display_num_errors=True)
+            else:
+                self.validate(display_num_errors=True)
+            print("\nDjango version %s, using settings %r" % (django.get_version(), settings.SETTINGS_MODULE))
+            print("Development server is running at http://%s:%s/" % (addr, port))
+            print("Quit the server with %s." % quit_command)
+            path = options.get('admin_media_path', '')
+            if not path:
+                admin_media_path = os.path.join(django.__path__[0], 'contrib/admin/static/admin')
+                if os.path.isdir(admin_media_path):
+                    path = admin_media_path
+                else:
+                    path = os.path.join(django.__path__[0], 'contrib/admin/media')
+            try:
+                handler = WSGIHandler()
+                if HAS_ADMINMEDIAHANDLER:
+                    handler = AdminMediaHandler(handler, path)
+                if USE_STATICFILES:
+                    use_static_handler = options.get('use_static_handler', True)
+                    insecure_serving = options.get('insecure_serving', False)
+                    if (use_static_handler and (settings.DEBUG or insecure_serving)):
+                        handler = StaticFilesHandler(handler)
+                handler = make_profiler_handler(handler)
+                run(addr, int(port), handler)
+            except wsgi_server_exc_cls as e:
+                # Use helpful error messages instead of ugly tracebacks.
+                ERRORS = {
+                    errno.EACCES: "You don't have permission to access that port.",
+                    errno.EADDRINUSE: "That port is already in use.",
+                    errno.EADDRNOTAVAIL: "That IP address can't be assigned-to.",
+                }
+                if not isinstance(e, socket.error):  # Django < 1.6
+                    ERRORS[13] = ERRORS.pop(errno.EACCES)
+                    ERRORS[98] = ERRORS.pop(errno.EADDRINUSE)
+                    ERRORS[99] = ERRORS.pop(errno.EADDRNOTAVAIL)
+                try:
+                    if not isinstance(e, socket.error):  # Django < 1.6
+                        error_text = ERRORS[e.args[0].args[0]]
+                    else:
+                        error_text = ERRORS[e.errno]
+                except (AttributeError, KeyError):
+                    error_text = str(e)
+                sys.stderr.write(self.style.ERROR("Error: %s" % error_text) + '\n')
+                # Need to use an OS exit because sys.exit doesn't work in a thread
+                os._exit(1)
+            except KeyboardInterrupt:
+                if shutdown_message:
+                    print(shutdown_message)
+                sys.exit(0)
+        if use_reloader:
+            from django.utils import autoreload
+            autoreload.main(inner_run)
+        else:
+            inner_run()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runscript.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runscript.py
new file mode 100644
index 0000000..1f1be22
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runscript.py
@@ -0,0 +1,177 @@
+import sys
+import traceback
+from optparse import make_option
+from django_extensions.management.email_notifications import EmailNotificationCommand
+from django.conf import settings
+
+try:
+    import importlib
+except ImportError:
+    print("Runscript needs the importlib module to work. You can install it via 'pip install importlib'")
+    sys.exit(1)
+
+from django_extensions.management.utils import signalcommand
+
+
+def vararg_callback(option, opt_str, opt_value, parser):
+    parser.rargs.insert(0, opt_value)
+    value = []
+    for arg in parser.rargs:
+        # stop on --foo like options
+        if arg[:2] == "--" and len(arg) > 2:
+            break
+        # stop on -a like options
+        if arg[:1] == "-":
+            break
+        value.append(arg)
+
+    del parser.rargs[:len(value)]
+    setattr(parser.values, option.dest, value)
+
+
+class Command(EmailNotificationCommand):
+    option_list = EmailNotificationCommand.option_list + (
+        make_option('--fixtures', action='store_true', dest='infixtures', default=False,
+                    help='Only look in app.fixtures subdir'),
+        make_option('--noscripts', action='store_true', dest='noscripts', default=False,
+                    help='Look in app.scripts subdir'),
+        make_option('-s', '--silent', action='store_true', dest='silent', default=False,
+                    help='Run silently, do not show errors and tracebacks'),
+        make_option('--no-traceback', action='store_true', dest='no_traceback', default=False,
+                    help='Do not show tracebacks'),
+        make_option('--script-args', action='callback', callback=vararg_callback, type='string',
+                    help='Space-separated argument list to be passed to the scripts. Note that the '
+                         'same arguments will be passed to all named scripts.'),
+    )
+    help = 'Runs a script in django context.'
+    args = "script [script ...]"
+
+    @signalcommand
+    def handle(self, *scripts, **options):
+        NOTICE = self.style.SQL_TABLE
+        NOTICE2 = self.style.SQL_FIELD
+        ERROR = self.style.ERROR
+        ERROR2 = self.style.NOTICE
+
+        subdirs = []
+
+        if not options.get('noscripts'):
+            subdirs.append('scripts')
+        if options.get('infixtures'):
+            subdirs.append('fixtures')
+        verbosity = int(options.get('verbosity', 1))
+        show_traceback = options.get('traceback', True)
+        if show_traceback is None:
+            # XXX: traceback is set to None from Django ?
+            show_traceback = True
+        no_traceback = options.get('no_traceback', False)
+        if no_traceback:
+            show_traceback = False
+        silent = options.get('silent', False)
+        if silent:
+            verbosity = 0
+        email_notifications = options.get('email_notifications', False)
+
+        if len(subdirs) < 1:
+            print(NOTICE("No subdirs to run left."))
+            return
+
+        if len(scripts) < 1:
+            print(ERROR("Script name required."))
+            return
+
+        def run_script(mod, *script_args):
+            try:
+                mod.run(*script_args)
+                if email_notifications:
+                    self.send_email_notification(notification_id=mod.__name__)
+            except Exception:
+                if silent:
+                    return
+                if verbosity > 0:
+                    print(ERROR("Exception while running run() in '%s'" % mod.__name__))
+                if email_notifications:
+                    self.send_email_notification(
+                        notification_id=mod.__name__, include_traceback=True)
+                if show_traceback:
+                    raise
+
+        def my_import(mod):
+            if verbosity > 1:
+                print(NOTICE("Check for %s" % mod))
+            # check if module exists before importing
+            try:
+                importlib.import_module(mod)
+                t = __import__(mod, [], [], [" "])
+            except (ImportError, AttributeError) as e:
+                if str(e).startswith('No module named'):
+                    try:
+                        exc_type, exc_value, exc_traceback = sys.exc_info()
+                        try:
+                            if exc_traceback.tb_next.tb_next is None:
+                                return False
+                        except AttributeError:
+                            pass
+                    finally:
+                        exc_traceback = None
+
+                if verbosity > 1:
+                    if verbosity > 2:
+                        traceback.print_exc()
+                    print(ERROR("Cannot import module '%s': %s." % (mod, e)))
+
+                return False
+
+            #if verbosity > 1:
+            #    print(NOTICE("Found script %s ..." % mod))
+            if hasattr(t, "run"):
+                if verbosity > 1:
+                    print(NOTICE2("Found script '%s' ..." % mod))
+                #if verbosity > 1:
+                #    print(NOTICE("found run() in %s. executing..." % mod))
+                return t
+            else:
+                if verbosity > 1:
+                    print(ERROR2("Find script '%s' but no run() function found." % mod))
+
+        def find_modules_for_script(script):
+            """ find script module which contains 'run' attribute """
+            modules = []
+            # first look in apps
+            for app in settings.INSTALLED_APPS:
+                for subdir in subdirs:
+                    mod = my_import("%s.%s.%s" % (app, subdir, script))
+                    if mod:
+                        modules.append(mod)
+
+            # try app.DIR.script import
+            sa = script.split(".")
+            for subdir in subdirs:
+                nn = ".".join(sa[:-1] + [subdir, sa[-1]])
+                mod = my_import(nn)
+                if mod:
+                    modules.append(mod)
+
+            # try direct import
+            if script.find(".") != -1:
+                mod = my_import(script)
+                if mod:
+                    modules.append(mod)
+
+            return modules
+
+        if options.get('script_args'):
+            script_args = options['script_args']
+        else:
+            script_args = []
+        for script in scripts:
+            modules = find_modules_for_script(script)
+            if not modules:
+                if verbosity > 0 and not silent:
+                    print(ERROR("No (valid) module for script '%s' found" % script))
+                    if verbosity < 2:
+                        print(ERROR("Try running with a higher verbosity level like: -v2 or -v3"))
+            for mod in modules:
+                if verbosity > 1:
+                    print(NOTICE2("Running script '%s' ..." % mod.__name__))
+                run_script(mod, *script_args)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runserver_plus.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runserver_plus.py
new file mode 100644
index 0000000..bbbe298
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/runserver_plus.py
@@ -0,0 +1,307 @@
+import os
+import re
+import socket
+import sys
+import time
+
+from optparse import make_option
+
+from django.conf import settings
+from django.core.management.base import BaseCommand, CommandError
+from django_extensions.management.utils import setup_logger, RedirectHandler,\
+    signalcommand
+from django_extensions.management.technical_response import null_technical_500_response
+
+
+try:
+    if 'django.contrib.staticfiles' in settings.INSTALLED_APPS:
+        from django.contrib.staticfiles.handlers import StaticFilesHandler
+        USE_STATICFILES = True
+    elif 'staticfiles' in settings.INSTALLED_APPS:
+        from staticfiles.handlers import StaticFilesHandler  # noqa
+        USE_STATICFILES = True
+    else:
+        USE_STATICFILES = False
+except ImportError:
+    USE_STATICFILES = False
+
+
+naiveip_re = re.compile(r"""^(?:
+(?P<addr>
+    (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address
+    (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address
+    (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN
+):)?(?P<port>\d+)$""", re.X)
+DEFAULT_PORT = "8000"
+
+
+import logging
+logger = logging.getLogger(__name__)
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--ipv6', '-6', action='store_true', dest='use_ipv6', default=False,
+                    help='Tells Django to use a IPv6 address.'),
+        make_option('--noreload', action='store_false', dest='use_reloader', default=True,
+                    help='Tells Django to NOT use the auto-reloader.'),
+        make_option('--browser', action='store_true', dest='open_browser',
+                    help='Tells Django to open a browser.'),
+        make_option('--adminmedia', dest='admin_media_path', default='',
+                    help='Specifies the directory from which to serve admin media.'),
+        make_option('--nothreading', action='store_false', dest='threaded',
+                    help='Do not run in multithreaded mode.'),
+        make_option('--threaded', action='store_true', dest='threaded',
+                    help='Run in multithreaded mode.'),
+        make_option('--output', dest='output_file', default=None,
+                    help='Specifies an output file to send a copy of all messages (not flushed immediately).'),
+        make_option('--print-sql', action='store_true', default=False,
+                    help="Print SQL queries as they're executed"),
+        make_option('--cert', dest='cert_path', action="store", type="string",
+                    help='To use SSL, specify certificate path.'),
+
+    )
+    if USE_STATICFILES:
+        option_list += (
+            make_option('--nostatic', action="store_false", dest='use_static_handler', default=True,
+                        help='Tells Django to NOT automatically serve static files at STATIC_URL.'),
+            make_option('--insecure', action="store_true", dest='insecure_serving', default=False,
+                        help='Allows serving static files even if DEBUG is False.'),
+        )
+    help = "Starts a lightweight Web server for development."
+    args = '[optional port number, or ipaddr:port]'
+
+    # Validation is called explicitly each time the server is reloaded.
+    requires_model_validation = False
+
+    @signalcommand
+    def handle(self, addrport='', *args, **options):
+        import django
+
+        # Do not use default ending='\n', because StreamHandler() takes care of it
+        if hasattr(self.stderr, 'ending'):
+            self.stderr.ending = None
+
+        setup_logger(logger, self.stderr, filename=options.get('output_file', None))  # , fmt="[%(name)s] %(message)s")
+        logredirect = RedirectHandler(__name__)
+
+        # Redirect werkzeug log items
+        werklogger = logging.getLogger('werkzeug')
+        werklogger.setLevel(logging.INFO)
+        werklogger.addHandler(logredirect)
+        werklogger.propagate = False
+
+        if options.get("print_sql", False):
+            try:
+                # Django 1.7 onwards
+                from django.db.backends import utils
+            except ImportError:
+                # Django 1.6 below
+                from django.db.backends import util as utils
+
+            try:
+                import sqlparse
+            except ImportError:
+                sqlparse = None  # noqa
+
+            class PrintQueryWrapper(utils.CursorDebugWrapper):
+                def execute(self, sql, params=()):
+                    starttime = time.time()
+                    try:
+                        return self.cursor.execute(sql, params)
+                    finally:
+                        raw_sql = self.db.ops.last_executed_query(self.cursor, sql, params)
+                        execution_time = time.time() - starttime
+                        therest = ' -- [Execution time: %.6fs] [Database: %s]' % (execution_time, self.db.alias)
+                        if sqlparse:
+                            logger.info(sqlparse.format(raw_sql, reindent=True) + therest)
+                        else:
+                            logger.info(raw_sql + therest)
+
+            utils.CursorDebugWrapper = PrintQueryWrapper
+
+        try:
+            from django.core.servers.basehttp import AdminMediaHandler
+            USE_ADMINMEDIAHANDLER = True
+        except ImportError:
+            USE_ADMINMEDIAHANDLER = False
+
+        try:
+            from django.core.servers.basehttp import get_internal_wsgi_application as WSGIHandler
+        except ImportError:
+            from django.core.handlers.wsgi import WSGIHandler  # noqa
+
+        try:
+            from werkzeug import run_simple, DebuggedApplication
+
+            # Set colored output
+            if settings.DEBUG:
+                try:
+                    set_werkzeug_log_color()
+                except:     # We are dealing with some internals, anything could go wrong
+                    print("Wrapping internal werkzeug logger for color highlighting has failed!")
+                    pass
+
+        except ImportError:
+            raise CommandError("Werkzeug is required to use runserver_plus.  Please visit http://werkzeug.pocoo.org/ or install via pip. (pip install Werkzeug)")
+
+        # usurp django's handler
+        from django.views import debug
+        debug.technical_500_response = null_technical_500_response
+
+        self.use_ipv6 = options.get('use_ipv6')
+        if self.use_ipv6 and not socket.has_ipv6:
+            raise CommandError('Your Python does not support IPv6.')
+        self._raw_ipv6 = False
+        if not addrport:
+            try:
+                addrport = settings.RUNSERVERPLUS_SERVER_ADDRESS_PORT
+            except AttributeError:
+                pass
+        if not addrport:
+            self.addr = ''
+            self.port = DEFAULT_PORT
+        else:
+            m = re.match(naiveip_re, addrport)
+            if m is None:
+                raise CommandError('"%s" is not a valid port number '
+                                   'or address:port pair.' % addrport)
+            self.addr, _ipv4, _ipv6, _fqdn, self.port = m.groups()
+            if not self.port.isdigit():
+                raise CommandError("%r is not a valid port number." %
+                                   self.port)
+            if self.addr:
+                if _ipv6:
+                    self.addr = self.addr[1:-1]
+                    self.use_ipv6 = True
+                    self._raw_ipv6 = True
+                elif self.use_ipv6 and not _fqdn:
+                    raise CommandError('"%s" is not a valid IPv6 address.'
+                                       % self.addr)
+        if not self.addr:
+            self.addr = '::1' if self.use_ipv6 else '127.0.0.1'
+
+        threaded = options.get('threaded', True)
+        use_reloader = options.get('use_reloader', True)
+        open_browser = options.get('open_browser', False)
+        cert_path = options.get("cert_path")
+        quit_command = (sys.platform == 'win32') and 'CTRL-BREAK' or 'CONTROL-C'
+        bind_url = "http://%s:%s/" % (
+            self.addr if not self._raw_ipv6 else '[%s]' % self.addr, self.port)
+
+        def inner_run():
+            print("Validating models...")
+            self.validate(display_num_errors=True)
+            print("\nDjango version %s, using settings %r" % (django.get_version(), settings.SETTINGS_MODULE))
+            print("Development server is running at %s" % (bind_url,))
+            print("Using the Werkzeug debugger (http://werkzeug.pocoo.org/)")
+            print("Quit the server with %s." % quit_command)
+            path = options.get('admin_media_path', '')
+            if not path:
+                admin_media_path = os.path.join(django.__path__[0], 'contrib/admin/static/admin')
+                if os.path.isdir(admin_media_path):
+                    path = admin_media_path
+                else:
+                    path = os.path.join(django.__path__[0], 'contrib/admin/media')
+            handler = WSGIHandler()
+            if USE_ADMINMEDIAHANDLER:
+                handler = AdminMediaHandler(handler, path)
+            if USE_STATICFILES:
+                use_static_handler = options.get('use_static_handler', True)
+                insecure_serving = options.get('insecure_serving', False)
+                if use_static_handler and (settings.DEBUG or insecure_serving):
+                    handler = StaticFilesHandler(handler)
+            if open_browser:
+                import webbrowser
+                webbrowser.open(bind_url)
+            if cert_path:
+                """
+                OpenSSL is needed for SSL support.
+
+                This will make flakes8 throw warning since OpenSSL is not used
+                directly, alas, this is the only way to show meaningful error
+                messages. See:
+                http://lucumr.pocoo.org/2011/9/21/python-import-blackbox/
+                for more information on python imports.
+                """
+                try:
+                    import OpenSSL  # NOQA
+                except ImportError:
+                    raise CommandError("Python OpenSSL Library is "
+                                       "required to use runserver_plus with ssl support. "
+                                       "Install via pip (pip install pyOpenSSL).")
+
+                dir_path, cert_file = os.path.split(cert_path)
+                if not dir_path:
+                    dir_path = os.getcwd()
+                root, ext = os.path.splitext(cert_file)
+                certfile = os.path.join(dir_path, root + ".crt")
+                keyfile = os.path.join(dir_path, root + ".key")
+                try:
+                    from werkzeug.serving import make_ssl_devcert
+                    if os.path.exists(certfile) and \
+                            os.path.exists(keyfile):
+                                ssl_context = (certfile, keyfile)
+                    else:  # Create cert, key files ourselves.
+                        ssl_context = make_ssl_devcert(
+                            os.path.join(dir_path, root), host='localhost')
+                except ImportError:
+                    print("Werkzeug version is less than 0.9, trying adhoc certificate.")
+                    ssl_context = "adhoc"
+
+            else:
+                ssl_context = None
+            run_simple(
+                self.addr,
+                int(self.port),
+                DebuggedApplication(handler, True),
+                use_reloader=use_reloader,
+                use_debugger=True,
+                threaded=threaded,
+                ssl_context=ssl_context
+            )
+        inner_run()
+
+
+def set_werkzeug_log_color():
+    """Try to set color to the werkzeug log.
+    """
+    from django.core.management.color import color_style
+    from werkzeug.serving import WSGIRequestHandler
+    from werkzeug._internal import _log
+
+    _style = color_style()
+    _orig_log = WSGIRequestHandler.log
+
+    def werk_log(self, type, message, *args):
+        try:
+            msg = '%s - - [%s] %s' % (
+                self.address_string(),
+                self.log_date_time_string(),
+                message % args,
+            )
+            http_code = str(args[1])
+        except:
+            return _orig_log(type, message, *args)
+
+        # Utilize terminal colors, if available
+        if http_code[0] == '2':
+            # Put 2XX first, since it should be the common case
+            msg = _style.HTTP_SUCCESS(msg)
+        elif http_code[0] == '1':
+            msg = _style.HTTP_INFO(msg)
+        elif http_code == '304':
+            msg = _style.HTTP_NOT_MODIFIED(msg)
+        elif http_code[0] == '3':
+            msg = _style.HTTP_REDIRECT(msg)
+        elif http_code == '404':
+            msg = _style.HTTP_NOT_FOUND(msg)
+        elif http_code[0] == '4':
+            msg = _style.HTTP_BAD_REQUEST(msg)
+        else:
+            # Any 5XX, or any other response
+            msg = _style.HTTP_SERVER_ERROR(msg)
+
+        _log(type, msg)
+
+    WSGIRequestHandler.log = werk_log
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_default_site.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_default_site.py
new file mode 100644
index 0000000..1fc8d01
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_default_site.py
@@ -0,0 +1,58 @@
+"""
+set_default_site.py
+"""
+import socket
+from optparse import make_option
+
+from django.core.management.base import NoArgsCommand, CommandError
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(NoArgsCommand):
+    option_list = NoArgsCommand.option_list + (
+        make_option('--name', dest='site_name', default=None,
+                    help='Use this as site name.'),
+        make_option('--domain', dest='site_domain', default=None,
+                    help='Use this as site domain.'),
+        make_option('--system-fqdn', dest='set_as_system_fqdn', default=False,
+                    action="store_true", help='Use the systems FQDN (Fully Qualified Domain Name) as name and domain. Can be used in combination with --name'),
+    )
+    help = "Set parameters of the default django.contrib.sites Site"
+
+    @signalcommand
+    def handle_noargs(self, **options):
+        from django.contrib.sites.models import Site
+
+        try:
+            site = Site.objects.get(pk=1)
+        except Site.DoesNotExist:
+            raise CommandError("Default site with pk=1 does not exist")
+        else:
+            name = options.get("site_name", None)
+            domain = options.get("site_domain", None)
+            if options.get('set_as_system_fqdn', False):
+                domain = socket.getfqdn()
+                if not domain:
+                    raise CommandError("Cannot find systems FQDN")
+                if name is None:
+                    name = domain
+
+            update_kwargs = {}
+            if name and name != site.name:
+                update_kwargs["name"] = name
+
+            if domain and domain != site.domain:
+                update_kwargs["domain"] = domain
+
+            if update_kwargs:
+                Site.objects.filter(pk=1).update(**update_kwargs)
+                site = Site.objects.get(pk=1)
+                print("Updated default site. You might need to restart django as sites are cached aggressively.")
+            else:
+                print("Nothing to update (need --name, --domain and/or --system-fqdn)")
+
+            print("Default Site:")
+            print("\tid = %s" % site.id)
+            print("\tname = %s" % site.name)
+            print("\tdomain = %s" % site.domain)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_fake_emails.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_fake_emails.py
new file mode 100644
index 0000000..ce24f36
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_fake_emails.py
@@ -0,0 +1,84 @@
+"""
+set_fake_emails.py
+
+    Give all users a new email account. Useful for testing in a
+    development environment. As such, this command is only available when
+    setting.DEBUG is True.
+
+"""
+from optparse import make_option
+
+from django.conf import settings
+from django.core.management.base import NoArgsCommand, CommandError
+
+DEFAULT_FAKE_EMAIL = '%(username)s@example.com'
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(NoArgsCommand):
+    option_list = NoArgsCommand.option_list + (
+        make_option('--email', dest='default_email', default=DEFAULT_FAKE_EMAIL,
+                    help='Use this as the new email format.'),
+        make_option('-a', '--no-admin', action="store_true", dest='no_admin', default=False,
+                    help='Do not change administrator accounts'),
+        make_option('-s', '--no-staff', action="store_true", dest='no_staff', default=False,
+                    help='Do not change staff accounts'),
+        make_option('--include', dest='include_regexp', default=None,
+                    help='Include usernames matching this regexp.'),
+        make_option('--exclude', dest='exclude_regexp', default=None,
+                    help='Exclude usernames matching this regexp.'),
+        make_option('--include-groups', dest='include_groups', default=None,
+                    help='Include users matching this group. (use comma seperation for multiple groups)'),
+        make_option('--exclude-groups', dest='exclude_groups', default=None,
+                    help='Exclude users matching this group. (use comma seperation for multiple groups)'),
+    )
+    help = '''DEBUG only: give all users a new email based on their account data ("%s" by default). Possible parameters are: username, first_name, last_name''' % (DEFAULT_FAKE_EMAIL, )
+    requires_model_validation = False
+
+    @signalcommand
+    def handle_noargs(self, **options):
+        if not settings.DEBUG:
+            raise CommandError('Only available in debug mode')
+
+        try:
+            from django.contrib.auth import get_user_model  # Django 1.5
+        except ImportError:
+            from django_extensions.future_1_5 import get_user_model
+        from django.contrib.auth.models import Group
+        email = options.get('default_email', DEFAULT_FAKE_EMAIL)
+        include_regexp = options.get('include_regexp', None)
+        exclude_regexp = options.get('exclude_regexp', None)
+        include_groups = options.get('include_groups', None)
+        exclude_groups = options.get('exclude_groups', None)
+        no_admin = options.get('no_admin', False)
+        no_staff = options.get('no_staff', False)
+
+        User = get_user_model()
+        users = User.objects.all()
+        if no_admin:
+            users = users.exclude(is_superuser=True)
+        if no_staff:
+            users = users.exclude(is_staff=True)
+        if exclude_groups:
+            groups = Group.objects.filter(name__in=exclude_groups.split(","))
+            if groups:
+                users = users.exclude(groups__in=groups)
+            else:
+                raise CommandError("No group matches filter: %s" % exclude_groups)
+        if include_groups:
+            groups = Group.objects.filter(name__in=include_groups.split(","))
+            if groups:
+                users = users.filter(groups__in=groups)
+            else:
+                raise CommandError("No groups matches filter: %s" % include_groups)
+        if exclude_regexp:
+            users = users.exclude(username__regex=exclude_regexp)
+        if include_regexp:
+            users = users.filter(username__regex=include_regexp)
+        for user in users:
+            user.email = email % {'username': user.username,
+                                  'first_name': user.first_name,
+                                  'last_name': user.last_name}
+            user.save()
+        print('Changed %d emails' % users.count())
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_fake_passwords.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_fake_passwords.py
new file mode 100644
index 0000000..ec90df1
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/set_fake_passwords.py
@@ -0,0 +1,52 @@
+"""
+set_fake_passwords.py
+
+    Reset all user passwords to a common value. Useful for testing in a
+    development environment. As such, this command is only available when
+    setting.DEBUG is True.
+
+"""
+from optparse import make_option
+
+from django.conf import settings
+from django.core.management.base import NoArgsCommand, CommandError
+
+from django_extensions.management.utils import signalcommand
+
+DEFAULT_FAKE_PASSWORD = 'password'
+
+
+class Command(NoArgsCommand):
+    option_list = NoArgsCommand.option_list + (
+        make_option('--prompt', dest='prompt_passwd', default=False, action='store_true',
+                    help='Prompts for the new password to apply to all users'),
+        make_option('--password', dest='default_passwd', default=DEFAULT_FAKE_PASSWORD,
+                    help='Use this as default password.'),
+    )
+    help = 'DEBUG only: sets all user passwords to a common value ("%s" by default)' % (DEFAULT_FAKE_PASSWORD, )
+    requires_model_validation = False
+
+    @signalcommand
+    def handle_noargs(self, **options):
+        if not settings.DEBUG:
+            raise CommandError('Only available in debug mode')
+
+        try:
+            from django.contrib.auth import get_user_model  # Django 1.5
+        except ImportError:
+            from django_extensions.future_1_5 import get_user_model
+
+        if options.get('prompt_passwd', False):
+            from getpass import getpass
+            passwd = getpass('Password: ')
+            if not passwd:
+                raise CommandError('You must enter a valid password')
+        else:
+            passwd = options.get('default_passwd', DEFAULT_FAKE_PASSWORD)
+
+        User = get_user_model()
+        user = User()
+        user.set_password(passwd)
+        count = User.objects.all().update(password=user.password)
+
+        print('Reset %d passwords' % count)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/shell_plus.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/shell_plus.py
new file mode 100644
index 0000000..b42b573
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/shell_plus.py
@@ -0,0 +1,291 @@
+import os
+import six
+import time
+import traceback
+from optparse import make_option
+
+from django.core.management.base import NoArgsCommand
+from django.conf import settings
+
+from django_extensions.management.shells import import_objects
+from django_extensions.management.utils import signalcommand
+
+
+class Command(NoArgsCommand):
+    def use_vi_mode():
+        editor = os.environ.get('EDITOR')
+        if not editor:
+            return False
+        editor = os.path.basename(editor)
+        return editor.startswith('vi') or editor.endswith('vim')
+
+    option_list = NoArgsCommand.option_list + (
+        make_option('--plain', action='store_true', dest='plain',
+                    help='Tells Django to use plain Python, not BPython nor IPython.'),
+        make_option('--bpython', action='store_true', dest='bpython',
+                    help='Tells Django to use BPython, not IPython.'),
+        make_option('--ptpython', action='store_true', dest='ptpython',
+                    help='Tells Django to use PTPython, not IPython.'),
+        make_option('--ptipython', action='store_true', dest='ptipython',
+                    help='Tells Django to use PT-IPython, not IPython.'),
+        make_option('--ipython', action='store_true', dest='ipython',
+                    help='Tells Django to use IPython, not BPython.'),
+        make_option('--notebook', action='store_true', dest='notebook',
+                    help='Tells Django to use IPython Notebook.'),
+        make_option('--kernel', action='store_true', dest='kernel',
+                    help='Tells Django to start an IPython Kernel.'),
+        make_option('--use-pythonrc', action='store_true', dest='use_pythonrc',
+                    help='Tells Django to execute PYTHONSTARTUP file (BE CAREFULL WITH THIS!)'),
+        make_option('--print-sql', action='store_true', default=False,
+                    help="Print SQL queries as they're executed"),
+        make_option('--dont-load', action='append', dest='dont_load', default=[],
+                    help='Ignore autoloading of some apps/models. Can be used several times.'),
+        make_option('--quiet-load', action='store_true', default=False, dest='quiet_load',
+                    help='Do not display loaded models messages'),
+        make_option('--vi', action='store_true', default=use_vi_mode(), dest='vi_mode',
+                    help='Load Vi key bindings (for --ptpython and --ptipython)'),
+        make_option('--no-browser', action='store_true', default=False, dest='no_browser',
+                    help='Don\'t open the notebook in a browser after startup.'),
+    )
+    help = "Like the 'shell' command but autoloads the models of all installed Django apps."
+
+    @signalcommand
+    def handle_noargs(self, **options):
+        use_kernel = options.get('kernel', False)
+        use_notebook = options.get('notebook', False)
+        use_ipython = options.get('ipython', False)
+        use_bpython = options.get('bpython', False)
+        use_plain = options.get('plain', False)
+        use_ptpython = options.get('ptpython', False)
+        use_ptipython = options.get('ptipython', False)
+        use_pythonrc = options.get('use_pythonrc', True)
+        no_browser = options.get('no_browser', False)
+        verbosity = int(options.get('verbosity', 1))
+
+        if options.get("print_sql", False):
+            # Code from http://gist.github.com/118990
+            try:
+                # Django 1.7 onwards
+                from django.db.backends import utils
+            except ImportError:
+                # Django 1.6 and below
+                from django.db.backends import util as utils
+
+            sqlparse = None
+            try:
+                import sqlparse
+            except ImportError:
+                pass
+
+            class PrintQueryWrapper(utils.CursorDebugWrapper):
+                def execute(self, sql, params=()):
+                    starttime = time.time()
+                    try:
+                        return self.cursor.execute(sql, params)
+                    finally:
+                        execution_time = time.time() - starttime
+                        raw_sql = self.db.ops.last_executed_query(self.cursor, sql, params)
+                        if sqlparse:
+                            print(sqlparse.format(raw_sql, reindent=True))
+                        else:
+                            print(raw_sql)
+                        print("")
+                        print('Execution time: %.6fs [Database: %s]' % (execution_time, self.db.alias))
+                        print("")
+
+            utils.CursorDebugWrapper = PrintQueryWrapper
+
+        def get_kernel():
+            try:
+                from IPython import release
+                if release.version_info[0] < 2:
+                    print(self.style.ERROR("--kernel requires at least IPython version 2.0"))
+                    return
+                from IPython import embed_kernel
+            except ImportError:
+                return traceback.format_exc()
+
+            def run_kernel():
+                imported_objects = import_objects(options, self.style)
+                embed_kernel(local_ns=imported_objects)
+            return run_kernel
+
+        def get_notebook():
+            from django.conf import settings
+            try:
+                from IPython.html.notebookapp import NotebookApp
+            except ImportError:
+                try:
+                    from IPython.frontend.html.notebook import notebookapp
+                    NotebookApp = notebookapp.NotebookApp
+                except ImportError:
+                    return traceback.format_exc()
+
+            def run_notebook():
+                app = NotebookApp.instance()
+                ipython_arguments = getattr(settings, 'IPYTHON_ARGUMENTS', ['--ext', 'django_extensions.management.notebook_extension'])
+                if no_browser and '--no-browser' not in ipython_arguments:
+                    ipython_arguments.append('--no-browser')
+                if 'django_extensions.management.notebook_extension' not in ipython_arguments:
+                    print(self.style.ERROR("""WARNING:
+IPython Notebook Extension 'django_extensions.management.notebook_extension' not
+found in IPYTHON_ARGUMENTS. Without it the IPython Notebook will not initialize
+Django and will not automatically load your models.
+
+Please read the documentation carefully:
+  http://django-extensions.readthedocs.org/en/latest/shell_plus.html#configuration
+"""))
+                app.initialize(ipython_arguments)
+                app.start()
+            return run_notebook
+
+        def get_plain():
+            # Using normal Python shell
+            import code
+            imported_objects = import_objects(options, self.style)
+            try:
+                # Try activating rlcompleter, because it's handy.
+                import readline
+            except ImportError:
+                pass
+            else:
+                # We don't have to wrap the following import in a 'try', because
+                # we already know 'readline' was imported successfully.
+                import rlcompleter
+                readline.set_completer(rlcompleter.Completer(imported_objects).complete)
+                readline.parse_and_bind("tab:complete")
+
+            # We want to honor both $PYTHONSTARTUP and .pythonrc.py, so follow system
+            # conventions and get $PYTHONSTARTUP first then import user.
+            if use_pythonrc:
+                pythonrc = os.environ.get("PYTHONSTARTUP")
+                if pythonrc and os.path.isfile(pythonrc):
+                    global_ns = {}
+                    with open(pythonrc) as rcfile:
+                        try:
+                            six.exec_(compile(rcfile.read(), pythonrc, 'exec'), global_ns)
+                            imported_objects.update(global_ns)
+                        except NameError:
+                            pass
+                # This will import .pythonrc.py as a side-effect
+                try:
+                    import user  # NOQA
+                except ImportError:
+                    pass
+
+            def run_plain():
+                code.interact(local=imported_objects)
+            return run_plain
+
+        def get_bpython():
+            try:
+                from bpython import embed
+            except ImportError:
+                return traceback.format_exc()
+
+            def run_bpython():
+                imported_objects = import_objects(options, self.style)
+                embed(imported_objects)
+            return run_bpython
+
+        def get_ipython():
+            try:
+                from IPython import embed
+
+                def run_ipython():
+                    imported_objects = import_objects(options, self.style)
+                    embed(user_ns=imported_objects)
+                return run_ipython
+            except ImportError:
+                str_exc = traceback.format_exc()
+                # IPython < 0.11
+                # Explicitly pass an empty list as arguments, because otherwise
+                # IPython would use sys.argv from this script.
+                # Notebook not supported for IPython < 0.11.
+                try:
+                    from IPython.Shell import IPShell
+                except ImportError:
+                    return str_exc + "\n" + traceback.format_exc()
+
+                def run_ipython():
+                    imported_objects = import_objects(options, self.style)
+                    shell = IPShell(argv=[], user_ns=imported_objects)
+                    shell.mainloop()
+                return run_ipython
+
+        def get_ptpython():
+            try:
+                from prompt_toolkit.contrib.repl import embed
+            except ImportError:
+                return traceback.format_exc()
+
+            def run_ptpython():
+                imported_objects = import_objects(options, self.style)
+                history_filename = os.path.expanduser('~/.ptpython_history')
+                embed(globals=imported_objects, history_filename=history_filename,
+                      vi_mode=options.get('vi_mode', False))
+            return run_ptpython
+
+        def get_ptipython():
+            try:
+                from prompt_toolkit.contrib.ipython import embed
+            except ImportError:
+                return traceback.format_exc()
+
+            def run_ptipython():
+                imported_objects = import_objects(options, self.style)
+                history_filename = os.path.expanduser('~/.ptpython_history')
+                embed(user_ns=imported_objects, history_filename=history_filename,
+                      vi_mode=options.get('vi_mode', False))
+            return run_ptipython
+
+        shells = (
+            ('ptipython', get_ptipython),
+            ('ptpython', get_ptpython),
+            ('bpython', get_bpython),
+            ('ipython', get_ipython),
+            ('plain', get_plain),
+        )
+        SETTINGS_SHELL_PLUS = getattr(settings, 'SHELL_PLUS', None)
+
+        shell = None
+        shell_name = "any"
+        if use_kernel:
+            shell = get_kernel()
+            shell_name = "IPython Kernel"
+        elif use_notebook:
+            shell = get_notebook()
+            shell_name = "IPython Notebook"
+        elif use_plain:
+            shell = get_plain()
+            shell_name = "plain"
+        elif use_ipython:
+            shell = get_ipython()
+            shell_name = "IPython"
+        elif use_bpython:
+            shell = get_bpython()
+            shell_name = "BPython"
+        elif use_ptpython:
+            shell = get_ptpython()
+            shell_name = "ptpython"
+        elif use_ptipython:
+            shell = get_ptipython()
+            shell_name = "ptipython"
+        elif SETTINGS_SHELL_PLUS:
+            shell_name = SETTINGS_SHELL_PLUS
+            shell = dict(shells)[shell_name]()
+        else:
+            for shell_name, func in shells:
+                shell = func()
+                if callable(shell):
+                    if verbosity > 1:
+                        print(self.style.NOTICE("Using shell %s." % shell_name))
+                    break
+
+        if not callable(shell):
+            if shell:
+                print(shell)
+            print(self.style.ERROR("Could not load %s interactive Python environment." % shell_name))
+            return
+
+        shell()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/show_templatetags.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/show_templatetags.py
new file mode 100644
index 0000000..67c0a37
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/show_templatetags.py
@@ -0,0 +1,109 @@
+import os
+import six
+import inspect
+from django.conf import settings
+from django.core.management.base import BaseCommand
+from django.core.management import color
+from django.template.base import get_library
+from django.utils import termcolors
+
+from django_extensions.management.utils import signalcommand
+
+try:
+    from django.utils.encoding import smart_text
+except ImportError:
+    smart_text = six.u
+
+
+def color_style():
+    style = color.color_style()
+    style.FILTER = termcolors.make_style(fg='yellow', opts=('bold',))
+    style.MODULE_NAME = termcolors.make_style(fg='green', opts=('bold',))
+    style.TAG = termcolors.make_style(fg='red', opts=('bold',))
+    style.TAGLIB = termcolors.make_style(fg='blue', opts=('bold',))
+    return style
+
+
+def format_block(block, nlspaces=0):
+    '''Format the given block of text, trimming leading/trailing
+    empty lines and any leading whitespace that is common to all lines.
+    The purpose is to let us list a code block as a multiline,
+    triple-quoted Python string, taking care of
+    indentation concerns.
+    http://code.activestate.com/recipes/145672/'''
+
+    import re
+
+    # separate block into lines
+    lines = smart_text(block).split('\n')
+
+    # remove leading/trailing empty lines
+    while lines and not lines[0]:
+        del lines[0]
+    while lines and not lines[-1]:
+        del lines[-1]
+
+    # look at first line to see how much indentation to trim
+    ws = re.match(r'\s*', lines[0]).group(0)
+    if ws:
+        lines = map(lambda x: x.replace(ws, '', 1), lines)
+
+    # remove leading/trailing blank lines (after leading ws removal)
+    # we do this again in case there were pure-whitespace lines
+    while lines and not lines[0]:
+        del lines[0]
+    while lines and not lines[-1]:
+        del lines[-1]
+
+    # account for user-specified leading spaces
+    flines = ['%s%s' % (' ' * nlspaces, line) for line in lines]
+
+    return '\n'.join(flines) + '\n'
+
+
+class Command(BaseCommand):
+    help = "Displays template tags and filters available in the current project."
+    results = ""
+
+    def add_result(self, s, depth=0):
+        self.results += '%s\n' % s.rjust(depth * 4 + len(s))
+
+    @signalcommand
+    def handle(self, *args, **options):
+        if args:
+            appname, = args
+
+        style = color_style()
+
+        if getattr(settings, 'ADMIN_FOR', None):
+            settings_modules = [__import__(m, {}, {}, ['']) for m in settings.ADMIN_FOR]
+        else:
+            settings_modules = [settings]
+
+        for settings_mod in settings_modules:
+            for app in settings_mod.INSTALLED_APPS:
+                try:
+                    templatetag_mod = __import__(app + '.templatetags', {}, {}, [''])
+                except ImportError:
+                    continue
+                mod_path = inspect.getabsfile(templatetag_mod)
+                mod_files = os.listdir(os.path.dirname(mod_path))
+                tag_files = [i.rstrip('.py') for i in mod_files if i.endswith('.py') and i[0] != '_']
+                app_labeled = False
+                for taglib in tag_files:
+                    try:
+                        lib = get_library(taglib)
+                    except:
+                        continue
+                    if not app_labeled:
+                        self.add_result('App: %s' % style.MODULE_NAME(app))
+                        app_labeled = True
+                    self.add_result('load: %s' % style.TAGLIB(taglib), 1)
+                    for items, label, style_func in [(lib.tags, 'Tag:', style.TAG), (lib.filters, 'Filter:', style.FILTER)]:
+                        for item in items:
+                            self.add_result('%s %s' % (label, style_func(item)), 2)
+                            doc = inspect.getdoc(items[item])
+                            if doc:
+                                self.add_result(format_block(doc, 12))
+        return self.results
+        # return "\n".join(results)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/show_urls.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/show_urls.py
new file mode 100644
index 0000000..8b5ffdd
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/show_urls.py
@@ -0,0 +1,176 @@
+import re
+import functools
+from optparse import make_option
+
+from django.conf import settings
+from django.core.exceptions import ViewDoesNotExist
+from django.core.urlresolvers import RegexURLPattern, RegexURLResolver
+from django.core.management.base import BaseCommand, CommandError
+from django.contrib.admindocs.views import simplify_regex
+from django.utils.translation import activate
+
+from django_extensions.management.color import color_style
+from django_extensions.management.utils import signalcommand
+
+
+FMTR = {
+    'dense': "{url}\t{module}\t{url_name}\t{decorator}",
+    'table': "{url},{module},{url_name},{decorator}",
+    'aligned': "{url},{module},{url_name},{decorator}",
+    'verbose': "{url}\n\tController: {module}\n\tURL Name: {url_name}\n\tDecorators: {decorator}\n",
+}
+
+
+def extract_views_from_urlpatterns(urlpatterns, base='', namespace=None):
+    """
+    Return a list of views from a list of urlpatterns.
+
+    Each object in the returned list is a two-tuple: (view_func, regex)
+    """
+    views = []
+    for p in urlpatterns:
+        if isinstance(p, RegexURLPattern):
+            try:
+                if not p.name:
+                    name = p.name
+                elif namespace:
+                    name = '{0}:{1}'.format(namespace, p.name)
+                else:
+                    name = p.name
+                views.append((p.callback, base + p.regex.pattern, name))
+            except ViewDoesNotExist:
+                continue
+        elif isinstance(p, RegexURLResolver):
+            try:
+                patterns = p.url_patterns
+            except ImportError:
+                continue
+            views.extend(extract_views_from_urlpatterns(patterns, base + p.regex.pattern, namespace=(namespace or p.namespace)))
+        elif hasattr(p, '_get_callback'):
+            try:
+                views.append((p._get_callback(), base + p.regex.pattern, p.name))
+            except ViewDoesNotExist:
+                continue
+        elif hasattr(p, 'url_patterns') or hasattr(p, '_get_url_patterns'):
+            try:
+                patterns = p.url_patterns
+            except ImportError:
+                continue
+            views.extend(extract_views_from_urlpatterns(patterns, base + p.regex.pattern, namespace=namespace))
+        else:
+            raise TypeError("%s does not appear to be a urlpattern object" % p)
+    return views
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option("--unsorted", "-u", action="store_true", dest="unsorted",
+                    help="Show urls unsorted but same order as found in url patterns"),
+        make_option("--language", "-l", dest="language",
+                    help="Set the language code (useful for i18n_patterns)"),
+        make_option("--decorator", "-d", action="append", dest="decorator", default=[],
+                    help="Show the presence of given decorator on views"),
+        make_option("--format", "-f", dest="format_style", default="dense",
+                    help="Style of the output. Choices: %s" % FMTR.keys())
+    )
+
+    help = "Displays all of the url matching routes for the project."
+
+    @signalcommand
+    def handle(self, *args, **options):
+        if args:
+            appname, = args
+
+        style = color_style()
+
+        if getattr(settings, 'ADMIN_FOR', None):
+            settings_modules = [__import__(m, {}, {}, ['']) for m in settings.ADMIN_FOR]
+        else:
+            settings_modules = [settings]
+
+        language = options.get('language', None)
+        if language is not None:
+            activate(language)
+
+        decorator = options.get('decorator')
+        if not decorator:
+            decorator = ['login_required']
+
+        format_style = options.get('format_style')
+        if format_style not in FMTR:
+            raise CommandError("Format style '%s' does not exist. Options: %s" % (format_style, FMTR.keys()))
+        fmtr = FMTR[format_style]
+
+        views = []
+        for settings_mod in settings_modules:
+            try:
+                urlconf = __import__(settings_mod.ROOT_URLCONF, {}, {}, [''])
+            except Exception as e:
+                if options.get('traceback', None):
+                    import traceback
+                    traceback.print_exc()
+                print(style.ERROR("Error occurred while trying to load %s: %s" % (settings_mod.ROOT_URLCONF, str(e))))
+                continue
+
+            view_functions = extract_views_from_urlpatterns(urlconf.urlpatterns)
+            for (func, regex, url_name) in view_functions:
+
+                if hasattr(func, '__globals__'):
+                    func_globals = func.__globals__
+                elif hasattr(func, 'func_globals'):
+                    func_globals = func.func_globals
+                else:
+                    func_globals = {}
+
+                decorators = [d for d in decorator if d in func_globals]
+
+                if isinstance(func, functools.partial):
+                    func = func.func
+                    decorators.insert(0, 'functools.partial')
+
+                if hasattr(func, '__name__'):
+                    func_name = func.__name__
+                elif hasattr(func, '__class__'):
+                    func_name = '%s()' % func.__class__.__name__
+                else:
+                    func_name = re.sub(r' at 0x[0-9a-f]+', '', repr(func))
+
+                views.append(fmtr.format(
+                    module='{0}.{1}'.format(style.MODULE(func.__module__), style.MODULE_NAME(func_name)),
+                    url_name=style.URL_NAME(url_name or ''),
+                    url=style.URL(simplify_regex(regex)),
+                    decorator=', '.join(decorators),
+                ))
+
+        if not options.get('unsorted', False):
+            views = sorted(views)
+
+        if format_style == 'aligned':
+            views = [row.split(',', 3) for row in views]
+            widths = [len(max(columns, key=len)) for columns in zip(*views)]
+            views = [
+                '   '.join('{0:<{1}}'.format(cdata, width) for width, cdata in zip(widths, row))
+                for row in views
+            ]
+        elif format_style == 'table':
+            # Reformat all data and show in a table format
+
+            views = [row.split(',', 3) for row in views]
+            widths = [len(max(columns, key=len)) for columns in zip(*views)]
+            table_views = []
+
+            header = (style.MODULE_NAME('URL'), style.MODULE_NAME('Module'), style.MODULE_NAME('Name'), style.MODULE_NAME('Decorator'))
+            table_views.append(
+                ' | '.join('{0:<{1}}'.format(title, width) for width, title in zip(widths, header))
+            )
+            table_views.append('-+-'.join('-' * width for width in widths))
+
+            for row in views:
+                table_views.append(
+                    ' | '.join('{0:<{1}}'.format(cdata, width) for width, cdata in zip(widths, row))
+                )
+
+            # Replace original views so we can return the same object
+            views = table_views
+
+        return "\n".join([v for v in views]) + "\n"
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sqlcreate.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sqlcreate.py
new file mode 100644
index 0000000..93fb867
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sqlcreate.py
@@ -0,0 +1,74 @@
+import sys
+import socket
+
+from optparse import make_option
+
+from django.conf import settings
+from django.core.management.base import CommandError, BaseCommand
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('-R', '--router', action='store',
+                    dest='router', default='default',
+                    help='Use this router-database other then defined in settings.py'),
+        make_option('-D', '--drop', action='store_true',
+                    dest='drop', default=False,
+                    help='If given, includes commands to drop any existing user and database.'),
+    )
+    help = """Generates the SQL to create your database for you, as specified in settings.py
+The envisioned use case is something like this:
+
+    ./manage.py sqlcreate [--router=<routername>] | mysql -u <db_administrator> -p
+    ./manage.py sqlcreate [--router=<routername>] | psql -U <db_administrator> -W"""
+
+    requires_model_validation = False
+    can_import_settings = True
+
+    @signalcommand
+    def handle(self, *args, **options):
+        router = options.get('router')
+        dbinfo = settings.DATABASES.get(router)
+        if dbinfo is None:
+            raise CommandError("Unknown database router %s" % router)
+
+        engine = dbinfo.get('ENGINE').split('.')[-1]
+        dbuser = dbinfo.get('USER')
+        dbpass = dbinfo.get('PASSWORD')
+        dbname = dbinfo.get('NAME')
+        dbhost = dbinfo.get('HOST')
+        dbclient = socket.gethostname()
+
+        # django settings file tells you that localhost should be specified by leaving
+        # the DATABASE_HOST blank
+        if not dbhost:
+            dbhost = 'localhost'
+
+        if engine == 'mysql':
+            sys.stderr.write("""-- WARNING!: https://docs.djangoproject.com/en/dev/ref/databases/#collation-settings
+-- Please read this carefully! Collation will be set to utf8_bin to have case-sensitive data.
+""")
+            print("CREATE DATABASE %s CHARACTER SET utf8 COLLATE utf8_bin;" % dbname)
+            print("GRANT ALL PRIVILEGES ON %s.* to '%s'@'%s' identified by '%s';" % (
+                dbname, dbuser, dbclient, dbpass
+            ))
+
+        elif engine == 'postgresql_psycopg2':
+            if options.get('drop'):
+                print("DROP DATABASE IF EXISTS %s;" % (dbname,))
+                print("DROP USER IF EXISTS %s;" % (dbuser,))
+
+            print("CREATE USER %s WITH ENCRYPTED PASSWORD '%s' CREATEDB;" % (dbuser, dbpass))
+            print("CREATE DATABASE %s WITH ENCODING 'UTF-8' OWNER \"%s\";" % (dbname, dbuser))
+            print("GRANT ALL PRIVILEGES ON DATABASE %s TO %s;" % (dbname, dbuser))
+
+        elif engine == 'sqlite3':
+            sys.stderr.write("-- manage.py syncdb will automatically create a sqlite3 database file.\n")
+
+        else:
+            # CREATE DATABASE is not SQL standard, but seems to be supported by most.
+            sys.stderr.write("-- Don't know how to handle '%s' falling back to SQL.\n" % engine)
+            print("CREATE DATABASE %s;" % dbname)
+            print("GRANT ALL PRIVILEGES ON DATABASE %s to %s" % (dbname, dbuser))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sqldiff.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sqldiff.py
new file mode 100644
index 0000000..e853080
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sqldiff.py
@@ -0,0 +1,1003 @@
+"""
+sqldiff.py - Prints the (approximated) difference between models and database
+
+TODO:
+ - better support for relations
+ - better support for constraints (mainly postgresql?)
+ - support for table spaces with postgresql
+ - when a table is not managed (meta.managed==False) then only do a one-way
+   sqldiff ? show differences from db->table but not the other way around since
+   it's not managed.
+
+KNOWN ISSUES:
+ - MySQL has by far the most problems with introspection. Please be
+   carefull when using MySQL with sqldiff.
+   - Booleans are reported back as Integers, so there's no way to know if
+     there was a real change.
+   - Varchar sizes are reported back without unicode support so their size
+     may change in comparison to the real length of the varchar.
+   - Some of the 'fixes' to counter these problems might create false
+     positives or false negatives.
+"""
+
+import six
+import sys
+from optparse import make_option
+
+import django
+from django.core.management.base import BaseCommand
+from django.core.management import sql as _sql
+from django.core.management import CommandError
+from django.core.management.color import no_style
+from django.db import transaction, connection
+from django.db.models.fields import IntegerField, AutoField
+
+from django_extensions.management.utils import signalcommand
+
+try:
+    from django.core.management.base import OutputWrapper
+    HAS_OUTPUTWRAPPER = True
+except ImportError:
+    HAS_OUTPUTWRAPPER = False
+
+
+ORDERING_FIELD = IntegerField('_order', null=True)
+
+
+def flatten(l, ltypes=(list, tuple)):
+    ltype = type(l)
+    l = list(l)
+    i = 0
+    while i < len(l):
+        while isinstance(l[i], ltypes):
+            if not l[i]:
+                l.pop(i)
+                i -= 1
+                break
+            else:
+                l[i:i + 1] = l[i]
+        i += 1
+    return ltype(l)
+
+
+def all_local_fields(meta):
+    all_fields = []
+    if meta.proxy:
+        for parent in meta.parents:
+            all_fields.extend(all_local_fields(parent._meta))
+    else:
+        for f in meta.local_fields:
+            col_type = f.db_type(connection=connection)
+            if col_type is None:
+                continue
+            all_fields.append(f)
+    return all_fields
+
+
+class SQLDiff(object):
+    DATA_TYPES_REVERSE_OVERRIDE = {}
+
+    IGNORE_MISSING_TABLES = [
+        "django_migrations",
+        "south_migrationhistory",
+    ]
+
+    DIFF_TYPES = [
+        'error',
+        'comment',
+        'table-missing-in-db',
+        'table-missing-in-model',
+        'field-missing-in-db',
+        'field-missing-in-model',
+        'fkey-missing-in-db',
+        'fkey-missing-in-model',
+        'index-missing-in-db',
+        'index-missing-in-model',
+        'unique-missing-in-db',
+        'unique-missing-in-model',
+        'field-type-differ',
+        'field-parameter-differ',
+        'notnull-differ',
+    ]
+    DIFF_TEXTS = {
+        'error': 'error: %(0)s',
+        'comment': 'comment: %(0)s',
+        'table-missing-in-db': "table '%(0)s' missing in database",
+        'table-missing-in-model': "table '%(0)s' missing in models",
+        'field-missing-in-db': "field '%(1)s' defined in model but missing in database",
+        'field-missing-in-model': "field '%(1)s' defined in database but missing in model",
+        'fkey-missing-in-db': "field '%(1)s' FOREIGN KEY defined in model but missing in database",
+        'fkey-missing-in-model': "field '%(1)s' FOREIGN KEY defined in database but missing in model",
+        'index-missing-in-db': "field '%(1)s' INDEX defined in model but missing in database",
+        'index-missing-in-model': "field '%(1)s' INDEX defined in database schema but missing in model",
+        'unique-missing-in-db': "field '%(1)s' UNIQUE defined in model but missing in database",
+        'unique-missing-in-model': "field '%(1)s' UNIQUE defined in database schema but missing in model",
+        'field-type-differ': "field '%(1)s' not of same type: db='%(3)s', model='%(2)s'",
+        'field-parameter-differ': "field '%(1)s' parameters differ: db='%(3)s', model='%(2)s'",
+        'notnull-differ': "field '%(1)s' null constraint should be '%(2)s' in the database",
+    }
+
+    SQL_FIELD_MISSING_IN_DB = lambda self, style, qn, args: "%s %s\n\t%s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ADD COLUMN'), style.SQL_FIELD(qn(args[1])), ' '.join(style.SQL_COLTYPE(a) if i == 0 else style.SQL_KEYWORD(a) for i, a in enumerate(args[2:])))
+    SQL_FIELD_MISSING_IN_MODEL = lambda self, style, qn, args: "%s %s\n\t%s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('DROP COLUMN'), style.SQL_FIELD(qn(args[1])))
+    SQL_FKEY_MISSING_IN_DB = lambda self, style, qn, args: "%s %s\n\t%s %s %s %s %s (%s)%s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ADD COLUMN'), style.SQL_FIELD(qn(args[1])), ' '.join(style.SQL_COLTYPE(a) if i == 0 else style.SQL_KEYWORD(a) for i, a in enumerate(args[4:])), style.SQL_KEYWORD('REFERENCES'), style.SQL_TABLE(qn(args[2])), style.SQL_FIELD(qn(args[3])), connection.ops.deferrable_sql())
+    SQL_INDEX_MISSING_IN_DB = lambda self, style, qn, args: "%s %s\n\t%s %s (%s%s);" % (style.SQL_KEYWORD('CREATE INDEX'), style.SQL_TABLE(qn("%s" % '_'.join(a for a in args[0:3] if a))), style.SQL_KEYWORD('ON'), style.SQL_TABLE(qn(args[0])), style.SQL_FIELD(qn(args[1])), style.SQL_KEYWORD(args[3]))
+    # FIXME: need to lookup index name instead of just appending _idx to table + fieldname
+    SQL_INDEX_MISSING_IN_MODEL = lambda self, style, qn, args: "%s %s;" % (style.SQL_KEYWORD('DROP INDEX'), style.SQL_TABLE(qn("%s" % '_'.join(a for a in args[0:3] if a))))
+    SQL_UNIQUE_MISSING_IN_DB = lambda self, style, qn, args: "%s %s\n\t%s %s (%s);" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ADD'), style.SQL_KEYWORD('UNIQUE'), style.SQL_FIELD(qn(args[1])))
+    # FIXME: need to lookup unique constraint name instead of appending _key to table + fieldname
+    SQL_UNIQUE_MISSING_IN_MODEL = lambda self, style, qn, args: "%s %s\n\t%s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('DROP'), style.SQL_KEYWORD('CONSTRAINT'), style.SQL_TABLE(qn("%s_key" % ('_'.join(args[:2])))))
+    SQL_FIELD_TYPE_DIFFER = lambda self, style, qn, args: "%s %s\n\t%s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD("MODIFY"), style.SQL_FIELD(qn(args[1])), style.SQL_COLTYPE(args[2]))
+    SQL_FIELD_PARAMETER_DIFFER = lambda self, style, qn, args: "%s %s\n\t%s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD("MODIFY"), style.SQL_FIELD(qn(args[1])), style.SQL_COLTYPE(args[2]))
+    SQL_NOTNULL_DIFFER = lambda self, style, qn, args: "%s %s\n\t%s %s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('MODIFY'), style.SQL_FIELD(qn(args[1])), style.SQL_KEYWORD(args[2]), style.SQL_KEYWORD('NOT NULL'))
+    SQL_ERROR = lambda self, style, qn, args: style.NOTICE('-- Error: %s' % style.ERROR(args[0]))
+    SQL_COMMENT = lambda self, style, qn, args: style.NOTICE('-- Comment: %s' % style.SQL_TABLE(args[0]))
+    SQL_TABLE_MISSING_IN_DB = lambda self, style, qn, args: style.NOTICE('-- Table missing: %s' % args[0])
+    SQL_TABLE_MISSING_IN_MODEL = lambda self, style, qn, args: style.NOTICE('-- Model missing for table: %s' % args[0])
+
+    can_detect_notnull_differ = False
+    can_detect_unsigned_differ = False
+    unsigned_suffix = None
+
+    def __init__(self, app_models, options):
+        self.has_differences = None
+        self.app_models = app_models
+        self.options = options
+        self.dense = options.get('dense_output', False)
+
+        try:
+            self.introspection = connection.introspection
+        except AttributeError:
+            from django.db import get_introspection_module
+            self.introspection = get_introspection_module()
+
+        self.cursor = connection.cursor()
+        self.django_tables = self.get_django_tables(options.get('only_existing', True))
+        self.db_tables = self.introspection.get_table_list(self.cursor)
+        self.differences = []
+        self.unknown_db_fields = {}
+        self.new_db_fields = set()
+        self.null = {}
+        self.unsigned = set()
+
+        self.DIFF_SQL = {
+            'error': self.SQL_ERROR,
+            'comment': self.SQL_COMMENT,
+            'table-missing-in-db': self.SQL_TABLE_MISSING_IN_DB,
+            'table-missing-in-model': self.SQL_TABLE_MISSING_IN_MODEL,
+            'field-missing-in-db': self.SQL_FIELD_MISSING_IN_DB,
+            'field-missing-in-model': self.SQL_FIELD_MISSING_IN_MODEL,
+            'fkey-missing-in-db': self.SQL_FKEY_MISSING_IN_DB,
+            'fkey-missing-in-model': self.SQL_FIELD_MISSING_IN_MODEL,
+            'index-missing-in-db': self.SQL_INDEX_MISSING_IN_DB,
+            'index-missing-in-model': self.SQL_INDEX_MISSING_IN_MODEL,
+            'unique-missing-in-db': self.SQL_UNIQUE_MISSING_IN_DB,
+            'unique-missing-in-model': self.SQL_UNIQUE_MISSING_IN_MODEL,
+            'field-type-differ': self.SQL_FIELD_TYPE_DIFFER,
+            'field-parameter-differ': self.SQL_FIELD_PARAMETER_DIFFER,
+            'notnull-differ': self.SQL_NOTNULL_DIFFER,
+        }
+
+        if self.can_detect_notnull_differ:
+            self.load_null()
+
+        if self.can_detect_unsigned_differ:
+            self.load_unsigned()
+
+    def load_null(self):
+        raise NotImplementedError("load_null functions must be implemented if diff backend has 'can_detect_notnull_differ' set to True")
+
+    def load_unsigned(self):
+        raise NotImplementedError("load_unsigned function must be implemented if diff backend has 'can_detect_unsigned_differ' set to True")
+
+    def add_app_model_marker(self, app_label, model_name):
+        self.differences.append((app_label, model_name, []))
+
+    def add_difference(self, diff_type, *args):
+        assert diff_type in self.DIFF_TYPES, 'Unknown difference type'
+        self.differences[-1][-1].append((diff_type, args))
+
+    def get_django_tables(self, only_existing):
+        try:
+            django_tables = self.introspection.django_table_names(only_existing=only_existing)
+        except AttributeError:
+            # backwards compatibility for before introspection refactoring (r8296)
+            try:
+                django_tables = _sql.django_table_names(only_existing=only_existing)
+            except AttributeError:
+                # backwards compatibility for before svn r7568
+                django_tables = _sql.django_table_list(only_existing=only_existing)
+        return django_tables
+
+    def sql_to_dict(self, query, param):
+        """ sql_to_dict(query, param) -> list of dicts
+
+        code from snippet at http://www.djangosnippets.org/snippets/1383/
+        """
+        cursor = connection.cursor()
+        cursor.execute(query, param)
+        fieldnames = [name[0] for name in cursor.description]
+        result = []
+        for row in cursor.fetchall():
+            rowset = []
+            for field in zip(fieldnames, row):
+                rowset.append(field)
+            result.append(dict(rowset))
+        return result
+
+    def get_field_model_type(self, field):
+        return field.db_type(connection=connection)
+
+    def get_field_db_type(self, description, field=None, table_name=None):
+        from django.db import models
+        # DB-API cursor.description
+        #(name, type_code, display_size, internal_size, precision, scale, null_ok) = description
+        type_code = description[1]
+        if type_code in self.DATA_TYPES_REVERSE_OVERRIDE:
+            reverse_type = self.DATA_TYPES_REVERSE_OVERRIDE[type_code]
+        else:
+            try:
+                try:
+                    reverse_type = self.introspection.data_types_reverse[type_code]
+                except AttributeError:
+                    # backwards compatibility for before introspection refactoring (r8296)
+                    reverse_type = self.introspection.DATA_TYPES_REVERSE.get(type_code)
+            except KeyError:
+                reverse_type = self.get_field_db_type_lookup(type_code)
+                if not reverse_type:
+                    # type_code not found in data_types_reverse map
+                    key = (self.differences[-1][:2], description[:2])
+                    if key not in self.unknown_db_fields:
+                        self.unknown_db_fields[key] = 1
+                        self.add_difference('comment', "Unknown database type for field '%s' (%s)" % (description[0], type_code))
+                    return None
+
+        kwargs = {}
+        if type_code == 16946 and field and getattr(field, 'geom_type', None) == 'POINT':
+            reverse_type = 'django.contrib.gis.db.models.fields.PointField'
+
+        if isinstance(reverse_type, tuple):
+            kwargs.update(reverse_type[1])
+            reverse_type = reverse_type[0]
+
+        if reverse_type == "CharField" and description[3]:
+            kwargs['max_length'] = description[3]
+
+        if reverse_type == "DecimalField":
+            kwargs['max_digits'] = description[4]
+            kwargs['decimal_places'] = description[5] and abs(description[5]) or description[5]
+
+        if description[6]:
+            kwargs['blank'] = True
+            if reverse_type not in ('TextField', 'CharField'):
+                kwargs['null'] = True
+
+        if field and getattr(field, 'geography', False):
+            kwargs['geography'] = True
+
+        if '.' in reverse_type:
+            from django.utils import importlib
+            # TODO: when was importlib added to django.utils ? and do we
+            # need to add backwards compatibility code ?
+            module_path, package_name = reverse_type.rsplit('.', 1)
+            module = importlib.import_module(module_path)
+            field_db_type = getattr(module, package_name)(**kwargs).db_type(connection=connection)
+        else:
+            field_db_type = getattr(models, reverse_type)(**kwargs).db_type(connection=connection)
+
+        tablespace = field.db_tablespace
+        if not tablespace:
+            tablespace = "public"
+        if (tablespace, table_name, field.column) in self.unsigned:
+            field_db_type = '%s %s' % (field_db_type, self.unsigned_suffix)
+
+        return field_db_type
+
+    def get_field_db_type_lookup(self, type_code):
+        return None
+
+    def get_field_db_nullable(self, field, table_name):
+        tablespace = field.db_tablespace
+        if tablespace == "":
+            tablespace = "public"
+        attname = field.db_column or field.attname
+        return self.null.get((tablespace, table_name, attname), 'fixme')
+
+    def strip_parameters(self, field_type):
+        if field_type and field_type != 'double precision':
+            return field_type.split(" ")[0].split("(")[0].lower()
+        return field_type
+
+    def find_unique_missing_in_db(self, meta, table_indexes, table_constraints, table_name):
+        for field in all_local_fields(meta):
+            if field.unique and meta.managed:
+                attname = field.db_column or field.attname
+                db_field_unique = table_indexes[attname]['unique']
+                if not db_field_unique and table_constraints:
+                    db_field_unique = any(constraint['unique'] for contraint_name, constraint in six.iteritems(table_constraints) if attname in constraint['columns'])
+                if attname in table_indexes and db_field_unique:
+                    continue
+                self.add_difference('unique-missing-in-db', table_name, attname)
+
+    def find_unique_missing_in_model(self, meta, table_indexes, table_constraints, table_name):
+        # TODO: Postgresql does not list unique_togethers in table_indexes
+        #       MySQL does
+        fields = dict([(field.db_column or field.name, field.unique) for field in all_local_fields(meta)])
+        for att_name, att_opts in six.iteritems(table_indexes):
+            db_field_unique = att_opts['unique']
+            if not db_field_unique and table_constraints:
+                db_field_unique = any(constraint['unique'] for contraint_name, constraint in six.iteritems(table_constraints) if att_name in constraint['columns'])
+            if db_field_unique and att_name in fields and not fields[att_name]:
+                if att_name in flatten(meta.unique_together):
+                    continue
+                self.add_difference('unique-missing-in-model', table_name, att_name)
+
+    def find_index_missing_in_db(self, meta, table_indexes, table_constraints, table_name):
+        for field in all_local_fields(meta):
+            if field.db_index:
+                attname = field.db_column or field.attname
+                if attname not in table_indexes:
+                    self.add_difference('index-missing-in-db', table_name, attname, '', '')
+                    db_type = field.db_type(connection=connection)
+                    if db_type.startswith('varchar'):
+                        self.add_difference('index-missing-in-db', table_name, attname, 'like', ' varchar_pattern_ops')
+                    if db_type.startswith('text'):
+                        self.add_difference('index-missing-in-db', table_name, attname, 'like', ' text_pattern_ops')
+
+    def find_index_missing_in_model(self, meta, table_indexes, table_constraints, table_name):
+        fields = dict([(field.name, field) for field in all_local_fields(meta)])
+        for att_name, att_opts in six.iteritems(table_indexes):
+            if att_name in fields:
+                field = fields[att_name]
+                db_field_unique = att_opts['unique']
+                if not db_field_unique and table_constraints:
+                    db_field_unique = any(constraint['unique'] for contraint_name, constraint in six.iteritems(table_constraints) if att_name in constraint['columns'])
+                if field.db_index:
+                    continue
+                if getattr(field, 'spatial_index', False):
+                    continue
+                if att_opts['primary_key'] and field.primary_key:
+                    continue
+                if db_field_unique and field.unique:
+                    continue
+                if db_field_unique and att_name in flatten(meta.unique_together):
+                    continue
+                self.add_difference('index-missing-in-model', table_name, att_name)
+                db_type = field.db_type(connection=connection)
+                if db_type.startswith('varchar') or db_type.startswith('text'):
+                    self.add_difference('index-missing-in-model', table_name, att_name, 'like')
+
+    def find_field_missing_in_model(self, fieldmap, table_description, table_name):
+        for row in table_description:
+            if row[0] not in fieldmap:
+                self.add_difference('field-missing-in-model', table_name, row[0])
+
+    def find_field_missing_in_db(self, fieldmap, table_description, table_name):
+        db_fields = [row[0] for row in table_description]
+        for field_name, field in six.iteritems(fieldmap):
+            if field_name not in db_fields:
+                field_output = []
+                if field.rel:
+                    field_output.extend([field.rel.to._meta.db_table, field.rel.to._meta.get_field(field.rel.field_name).column])
+                    op = 'fkey-missing-in-db'
+                else:
+                    op = 'field-missing-in-db'
+                field_output.append(field.db_type(connection=connection))
+                if not field.null:
+                    field_output.append('NOT NULL')
+                self.add_difference(op, table_name, field_name, *field_output)
+                self.new_db_fields.add((table_name, field_name))
+
+    def find_field_type_differ(self, meta, table_description, table_name, func=None):
+        db_fields = dict([(row[0], row) for row in table_description])
+        for field in all_local_fields(meta):
+            if field.name not in db_fields:
+                continue
+            description = db_fields[field.name]
+
+            model_type = self.get_field_model_type(field)
+            db_type = self.get_field_db_type(description, field, table_name)
+
+            # use callback function if defined
+            if func:
+                model_type, db_type = func(field, description, model_type, db_type)
+
+            if not self.strip_parameters(db_type) == self.strip_parameters(model_type):
+                self.add_difference('field-type-differ', table_name, field.name, model_type, db_type)
+
+    def find_field_parameter_differ(self, meta, table_description, table_name, func=None):
+        db_fields = dict([(row[0], row) for row in table_description])
+        for field in all_local_fields(meta):
+            if field.name not in db_fields:
+                continue
+            description = db_fields[field.name]
+
+            model_type = self.get_field_model_type(field)
+            db_type = self.get_field_db_type(description, field, table_name)
+
+            if not self.strip_parameters(model_type) == self.strip_parameters(db_type):
+                continue
+
+            # use callback function if defined
+            if func:
+                model_type, db_type = func(field, description, model_type, db_type)
+
+            if django.VERSION[:2] >= (1, 7):
+                # Django >=1.7
+                model_check = field.db_parameters(connection=connection)['check']
+                if ' CHECK' in db_type:
+                    db_type, db_check = db_type.split(" CHECK", 1)
+                    db_check = db_check.strip().lstrip("(").rstrip(")")
+                else:
+                    db_check = None
+                if not model_type == db_type and not model_check == db_check:
+                    self.add_difference('field-parameter-differ', table_name, field.name, model_type, db_type)
+            else:
+                # Django <1.7
+                if not model_type == db_type:
+                    self.add_difference('field-parameter-differ', table_name, field.name, model_type, db_type)
+
+    def find_field_notnull_differ(self, meta, table_description, table_name):
+        if not self.can_detect_notnull_differ:
+            return
+
+        for field in all_local_fields(meta):
+            attname = field.db_column or field.attname
+            if (table_name, attname) in self.new_db_fields:
+                continue
+            null = self.get_field_db_nullable(field, table_name)
+            if field.null != null:
+                action = field.null and 'DROP' or 'SET'
+                self.add_difference('notnull-differ', table_name, attname, action)
+
+    def get_constraints(self, cursor, table_name, introspection):
+        return {}
+
+    def find_differences(self):
+        if self.options['all_applications']:
+            self.add_app_model_marker(None, None)
+            for table in self.db_tables:
+                if table not in self.django_tables and table not in self.IGNORE_MISSING_TABLES:
+                    self.add_difference('table-missing-in-model', table)
+
+        cur_app_label = None
+        for app_model in self.app_models:
+            meta = app_model._meta
+            table_name = meta.db_table
+            app_label = meta.app_label
+
+            if cur_app_label != app_label:
+                # Marker indicating start of difference scan for this table_name
+                self.add_app_model_marker(app_label, app_model.__name__)
+
+            if table_name not in self.db_tables:
+                # Table is missing from database
+                self.add_difference('table-missing-in-db', table_name)
+                continue
+
+            table_indexes = self.introspection.get_indexes(self.cursor, table_name)
+            if hasattr(self.introspection, 'get_constraints'):
+                table_constraints = self.introspection.get_constraints(self.cursor, table_name)
+            else:
+                table_constraints = self.get_constraints(self.cursor, table_name, self.introspection)
+
+            fieldmap = dict([(field.db_column or field.get_attname(), field) for field in all_local_fields(meta)])
+
+            # add ordering field if model uses order_with_respect_to
+            if meta.order_with_respect_to:
+                fieldmap['_order'] = ORDERING_FIELD
+
+            try:
+                table_description = self.introspection.get_table_description(self.cursor, table_name)
+            except Exception as e:
+                self.add_difference('error', 'unable to introspect table: %s' % str(e).strip())
+                transaction.rollback()  # reset transaction
+                continue
+
+            # Fields which are defined in database but not in model
+            # 1) find: 'unique-missing-in-model'
+            self.find_unique_missing_in_model(meta, table_indexes, table_constraints, table_name)
+            # 2) find: 'index-missing-in-model'
+            self.find_index_missing_in_model(meta, table_indexes, table_constraints, table_name)
+            # 3) find: 'field-missing-in-model'
+            self.find_field_missing_in_model(fieldmap, table_description, table_name)
+
+            # Fields which are defined in models but not in database
+            # 4) find: 'field-missing-in-db'
+            self.find_field_missing_in_db(fieldmap, table_description, table_name)
+            # 5) find: 'unique-missing-in-db'
+            self.find_unique_missing_in_db(meta, table_indexes, table_constraints, table_name)
+            # 6) find: 'index-missing-in-db'
+            self.find_index_missing_in_db(meta, table_indexes, table_constraints, table_name)
+
+            # Fields which have a different type or parameters
+            # 7) find: 'type-differs'
+            self.find_field_type_differ(meta, table_description, table_name)
+            # 8) find: 'type-parameter-differs'
+            self.find_field_parameter_differ(meta, table_description, table_name)
+            # 9) find: 'field-notnull'
+            self.find_field_notnull_differ(meta, table_description, table_name)
+        self.has_differences = max([len(diffs) for _app_label, _model_name, diffs in self.differences])
+
+    def print_diff(self, style=no_style()):
+        """ print differences to stdout """
+        if self.options.get('sql', True):
+            self.print_diff_sql(style)
+        else:
+            self.print_diff_text(style)
+
+    def print_diff_text(self, style):
+        if not self.can_detect_notnull_differ:
+            print(style.NOTICE("# Detecting notnull changes not implemented for this database backend"))
+            print("")
+
+        if not self.can_detect_unsigned_differ:
+            print(style.NOTICE("# Detecting unsigned changes not implemented for this database backend"))
+            print("")
+
+        cur_app_label = None
+        for app_label, model_name, diffs in self.differences:
+            if not diffs:
+                continue
+            if not self.dense and app_label and cur_app_label != app_label:
+                print("%s %s" % (style.NOTICE("+ Application:"), style.SQL_TABLE(app_label)))
+                cur_app_label = app_label
+            if not self.dense and model_name:
+                print("%s %s" % (style.NOTICE("|-+ Differences for model:"), style.SQL_TABLE(model_name)))
+            for diff in diffs:
+                diff_type, diff_args = diff
+                text = self.DIFF_TEXTS[diff_type] % dict((str(i), style.SQL_TABLE(e)) for i, e in enumerate(diff_args))
+                text = "'".join(i % 2 == 0 and style.ERROR(e) or e for i, e in enumerate(text.split("'")))
+                if not self.dense:
+                    print("%s %s" % (style.NOTICE("|--+"), text))
+                else:
+                    if app_label:
+                        print("%s %s %s %s %s" % (style.NOTICE("App"), style.SQL_TABLE(app_label), style.NOTICE('Model'), style.SQL_TABLE(model_name), text))
+                    else:
+                        print(text)
+
+    def print_diff_sql(self, style):
+        if not self.can_detect_notnull_differ:
+            print(style.NOTICE("-- Detecting notnull changes not implemented for this database backend"))
+            print("")
+
+        cur_app_label = None
+        qn = connection.ops.quote_name
+        if not self.has_differences:
+            if not self.dense:
+                print(style.SQL_KEYWORD("-- No differences"))
+        else:
+            print(style.SQL_KEYWORD("BEGIN;"))
+            for app_label, model_name, diffs in self.differences:
+                if not diffs:
+                    continue
+                if not self.dense and cur_app_label != app_label:
+                    print(style.NOTICE("-- Application: %s" % style.SQL_TABLE(app_label)))
+                    cur_app_label = app_label
+                if not self.dense and model_name:
+                    print(style.NOTICE("-- Model: %s" % style.SQL_TABLE(model_name)))
+                for diff in diffs:
+                    diff_type, diff_args = diff
+                    text = self.DIFF_SQL[diff_type](style, qn, diff_args)
+                    if self.dense:
+                        text = text.replace("\n\t", " ")
+                    print(text)
+            print(style.SQL_KEYWORD("COMMIT;"))
+
+
+class GenericSQLDiff(SQLDiff):
+    can_detect_notnull_differ = False
+
+
+class MySQLDiff(SQLDiff):
+    can_detect_notnull_differ = True
+    can_detect_unsigned_differ = True
+    unsigned_suffix = 'UNSIGNED'
+
+    def __init__(self, app_models, options):
+        super(MySQLDiff, self).__init__(app_models, options)
+        self.auto_increment = set()
+        self.load_auto_increment()
+        if not getattr(connection.features, 'can_introspect_small_integer_field', False):
+            from MySQLdb.constants import FIELD_TYPE
+            # Django version < 1.8 does not support MySQL small integer introspection, adding override.
+            self.DATA_TYPES_REVERSE_OVERRIDE[FIELD_TYPE.SHORT] = 'SmallIntegerField'
+
+    def load_null(self):
+        tablespace = 'public'
+        for table_name in self.db_tables:
+            result = self.sql_to_dict("""
+                SELECT column_name, is_nullable
+                FROM information_schema.columns
+                WHERE table_schema = DATABASE()
+                    AND table_name = %s""", [table_name])
+            for table_info in result:
+                key = (tablespace, table_name, table_info['column_name'])
+                self.null[key] = table_info['is_nullable'] == 'YES'
+
+    def load_unsigned(self):
+        tablespace = 'public'
+        for table_name in self.db_tables:
+            result = self.sql_to_dict("""
+                SELECT column_name
+                FROM information_schema.columns
+                WHERE table_schema = DATABASE()
+                    AND table_name = %s
+                    AND column_type LIKE '%%unsigned'""", [table_name])
+            for table_info in result:
+                key = (tablespace, table_name, table_info['column_name'])
+                self.unsigned.add(key)
+
+    def load_auto_increment(self):
+        for table_name in self.db_tables:
+            result = self.sql_to_dict("""
+                SELECT column_name
+                FROM information_schema.columns
+                WHERE table_schema = DATABASE()
+                   AND table_name = %s
+                   AND extra = 'auto_increment'""", [table_name])
+            for table_info in result:
+                key = (table_name, table_info['column_name'])
+                self.auto_increment.add(key)
+
+    # All the MySQL hacks together create something of a problem
+    # Fixing one bug in MySQL creates another issue. So just keep in mind
+    # that this is way unreliable for MySQL atm.
+    def get_field_db_type(self, description, field=None, table_name=None):
+        from MySQLdb.constants import FIELD_TYPE
+        db_type = super(MySQLDiff, self).get_field_db_type(description, field, table_name)
+        if not db_type:
+            return
+        if field:
+            # MySQL isn't really sure about char's and varchar's like sqlite
+            field_type = self.get_field_model_type(field)
+            # Fix char/varchar inconsistencies
+            if self.strip_parameters(field_type) == 'char' and self.strip_parameters(db_type) == 'varchar':
+                db_type = db_type.lstrip("var")
+            # They like to call 'bool's 'tinyint(1)' and introspection makes that a integer
+            # just convert it back to it's proper type, a bool is a bool and nothing else.
+            if db_type == 'integer' and description[1] == FIELD_TYPE.TINY and description[4] == 1:
+                db_type = 'bool'
+            if (table_name, field.column) in self.auto_increment:
+                db_type += ' AUTO_INCREMENT'
+        return db_type
+
+
+class SqliteSQLDiff(SQLDiff):
+    can_detect_notnull_differ = True
+
+    def load_null(self):
+        for table_name in self.db_tables:
+            # sqlite does not support tablespaces
+            tablespace = "public"
+            # index, column_name, column_type, nullable, default_value
+            # see: http://www.sqlite.org/pragma.html#pragma_table_info
+            for table_info in self.sql_to_dict("PRAGMA table_info(%s);" % table_name, []):
+                key = (tablespace, table_name, table_info['name'])
+                self.null[key] = not table_info['notnull']
+
+    # Unique does not seem to be implied on Sqlite for Primary_key's
+    # if this is more generic among databases this might be usefull
+    # to add to the superclass's find_unique_missing_in_db method
+    def find_unique_missing_in_db(self, meta, table_indexes, table_constraints, table_name):
+        for field in all_local_fields(meta):
+            if field.unique:
+                attname = field.db_column or field.attname
+                if attname in table_indexes and table_indexes[attname]['unique']:
+                    continue
+                if attname in table_indexes and table_indexes[attname]['primary_key']:
+                    continue
+                self.add_difference('unique-missing-in-db', table_name, attname)
+
+    # Finding Indexes by using the get_indexes dictionary doesn't seem to work
+    # for sqlite.
+    def find_index_missing_in_db(self, meta, table_indexes, table_constraints, table_name):
+        pass
+
+    def find_index_missing_in_model(self, meta, table_indexes, table_constraints, table_name):
+        pass
+
+    def get_field_db_type(self, description, field=None, table_name=None):
+        db_type = super(SqliteSQLDiff, self).get_field_db_type(description, field, table_name)
+        if not db_type:
+            return
+        if field:
+            field_type = self.get_field_model_type(field)
+            # Fix char/varchar inconsistencies
+            if self.strip_parameters(field_type) == 'char' and self.strip_parameters(db_type) == 'varchar':
+                db_type = db_type.lstrip("var")
+        return db_type
+
+
+class PostgresqlSQLDiff(SQLDiff):
+    can_detect_notnull_differ = True
+    can_detect_unsigned_differ = True
+
+    DATA_TYPES_REVERSE_OVERRIDE = {
+        1042: 'CharField',
+        # postgis types (TODO: support is very incomplete)
+        17506: 'django.contrib.gis.db.models.fields.PointField',
+        16392: 'django.contrib.gis.db.models.fields.PointField',
+        55902: 'django.contrib.gis.db.models.fields.MultiPolygonField',
+        16946: 'django.contrib.gis.db.models.fields.MultiPolygonField'
+    }
+
+    DATA_TYPES_REVERSE_NAME = {
+        'hstore': 'django_hstore.hstore.DictionaryField',
+    }
+
+    # Hopefully in the future we can add constraint checking and other more
+    # advanced checks based on this database.
+    SQL_LOAD_CONSTRAINTS = """
+    SELECT nspname, relname, conname, attname, pg_get_constraintdef(pg_constraint.oid)
+    FROM pg_constraint
+    INNER JOIN pg_attribute ON pg_constraint.conrelid = pg_attribute.attrelid AND pg_attribute.attnum = any(pg_constraint.conkey)
+    INNER JOIN pg_class ON conrelid=pg_class.oid
+    INNER JOIN pg_namespace ON pg_namespace.oid=pg_class.relnamespace
+    ORDER BY CASE WHEN contype='f' THEN 0 ELSE 1 END,contype,nspname,relname,conname;
+    """
+    SQL_LOAD_NULL = """
+    SELECT nspname, relname, attname, attnotnull
+    FROM pg_attribute
+    INNER JOIN pg_class ON attrelid=pg_class.oid
+    INNER JOIN pg_namespace ON pg_namespace.oid=pg_class.relnamespace;
+    """
+
+    SQL_FIELD_TYPE_DIFFER = lambda self, style, qn, args: "%s %s\n\t%s %s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ALTER'), style.SQL_FIELD(qn(args[1])), style.SQL_KEYWORD("TYPE"), style.SQL_COLTYPE(args[2]))
+    SQL_FIELD_PARAMETER_DIFFER = lambda self, style, qn, args: "%s %s\n\t%s %s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ALTER'), style.SQL_FIELD(qn(args[1])), style.SQL_KEYWORD("TYPE"), style.SQL_COLTYPE(args[2]))
+    SQL_NOTNULL_DIFFER = lambda self, style, qn, args: "%s %s\n\t%s %s %s %s;" % (style.SQL_KEYWORD('ALTER TABLE'), style.SQL_TABLE(qn(args[0])), style.SQL_KEYWORD('ALTER COLUMN'), style.SQL_FIELD(qn(args[1])), style.SQL_KEYWORD(args[2]), style.SQL_KEYWORD('NOT NULL'))
+
+    def __init__(self, app_models, options):
+        super(PostgresqlSQLDiff, self).__init__(app_models, options)
+        self.check_constraints = {}
+        self.load_constraints()
+
+    def load_null(self):
+        for dct in self.sql_to_dict(self.SQL_LOAD_NULL, []):
+            key = (dct['nspname'], dct['relname'], dct['attname'])
+            self.null[key] = not dct['attnotnull']
+
+    def load_unsigned(self):
+        # PostgreSQL does not support unsigned, so no columns are
+        # unsigned. Nothing to do.
+        pass
+
+    def load_constraints(self):
+        for dct in self.sql_to_dict(self.SQL_LOAD_CONSTRAINTS, []):
+            key = (dct['nspname'], dct['relname'], dct['attname'])
+            if 'CHECK' in dct['pg_get_constraintdef']:
+                self.check_constraints[key] = dct
+
+    def get_constraints(self, cursor, table_name, introspection):
+        """ backport of django's introspection.get_constraints(...) """
+        constraints = {}
+        # Loop over the key table, collecting things as constraints
+        # This will get PKs, FKs, and uniques, but not CHECK
+        cursor.execute("""
+            SELECT
+                kc.constraint_name,
+                kc.column_name,
+                c.constraint_type,
+                array(SELECT table_name::text || '.' || column_name::text FROM information_schema.constraint_column_usage WHERE constraint_name = kc.constraint_name)
+            FROM information_schema.key_column_usage AS kc
+            JOIN information_schema.table_constraints AS c ON
+                kc.table_schema = c.table_schema AND
+                kc.table_name = c.table_name AND
+                kc.constraint_name = c.constraint_name
+            WHERE
+                kc.table_schema = %s AND
+                kc.table_name = %s
+        """, ["public", table_name])
+        for constraint, column, kind, used_cols in cursor.fetchall():
+            # If we're the first column, make the record
+            if constraint not in constraints:
+                constraints[constraint] = {
+                    "columns": [],
+                    "primary_key": kind.lower() == "primary key",
+                    "unique": kind.lower() in ["primary key", "unique"],
+                    "foreign_key": tuple(used_cols[0].split(".", 1)) if kind.lower() == "foreign key" else None,
+                    "check": False,
+                    "index": False,
+                }
+            # Record the details
+            constraints[constraint]['columns'].append(column)
+        # Now get CHECK constraint columns
+        cursor.execute("""
+            SELECT kc.constraint_name, kc.column_name
+            FROM information_schema.constraint_column_usage AS kc
+            JOIN information_schema.table_constraints AS c ON
+                kc.table_schema = c.table_schema AND
+                kc.table_name = c.table_name AND
+                kc.constraint_name = c.constraint_name
+            WHERE
+                c.constraint_type = 'CHECK' AND
+                kc.table_schema = %s AND
+                kc.table_name = %s
+        """, ["public", table_name])
+        for constraint, column in cursor.fetchall():
+            # If we're the first column, make the record
+            if constraint not in constraints:
+                constraints[constraint] = {
+                    "columns": [],
+                    "primary_key": False,
+                    "unique": False,
+                    "foreign_key": None,
+                    "check": True,
+                    "index": False,
+                }
+            # Record the details
+            constraints[constraint]['columns'].append(column)
+        # Now get indexes
+        cursor.execute("""
+            SELECT
+                c2.relname,
+                ARRAY(
+                    SELECT (SELECT attname FROM pg_catalog.pg_attribute WHERE attnum = i AND attrelid = c.oid)
+                    FROM unnest(idx.indkey) i
+                ),
+                idx.indisunique,
+                idx.indisprimary
+            FROM pg_catalog.pg_class c, pg_catalog.pg_class c2,
+                pg_catalog.pg_index idx
+            WHERE c.oid = idx.indrelid
+                AND idx.indexrelid = c2.oid
+                AND c.relname = %s
+        """, [table_name])
+        for index, columns, unique, primary in cursor.fetchall():
+            if index not in constraints:
+                constraints[index] = {
+                    "columns": list(columns),
+                    "primary_key": primary,
+                    "unique": unique,
+                    "foreign_key": None,
+                    "check": False,
+                    "index": True,
+                }
+        return constraints
+
+    def get_field_db_type(self, description, field=None, table_name=None):
+        db_type = super(PostgresqlSQLDiff, self).get_field_db_type(description, field, table_name)
+        if not db_type:
+            return
+        if field:
+            if field.primary_key and isinstance(field, AutoField):
+                if db_type == 'integer':
+                    db_type = 'serial'
+                elif db_type == 'bigint':
+                    db_type = 'bigserial'
+            if table_name:
+                tablespace = field.db_tablespace
+                if tablespace == "":
+                    tablespace = "public"
+                attname = field.db_column or field.attname
+                check_constraint = self.check_constraints.get((tablespace, table_name, attname), {}).get('pg_get_constraintdef', None)
+                if check_constraint:
+                    check_constraint = check_constraint.replace("((", "(")
+                    check_constraint = check_constraint.replace("))", ")")
+                    check_constraint = '("'.join([')' in e and '" '.join(p.strip('"') for p in e.split(" ", 1)) or e for e in check_constraint.split("(")])
+                    # TODO: might be more then one constraint in definition ?
+                    db_type += ' ' + check_constraint
+        return db_type
+
+    def get_field_db_type_lookup(self, type_code):
+        try:
+            name = self.sql_to_dict("SELECT typname FROM pg_type WHERE typelem=%s;", [type_code])[0]['typname']
+            return self.DATA_TYPES_REVERSE_NAME.get(name.strip('_'))
+        except (IndexError, KeyError):
+            pass
+
+    """
+    def find_field_type_differ(self, meta, table_description, table_name):
+        def callback(field, description, model_type, db_type):
+            if field.primary_key and db_type=='integer':
+                db_type = 'serial'
+            return model_type, db_type
+        super(PostgresqlSQLDiff, self).find_field_type_differ(meta, table_description, table_name, callback)
+    """
+
+DATABASE_SQLDIFF_CLASSES = {
+    'postgis': PostgresqlSQLDiff,
+    'postgresql_psycopg2': PostgresqlSQLDiff,
+    'postgresql': PostgresqlSQLDiff,
+    'mysql': MySQLDiff,
+    'sqlite3': SqliteSQLDiff,
+    'oracle': GenericSQLDiff
+}
+
+
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--all-applications', '-a', action='store_true', dest='all_applications',
+                    help="Automaticly include all application from INSTALLED_APPS."),
+        make_option('--not-only-existing', '-e', action='store_false', dest='only_existing',
+                    help="Check all tables that exist in the database, not only tables that should exist based on models."),
+        make_option('--dense-output', '-d', action='store_true', dest='dense_output',
+                    help="Shows the output in dense format, normally output is spreaded over multiple lines."),
+        make_option('--output_text', '-t', action='store_false', dest='sql', default=True,
+                    help="Outputs the differences as descriptive text instead of SQL"),
+    )
+
+    help = """Prints the (approximated) difference between models and fields in the database for the given app name(s).
+
+It indicates how columns in the database are different from the sql that would
+be generated by Django. This command is not a database migration tool. (Though
+it can certainly help) It's purpose is to show the current differences as a way
+to check/debug ur models compared to the real database tables and columns."""
+
+    output_transaction = False
+    args = '<appname appname ...>'
+
+    def __init__(self, *args, **kwargs):
+        super(Command, self).__init__(*args, **kwargs)
+        self.exit_code = 1
+
+    @signalcommand
+    def handle(self, *app_labels, **options):
+        from django.db import models
+        from django.conf import settings
+
+        engine = None
+        if hasattr(settings, 'DATABASES'):
+            engine = settings.DATABASES['default']['ENGINE']
+        else:
+            engine = settings.DATABASE_ENGINE
+
+        if engine == 'dummy':
+            # This must be the "dummy" database backend, which means the user
+            # hasn't set DATABASE_ENGINE.
+            raise CommandError("""Django doesn't know which syntax to use for your SQL statements,
+because you haven't specified the DATABASE_ENGINE setting.
+Edit your settings file and change DATABASE_ENGINE to something like 'postgresql' or 'mysql'.""")
+
+        if options.get('all_applications', False):
+            app_models = models.get_models(include_auto_created=True)
+        else:
+            if not app_labels:
+                raise CommandError('Enter at least one appname.')
+            try:
+                app_list = [models.get_app(app_label) for app_label in app_labels]
+            except (models.ImproperlyConfigured, ImportError) as e:
+                raise CommandError("%s. Are you sure your INSTALLED_APPS setting is correct?" % e)
+
+            app_models = []
+            for app in app_list:
+                app_models.extend(models.get_models(app, include_auto_created=True))
+
+        ## remove all models that are not managed by Django
+        #app_models = [model for model in app_models if getattr(model._meta, 'managed', True)]
+
+        if not app_models:
+            raise CommandError('Unable to execute sqldiff no models founds.')
+
+        if not engine:
+            engine = connection.__module__.split('.')[-2]
+
+        if '.' in engine:
+            engine = engine.split('.')[-1]
+
+        cls = DATABASE_SQLDIFF_CLASSES.get(engine, GenericSQLDiff)
+        sqldiff_instance = cls(app_models, options)
+        sqldiff_instance.find_differences()
+        if not sqldiff_instance.has_differences:
+            self.exit_code = 0
+        sqldiff_instance.print_diff(self.style)
+
+    def execute(self, *args, **options):
+        try:
+            super(Command, self).execute(*args, **options)
+        except CommandError as e:
+            if options.get('traceback', False):
+                raise
+
+            # self.stderr is not guaranteed to be set here
+            stderr = getattr(self, 'stderr', None)
+            if not stderr:
+                if HAS_OUTPUTWRAPPER:
+                    stderr = OutputWrapper(sys.stderr, self.style.ERROR)
+                else:
+                    stderr = sys.stderr
+            stderr.write('%s: %s' % (e.__class__.__name__, e))
+            sys.exit(2)
+
+    def run_from_argv(self, argv):
+        super(Command, self).run_from_argv(argv)
+        sys.exit(self.exit_code)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sync_s3.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sync_s3.py
new file mode 100644
index 0000000..7e6b293
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/sync_s3.py
@@ -0,0 +1,390 @@
+"""
+Sync Media to S3
+================
+
+Django command that scans all files in your settings.MEDIA_ROOT and
+settings.STATIC_ROOT folders and uploads them to S3 with the same directory
+structure.
+
+This command can optionally do the following but it is off by default:
+* gzip compress any CSS and Javascript files it finds and adds the appropriate
+  'Content-Encoding' header.
+* set a far future 'Expires' header for optimal caching.
+* upload only media or static files.
+* use any other provider compatible with Amazon S3.
+* set other than 'public-read' ACL.
+
+Note: This script requires the Python boto library and valid Amazon Web
+Services API keys.
+
+Required settings.py variables:
+AWS_ACCESS_KEY_ID = ''
+AWS_SECRET_ACCESS_KEY = ''
+AWS_BUCKET_NAME = ''
+
+When you call this command with the `--renamegzip` param, it will add
+the '.gz' extension to the file name. But Safari just doesn't recognize
+'.gz' files and your site won't work on it! To fix this problem, you can
+set any other extension (like .jgz) in the `SYNC_S3_RENAME_GZIP_EXT`
+variable.
+
+Command options are:
+  -p PREFIX, --prefix=PREFIX
+                        The prefix to prepend to the path on S3.
+  --gzip                Enables gzipping CSS and Javascript files.
+  --expires             Enables setting a far future expires header.
+  --force               Skip the file mtime check to force upload of all
+                        files.
+  --filter-list         Override default directory and file exclusion
+                        filters. (enter as comma separated line)
+  --renamegzip          Enables renaming of gzipped files by appending '.gz'.
+                        to the original file name. This way your original
+                        assets will not be replaced by the gzipped ones.
+                        You can change the extension setting the
+                        `SYNC_S3_RENAME_GZIP_EXT` var in your settings.py
+                        file.
+  --invalidate          Invalidates the objects in CloudFront after uploading
+                        stuff to s3.
+  --media-only          Only MEDIA_ROOT files will be uploaded to S3.
+  --static-only         Only STATIC_ROOT files will be uploaded to S3.
+  --s3host              Override default s3 host.
+  --acl                 Override default ACL settings ('public-read' if
+                        settings.AWS_DEFAULT_ACL is not defined).
+
+TODO:
+ * Use fnmatch (or regex) to allow more complex FILTER_LIST rules.
+
+"""
+import datetime
+import email
+import mimetypes
+from optparse import make_option
+import os
+import time
+import gzip
+try:
+    from cStringIO import StringIO
+    assert StringIO
+except ImportError:
+    from StringIO import StringIO
+
+
+from django.conf import settings
+from django.core.management.base import BaseCommand, CommandError
+
+from django_extensions.management.utils import signalcommand
+
+# Make sure boto is available
+try:
+    import boto
+    import boto.exception
+    HAS_BOTO = True
+except ImportError:
+    HAS_BOTO = False
+
+
+class Command(BaseCommand):
+    # Extra variables to avoid passing these around
+    AWS_ACCESS_KEY_ID = ''
+    AWS_SECRET_ACCESS_KEY = ''
+    AWS_BUCKET_NAME = ''
+    AWS_CLOUDFRONT_DISTRIBUTION = ''
+    SYNC_S3_RENAME_GZIP_EXT = ''
+
+    DIRECTORIES = ''
+    FILTER_LIST = ['.DS_Store', '.svn', '.hg', '.git', 'Thumbs.db']
+    GZIP_CONTENT_TYPES = (
+        'text/css',
+        'application/javascript',
+        'application/x-javascript',
+        'text/javascript'
+    )
+
+    uploaded_files = []
+    upload_count = 0
+    skip_count = 0
+
+    option_list = BaseCommand.option_list + (
+        make_option('-p', '--prefix',
+                    dest='prefix',
+                    default=getattr(settings, 'SYNC_S3_PREFIX', ''),
+                    help="The prefix to prepend to the path on S3."),
+        make_option('-d', '--dir',
+                    dest='dir',
+                    help="Custom static root directory to use"),
+        make_option('--s3host',
+                    dest='s3host',
+                    default=getattr(settings, 'AWS_S3_HOST', ''),
+                    help="The s3 host (enables connecting to other providers/regions)"),
+        make_option('--acl',
+                    dest='acl',
+                    default=getattr(settings, 'AWS_DEFAULT_ACL', 'public-read'),
+                    help="Enables to override default acl (public-read)."),
+        make_option('--gzip',
+                    action='store_true', dest='gzip', default=False,
+                    help="Enables gzipping CSS and Javascript files."),
+        make_option('--renamegzip',
+                    action='store_true', dest='renamegzip', default=False,
+                    help="Enables renaming of gzipped assets to have '.gz' appended to the filename."),
+        make_option('--expires',
+                    action='store_true', dest='expires', default=False,
+                    help="Enables setting a far future expires header."),
+        make_option('--force',
+                    action='store_true', dest='force', default=False,
+                    help="Skip the file mtime check to force upload of all files."),
+        make_option('--filter-list', dest='filter_list',
+                    action='store', default='',
+                    help="Override default directory and file exclusion filters. (enter as comma seperated line)"),
+        make_option('--invalidate', dest='invalidate', default=False,
+                    action='store_true',
+                    help='Invalidates the associated objects in CloudFront'),
+        make_option('--media-only', dest='media_only', default='',
+                    action='store_true',
+                    help="Only MEDIA_ROOT files will be uploaded to S3"),
+        make_option('--static-only', dest='static_only', default='',
+                    action='store_true',
+                    help="Only STATIC_ROOT files will be uploaded to S3"),
+    )
+
+    help = 'Syncs the complete MEDIA_ROOT structure and files to S3 into the given bucket name.'
+    args = 'bucket_name'
+
+    can_import_settings = True
+
+    @signalcommand
+    def handle(self, *args, **options):
+        if not HAS_BOTO:
+            raise ImportError("The boto Python library is not installed.")
+
+        # Check for AWS keys in settings
+        if not hasattr(settings, 'AWS_ACCESS_KEY_ID') or not hasattr(settings, 'AWS_SECRET_ACCESS_KEY'):
+            raise CommandError('Missing AWS keys from settings file.  Please supply both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.')
+        else:
+            self.AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
+            self.AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
+
+        if not hasattr(settings, 'AWS_BUCKET_NAME'):
+            raise CommandError('Missing bucket name from settings file. Please add the AWS_BUCKET_NAME to your settings file.')
+        else:
+            if not settings.AWS_BUCKET_NAME:
+                raise CommandError('AWS_BUCKET_NAME cannot be empty.')
+        self.AWS_BUCKET_NAME = settings.AWS_BUCKET_NAME
+
+        if not hasattr(settings, 'MEDIA_ROOT'):
+            raise CommandError('MEDIA_ROOT must be set in your settings.')
+        else:
+            if not settings.MEDIA_ROOT:
+                raise CommandError('MEDIA_ROOT must be set in your settings.')
+
+        self.AWS_CLOUDFRONT_DISTRIBUTION = getattr(settings, 'AWS_CLOUDFRONT_DISTRIBUTION', '')
+
+        self.SYNC_S3_RENAME_GZIP_EXT = \
+            getattr(settings, 'SYNC_S3_RENAME_GZIP_EXT', '.gz')
+
+        self.verbosity = int(options.get('verbosity'))
+        self.prefix = options.get('prefix')
+        self.do_gzip = options.get('gzip')
+        self.rename_gzip = options.get('renamegzip')
+        self.do_expires = options.get('expires')
+        self.do_force = options.get('force')
+        self.invalidate = options.get('invalidate')
+        self.DIRECTORIES = options.get('dir')
+        self.s3host = options.get('s3host')
+        self.default_acl = options.get('acl')
+        self.FILTER_LIST = getattr(settings, 'FILTER_LIST', self.FILTER_LIST)
+        filter_list = options.get('filter_list')
+        if filter_list:
+            # command line option overrides default filter_list and
+            # settings.filter_list
+            self.FILTER_LIST = filter_list.split(',')
+
+        self.media_only = options.get('media_only')
+        self.static_only = options.get('static_only')
+        # Get directories
+        if self.media_only and self.static_only:
+            raise CommandError("Can't use --media-only and --static-only together. Better not use anything...")
+        elif self.media_only:
+            self.DIRECTORIES = [settings.MEDIA_ROOT]
+        elif self.static_only:
+            self.DIRECTORIES = [settings.STATIC_ROOT]
+        elif self.DIRECTORIES:
+            self.DIRECTORIES = [self.DIRECTORIES]
+        else:
+            self.DIRECTORIES = [settings.MEDIA_ROOT, settings.STATIC_ROOT]
+
+        # Now call the syncing method to walk the MEDIA_ROOT directory and
+        # upload all files found.
+        self.sync_s3()
+
+        # Sending the invalidation request to CloudFront if the user
+        # requested this action
+        if self.invalidate:
+            self.invalidate_objects_cf()
+
+        print("")
+        print("%d files uploaded." % self.upload_count)
+        print("%d files skipped." % self.skip_count)
+
+    def open_cf(self):
+        """
+        Returns an open connection to CloudFront
+        """
+        return boto.connect_cloudfront(
+            self.AWS_ACCESS_KEY_ID, self.AWS_SECRET_ACCESS_KEY)
+
+    def invalidate_objects_cf(self):
+        """
+        Split the invalidation request in groups of 1000 objects
+        """
+        if not self.AWS_CLOUDFRONT_DISTRIBUTION:
+            raise CommandError(
+                'An object invalidation was requested but the variable '
+                'AWS_CLOUDFRONT_DISTRIBUTION is not present in your settings.')
+
+        # We can't send more than 1000 objects in the same invalidation
+        # request.
+        chunk = 1000
+
+        # Connecting to CloudFront
+        conn = self.open_cf()
+
+        # Splitting the object list
+        objs = self.uploaded_files
+        chunks = [objs[i:i + chunk] for i in range(0, len(objs), chunk)]
+
+        # Invalidation requests
+        for paths in chunks:
+            conn.create_invalidation_request(
+                self.AWS_CLOUDFRONT_DISTRIBUTION, paths)
+
+    def sync_s3(self):
+        """
+        Walks the media/static directories and syncs files to S3
+        """
+        bucket, key = self.open_s3()
+        for directory in self.DIRECTORIES:
+            os.path.walk(directory, self.upload_s3, (bucket, key, self.AWS_BUCKET_NAME, directory))
+
+    def compress_string(self, s):
+        """Gzip a given string."""
+        zbuf = StringIO()
+        zfile = gzip.GzipFile(mode='wb', compresslevel=6, fileobj=zbuf)
+        zfile.write(s)
+        zfile.close()
+        return zbuf.getvalue()
+
+    def get_s3connection_kwargs(self):
+        """Returns connection kwargs as a dict"""
+        kwargs = {}
+        if self.s3host:
+            kwargs['host'] = self.s3host
+        return kwargs
+
+    def open_s3(self):
+        """
+        Opens connection to S3 returning bucket and key
+        """
+        conn = boto.connect_s3(
+            self.AWS_ACCESS_KEY_ID,
+            self.AWS_SECRET_ACCESS_KEY,
+            **self.get_s3connection_kwargs())
+        try:
+            bucket = conn.get_bucket(self.AWS_BUCKET_NAME)
+        except boto.exception.S3ResponseError:
+            bucket = conn.create_bucket(self.AWS_BUCKET_NAME)
+        return bucket, boto.s3.key.Key(bucket)
+
+    def upload_s3(self, arg, dirname, names):
+        """
+        This is the callback to os.path.walk and where much of the work happens
+        """
+        bucket, key, bucket_name, root_dir = arg
+
+        # Skip directories we don't want to sync
+        if os.path.basename(dirname) in self.FILTER_LIST:
+            # prevent walk from processing subfiles/subdirs below the ignored one
+            del names[:]
+            return
+
+        # Later we assume the MEDIA_ROOT ends with a trailing slash
+        if not root_dir.endswith(os.path.sep):
+            root_dir = root_dir + os.path.sep
+
+        for file in names:
+            headers = {}
+
+            if file in self.FILTER_LIST:
+                continue  # Skip files we don't want to sync
+
+            filename = os.path.join(dirname, file)
+            if os.path.isdir(filename):
+                continue  # Don't try to upload directories
+
+            file_key = filename[len(root_dir):]
+            if self.prefix:
+                file_key = '%s/%s' % (self.prefix, file_key)
+
+            # Check if file on S3 is older than local file, if so, upload
+            if not self.do_force:
+                s3_key = bucket.get_key(file_key)
+                if s3_key:
+                    s3_datetime = datetime.datetime(*time.strptime(
+                        s3_key.last_modified, '%a, %d %b %Y %H:%M:%S %Z')[0:6])
+                    local_datetime = datetime.datetime.utcfromtimestamp(
+                        os.stat(filename).st_mtime)
+                    if local_datetime < s3_datetime:
+                        self.skip_count += 1
+                        if self.verbosity > 1:
+                            print("File %s hasn't been modified since last being uploaded" % file_key)
+                        continue
+
+            # File is newer, let's process and upload
+            if self.verbosity > 0:
+                print("Uploading %s..." % file_key)
+
+            content_type = mimetypes.guess_type(filename)[0]
+            if content_type:
+                headers['Content-Type'] = content_type
+            else:
+                headers['Content-Type'] = 'application/octet-stream'
+
+            file_obj = open(filename, 'rb')
+            file_size = os.fstat(file_obj.fileno()).st_size
+            filedata = file_obj.read()
+            if self.do_gzip:
+                # Gzipping only if file is large enough (>1K is recommended)
+                # and only if file is a common text type (not a binary file)
+                if file_size > 1024 and content_type in self.GZIP_CONTENT_TYPES:
+                    filedata = self.compress_string(filedata)
+                    if self.rename_gzip:
+                        # If rename_gzip is True, then rename the file
+                        # by appending an extension (like '.gz)' to
+                        # original filename.
+                        file_key = '%s.%s' % (
+                            file_key, self.SYNC_S3_RENAME_GZIP_EXT)
+                    headers['Content-Encoding'] = 'gzip'
+                    if self.verbosity > 1:
+                        print("\tgzipped: %dk to %dk" % (file_size / 1024, len(filedata) / 1024))
+            if self.do_expires:
+                # HTTP/1.0
+                headers['Expires'] = '%s GMT' % (email.Utils.formatdate(time.mktime((datetime.datetime.now() + datetime.timedelta(days=365 * 2)).timetuple())))
+                # HTTP/1.1
+                headers['Cache-Control'] = 'max-age %d' % (3600 * 24 * 365 * 2)
+                if self.verbosity > 1:
+                    print("\texpires: %s" % headers['Expires'])
+                    print("\tcache-control: %s" % headers['Cache-Control'])
+
+            try:
+                key.name = file_key
+                key.set_contents_from_string(filedata, headers, replace=True,
+                                             policy=self.default_acl)
+            except boto.exception.S3CreateError as e:
+                print("Failed: %s" % e)
+            except Exception as e:
+                print(e)
+                raise
+            else:
+                self.upload_count += 1
+                self.uploaded_files.append(file_key)
+
+            file_obj.close()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/syncdata.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/syncdata.py
new file mode 100644
index 0000000..84da54a
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/syncdata.py
@@ -0,0 +1,220 @@
+"""
+SyncData
+========
+
+Django command similar to 'loaddata' but also deletes.
+After 'syncdata' has run, the database will have the same data as the fixture - anything
+missing will of been added, anything different will of been updated,
+and anything extra will of been deleted.
+"""
+
+import os
+import sys
+import six
+from contextlib import contextmanager
+from functools import wraps
+
+from django.core.management.base import BaseCommand
+from django.core.management.color import no_style
+from django.db import connection, transaction
+
+from django_extensions.management.utils import signalcommand
+
+if hasattr(transaction, 'set_autocommit'):
+    @contextmanager
+    def _custom_transaction(using=None):
+        transaction.set_autocommit(False)
+        yield
+        transaction.set_autocommit(True)
+else:
+    @contextmanager
+    def _custom_transaction(using=None):
+        transaction.commit_unless_managed()
+        transaction.enter_transaction_management()
+        transaction.managed(True)
+        yield
+        transaction.leave_transaction_management()
+
+
+def custom_transaction(func):
+    @wraps(func)
+    def wrapper(*args, **kwargs):
+        with _custom_transaction():
+            return func(*args, **kwargs)
+    return wrapper
+
+
+class Command(BaseCommand):
+    """ syncdata command """
+
+    help = 'Makes the current database have the same data as the fixture(s), no more, no less.'
+    args = "fixture [fixture ...]"
+
+    def remove_objects_not_in(self, objects_to_keep, verbosity):
+        """
+        Deletes all the objects in the database that are not in objects_to_keep.
+        - objects_to_keep: A map where the keys are classes, and the values are a
+         set of the objects of that class we should keep.
+        """
+        for class_ in objects_to_keep.keys():
+            current = class_.objects.all()
+            current_ids = set([x.pk for x in current])
+            keep_ids = set([x.pk for x in objects_to_keep[class_]])
+
+            remove_these_ones = current_ids.difference(keep_ids)
+            if remove_these_ones:
+                for obj in current:
+                    if obj.pk in remove_these_ones:
+                        obj.delete()
+                        if verbosity >= 2:
+                            print("Deleted object: %s" % six.u(obj))
+
+            if verbosity > 0 and remove_these_ones:
+                num_deleted = len(remove_these_ones)
+                if num_deleted > 1:
+                    type_deleted = six.u(class_._meta.verbose_name_plural)
+                else:
+                    type_deleted = six.u(class_._meta.verbose_name)
+
+                print("Deleted %s %s" % (str(num_deleted), type_deleted))
+
+    @signalcommand
+    @custom_transaction
+    def handle(self, *fixture_labels, **options):
+        """ Main method of a Django command """
+        from django.db.models import get_apps
+        from django.core import serializers
+        from django.conf import settings
+
+        self.style = no_style()
+
+        verbosity = int(options.get('verbosity', 1))
+        show_traceback = options.get('traceback', False)
+
+        # Keep a count of the installed objects and fixtures
+        fixture_count = 0
+        object_count = 0
+        objects_per_fixture = []
+        models = set()
+
+        humanize = lambda dirname: dirname and "'%s'" % dirname or 'absolute path'
+
+        # Get a cursor (even though we don't need one yet). This has
+        # the side effect of initializing the test database (if
+        # it isn't already initialized).
+        cursor = connection.cursor()
+
+        app_fixtures = [os.path.join(os.path.dirname(app.__file__), 'fixtures') for app in get_apps()]
+        for fixture_label in fixture_labels:
+            parts = fixture_label.split('.')
+            if len(parts) == 1:
+                fixture_name = fixture_label
+                formats = serializers.get_public_serializer_formats()
+            else:
+                fixture_name, format = '.'.join(parts[:-1]), parts[-1]
+                if format in serializers.get_public_serializer_formats():
+                    formats = [format]
+                else:
+                    formats = []
+
+            if formats:
+                if verbosity > 1:
+                    print("Loading '%s' fixtures..." % fixture_name)
+            else:
+                sys.stderr.write(self.style.ERROR("Problem installing fixture '%s': %s is not a known serialization format." % (fixture_name, format)))
+                transaction.rollback()
+                return
+
+            if os.path.isabs(fixture_name):
+                fixture_dirs = [fixture_name]
+            else:
+                fixture_dirs = app_fixtures + list(settings.FIXTURE_DIRS) + ['']
+
+            for fixture_dir in fixture_dirs:
+                if verbosity > 1:
+                    print("Checking %s for fixtures..." % humanize(fixture_dir))
+
+                label_found = False
+                for format in formats:
+                    #serializer = serializers.get_serializer(format)
+                    if verbosity > 1:
+                        print("Trying %s for %s fixture '%s'..." % (humanize(fixture_dir), format, fixture_name))
+                    try:
+                        full_path = os.path.join(fixture_dir, '.'.join([fixture_name, format]))
+                        fixture = open(full_path, 'r')
+                        if label_found:
+                            fixture.close()
+                            print(self.style.ERROR("Multiple fixtures named '%s' in %s. Aborting." % (fixture_name, humanize(fixture_dir))))
+                            transaction.rollback()
+                            return
+                        else:
+                            fixture_count += 1
+                            objects_per_fixture.append(0)
+                            if verbosity > 0:
+                                print("Installing %s fixture '%s' from %s." % (format, fixture_name, humanize(fixture_dir)))
+                            try:
+                                objects_to_keep = {}
+                                objects = serializers.deserialize(format, fixture)
+                                for obj in objects:
+                                    object_count += 1
+                                    objects_per_fixture[-1] += 1
+
+                                    class_ = obj.object.__class__
+                                    if class_ not in objects_to_keep:
+                                        objects_to_keep[class_] = set()
+                                    objects_to_keep[class_].add(obj.object)
+
+                                    models.add(class_)
+                                    obj.save()
+
+                                self.remove_objects_not_in(objects_to_keep, verbosity)
+
+                                label_found = True
+                            except (SystemExit, KeyboardInterrupt):
+                                raise
+                            except Exception:
+                                import traceback
+                                fixture.close()
+                                transaction.rollback()
+                                if show_traceback:
+                                    traceback.print_exc()
+                                else:
+                                    sys.stderr.write(self.style.ERROR("Problem installing fixture '%s': %s\n" % (full_path, traceback.format_exc())))
+                                return
+                            fixture.close()
+                    except:
+                        if verbosity > 1:
+                            print("No %s fixture '%s' in %s." % (format, fixture_name, humanize(fixture_dir)))
+
+        # If any of the fixtures we loaded contain 0 objects, assume that an
+        # error was encountered during fixture loading.
+        if 0 in objects_per_fixture:
+            sys.stderr.write(
+                self.style.ERROR("No fixture data found for '%s'. (File format may be invalid.)" % (fixture_name)))
+            transaction.rollback()
+            return
+
+        # If we found even one object in a fixture, we need to reset the
+        # database sequences.
+        if object_count > 0:
+            sequence_sql = connection.ops.sequence_reset_sql(self.style, models)
+            if sequence_sql:
+                if verbosity > 1:
+                    print("Resetting sequences")
+                for line in sequence_sql:
+                    cursor.execute(line)
+
+        transaction.commit()
+
+        if object_count == 0:
+            if verbosity > 1:
+                print("No fixtures found.")
+        else:
+            if verbosity > 0:
+                print("Installed %d object(s) from %d fixture(s)" % (object_count, fixture_count))
+
+        # Close the DB connection. This is required as a workaround for an
+        # edge case in MySQL: if the same connection is used to
+        # create tables, load data, and query, the query can return
+        # incorrect results. See Django #7572, MySQL #37735.
+        connection.close()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/unreferenced_files.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/unreferenced_files.py
new file mode 100644
index 0000000..fb86479
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/unreferenced_files.py
@@ -0,0 +1,50 @@
+from collections import defaultdict
+import os
+from django.conf import settings
+from django.core.management.base import NoArgsCommand
+from django.db import models
+from django.db.models.loading import cache
+
+from django_extensions.management.utils import signalcommand
+
+
+class Command(NoArgsCommand):
+    help = "Prints a list of all files in MEDIA_ROOT that are not referenced in the database."
+
+    @signalcommand
+    def handle_noargs(self, **options):
+
+        if settings.MEDIA_ROOT == '':
+            print("MEDIA_ROOT is not set, nothing to do")
+            return
+
+        # Get a list of all files under MEDIA_ROOT
+        media = []
+        for root, dirs, files in os.walk(settings.MEDIA_ROOT):
+            for f in files:
+                media.append(os.path.abspath(os.path.join(root, f)))
+
+        # Get list of all fields (value) for each model (key)
+        # that is a FileField or subclass of a FileField
+        model_dict = defaultdict(list)
+        for app in cache.get_apps():
+            model_list = cache.get_models(app)
+            for model in model_list:
+                for field in model._meta.fields:
+                    if issubclass(field.__class__, models.FileField):
+                        model_dict[model].append(field)
+
+        # Get a list of all files referenced in the database
+        referenced = []
+        for model in model_dict:
+            all = model.objects.all().iterator()
+            for object in all:
+                for field in model_dict[model]:
+                    target_file = getattr(object, field.name)
+                    if target_file:
+                        referenced.append(os.path.abspath(target_file.path))
+
+        # Print each file in MEDIA_ROOT that is not referenced in the database
+        for m in media:
+            if m not in referenced:
+                print(m)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/update_permissions.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/update_permissions.py
new file mode 100644
index 0000000..04d850f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/update_permissions.py
@@ -0,0 +1,41 @@
+from django.core.management.base import BaseCommand
+from django.contrib.auth.management import create_permissions as _create_permissions
+
+from django_extensions.management.utils import signalcommand
+
+try:
+    from django.apps import apps as django_apps
+    get_models = lambda: None
+    get_app = django_apps.get_app_config
+    get_all_apps = django_apps.get_app_configs
+
+    def create_permissions(app, models, verbosity):
+        _create_permissions(app, verbosity)
+
+except ImportError:
+    from django.db.models import get_models, get_app
+    django_apps = None
+
+    def get_all_apps():
+        apps = set()
+        for model in get_models():
+            apps.add(get_app(model._meta.app_label))
+        return apps
+    create_permissions = _create_permissions
+
+
+class Command(BaseCommand):
+    args = '<app app ...>'
+    help = 'reloads permissions for specified apps, or all apps if no args are specified'
+
+    @signalcommand
+    def handle(self, *args, **options):
+        apps = set()
+        if not args:
+            apps = get_all_apps()
+        else:
+            for arg in args:
+                apps.add(get_app(arg))
+
+        for app in apps:
+            create_permissions(app, get_models(), int(options.get('verbosity', 3)))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/validate_templates.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/validate_templates.py
new file mode 100644
index 0000000..6aa792d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/commands/validate_templates.py
@@ -0,0 +1,73 @@
+import os
+from optparse import make_option
+from django.core.management.base import BaseCommand, CommandError
+from django.core.management.color import color_style
+from django.template.base import add_to_builtins
+from django.template.loaders.filesystem import Loader
+from django_extensions.utils import validatingtemplatetags
+from django_extensions.management.utils import signalcommand
+
+#
+# TODO: Render the template with fake request object ?
+#
+
+
+class Command(BaseCommand):
+    args = ''
+    help = "Validate templates on syntax and compile errors"
+    option_list = BaseCommand.option_list + (
+        make_option('--break', '-b', action='store_true', dest='break',
+                    default=False, help="Break on first error."),
+        make_option('--check-urls', '-u', action='store_true', dest='check_urls',
+                    default=False, help="Check url tag view names are quoted appropriately"),
+        make_option('--force-new-urls', '-n', action='store_true', dest='force_new_urls',
+                    default=False, help="Error on usage of old style url tags (without {% load urls from future %}"),
+        make_option('--include', '-i', action='append', dest='includes',
+                    default=[], help="Append these paths to TEMPLATE_DIRS")
+    )
+
+    @signalcommand
+    def handle(self, *args, **options):
+        from django.conf import settings
+        style = color_style()
+        template_dirs = set(settings.TEMPLATE_DIRS)
+        template_dirs |= set(options.get('includes', []))
+        template_dirs |= set(getattr(settings, 'VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS', []))
+        settings.TEMPLATE_DIRS = list(template_dirs)
+        settings.TEMPLATE_DEBUG = True
+        verbosity = int(options.get('verbosity', 1))
+        errors = 0
+
+        template_loader = Loader()
+
+        # Replace built in template tags with our own validating versions
+        if options.get('check_urls', False):
+            add_to_builtins('django_extensions.utils.validatingtemplatetags')
+
+        for template_dir in template_dirs:
+            for root, dirs, filenames in os.walk(template_dir):
+                for filename in filenames:
+                    if filename.endswith(".swp"):
+                        continue
+                    if filename.endswith("~"):
+                        continue
+                    filepath = os.path.join(root, filename)
+                    if verbosity > 1:
+                        print(filepath)
+                    validatingtemplatetags.before_new_template(options.get('force_new_urls', False))
+                    try:
+                        template_loader.load_template(filename, [root])
+                    except Exception as e:
+                        errors += 1
+                        print("%s: %s" % (filepath, style.ERROR("%s %s" % (e.__class__.__name__, str(e)))))
+                    template_errors = validatingtemplatetags.get_template_errors()
+                    for origin, line, message in template_errors:
+                        errors += 1
+                        print("%s(%s): %s" % (origin, line, style.ERROR(message)))
+                    if errors and options.get('break', False):
+                        raise CommandError("Errors found")
+
+        if errors:
+            raise CommandError("%s errors found" % errors)
+        print("%s errors found" % errors)
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/email_notifications.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/email_notifications.py
new file mode 100644
index 0000000..68cec45
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/email_notifications.py
@@ -0,0 +1,136 @@
+import sys
+import traceback
+from optparse import make_option
+
+from django.conf import settings
+from django.core.mail import send_mail
+from django.core.management.base import BaseCommand
+
+
+class EmailNotificationCommand(BaseCommand):
+    """A BaseCommand subclass which adds sending email fuctionality.
+
+    Subclasses will have an extra command line option ``--email-notification``
+    and will be able to send emails by calling ``send_email_notification()``
+    if SMTP host and port are specified in settings. The handling of the
+    command line option is left to the management command implementation.
+    Configuration is done in settings.EMAIL_NOTIFICATIONS dict.
+
+    Configuration example::
+
+        EMAIL_NOTIFICATIONS = {
+            'scripts.my_script': {
+                'subject': 'my_script subject',
+                'body': 'my_script body',
+                'from_email': 'from_email@example.com',
+                'recipients': ('recipient0@example.com',),
+                'no_admins': False,
+                'no_traceback': False,
+                'notification_level': 0,
+                'fail_silently': False
+            },
+            'scripts.another_script': {
+                ...
+            },
+            ...
+        }
+
+    Configuration explained:
+        subject:            Email subject.
+        body:               Email body.
+        from_email:         Email from address.
+        recipients:         Sequence of email recipient addresses.
+        no_admins:          When True do not include ADMINS to recipients.
+        no_traceback:       When True do not include traceback to email body.
+        notification_level: 0: send email on fail, 1: send email always.
+        fail_silently:      Parameter passed to django's send_mail().
+
+    """
+    option_list = BaseCommand.option_list + (
+        make_option('--email-notifications',
+                    action='store_true',
+                    dest='email_notifications',
+                    help='Send email notifications for command.'),
+        make_option('--email-exception',
+                    action='store_true',
+                    dest='email_exception',
+                    help='Send email for command exceptions.'),
+    )
+
+    def run_from_argv(self, argv):
+        """Overriden in order to access the command line arguments."""
+        self.argv_string = ' '.join(argv)
+        super(EmailNotificationCommand, self).run_from_argv(argv)
+
+    def execute(self, *args, **options):
+        """Overriden in order to send emails on unhandled exception.
+
+        If an unhandled exception in ``def handle(self, *args, **options)``
+        occurs and `--email-exception` is set or `self.email_exception` is
+        set to True send an email to ADMINS with the traceback and then
+        reraise the exception.
+
+        """
+        try:
+            super(EmailNotificationCommand, self).execute(*args, **options)
+        except Exception as e:
+            if (options.get('email_exception', False) or getattr(self, 'email_exception', False)):
+                self.send_email_notification(include_traceback=True)
+            raise e
+
+    def send_email_notification(self, notification_id=None,
+                                include_traceback=False, verbosity=1):
+        """Send email notifications.
+
+        Reads settings from settings.EMAIL_NOTIFICATIONS dict, if available,
+        using ``notification_id`` as a key or else provides reasonable
+        defaults.
+
+        """
+        # Load email notification settings if available
+        if notification_id is not None:
+            try:
+                email_settings = settings.EMAIL_NOTIFICATIONS.get(notification_id, {})
+            except AttributeError:
+                email_settings = {}
+        else:
+            email_settings = {}
+
+        # Exit if no traceback found and not in 'notify always' mode
+        if (not include_traceback and not email_settings.get('notification_level', 0)):
+            print(self.style.ERROR("Exiting, not in 'notify always' mode."))
+            return
+
+        # Set email fields.
+        subject = email_settings.get('subject', "Django extensions email notification.")
+        body = email_settings.get(
+            'body',
+            "Reporting execution of command: '%s'" % self.argv_string
+        )
+
+        # Include traceback
+        if (include_traceback and not email_settings.get('no_traceback', False)):
+            try:
+                exc_type, exc_value, exc_traceback = sys.exc_info()
+                trb = ''.join(traceback.format_tb(exc_traceback))
+                body += "\n\nTraceback:\n\n%s\n" % trb
+            finally:
+                del exc_traceback
+
+        # Set from address
+        from_email = email_settings.get('from_email', settings.DEFAULT_FROM_EMAIL)
+
+        # Calculate recipients
+        recipients = list(email_settings.get('recipients', []))
+
+        if not email_settings.get('no_admins', False):
+            recipients.extend([a[1] for a in settings.ADMINS])
+
+        if not recipients:
+            if verbosity > 0:
+                print(self.style.ERROR("No email recipients available."))
+            return
+
+        # Send email...
+        send_mail(subject, body, from_email, recipients,
+                  fail_silently=email_settings.get('fail_silently', True))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/jobs.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/jobs.py
new file mode 100644
index 0000000..69ee676
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/jobs.py
@@ -0,0 +1,180 @@
+"""
+django_extensions.management.jobs
+"""
+
+import os
+from imp import find_module
+
+_jobs = None
+
+
+def noneimplementation(meth):
+    return None
+
+
+class JobError(Exception):
+    pass
+
+
+class BaseJob(object):
+    help = "undefined job description."
+    when = None
+
+    def execute(self):
+        raise NotImplementedError("Job needs to implement the execute method")
+
+
+class MinutelyJob(BaseJob):
+    when = "minutely"
+
+
+class QuarterHourlyJob(BaseJob):
+    when = "quarter_hourly"
+
+
+class HourlyJob(BaseJob):
+    when = "hourly"
+
+
+class DailyJob(BaseJob):
+    when = "daily"
+
+
+class WeeklyJob(BaseJob):
+    when = "weekly"
+
+
+class MonthlyJob(BaseJob):
+    when = "monthly"
+
+
+class YearlyJob(BaseJob):
+    when = "yearly"
+
+
+def my_import(name):
+    try:
+        imp = __import__(name)
+    except ImportError as err:
+        raise JobError("Failed to import %s with error %s" % (name, err))
+
+    mods = name.split('.')
+    if len(mods) > 1:
+        for mod in mods[1:]:
+            imp = getattr(imp, mod)
+    return imp
+
+
+def find_jobs(jobs_dir):
+    try:
+        return [f[:-3] for f in os.listdir(jobs_dir) if not f.startswith('_') and f.endswith(".py")]
+    except OSError:
+        return []
+
+
+def find_job_module(app_name, when=None):
+    parts = app_name.split('.')
+    parts.append('jobs')
+    if when:
+        parts.append(when)
+    parts.reverse()
+    path = None
+    while parts:
+        part = parts.pop()
+        f, path, descr = find_module(part, path and [path] or None)
+    return path
+
+
+def import_job(app_name, name, when=None):
+    jobmodule = "%s.jobs.%s%s" % (app_name, when and "%s." % when or "", name)
+    job_mod = my_import(jobmodule)
+    # todo: more friendly message for AttributeError if job_mod does not exist
+    try:
+        job = job_mod.Job
+    except:
+        raise JobError("Job module %s does not contain class instance named 'Job'" % jobmodule)
+    if when and not (job.when == when or job.when is None):
+        raise JobError("Job %s is not a %s job." % (jobmodule, when))
+    return job
+
+
+def get_jobs(when=None, only_scheduled=False):
+    """
+    Returns a dictionary mapping of job names together with their respective
+    application class.
+    """
+    # FIXME: HACK: make sure the project dir is on the path when executed as ./manage.py
+    import sys
+    try:
+        cpath = os.path.dirname(os.path.realpath(sys.argv[0]))
+        ppath = os.path.dirname(cpath)
+        if ppath not in sys.path:
+            sys.path.append(ppath)
+    except:
+        pass
+    _jobs = {}
+    if True:
+        from django.conf import settings
+        for app_name in settings.INSTALLED_APPS:
+            scandirs = (None, 'minutely', 'quarter_hourly', 'hourly', 'daily', 'weekly', 'monthly', 'yearly')
+            if when:
+                scandirs = None, when
+            for subdir in scandirs:
+                try:
+                    path = find_job_module(app_name, subdir)
+                    for name in find_jobs(path):
+                        if (app_name, name) in _jobs:
+                            raise JobError("Duplicate job %s" % name)
+                        job = import_job(app_name, name, subdir)
+                        if only_scheduled and job.when is None:
+                            # only include jobs which are scheduled
+                            continue
+                        if when and job.when != when:
+                            # generic job not in same schedule
+                            continue
+                        _jobs[(app_name, name)] = job
+                except ImportError:
+                    # No job module -- continue scanning
+                    pass
+    return _jobs
+
+
+def get_job(app_name, job_name):
+    jobs = get_jobs()
+    if app_name:
+        return jobs[(app_name, job_name)]
+    else:
+        for a, j in jobs.keys():
+            if j == job_name:
+                return jobs[(a, j)]
+        raise KeyError("Job not found: %s" % job_name)
+
+
+def print_jobs(when=None, only_scheduled=False, show_when=True, show_appname=False, show_header=True):
+    jobmap = get_jobs(when, only_scheduled=only_scheduled)
+    print("Job List: %i jobs" % len(jobmap))
+    jlist = sorted(jobmap.keys())
+    appname_spacer = "%%-%is" % max(len(e[0]) for e in jlist)
+    name_spacer = "%%-%is" % max(len(e[1]) for e in jlist)
+    when_spacer = "%%-%is" % max(len(e.when) for e in jobmap.values() if e.when)
+    if show_header:
+        line = " "
+        if show_appname:
+            line += appname_spacer % "appname" + " - "
+        line += name_spacer % "jobname"
+        if show_when:
+            line += " - " + when_spacer % "when"
+        line += " - help"
+        print(line)
+        print("-" * 80)
+
+    for app_name, job_name in jlist:
+        job = jobmap[(app_name, job_name)]
+        line = " "
+        if show_appname:
+            line += appname_spacer % app_name + " - "
+        line += name_spacer % job_name
+        if show_when:
+            line += " - " + when_spacer % (job.when and job.when or "")
+        line += " - " + job.help
+        print(line)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/modelviz.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/modelviz.py
new file mode 100644
index 0000000..d0a911c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/modelviz.py
@@ -0,0 +1,301 @@
+"""
+modelviz.py - DOT file generator for Django Models
+
+Based on:
+  Django model to DOT (Graphviz) converter
+  by Antonio Cavedoni <antonio@cavedoni.org>
+  Adapted to be used with django-extensions
+"""
+
+__version__ = "1.0"
+__license__ = "Python"
+__author__ = "Bas van Oostveen <v.oostveen@gmail.com>",
+__contributors__ = [
+    "Antonio Cavedoni <http://cavedoni.com/>"
+    "Stefano J. Attardi <http://attardi.org/>",
+    "limodou <http://www.donews.net/limodou/>",
+    "Carlo C8E Miron",
+    "Andre Campos <cahenan@gmail.com>",
+    "Justin Findlay <jfindlay@gmail.com>",
+    "Alexander Houben <alexander@houben.ch>",
+    "Joern Hees <gitdev@joernhees.de>",
+    "Kevin Cherepski <cherepski@gmail.com>",
+]
+
+import os
+import six
+import datetime
+from django.utils.translation import activate as activate_language
+from django.utils.safestring import mark_safe
+from django.template import Context, loader, Template
+from django.db import models
+from django.db.models import get_models
+from django.db.models.fields.related import ForeignKey, OneToOneField, ManyToManyField, RelatedField
+
+try:
+    from django.db.models.fields.generic import GenericRelation
+    assert GenericRelation
+except ImportError:
+    from django.contrib.contenttypes.generic import GenericRelation
+
+
+def parse_file_or_list(arg):
+    if not arg:
+        return []
+    if ',' not in arg and os.path.isfile(arg):
+        return [e.strip() for e in open(arg).readlines()]
+    return arg.split(',')
+
+
+def generate_dot(app_labels, **kwargs):
+    cli_options = kwargs.get('cli_options', None)
+    disable_fields = kwargs.get('disable_fields', False)
+    include_models = parse_file_or_list(kwargs.get('include_models', ""))
+    all_applications = kwargs.get('all_applications', False)
+    use_subgraph = kwargs.get('group_models', False)
+    verbose_names = kwargs.get('verbose_names', False)
+    inheritance = kwargs.get('inheritance', True)
+    relations_as_fields = kwargs.get("relations_as_fields", True)
+    sort_fields = kwargs.get("sort_fields", True)
+    language = kwargs.get('language', None)
+    if language is not None:
+        activate_language(language)
+    exclude_columns = parse_file_or_list(kwargs.get('exclude_columns', ""))
+    exclude_models = parse_file_or_list(kwargs.get('exclude_models', ""))
+
+    def skip_field(field):
+        if exclude_columns:
+            if verbose_names and field.verbose_name:
+                if field.verbose_name in exclude_columns:
+                    return True
+            if field.name in exclude_columns:
+                return True
+        return False
+
+    apps = []
+    if all_applications:
+        apps = models.get_apps()
+
+    for app_label in app_labels:
+        app = models.get_app(app_label)
+        if app not in apps:
+            apps.append(app)
+
+    graphs = []
+    for app in apps:
+        graph = Context({
+            'name': '"%s"' % app.__name__,
+            'app_name': "%s" % '.'.join(app.__name__.split('.')[:-1]),
+            'cluster_app_name': "cluster_%s" % app.__name__.replace(".", "_"),
+            'models': []
+        })
+
+        appmodels = get_models(app)
+        abstract_models = []
+        for appmodel in appmodels:
+            abstract_models = abstract_models + [abstract_model for abstract_model in appmodel.__bases__ if hasattr(abstract_model, '_meta') and abstract_model._meta.abstract]
+        abstract_models = list(set(abstract_models))  # remove duplicates
+        appmodels = abstract_models + appmodels
+
+        for appmodel in appmodels:
+            appmodel_abstracts = [abstract_model.__name__ for abstract_model in appmodel.__bases__ if hasattr(abstract_model, '_meta') and abstract_model._meta.abstract]
+
+            # collect all attribs of abstract superclasses
+            def getBasesAbstractFields(c):
+                _abstract_fields = []
+                for e in c.__bases__:
+                    if hasattr(e, '_meta') and e._meta.abstract:
+                        _abstract_fields.extend(e._meta.fields)
+                        _abstract_fields.extend(getBasesAbstractFields(e))
+                return _abstract_fields
+            abstract_fields = getBasesAbstractFields(appmodel)
+
+            model = {
+                'app_name': appmodel.__module__.replace(".", "_"),
+                'name': appmodel.__name__,
+                'abstracts': appmodel_abstracts,
+                'fields': [],
+                'relations': []
+            }
+
+            # consider given model name ?
+            def consider(model_name):
+                if exclude_models and model_name in exclude_models:
+                    return False
+                elif include_models and model_name not in include_models:
+                    return False
+                return not include_models or model_name in include_models
+
+            if not consider(appmodel._meta.object_name):
+                continue
+
+            if verbose_names and appmodel._meta.verbose_name:
+                model['label'] = appmodel._meta.verbose_name.decode("utf8")
+            else:
+                model['label'] = model['name']
+
+            # model attributes
+            def add_attributes(field):
+                if verbose_names and field.verbose_name:
+                    label = field.verbose_name.decode("utf8")
+                    if label.islower():
+                        label = label.capitalize()
+                else:
+                    label = field.name
+
+                t = type(field).__name__
+                if isinstance(field, (OneToOneField, ForeignKey)):
+                    t += " ({0})".format(field.rel.field_name)
+                # TODO: ManyToManyField, GenericRelation
+
+                model['fields'].append({
+                    'name': field.name,
+                    'label': label,
+                    'type': t,
+                    'blank': field.blank,
+                    'abstract': field in abstract_fields,
+                    'relation': isinstance(field, RelatedField),
+                    'primary_key': field.primary_key,
+                })
+
+            attributes = [field for field in appmodel._meta.local_fields]
+            if not relations_as_fields:
+                # Find all the 'real' attributes. Relations are depicted as graph edges instead of attributes
+                attributes = [field for field in attributes if not isinstance(field, RelatedField)]
+
+            # find primary key and print it first, ignoring implicit id if other pk exists
+            pk = appmodel._meta.pk
+            if pk and not appmodel._meta.abstract and pk in attributes:
+                add_attributes(pk)
+
+            for field in attributes:
+                if skip_field(field):
+                    continue
+                if pk and field == pk:
+                    continue
+                add_attributes(field)
+
+            if sort_fields:
+                model['fields'] = sorted(model['fields'], key=lambda field: (not field['primary_key'], not field['relation'], field['label']))
+
+            # FIXME: actually many_to_many fields aren't saved in this model's db table, so why should we add an attribute-line for them in the resulting graph?
+            #if appmodel._meta.many_to_many:
+            #    for field in appmodel._meta.many_to_many:
+            #        if skip_field(field):
+            #            continue
+            #        add_attributes(field)
+
+            # relations
+            def add_relation(field, extras=""):
+                if verbose_names and field.verbose_name:
+                    label = field.verbose_name.decode("utf8")
+                    if label.islower():
+                        label = label.capitalize()
+                else:
+                    label = field.name
+
+                # show related field name
+                if hasattr(field, 'related_query_name'):
+                    related_query_name = field.related_query_name()
+                    if verbose_names and related_query_name.islower():
+                        related_query_name = related_query_name.replace('_', ' ').capitalize()
+                    label += ' (%s)' % related_query_name
+
+                # handle self-relationships and lazy-relationships
+                if isinstance(field.rel.to, six.string_types):
+                    if field.rel.to == 'self':
+                        target_model = field.model
+                    else:
+                        raise Exception("Lazy relationship for model (%s) must be explicit for field (%s)" % (field.model.__name__, field.name))
+                else:
+                    target_model = field.rel.to
+
+                _rel = {
+                    'target_app': target_model.__module__.replace('.', '_'),
+                    'target': target_model.__name__,
+                    'type': type(field).__name__,
+                    'name': field.name,
+                    'label': label,
+                    'arrows': extras,
+                    'needs_node': True
+                }
+                if _rel not in model['relations'] and consider(_rel['target']):
+                    model['relations'].append(_rel)
+
+            for field in appmodel._meta.local_fields:
+                if field.attname.endswith('_ptr_id'):  # excluding field redundant with inheritance relation
+                    continue
+                if field in abstract_fields:  # excluding fields inherited from abstract classes. they too show as local_fields
+                    continue
+                if skip_field(field):
+                    continue
+                if isinstance(field, OneToOneField):
+                    add_relation(field, '[arrowhead=none, arrowtail=none, dir=both]')
+                elif isinstance(field, ForeignKey):
+                    add_relation(field, '[arrowhead=none, arrowtail=dot, dir=both]')
+
+            for field in appmodel._meta.local_many_to_many:
+                if skip_field(field):
+                    continue
+                if isinstance(field, ManyToManyField):
+                    if (getattr(field, 'creates_table', False) or  # django 1.1.
+                            (hasattr(field.rel.through, '_meta') and field.rel.through._meta.auto_created)):  # django 1.2
+                        add_relation(field, '[arrowhead=dot arrowtail=dot, dir=both]')
+                elif isinstance(field, GenericRelation):
+                    add_relation(field, mark_safe('[style="dotted", arrowhead=normal, arrowtail=normal, dir=both]'))
+
+            if inheritance:
+                # add inheritance arrows
+                for parent in appmodel.__bases__:
+                    if hasattr(parent, "_meta"):  # parent is a model
+                        l = "multi-table"
+                        if parent._meta.abstract:
+                            l = "abstract"
+                        if appmodel._meta.proxy:
+                            l = "proxy"
+                        l += r"\ninheritance"
+                        _rel = {
+                            'target_app': parent.__module__.replace(".", "_"),
+                            'target': parent.__name__,
+                            'type': "inheritance",
+                            'name': "inheritance",
+                            'label': l,
+                            'arrows': '[arrowhead=empty, arrowtail=none, dir=both]',
+                            'needs_node': True,
+                        }
+                        # TODO: seems as if abstract models aren't part of models.getModels, which is why they are printed by this without any attributes.
+                        if _rel not in model['relations'] and consider(_rel['target']):
+                            model['relations'].append(_rel)
+
+            graph['models'].append(model)
+        if graph['models']:
+            graphs.append(graph)
+
+    nodes = []
+    for graph in graphs:
+        nodes.extend([e['name'] for e in graph['models']])
+
+    for graph in graphs:
+        for model in graph['models']:
+            for relation in model['relations']:
+                if relation['target'] in nodes:
+                    relation['needs_node'] = False
+
+    now = datetime.datetime.now()
+    t = loader.get_template('django_extensions/graph_models/digraph.dot')
+
+    if not isinstance(t, Template):
+        raise Exception("Default Django template loader isn't used. "
+                        "This can lead to the incorrect template rendering. "
+                        "Please, check the settings.")
+
+    c = Context({
+        'created_at': now.strftime("%Y-%m-%d %H:%M"),
+        'cli_options': cli_options,
+        'disable_fields': disable_fields,
+        'use_subgraph': use_subgraph,
+        'graphs': graphs,
+    })
+    dot = t.render(c)
+
+    return dot
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/notebook_extension.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/notebook_extension.py
new file mode 100644
index 0000000..8fc806f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/notebook_extension.py
@@ -0,0 +1,6 @@
+def load_ipython_extension(ipython):
+    from django.core.management.color import no_style
+    from django_extensions.management.shells import import_objects
+    imported_objects = import_objects(options={'dont_load': []},
+                                      style=no_style())
+    ipython.push(imported_objects)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/shells.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/shells.py
new file mode 100644
index 0000000..3e67fe9
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/shells.py
@@ -0,0 +1,213 @@
+import six
+import traceback
+
+
+class ObjectImportError(Exception):
+    pass
+
+
+def import_items(import_directives, style, quiet_load=False):
+    """
+    Import the items in import_directives and return a list of the imported items
+
+    Each item in import_directives should be one of the following forms
+        * a tuple like ('module.submodule', ('classname1', 'classname2')), which indicates a 'from module.submodule import classname1, classname2'
+        * a tuple like ('module.submodule', 'classname1'), which indicates a 'from module.submodule import classname1'
+        * a tuple like ('module.submodule', '*'), which indicates a 'from module.submodule import *'
+        * a simple 'module.submodule' which indicates 'import module.submodule'.
+
+    Returns a dict mapping the names to the imported items
+    """
+    imported_objects = {}
+    for directive in import_directives:
+        try:
+            # First try a straight import
+            if isinstance(directive, six.string_types):
+                imported_object = __import__(directive)
+                imported_objects[directive.split('.')[0]] = imported_object
+                if not quiet_load:
+                    print(style.SQL_COLTYPE("import %s" % directive))
+                continue
+            elif isinstance(directive, (list, tuple)) and len(directive) == 2:
+                if not isinstance(directive[0], six.string_types):
+                    if not quiet_load:
+                        print(style.ERROR("Unable to import %r: module name must be of type string" % directive[0]))
+                    continue
+                if isinstance(directive[1], (list, tuple)) and all(isinstance(e, six.string_types) for e in directive[1]):
+                    # Try the ('module.submodule', ('classname1', 'classname2')) form
+                    imported_object = __import__(directive[0], {}, {}, directive[1])
+                    imported_names = []
+                    for name in directive[1]:
+                        try:
+                            imported_objects[name] = getattr(imported_object, name)
+                        except AttributeError:
+                            if not quiet_load:
+                                print(style.ERROR("Unable to import %r from %r: %r does not exist" % (name, directive[0], name)))
+                        else:
+                            imported_names.append(name)
+                    if not quiet_load:
+                        print(style.SQL_COLTYPE("from %s import %s" % (directive[0], ', '.join(imported_names))))
+                elif isinstance(directive[1], six.string_types):
+                    # If it is a tuple, but the second item isn't a list, so we have something like ('module.submodule', 'classname1')
+                    # Check for the special '*' to import all
+                    if directive[1] == '*':
+                        imported_object = __import__(directive[0], {}, {}, directive[1])
+                        for k in dir(imported_object):
+                            imported_objects[k] = getattr(imported_object, k)
+                        if not quiet_load:
+                            print(style.SQL_COLTYPE("from %s import *" % directive[0]))
+                    else:
+                        imported_object = getattr(__import__(directive[0], {}, {}, [directive[1]]), directive[1])
+                        imported_objects[directive[1]] = imported_object
+                        if not quiet_load:
+                            print(style.SQL_COLTYPE("from %s import %s" % (directive[0], directive[1])))
+                else:
+                    if not quiet_load:
+                        print(style.ERROR("Unable to import %r from %r: names must be of type string" % (directive[1], directive[0])))
+            else:
+                if not quiet_load:
+                    print(style.ERROR("Unable to import %r: names must be of type string" % directive))
+        except ImportError:
+            try:
+                if not quiet_load:
+                    print(style.ERROR("Unable to import %r" % directive))
+            except TypeError:
+                if not quiet_load:
+                    print(style.ERROR("Unable to import %r from %r" % directive))
+
+    return imported_objects
+
+
+def import_objects(options, style):
+    # Django 1.7 introduced the app registry which must be initialized before we
+    # can call get_apps(). Django already does this for us when we are invoked
+    # as manage.py command, but we have to do it ourselves if when running as
+    # iPython notebook extension, so we call django.setup() if the app registry
+    # isn't initialized yet. The try/except can be removed when support for
+    # Django 1.6 is dropped.
+    try:
+        from django.apps import apps
+        from django import setup
+    except ImportError:
+        pass
+    else:
+        if not apps.ready:
+            setup()
+
+    from django.db.models.loading import get_models, get_apps
+    mongoengine = False
+    try:
+        from mongoengine.base import _document_registry
+        mongoengine = True
+    except:
+        pass
+
+    from django.conf import settings
+    imported_objects = {}
+
+    dont_load_cli = options.get('dont_load')  # optparse will set this to [] if it doensnt exists
+    dont_load_conf = getattr(settings, 'SHELL_PLUS_DONT_LOAD', [])
+    dont_load = dont_load_cli + dont_load_conf
+    quiet_load = options.get('quiet_load')
+
+    model_aliases = getattr(settings, 'SHELL_PLUS_MODEL_ALIASES', {})
+
+    # Perform pre-imports before any other imports
+    SHELL_PLUS_PRE_IMPORTS = getattr(settings, 'SHELL_PLUS_PRE_IMPORTS', {})
+    if SHELL_PLUS_PRE_IMPORTS:
+        if not quiet_load:
+            print(style.SQL_TABLE("# Shell Plus User Imports"))
+        imports = import_items(SHELL_PLUS_PRE_IMPORTS, style, quiet_load=quiet_load)
+        for k, v in six.iteritems(imports):
+            imported_objects[k] = v
+
+    load_models = {}
+
+    if mongoengine:
+        for name, mod in six.iteritems(_document_registry):
+            name = name.split('.')[-1]
+            app_name = mod.__module__.split('.')[-2]
+            if app_name in dont_load or ("%s.%s" % (app_name, name)) in dont_load:
+                continue
+
+            load_models.setdefault(mod.__module__, [])
+            load_models[mod.__module__].append(name)
+
+    for app_mod in get_apps():
+        app_models = get_models(app_mod)
+        if not app_models:
+            continue
+
+        app_name = app_mod.__name__.split('.')[-2]
+        if app_name in dont_load:
+            continue
+
+        app_aliases = model_aliases.get(app_name, {})
+        for mod in app_models:
+            if "%s.%s" % (app_name, mod.__name__) in dont_load:
+                continue
+
+            load_models.setdefault(mod.__module__, [])
+            load_models[mod.__module__].append(mod.__name__)
+
+    if not quiet_load:
+        print(style.SQL_TABLE("# Shell Plus Model Imports"))
+    for app_mod, models in sorted(six.iteritems(load_models)):
+        try:
+            app_name = app_mod.split('.')[-2]
+        except IndexError:
+            # Some weird model naming scheme like in Sentry.
+            app_name = app_mod
+        app_aliases = model_aliases.get(app_name, {})
+        model_labels = []
+
+        for model_name in sorted(models):
+            try:
+                imported_object = getattr(__import__(app_mod, {}, {}, [model_name]), model_name)
+
+                if "%s.%s" % (app_name, model_name) in dont_load:
+                    continue
+
+                alias = app_aliases.get(model_name, model_name)
+                imported_objects[alias] = imported_object
+                if model_name == alias:
+                    model_labels.append(model_name)
+                else:
+                    model_labels.append("%s (as %s)" % (model_name, alias))
+
+            except AttributeError as e:
+                if options.get("traceback"):
+                    traceback.print_exc()
+                if not quiet_load:
+                    print(style.ERROR("Failed to import '%s' from '%s' reason: %s" % (model_name, app_mod, str(e))))
+                continue
+
+        if not quiet_load:
+            print(style.SQL_COLTYPE("from %s import %s" % (app_mod, ", ".join(model_labels))))
+
+    # Imports often used from Django
+    if getattr(settings, 'SHELL_PLUS_DJANGO_IMPORTS', True):
+        if not quiet_load:
+            print(style.SQL_TABLE("# Shell Plus Django Imports"))
+        SHELL_PLUS_DJANGO_IMPORTS = (
+            ('django.core.cache', ['cache']),
+            ('django.core.urlresolvers', ['reverse']),
+            ('django.conf', ['settings']),
+            ('django.db', ['transaction']),
+            ('django.db.models', ['Avg', 'Count', 'F', 'Max', 'Min', 'Sum', 'Q']),
+            ('django.utils', ['timezone']),
+        )
+        imports = import_items(SHELL_PLUS_DJANGO_IMPORTS, style, quiet_load=quiet_load)
+        for k, v in six.iteritems(imports):
+            imported_objects[k] = v
+
+    # Perform post-imports after any other imports
+    SHELL_PLUS_POST_IMPORTS = getattr(settings, 'SHELL_PLUS_POST_IMPORTS', {})
+    if SHELL_PLUS_POST_IMPORTS:
+        if not quiet_load:
+            print(style.SQL_TABLE("# Shell Plus User Imports"))
+        imports = import_items(SHELL_PLUS_POST_IMPORTS, style, quiet_load=quiet_load)
+        for k, v in six.iteritems(imports):
+            imported_objects[k] = v
+
+    return imported_objects
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/signals.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/signals.py
new file mode 100644
index 0000000..86da6a0
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/signals.py
@@ -0,0 +1,15 @@
+"""
+signals we use to trigger regular batch jobs
+"""
+from django.dispatch import Signal
+
+run_minutely_jobs = Signal()
+run_quarter_hourly_jobs = Signal()
+run_hourly_jobs = Signal()
+run_daily_jobs = Signal()
+run_weekly_jobs = Signal()
+run_monthly_jobs = Signal()
+run_yearly_jobs = Signal()
+
+pre_command = Signal(providing_args=["args", "kwargs"])
+post_command = Signal(providing_args=["args", "kwargs", "outcome"])
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/technical_response.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/technical_response.py
new file mode 100644
index 0000000..3e34e9e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/technical_response.py
@@ -0,0 +1,6 @@
+import six
+
+
+def null_technical_500_response(request, exc_type, exc_value, tb):
+    six.reraise(exc_type, exc_value, tb)
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/utils.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/utils.py
new file mode 100644
index 0000000..7044d1e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/management/utils.py
@@ -0,0 +1,80 @@
+from django.conf import settings
+import os
+import sys
+import logging
+from django_extensions.management.signals import pre_command, post_command
+
+try:
+    from importlib import import_module
+except ImportError:
+    try:
+        from django.utils.importlib import import_module
+    except ImportError:
+        def import_module(module):
+            return __import__(module, {}, {}, [''])
+
+
+def get_project_root():
+    """ get the project root directory """
+    django_settings_module = os.environ.get('DJANGO_SETTINGS_MODULE')
+    if not django_settings_module:
+        module_str = settings.SETTINGS_MODULE
+    else:
+        module_str = django_settings_module.split(".")[0]
+    mod = import_module(module_str)
+    return os.path.dirname(os.path.abspath(mod.__file__))
+
+
+def _make_writeable(filename):
+    """
+    Make sure that the file is writeable. Useful if our source is
+    read-only.
+
+    """
+    import stat
+    if sys.platform.startswith('java'):
+        # On Jython there is no os.access()
+        return
+    if not os.access(filename, os.W_OK):
+        st = os.stat(filename)
+        new_permissions = stat.S_IMODE(st.st_mode) | stat.S_IWUSR
+        os.chmod(filename, new_permissions)
+
+
+def setup_logger(logger, stream, filename=None, fmt=None):
+    """Sets up a logger (if no handlers exist) for console output,
+    and file 'tee' output if desired."""
+    if len(logger.handlers) < 1:
+        console = logging.StreamHandler(stream)
+        console.setLevel(logging.DEBUG)
+        console.setFormatter(logging.Formatter(fmt))
+        logger.addHandler(console)
+        logger.setLevel(logging.DEBUG)
+
+        if filename:
+            outfile = logging.FileHandler(filename)
+            outfile.setLevel(logging.INFO)
+            outfile.setFormatter(logging.Formatter("%(asctime)s " + (fmt if fmt else '%(message)s')))
+            logger.addHandler(outfile)
+
+
+class RedirectHandler(logging.Handler):
+    """Redirect logging sent to one logger (name) to another."""
+    def __init__(self, name, level=logging.DEBUG):
+        # Contemplate feasibility of copying a destination (allow original handler) and redirecting.
+        logging.Handler.__init__(self, level)
+        self.name = name
+        self.logger = logging.getLogger(name)
+
+    def emit(self, record):
+        self.logger.handle(record)
+
+
+def signalcommand(func):
+    """A decorator for management command handle defs that sends out a pre/post signal."""
+    def inner(self, *args, **kwargs):
+        pre_command.send(self.__class__, args=args, kwargs=kwargs)
+        ret = func(self, *args, **kwargs)
+        post_command.send(self.__class__, args=args, kwargs=kwargs, outcome=ret)
+        return ret
+    return inner
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/migrations/0001_empty.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/migrations/0001_empty.py
new file mode 100644
index 0000000..e631efd
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/migrations/0001_empty.py
@@ -0,0 +1,17 @@
+# -*- coding: utf-8 -*-
+from south.v2 import SchemaMigration
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        pass
+
+    def backwards(self, orm):
+        pass
+
+    models = {
+
+    }
+
+    complete_apps = ['django_extensions']
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/migrations/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/migrations/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/models.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/models.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/__init__.py
new file mode 100644
index 0000000..3945bb3
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/__init__.py
@@ -0,0 +1,250 @@
+"""
+MongoDB model fields emulating Django Extensions' additional model fields
+
+These fields are essentially identical to existing Extensions fields, but South hooks have been removed (since mongo requires no schema migration)
+
+"""
+
+import re
+import six
+import datetime
+from django import forms
+from django.template.defaultfilters import slugify
+from django.utils.translation import ugettext_lazy as _
+from mongoengine.fields import StringField, DateTimeField
+
+try:
+    import uuid
+    assert uuid
+except ImportError:
+    from django_extensions.utils import uuid
+
+
+class SlugField(StringField):
+    description = _("String (up to %(max_length)s)")
+
+    def __init__(self, *args, **kwargs):
+        kwargs['max_length'] = kwargs.get('max_length', 50)
+        # Set db_index=True unless it's been set manually.
+        if 'db_index' not in kwargs:
+            kwargs['db_index'] = True
+        super(SlugField, self).__init__(*args, **kwargs)
+
+    def get_internal_type(self):
+        return "SlugField"
+
+    def formfield(self, **kwargs):
+        defaults = {'form_class': forms.SlugField}
+        defaults.update(kwargs)
+        return super(SlugField, self).formfield(**defaults)
+
+
+class AutoSlugField(SlugField):
+    """ AutoSlugField, adapted for MongoDB
+
+    By default, sets editable=False, blank=True.
+
+    Required arguments:
+
+    populate_from
+        Specifies which field or list of fields the slug is populated from.
+
+    Optional arguments:
+
+    separator
+        Defines the used separator (default: '-')
+
+    overwrite
+        If set to True, overwrites the slug on every save (default: False)
+
+    Inspired by SmileyChris' Unique Slugify snippet:
+    http://www.djangosnippets.org/snippets/690/
+    """
+    def __init__(self, *args, **kwargs):
+        kwargs.setdefault('blank', True)
+        kwargs.setdefault('editable', False)
+
+        populate_from = kwargs.pop('populate_from', None)
+        if populate_from is None:
+            raise ValueError("missing 'populate_from' argument")
+        else:
+            self._populate_from = populate_from
+
+        self.slugify_function = kwargs.pop('slugify_function', slugify)
+        self.separator = kwargs.pop('separator', six.u('-'))
+        self.overwrite = kwargs.pop('overwrite', False)
+        super(AutoSlugField, self).__init__(*args, **kwargs)
+
+    def _slug_strip(self, value):
+        """
+        Cleans up a slug by removing slug separator characters that occur at
+        the beginning or end of a slug.
+
+        If an alternate separator is used, it will also replace any instances
+        of the default '-' separator with the new separator.
+        """
+        re_sep = '(?:-|%s)' % re.escape(self.separator)
+        value = re.sub('%s+' % re_sep, self.separator, value)
+        return re.sub(r'^%s+|%s+$' % (re_sep, re_sep), '', value)
+
+    def slugify_func(self, content):
+        return self.slugify_function(content)
+
+    def create_slug(self, model_instance, add):
+        # get fields to populate from and slug field to set
+        if not isinstance(self._populate_from, (list, tuple)):
+            self._populate_from = (self._populate_from, )
+        slug_field = model_instance._meta.get_field(self.attname)
+
+        if add or self.overwrite:
+            # slugify the original field content and set next step to 2
+            slug_for_field = lambda field: self.slugify_func(getattr(model_instance, field))
+            slug = self.separator.join(map(slug_for_field, self._populate_from))
+            next = 2
+        else:
+            # get slug from the current model instance and calculate next
+            # step from its number, clean-up
+            slug = self._slug_strip(getattr(model_instance, self.attname))
+            next = slug.split(self.separator)[-1]
+            if next.isdigit():
+                slug = self.separator.join(slug.split(self.separator)[:-1])
+                next = int(next)
+            else:
+                next = 2
+
+        # strip slug depending on max_length attribute of the slug field
+        # and clean-up
+        slug_len = slug_field.max_length
+        if slug_len:
+            slug = slug[:slug_len]
+        slug = self._slug_strip(slug)
+        original_slug = slug
+
+        # exclude the current model instance from the queryset used in finding
+        # the next valid slug
+        queryset = model_instance.__class__._default_manager.all()
+        if model_instance.pk:
+            queryset = queryset.exclude(pk=model_instance.pk)
+
+        # form a kwarg dict used to impliment any unique_together contraints
+        kwargs = {}
+        for params in model_instance._meta.unique_together:
+            if self.attname in params:
+                for param in params:
+                    kwargs[param] = getattr(model_instance, param, None)
+        kwargs[self.attname] = slug
+
+        # increases the number while searching for the next valid slug
+        # depending on the given slug, clean-up
+        while not slug or queryset.filter(**kwargs):
+            slug = original_slug
+            end = '%s%s' % (self.separator, next)
+            end_len = len(end)
+            if slug_len and len(slug) + end_len > slug_len:
+                slug = slug[:slug_len - end_len]
+                slug = self._slug_strip(slug)
+            slug = '%s%s' % (slug, end)
+            kwargs[self.attname] = slug
+            next += 1
+        return slug
+
+    def pre_save(self, model_instance, add):
+        value = six.u(self.create_slug(model_instance, add))
+        setattr(model_instance, self.attname, value)
+        return value
+
+    def get_internal_type(self):
+        return "SlugField"
+
+
+class CreationDateTimeField(DateTimeField):
+    """ CreationDateTimeField
+
+    By default, sets editable=False, blank=True, default=datetime.now
+    """
+
+    def __init__(self, *args, **kwargs):
+        kwargs.setdefault('default', datetime.datetime.now)
+        DateTimeField.__init__(self, *args, **kwargs)
+
+    def get_internal_type(self):
+        return "DateTimeField"
+
+
+class ModificationDateTimeField(CreationDateTimeField):
+    """ ModificationDateTimeField
+
+    By default, sets editable=False, blank=True, default=datetime.now
+
+    Sets value to datetime.now() on each save of the model.
+    """
+
+    def pre_save(self, model, add):
+        value = datetime.datetime.now()
+        setattr(model, self.attname, value)
+        return value
+
+    def get_internal_type(self):
+        return "DateTimeField"
+
+
+class UUIDVersionError(Exception):
+    pass
+
+
+class UUIDField(StringField):
+    """ UUIDField
+
+    By default uses UUID version 1 (generate from host ID, sequence number and current time)
+
+    The field support all uuid versions which are natively supported by the uuid python module.
+    For more information see: http://docs.python.org/lib/module-uuid.html
+    """
+
+    def __init__(self, verbose_name=None, name=None, auto=True, version=1, node=None, clock_seq=None, namespace=None, **kwargs):
+        kwargs['max_length'] = 36
+        self.auto = auto
+        self.version = version
+        if version == 1:
+            self.node, self.clock_seq = node, clock_seq
+        elif version == 3 or version == 5:
+            self.namespace, self.name = namespace, name
+        StringField.__init__(self, verbose_name, name, **kwargs)
+
+    def get_internal_type(self):
+        return StringField.__name__
+
+    def contribute_to_class(self, cls, name):
+        if self.primary_key:
+            assert not cls._meta.has_auto_field, "A model can't have more than one AutoField: %s %s %s; have %s" % (self, cls, name, cls._meta.auto_field)
+            super(UUIDField, self).contribute_to_class(cls, name)
+            cls._meta.has_auto_field = True
+            cls._meta.auto_field = self
+        else:
+            super(UUIDField, self).contribute_to_class(cls, name)
+
+    def create_uuid(self):
+        if not self.version or self.version == 4:
+            return uuid.uuid4()
+        elif self.version == 1:
+            return uuid.uuid1(self.node, self.clock_seq)
+        elif self.version == 2:
+            raise UUIDVersionError("UUID version 2 is not supported.")
+        elif self.version == 3:
+            return uuid.uuid3(self.namespace, self.name)
+        elif self.version == 5:
+            return uuid.uuid5(self.namespace, self.name)
+        else:
+            raise UUIDVersionError("UUID version %s is not valid." % self.version)
+
+    def pre_save(self, model_instance, add):
+        if self.auto and add:
+            value = six.u(self.create_uuid())
+            setattr(model_instance, self.attname, value)
+            return value
+        else:
+            value = super(UUIDField, self).pre_save(model_instance, add)
+            if self.auto and not value:
+                value = six.u(self.create_uuid())
+                setattr(model_instance, self.attname, value)
+        return value
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/encrypted.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/encrypted.py
new file mode 100644
index 0000000..2c8d7f7
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/encrypted.py
@@ -0,0 +1,61 @@
+"""
+Encrypted fields from Django Extensions, modified for use with mongoDB
+"""
+from mongoengine.base import BaseField
+from django.core.exceptions import ImproperlyConfigured
+from django import forms
+from django.conf import settings
+
+try:
+    from keyczar import keyczar
+except ImportError:
+    raise ImportError('Using an encrypted field requires the Keyczar module.  You can obtain Keyczar from http://www.keyczar.org/.')
+
+
+class BaseEncryptedField(BaseField):
+    prefix = 'enc_str:::'
+
+    def __init__(self, *args, **kwargs):
+        if not hasattr(settings, 'ENCRYPTED_FIELD_KEYS_DIR'):
+            raise ImproperlyConfigured('You must set settings.ENCRYPTED_FIELD_KEYS_DIR to your Keyczar keys directory.')
+        self.crypt = keyczar.Crypter.Read(settings.ENCRYPTED_FIELD_KEYS_DIR)
+        super(BaseEncryptedField, self).__init__(*args, **kwargs)
+
+    def to_python(self, value):
+        if (value.startswith(self.prefix)):
+            retval = self.crypt.Decrypt(value[len(self.prefix):])
+        else:
+            retval = value
+
+        return retval
+
+    def get_db_prep_value(self, value):
+        if not value.startswith(self.prefix):
+            value = self.prefix + self.crypt.Encrypt(value)
+        return value
+
+
+class EncryptedTextField(BaseEncryptedField):
+    def get_internal_type(self):
+        return 'StringField'
+
+    def formfield(self, **kwargs):
+        defaults = {'widget': forms.Textarea}
+        defaults.update(kwargs)
+        return super(EncryptedTextField, self).formfield(**defaults)
+
+
+class EncryptedCharField(BaseEncryptedField):
+    def __init__(self, max_length=None, *args, **kwargs):
+        if max_length:
+            max_length += len(self.prefix)
+
+        super(EncryptedCharField, self).__init__(max_length=max_length, *args, **kwargs)
+
+    def get_internal_type(self):
+        return "StringField"
+
+    def formfield(self, **kwargs):
+        defaults = {'max_length': self.max_length}
+        defaults.update(kwargs)
+        return super(EncryptedCharField, self).formfield(**defaults)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/json.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/json.py
new file mode 100644
index 0000000..5bccd4e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/fields/json.py
@@ -0,0 +1,77 @@
+"""
+JSONField automatically serializes most Python terms to JSON data.
+Creates a TEXT field with a default value of "{}".  See test_json.py for
+more information.
+
+ from django.db import models
+ from django_extensions.db.fields import json
+
+ class LOL(models.Model):
+     extra = json.JSONField()
+"""
+
+import six
+import datetime
+from decimal import Decimal
+from django.conf import settings
+from django.utils import simplejson
+from mongoengine.fields import StringField
+
+
+class JSONEncoder(simplejson.JSONEncoder):
+    def default(self, obj):
+        if isinstance(obj, Decimal):
+            return str(obj)
+        elif isinstance(obj, datetime.datetime):
+            assert settings.TIME_ZONE == 'UTC'
+            return obj.strftime('%Y-%m-%dT%H:%M:%SZ')
+        return simplejson.JSONEncoder.default(self, obj)
+
+
+def dumps(value):
+    assert isinstance(value, dict)
+    return JSONEncoder().encode(value)
+
+
+def loads(txt):
+    value = simplejson.loads(txt, parse_float=Decimal, encoding=settings.DEFAULT_CHARSET)
+    assert isinstance(value, dict)
+    return value
+
+
+class JSONDict(dict):
+    """
+    Hack so repr() called by dumpdata will output JSON instead of
+    Python formatted data.  This way fixtures will work!
+    """
+    def __repr__(self):
+        return dumps(self)
+
+
+class JSONField(StringField):
+    """JSONField is a generic textfield that neatly serializes/unserializes
+    JSON objects seamlessly.  Main thingy must be a dict object."""
+
+    def __init__(self, *args, **kwargs):
+        if 'default' not in kwargs:
+            kwargs['default'] = '{}'
+        StringField.__init__(self, *args, **kwargs)
+
+    def to_python(self, value):
+        """Convert our string value to JSON after we load it from the DB"""
+        if not value:
+            return {}
+        elif isinstance(value, six.string_types):
+            res = loads(value)
+            assert isinstance(res, dict)
+            return JSONDict(**res)
+        else:
+            return value
+
+    def get_db_prep_save(self, value):
+        """Convert our JSON object to a string before we save"""
+        if not value:
+            return super(JSONField, self).get_db_prep_save("")
+        else:
+            return super(JSONField, self).get_db_prep_save(dumps(value))
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/models.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/models.py
new file mode 100644
index 0000000..11f114f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/mongodb/models.py
@@ -0,0 +1,69 @@
+"""
+Django Extensions abstract base mongoengine Document classes.
+"""
+import datetime
+from mongoengine.document import Document
+from mongoengine.fields import StringField, IntField, DateTimeField
+from mongoengine.queryset import QuerySetManager
+from django.utils.translation import ugettext_lazy as _
+from django_extensions.mongodb.fields import ModificationDateTimeField, CreationDateTimeField, AutoSlugField
+
+
+class TimeStampedModel(Document):
+    """ TimeStampedModel
+    An abstract base class model that provides self-managed "created" and
+    "modified" fields.
+    """
+    created = CreationDateTimeField(_('created'))
+    modified = ModificationDateTimeField(_('modified'))
+
+    class Meta:
+        abstract = True
+
+
+class TitleSlugDescriptionModel(Document):
+    """ TitleSlugDescriptionModel
+    An abstract base class model that provides title and description fields
+    and a self-managed "slug" field that populates from the title.
+    """
+    title = StringField(_('title'), max_length=255)
+    slug = AutoSlugField(_('slug'), populate_from='title')
+    description = StringField(_('description'), blank=True, null=True)
+
+    class Meta:
+        abstract = True
+
+
+class ActivatorModelManager(QuerySetManager):
+    """ ActivatorModelManager
+    Manager to return instances of ActivatorModel: SomeModel.objects.active() / .inactive()
+    """
+    def active(self):
+        """ Returns active instances of ActivatorModel: SomeModel.objects.active() """
+        return super(ActivatorModelManager, self).get_query_set().filter(status=1)
+
+    def inactive(self):
+        """ Returns inactive instances of ActivatorModel: SomeModel.objects.inactive() """
+        return super(ActivatorModelManager, self).get_query_set().filter(status=0)
+
+
+class ActivatorModel(Document):
+    """ ActivatorModel
+    An abstract base class model that provides activate and deactivate fields.
+    """
+    STATUS_CHOICES = (
+        (0, _('Inactive')),
+        (1, _('Active')),
+    )
+    status = IntField(_('status'), choices=STATUS_CHOICES, default=1)
+    activate_date = DateTimeField(blank=True, null=True, help_text=_('keep empty for an immediate activation'))
+    deactivate_date = DateTimeField(blank=True, null=True, help_text=_('keep empty for indefinite activation'))
+    objects = ActivatorModelManager()
+
+    class Meta:
+        abstract = True
+
+    def save(self, *args, **kwargs):
+        if not self.activate_date:
+            self.activate_date = datetime.datetime.now()
+        super(ActivatorModel, self).save(*args, **kwargs)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/settings.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/settings.py
new file mode 100644
index 0000000..ea72d45
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/settings.py
@@ -0,0 +1,8 @@
+import os
+from django.conf import settings
+
+BASE_DIR = os.path.dirname(os.path.realpath(__file__))
+REPLACEMENTS = {
+}
+add_replacements = getattr(settings, 'EXTENSIONS_REPLACEMENTS', {})
+REPLACEMENTS.update(add_replacements)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/css/jquery.autocomplete.css b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/css/jquery.autocomplete.css
new file mode 100644
index 0000000..c9d97b0
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/css/jquery.autocomplete.css
@@ -0,0 +1,38 @@
+/**
+ * @fileOverview CSS for jquery-autocomplete, the jQuery Autocompleter
+ * @author <a href="mailto:dylan@dyve.net">Dylan Verheul</a>
+ * @license MIT | GPL | Apache 2.0, see LICENSE.txt
+ * @see https://github.com/dyve/jquery-autocomplete
+ */
+.acResults {
+	padding: 0px;
+	border: 1px solid WindowFrame;
+	background-color: Window;
+	overflow: hidden;
+}
+
+.acResults ul {
+	margin: 0px;
+	padding: 0px;
+	list-style-position: outside;
+	list-style: none;	
+}
+
+.acResults ul li {
+	margin: 0px;
+	padding: 2px 5px;
+	cursor: pointer;
+	display: block;
+	font: menu;
+	font-size: 12px;
+	overflow: hidden;
+}
+
+.acLoading {
+	background : url('../img/indicator.gif') right center no-repeat;
+}
+
+.acSelect {
+	background-color: Highlight;
+	color: HighlightText;
+}
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/img/indicator.gif b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/img/indicator.gif
new file mode 100644
index 0000000000000000000000000000000000000000..085ccaecaf5fa5c34bc14cd2c2ed5cbbd8e25dcb
GIT binary patch
literal 1553
zcma)+TTl~c6vwlh>n<VLV61^sn`|N^0W=V(@iI19!X;{*a0v}4n9#t)qE(cNZLw}P
zBrK?LQM6z?S|c(6DW=#WqtgyaK&kac#nC!4BieSLI*ymt;!A1Ljt{60JulzOch2ve
z|9Adhjv-sK$coSq+8~WKJw5&4!Gp1}u`_4Rbai#LwY8BXSzB9MSy^c^ne=+STCGM=
zR3H%01hjC3??;aR9g^v&Rau1vnL1-u+I$rq2q#LOF_`QyJvmY&(guxLE0$qEqwH57
z21*&1rPOix(v`P|1KqGX6!OzM^uQ4ETdu6EuSGj4nxc$0+~1FySgw;sDf5!mMXXtJ
z_@XnE+69Z^;Ek6TFIK@@Sz3@Gt4mgcQFI0qB-Tm+h>b99Af5rT)t{mCEg5urg=A(g
z{C|6SPb~9Xage|wB`SrZk2FOMYM!buln2sX?5Y+T78iB(Zu9cS7|LZyZ++}u$^oi1
z_j@S}bW9OzU2R+RMy&~OT>X-oZ98$jq#ogNfJ!BM-42wHGZk*6s2KD}U*IA%epmxb
zm}|6BK9YoIF;*xSL!+z@<64lB7->LTW2Vi4ostCA(z&2XniwNIv}fFo-`MbG;)u4G
z^p@F!)|9HhZprHd_vXjDoxs6WkK-6P0@lfxnGT>*p(QHoUV=u1FAqb@b%*W<w2f#2
z9Zq52LnoAPWxjqFa17&!lIJ3lEbmY7(n(&LWmufC*Do^9<}hNtBbx^HGRL7u_650L
z@3YLm0&zR;*(vvhKl4$5URv-j9V^8@CER$E{3R?ej5S0wuBLpg<mFJu{hL^H^4t$r
zU$OthrOpL^Q8IHH&%vf!%?Er#xip35=vO%xYnERtD;U+bp7xwgQR+AR*m0vBC}cFa
zUb#)xk?JZ+E=0W5WCO)wSBa>=a3{`LsH5k^AvQNL>6fPpy#oU(&MuH(*aEX4b35*}
zn4n7)`I2U%=+Z=?BVZQ?<pD1q+$vd%8uP#+pdy-Ij6|<fF!&{iWt)`CPgH-zuTvcI
zyfkA(+Q@rSV#=o>vjQFW4gD@~XSOO6b{qu81`4&LFuU2(ilxW+1|ZkNMnWe79C$gs
zWT?Ele|HR{JGPe)5BTW>0Ey<DIvb)X7FdCg3kq-^KY>?-Ls6S#GoV0tbt6ku7B&*0
z;i9QM$W1Rj*rRIdceL)rAOSl+sDe3LkB87<%){;ZdHp6|SNl<OIeBfYJ^OGoVC|jD
zcj|NrO0)Z%BOuq3YT)!JC)v;7%cHj=+`Ob^2$Vkq`P{n^zZen9w+$o2yd>opDXRx<
zxBDF9-lTo&v`8$humFygUij@qgT=Qzhj8{ym2-{Xciwqq_Xwk%=O3B-MNAL_6e`3U
zyxwmXex4`g0^1RYw~Dth3av3Dl^AAlpO3mG!nLr#&ZZ7c_wUboI+deC+&%TFjK2Lm
z!Y&f1h|T_On%RCV&=4bx`!>(YezqGVhl&QpED?N6GV)HmzJ9&rh$x*i?*@o9#6QI<
z5ZI_MR<T&BR{~4JK$);*Lc}>X;0+p<?a4bIc*y(Xi3cp5d?^0LhPu<3u^J|nbF?~l
z5p;s4bEF-J@g5$=A7ZajUFdkSSl>Y8$`j)eF#TlUyG(eE%E7S!rj;mj^M5vhUicPm
zVWQ2z+imFyg}SRABmOBY_@osR!>7Ov!ioK`NB6_Rv}7Ud?35ed5Sb@?yND?kv~RCa
wqs^a3Sh>&&L4)!LKI?D2&k@))k(LESaga|C278ChSzn3NWVkcuNoY&{0f?~U_5c6?

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery-1.7.2.min.js b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery-1.7.2.min.js
new file mode 100644
index 0000000..16ad06c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery-1.7.2.min.js
@@ -0,0 +1,4 @@
+/*! jQuery v1.7.2 jquery.com | jquery.org/license */
+(function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cu(a){if(!cj[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){ck||(ck=c.createElement("iframe"),ck.frameBorder=ck.width=ck.height=0),b.appendChild(ck);if(!cl||!ck.createElement)cl=(ck.contentWindow||ck.contentDocument).document,cl.write((f.support.boxModel?"<!doctype html>":"")+"<html><body>"),cl.close();d=cl.createElement(a),cl.body.appendChild(d),e=f.css(d,"display"),b.removeChild(ck)}cj[a]=e}return cj[a]}function ct(a,b){var c={};f.each(cp.concat.apply([],cp.slice(0,b)),function(){c[this]=a});return c}function cs(){cq=b}function cr(){setTimeout(cs,0);return cq=f.now()}function ci(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ch(){try{return new a.XMLHttpRequest}catch(b){}}function cb(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function ca(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function b_(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bD.test(a)?d(a,e):b_(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&f.type(b)==="object")for(var e in b)b_(a+"["+e+"]",b[e],c,d);else d(a,b)}function b$(a,c){var d,e,g=f.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((g[d]?a:e||(e={}))[d]=c[d]);e&&f.extend(!0,a,e)}function bZ(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bS,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bZ(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bZ(a,c,d,e,"*",g));return l}function bY(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bO),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bB(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?1:0,g=4;if(d>0){if(c!=="border")for(;e<g;e+=2)c||(d-=parseFloat(f.css(a,"padding"+bx[e]))||0),c==="margin"?d+=parseFloat(f.css(a,c+bx[e]))||0:d-=parseFloat(f.css(a,"border"+bx[e]+"Width"))||0;return d+"px"}d=by(a,b);if(d<0||d==null)d=a.style[b];if(bt.test(d))return d;d=parseFloat(d)||0;if(c)for(;e<g;e+=2)d+=parseFloat(f.css(a,"padding"+bx[e]))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+bx[e]+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+bx[e]))||0);return d+"px"}function bo(a){var b=c.createElement("div");bh.appendChild(b),b.innerHTML=a.outerHTML;return b.firstChild}function bn(a){var b=(a.nodeName||"").toLowerCase();b==="input"?bm(a):b!=="script"&&typeof a.getElementsByTagName!="undefined"&&f.grep(a.getElementsByTagName("input"),bm)}function bm(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bl(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bk(a,b){var c;b.nodeType===1&&(b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?b.outerHTML=a.outerHTML:c!=="input"||a.type!=="checkbox"&&a.type!=="radio"?c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text):(a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value)),b.removeAttribute(f.expando),b.removeAttribute("_submit_attached"),b.removeAttribute("_change_attached"))}function bj(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c,d,e,g=f._data(a),h=f._data(b,g),i=g.events;if(i){delete h.handle,h.events={};for(c in i)for(d=0,e=i[c].length;d<e;d++)f.event.add(b,c,i[c][d])}h.data&&(h.data=f.extend({},h.data))}}function bi(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function U(a){var b=V.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function T(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(O.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function S(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function K(){return!0}function J(){return!1}function n(a,b,c){var d=b+"defer",e=b+"queue",g=b+"mark",h=f._data(a,d);h&&(c==="queue"||!f._data(a,e))&&(c==="mark"||!f._data(a,g))&&setTimeout(function(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)}function m(a){for(var b in a){if(b==="data"&&f.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function l(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(k,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNumeric(d)?+d:j.test(d)?f.parseJSON(d):d}catch(g){}f.data(a,c,d)}else d=b}return d}function h(a){var b=g[a]={},c,d;a=a.split(/\s+/);for(c=0,d=a.length;c<d;c++)b[a[c]]=!0;return b}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=/-([a-z]|[0-9])/ig,w=/^-ms-/,x=function(a,b){return(b+"").toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=m.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.7.2",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.add(a);return this},eq:function(a){a=+a;return a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.fireWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").off("ready")}},bindReady:function(){if(!A){A=e.Callbacks("once memory");if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||D.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw new Error(a)},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(c){if(typeof c!="string"||!c)return null;var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&e.error("Invalid XML: "+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,"ms-").replace(v,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b,c){var d;if(b){if(H)return H.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h,i){var j,k=d==null,l=0,m=a.length;if(d&&typeof d=="object"){for(l in d)e.access(a,c,l,d[l],1,h,f);g=1}else if(f!==b){j=i===b&&e.isFunction(f),k&&(j?(j=c,c=function(a,b,c){return j.call(e(a),c)}):(c.call(a,f),c=null));if(c)for(;l<m;l++)c(a[l],d,j?f.call(a[l],l,c(a[l],d)):f,i);g=1}return g?a:k?c.call(a):m?c(a[0],d):h},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g={};f.Callbacks=function(a){a=a?g[a]||h(a):{};var c=[],d=[],e,i,j,k,l,m,n=function(b){var d,e,g,h,i;for(d=0,e=b.length;d<e;d++)g=b[d],h=f.type(g),h==="array"?n(g):h==="function"&&(!a.unique||!p.has(g))&&c.push(g)},o=function(b,f){f=f||[],e=!a.memory||[b,f],i=!0,j=!0,m=k||0,k=0,l=c.length;for(;c&&m<l;m++)if(c[m].apply(b,f)===!1&&a.stopOnFalse){e=!0;break}j=!1,c&&(a.once?e===!0?p.disable():c=[]:d&&d.length&&(e=d.shift(),p.fireWith(e[0],e[1])))},p={add:function(){if(c){var a=c.length;n(arguments),j?l=c.length:e&&e!==!0&&(k=a,o(e[0],e[1]))}return this},remove:function(){if(c){var b=arguments,d=0,e=b.length;for(;d<e;d++)for(var f=0;f<c.length;f++)if(b[d]===c[f]){j&&f<=l&&(l--,f<=m&&m--),c.splice(f--,1);if(a.unique)break}}return this},has:function(a){if(c){var b=0,d=c.length;for(;b<d;b++)if(a===c[b])return!0}return!1},empty:function(){c=[];return this},disable:function(){c=d=e=b;return this},disabled:function(){return!c},lock:function(){d=b,(!e||e===!0)&&p.disable();return this},locked:function(){return!d},fireWith:function(b,c){d&&(j?a.once||d.push([b,c]):(!a.once||!e)&&o(b,c));return this},fire:function(){p.fireWith(this,arguments);return this},fired:function(){return!!i}};return p};var i=[].slice;f.extend({Deferred:function(a){var b=f.Callbacks("once memory"),c=f.Callbacks("once memory"),d=f.Callbacks("memory"),e="pending",g={resolve:b,reject:c,notify:d},h={done:b.add,fail:c.add,progress:d.add,state:function(){return e},isResolved:b.fired,isRejected:c.fired,then:function(a,b,c){i.done(a).fail(b).progress(c);return this},always:function(){i.done.apply(i,arguments).fail.apply(i,arguments);return this},pipe:function(a,b,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[b,"reject"],progress:[c,"notify"]},function(a,b){var c=b[0],e=b[1],g;f.isFunction(c)?i[a](function(){g=c.apply(this,arguments),g&&f.isFunction(g.promise)?g.promise().then(d.resolve,d.reject,d.notify):d[e+"With"](this===i?d:this,[g])}):i[a](d[e])})}).promise()},promise:function(a){if(a==null)a=h;else for(var b in h)a[b]=h[b];return a}},i=h.promise({}),j;for(j in g)i[j]=g[j].fire,i[j+"With"]=g[j].fireWith;i.done(function(){e="resolved"},c.disable,d.lock).fail(function(){e="rejected"},b.disable,d.lock),a&&a.call(i,i);return i},when:function(a){function m(a){return function(b){e[a]=arguments.length>1?i.call(arguments,0):b,j.notifyWith(k,e)}}function l(a){return function(c){b[a]=arguments.length>1?i.call(arguments,0):c,--g||j.resolveWith(j,b)}}var b=i.call(arguments,0),c=0,d=b.length,e=Array(d),g=d,h=d,j=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred(),k=j.promise();if(d>1){for(;c<d;c++)b[c]&&b[c].promise&&f.isFunction(b[c].promise)?b[c].promise().then(l(c),j.reject,m(c)):--g;g||j.resolveWith(j,b)}else j!==a&&j.resolveWith(j,d?[a]:[]);return k}}),f.support=function(){var b,d,e,g,h,i,j,k,l,m,n,o,p=c.createElement("div"),q=c.documentElement;p.setAttribute("className","t"),p.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=p.getElementsByTagName("*"),e=p.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=p.getElementsByTagName("input")[0],b={leadingWhitespace:p.firstChild.nodeType===3,tbody:!p.getElementsByTagName("tbody").length,htmlSerialize:!!p.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:p.className!=="t",enctype:!!c.createElement("form").enctype,html5Clone:c.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,pixelMargin:!0},f.boxModel=b.boxModel=c.compatMode==="CSS1Compat",i.checked=!0,b.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,b.optDisabled=!h.disabled;try{delete p.test}catch(r){b.deleteExpando=!1}!p.addEventListener&&p.attachEvent&&p.fireEvent&&(p.attachEvent("onclick",function(){b.noCloneEvent=!1}),p.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),b.radioValue=i.value==="t",i.setAttribute("checked","checked"),i.setAttribute("name","t"),p.appendChild(i),j=c.createDocumentFragment(),j.appendChild(p.lastChild),b.checkClone=j.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=i.checked,j.removeChild(i),j.appendChild(p);if(p.attachEvent)for(n in{submit:1,change:1,focusin:1})m="on"+n,o=m in p,o||(p.setAttribute(m,"return;"),o=typeof p[m]=="function"),b[n+"Bubbles"]=o;j.removeChild(p),j=g=h=p=i=null,f(function(){var d,e,g,h,i,j,l,m,n,q,r,s,t,u=c.getElementsByTagName("body")[0];!u||(m=1,t="padding:0;margin:0;border:",r="position:absolute;top:0;left:0;width:1px;height:1px;",s=t+"0;visibility:hidden;",n="style='"+r+t+"5px solid #000;",q="<div "+n+"display:block;'><div style='"+t+"0;display:block;overflow:hidden;'></div></div>"+"<table "+n+"' cellpadding='0' cellspacing='0'>"+"<tr><td></td></tr></table>",d=c.createElement("div"),d.style.cssText=s+"width:0;height:0;position:static;top:0;margin-top:"+m+"px",u.insertBefore(d,u.firstChild),p=c.createElement("div"),d.appendChild(p),p.innerHTML="<table><tr><td style='"+t+"0;display:none'></td><td>t</td></tr></table>",k=p.getElementsByTagName("td"),o=k[0].offsetHeight===0,k[0].style.display="",k[1].style.display="none",b.reliableHiddenOffsets=o&&k[0].offsetHeight===0,a.getComputedStyle&&(p.innerHTML="",l=c.createElement("div"),l.style.width="0",l.style.marginRight="0",p.style.width="2px",p.appendChild(l),b.reliableMarginRight=(parseInt((a.getComputedStyle(l,null)||{marginRight:0}).marginRight,10)||0)===0),typeof p.style.zoom!="undefined"&&(p.innerHTML="",p.style.width=p.style.padding="1px",p.style.border=0,p.style.overflow="hidden",p.style.display="inline",p.style.zoom=1,b.inlineBlockNeedsLayout=p.offsetWidth===3,p.style.display="block",p.style.overflow="visible",p.innerHTML="<div style='width:5px;'></div>",b.shrinkWrapBlocks=p.offsetWidth!==3),p.style.cssText=r+s,p.innerHTML=q,e=p.firstChild,g=e.firstChild,i=e.nextSibling.firstChild.firstChild,j={doesNotAddBorder:g.offsetTop!==5,doesAddBorderForTableAndCells:i.offsetTop===5},g.style.position="fixed",g.style.top="20px",j.fixedPosition=g.offsetTop===20||g.offsetTop===15,g.style.position=g.style.top="",e.style.overflow="hidden",e.style.position="relative",j.subtractsBorderForOverflowNotVisible=g.offsetTop===-5,j.doesNotIncludeMarginInBodyOffset=u.offsetTop!==m,a.getComputedStyle&&(p.style.marginTop="1%",b.pixelMargin=(a.getComputedStyle(p,null)||{marginTop:0}).marginTop!=="1%"),typeof d.style.zoom!="undefined"&&(d.style.zoom=1),u.removeChild(d),l=p=d=null,f.extend(b,j))});return b}();var j=/^(?:\{.*\}|\[.*\])$/,k=/([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!m(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g,h,i,j=f.expando,k=typeof c=="string",l=a.nodeType,m=l?f.cache:a,n=l?a[j]:a[j]&&j,o=c==="events";if((!n||!m[n]||!o&&!e&&!m[n].data)&&k&&d===b)return;n||(l?a[j]=n=++f.uuid:n=j),m[n]||(m[n]={},l||(m[n].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?m[n]=f.extend(m[n],c):m[n].data=f.extend(m[n].data,c);g=h=m[n],e||(h.data||(h.data={}),h=h.data),d!==b&&(h[f.camelCase(c)]=d);if(o&&!h[c])return g.events;k?(i=h[c],i==null&&(i=h[f.camelCase(c)])):i=h;return i}},removeData:function(a,b,c){if(!!f.acceptData(a)){var d,e,g,h=f.expando,i=a.nodeType,j=i?f.cache:a,k=i?a[h]:h;if(!j[k])return;if(b){d=c?j[k]:j[k].data;if(d){f.isArray(b)||(b in d?b=[b]:(b=f.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,g=b.length;e<g;e++)delete d[b[e]];if(!(c?m:f.isEmptyObject)(d))return}}if(!c){delete j[k].data;if(!m(j[k]))return}f.support.deleteExpando||!j.setInterval?delete j[k]:j[k]=null,i&&(f.support.deleteExpando?delete a[h]:a.removeAttribute?a.removeAttribute(h):a[h]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d,e,g,h,i,j=this[0],k=0,m=null;if(a===b){if(this.length){m=f.data(j);if(j.nodeType===1&&!f._data(j,"parsedAttrs")){g=j.attributes;for(i=g.length;k<i;k++)h=g[k].name,h.indexOf("data-")===0&&(h=f.camelCase(h.substring(5)),l(j,h,m[h]));f._data(j,"parsedAttrs",!0)}}return m}if(typeof a=="object")return this.each(function(){f.data(this,a)});d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!";return f.access(this,function(c){if(c===b){m=this.triggerHandler("getData"+e,[d[0]]),m===b&&j&&(m=f.data(j,a),m=l(j,a,m));return m===b&&d[1]?this.data(d[0]):m}d[1]=c,this.each(function(){var b=f(this);b.triggerHandler("setData"+e,d),f.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1)},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,b){a&&(b=(b||"fx")+"mark",f._data(a,b,(f._data(a,b)||0)+1))},_unmark:function(a,b,c){a!==!0&&(c=b,b=a,a=!1);if(b){c=c||"fx";var d=c+"mark",e=a?0:(f._data(b,d)||1)-1;e?f._data(b,d,e):(f.removeData(b,d,!0),n(b,c,"mark"))}},queue:function(a,b,c){var d;if(a){b=(b||"fx")+"queue",d=f._data(a,b),c&&(!d||f.isArray(c)?d=f._data(a,b,f.makeArray(c)):d.push(c));return d||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e={};d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),f._data(a,b+".run",e),d.call(a,function(){f.dequeue(a,b)},e)),c.length||(f.removeData(a,b+"queue "+b+".run",!0),n(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){var d=2;typeof a!="string"&&(c=a,a="fx",d--);if(arguments.length<d)return f.queue(this[0],a);return c===b?this:this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f.Callbacks("once memory"),!0))h++,l.add(m);m();return d.promise(c)}});var o=/[\n\t\r]/g,p=/\s+/,q=/\r/g,r=/^(?:button|input)$/i,s=/^(?:button|input|object|select|textarea)$/i,t=/^a(?:rea)?$/i,u=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,v=f.support.getSetAttribute,w,x,y;f.fn.extend({attr:function(a,b){return f.access(this,f.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,f.prop,a,b,arguments.length>1)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(p);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(p);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(o," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(p);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(o," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e,g=this[0];{if(!!arguments.length){e=f.isFunction(a);return this.each(function(d){var g=f(this),h;if(this.nodeType===1){e?h=a.call(this,d,g.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.type]||f.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}if(g){c=f.valHooks[g.type]||f.valHooks[g.nodeName.toLowerCase()];if(c&&"get"in c&&(d=c.get(g,"value"))!==b)return d;d=g.value;return typeof d=="string"?d.replace(q,""):d==null?"":d}}}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,g=a.selectedIndex,h=[],i=a.options,j=a.type==="select-one";if(g<0)return null;c=j?g:0,d=j?g+1:i.length;for(;c<d;c++){e=i[c];if(e.selected&&(f.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!f.nodeName(e.parentNode,"optgroup"))){b=f(e).val();if(j)return b;h.push(b)}}if(j&&!h.length&&i.length)return f(i[g]).val();return h},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,d,e){var g,h,i,j=a.nodeType;if(!!a&&j!==3&&j!==8&&j!==2){if(e&&c in f.attrFn)return f(a)[c](d);if(typeof a.getAttribute=="undefined")return f.prop(a,c,d);i=j!==1||!f.isXMLDoc(a),i&&(c=c.toLowerCase(),h=f.attrHooks[c]||(u.test(c)?x:w));if(d!==b){if(d===null){f.removeAttr(a,c);return}if(h&&"set"in h&&i&&(g=h.set(a,d,c))!==b)return g;a.setAttribute(c,""+d);return d}if(h&&"get"in h&&i&&(g=h.get(a,c))!==null)return g;g=a.getAttribute(c);return g===null?b:g}},removeAttr:function(a,b){var c,d,e,g,h,i=0;if(b&&a.nodeType===1){d=b.toLowerCase().split(p),g=d.length;for(;i<g;i++)e=d[i],e&&(c=f.propFix[e]||e,h=u.test(e),h||f.attr(a,e,""),a.removeAttribute(v?e:c),h&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(r.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},value:{get:function(a,b){if(w&&f.nodeName(a,"button"))return w.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(w&&f.nodeName(a,"button"))return w.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,g,h,i=a.nodeType;if(!!a&&i!==3&&i!==8&&i!==2){h=i!==1||!f.isXMLDoc(a),h&&(c=f.propFix[c]||c,g=f.propHooks[c]);return d!==b?g&&"set"in g&&(e=g.set(a,d,c))!==b?e:a[c]=d:g&&"get"in g&&(e=g.get(a,c))!==null?e:a[c]}},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):s.test(a.nodeName)||t.test(a.nodeName)&&a.href?0:b}}}}),f.attrHooks.tabindex=f.propHooks.tabIndex,x={get:function(a,c){var d,e=f.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},v||(y={name:!0,id:!0,coords:!0},w=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&(y[c]?d.nodeValue!=="":d.specified)?d.nodeValue:b},set:function(a,b,d){var e=a.getAttributeNode(d);e||(e=c.createAttribute(d),a.setAttributeNode(e));return e.nodeValue=b+""}},f.attrHooks.tabindex.set=w.set,f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})}),f.attrHooks.contenteditable={get:w.get,set:function(a,b,c){b===""&&(b="false"),w.set(a,b,c)}}),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex);return null}})),f.support.enctype||(f.propFix.enctype="encoding"),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var z=/^(?:textarea|input|select)$/i,A=/^([^\.]*)?(?:\.(.+))?$/,B=/(?:^|\s)hover(\.\S+)?\b/,C=/^key/,D=/^(?:mouse|contextmenu)|click/,E=/^(?:focusinfocus|focusoutblur)$/,F=/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,G=function(
+a){var b=F.exec(a);b&&(b[1]=(b[1]||"").toLowerCase(),b[3]=b[3]&&new RegExp("(?:^|\\s)"+b[3]+"(?:\\s|$)"));return b},H=function(a,b){var c=a.attributes||{};return(!b[1]||a.nodeName.toLowerCase()===b[1])&&(!b[2]||(c.id||{}).value===b[2])&&(!b[3]||b[3].test((c["class"]||{}).value))},I=function(a){return f.event.special.hover?a:a.replace(B,"mouseenter$1 mouseleave$1")};f.event={add:function(a,c,d,e,g){var h,i,j,k,l,m,n,o,p,q,r,s;if(!(a.nodeType===3||a.nodeType===8||!c||!d||!(h=f._data(a)))){d.handler&&(p=d,d=p.handler,g=p.selector),d.guid||(d.guid=f.guid++),j=h.events,j||(h.events=j={}),i=h.handle,i||(h.handle=i=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.dispatch.apply(i.elem,arguments):b},i.elem=a),c=f.trim(I(c)).split(" ");for(k=0;k<c.length;k++){l=A.exec(c[k])||[],m=l[1],n=(l[2]||"").split(".").sort(),s=f.event.special[m]||{},m=(g?s.delegateType:s.bindType)||m,s=f.event.special[m]||{},o=f.extend({type:m,origType:l[1],data:e,handler:d,guid:d.guid,selector:g,quick:g&&G(g),namespace:n.join(".")},p),r=j[m];if(!r){r=j[m]=[],r.delegateCount=0;if(!s.setup||s.setup.call(a,e,n,i)===!1)a.addEventListener?a.addEventListener(m,i,!1):a.attachEvent&&a.attachEvent("on"+m,i)}s.add&&(s.add.call(a,o),o.handler.guid||(o.handler.guid=d.guid)),g?r.splice(r.delegateCount++,0,o):r.push(o),f.event.global[m]=!0}a=null}},global:{},remove:function(a,b,c,d,e){var g=f.hasData(a)&&f._data(a),h,i,j,k,l,m,n,o,p,q,r,s;if(!!g&&!!(o=g.events)){b=f.trim(I(b||"")).split(" ");for(h=0;h<b.length;h++){i=A.exec(b[h])||[],j=k=i[1],l=i[2];if(!j){for(j in o)f.event.remove(a,j+b[h],c,d,!0);continue}p=f.event.special[j]||{},j=(d?p.delegateType:p.bindType)||j,r=o[j]||[],m=r.length,l=l?new RegExp("(^|\\.)"+l.split(".").sort().join("\\.(?:.*\\.)?")+"(\\.|$)"):null;for(n=0;n<r.length;n++)s=r[n],(e||k===s.origType)&&(!c||c.guid===s.guid)&&(!l||l.test(s.namespace))&&(!d||d===s.selector||d==="**"&&s.selector)&&(r.splice(n--,1),s.selector&&r.delegateCount--,p.remove&&p.remove.call(a,s));r.length===0&&m!==r.length&&((!p.teardown||p.teardown.call(a,l)===!1)&&f.removeEvent(a,j,g.handle),delete o[j])}f.isEmptyObject(o)&&(q=g.handle,q&&(q.elem=null),f.removeData(a,["events","handle"],!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){if(!e||e.nodeType!==3&&e.nodeType!==8){var h=c.type||c,i=[],j,k,l,m,n,o,p,q,r,s;if(E.test(h+f.event.triggered))return;h.indexOf("!")>=0&&(h=h.slice(0,-1),k=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.shift(),i.sort());if((!e||f.event.customEvent[h])&&!f.event.global[h])return;c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.isTrigger=!0,c.exclusive=k,c.namespace=i.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)"):null,o=h.indexOf(":")<0?"on"+h:"";if(!e){j=f.cache;for(l in j)j[l].events&&j[l].events[h]&&f.event.trigger(c,d,j[l].handle.elem,!0);return}c.result=b,c.target||(c.target=e),d=d!=null?f.makeArray(d):[],d.unshift(c),p=f.event.special[h]||{};if(p.trigger&&p.trigger.apply(e,d)===!1)return;r=[[e,p.bindType||h]];if(!g&&!p.noBubble&&!f.isWindow(e)){s=p.delegateType||h,m=E.test(s+h)?e:e.parentNode,n=null;for(;m;m=m.parentNode)r.push([m,s]),n=m;n&&n===e.ownerDocument&&r.push([n.defaultView||n.parentWindow||a,s])}for(l=0;l<r.length&&!c.isPropagationStopped();l++)m=r[l][0],c.type=r[l][1],q=(f._data(m,"events")||{})[c.type]&&f._data(m,"handle"),q&&q.apply(m,d),q=o&&m[o],q&&f.acceptData(m)&&q.apply(m,d)===!1&&c.preventDefault();c.type=h,!g&&!c.isDefaultPrevented()&&(!p._default||p._default.apply(e.ownerDocument,d)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)&&o&&e[h]&&(h!=="focus"&&h!=="blur"||c.target.offsetWidth!==0)&&!f.isWindow(e)&&(n=e[o],n&&(e[o]=null),f.event.triggered=h,e[h](),f.event.triggered=b,n&&(e[o]=n));return c.result}},dispatch:function(c){c=f.event.fix(c||a.event);var d=(f._data(this,"events")||{})[c.type]||[],e=d.delegateCount,g=[].slice.call(arguments,0),h=!c.exclusive&&!c.namespace,i=f.event.special[c.type]||{},j=[],k,l,m,n,o,p,q,r,s,t,u;g[0]=c,c.delegateTarget=this;if(!i.preDispatch||i.preDispatch.call(this,c)!==!1){if(e&&(!c.button||c.type!=="click")){n=f(this),n.context=this.ownerDocument||this;for(m=c.target;m!=this;m=m.parentNode||this)if(m.disabled!==!0){p={},r=[],n[0]=m;for(k=0;k<e;k++)s=d[k],t=s.selector,p[t]===b&&(p[t]=s.quick?H(m,s.quick):n.is(t)),p[t]&&r.push(s);r.length&&j.push({elem:m,matches:r})}}d.length>e&&j.push({elem:this,matches:d.slice(e)});for(k=0;k<j.length&&!c.isPropagationStopped();k++){q=j[k],c.currentTarget=q.elem;for(l=0;l<q.matches.length&&!c.isImmediatePropagationStopped();l++){s=q.matches[l];if(h||!c.namespace&&!s.namespace||c.namespace_re&&c.namespace_re.test(s.namespace))c.data=s.data,c.handleObj=s,o=((f.event.special[s.origType]||{}).handle||s.handler).apply(q.elem,g),o!==b&&(c.result=o,o===!1&&(c.preventDefault(),c.stopPropagation()))}}i.postDispatch&&i.postDispatch.call(this,c);return c.result}},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode);return a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,d){var e,f,g,h=d.button,i=d.fromElement;a.pageX==null&&d.clientX!=null&&(e=a.target.ownerDocument||c,f=e.documentElement,g=e.body,a.pageX=d.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=d.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?d.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0);return a}},fix:function(a){if(a[f.expando])return a;var d,e,g=a,h=f.event.fixHooks[a.type]||{},i=h.props?this.props.concat(h.props):this.props;a=f.Event(g);for(d=i.length;d;)e=i[--d],a[e]=g[e];a.target||(a.target=g.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey===b&&(a.metaKey=a.ctrlKey);return h.filter?h.filter(a,g):a},special:{ready:{setup:f.bindReady},load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=f.extend(new f.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?f.event.trigger(e,null,b):f.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},f.event.handle=f.event.dispatch,f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!(this instanceof f.Event))return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?K:J):this.type=a,b&&f.extend(this,b),this.timeStamp=a&&a.timeStamp||f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=K;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=K;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=K,this.stopPropagation()},isDefaultPrevented:J,isPropagationStopped:J,isImmediatePropagationStopped:J},f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c=this,d=a.relatedTarget,e=a.handleObj,g=e.selector,h;if(!d||d!==c&&!f.contains(c,d))a.type=e.origType,h=e.handler.apply(this,arguments),a.type=b;return h}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(){if(f.nodeName(this,"form"))return!1;f.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=f.nodeName(c,"input")||f.nodeName(c,"button")?c.form:b;d&&!d._submit_attached&&(f.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),d._submit_attached=!0)})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&f.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(f.nodeName(this,"form"))return!1;f.event.remove(this,"._submit")}}),f.support.changeBubbles||(f.event.special.change={setup:function(){if(z.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")f.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),f.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1,f.event.simulate("change",this,a,!0))});return!1}f.event.add(this,"beforeactivate._change",function(a){var b=a.target;z.test(b.nodeName)&&!b._change_attached&&(f.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&f.event.simulate("change",this.parentNode,a,!0)}),b._change_attached=!0)})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){f.event.remove(this,"._change");return z.test(this.nodeName)}}),f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){var d=0,e=function(a){f.event.simulate(b,a.target,f.event.fix(a),!0)};f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.fn.extend({on:function(a,c,d,e,g){var h,i;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(i in a)this.on(i,c,d,a[i],g);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=J;else if(!e)return this;g===1&&(h=e,e=function(a){f().off(a);return h.apply(this,arguments)},e.guid=h.guid||(h.guid=f.guid++));return this.each(function(){f.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){if(a&&a.preventDefault&&a.handleObj){var e=a.handleObj;f(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler);return this}if(typeof a=="object"){for(var g in a)this.off(g,c,a[g]);return this}if(c===!1||typeof c=="function")d=c,c=b;d===!1&&(d=J);return this.each(function(){f.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){f(this.context).on(a,this.selector,b,c);return this},die:function(a,b){f(this.context).off(a,this.selector||"**",b);return this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length==1?this.off(a,"**"):this.off(b,a,c)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f._data(this,"lastToggle"+a.guid)||0)%d;f._data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.on(b,null,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0),C.test(b)&&(f.event.fixHooks[b]=f.event.keyHooks),D.test(b)&&(f.event.fixHooks[b]=f.event.mouseHooks)}),function(){function x(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}if(j.nodeType===1){g||(j[d]=c,j.sizset=h);if(typeof b!="string"){if(j===b){k=!0;break}}else if(m.filter(b,[j]).length>0){k=j;break}}j=j[a]}e[h]=k}}}function w(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}j.nodeType===1&&!g&&(j[d]=c,j.sizset=h);if(j.nodeName.toLowerCase()===b){k=j;break}j=j[a]}e[h]=k}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d="sizcache"+(Math.random()+"").replace(".",""),e=0,g=Object.prototype.toString,h=!1,i=!0,j=/\\/g,k=/\r\n/g,l=/\W/;[0,0].sort(function(){i=!1;return 0});var m=function(b,d,e,f){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return e;var i,j,k,l,n,q,r,t,u=!0,v=m.isXML(d),w=[],x=b;do{a.exec(""),i=a.exec(x);if(i){x=i[3],w.push(i[1]);if(i[2]){l=i[3];break}}}while(i);if(w.length>1&&p.exec(b))if(w.length===2&&o.relative[w[0]])j=y(w[0]+w[1],d,f);else{j=o.relative[w[0]]?[d]:m(w.shift(),d);while(w.length)b=w.shift(),o.relative[b]&&(b+=w.shift()),j=y(b,j,f)}else{!f&&w.length>1&&d.nodeType===9&&!v&&o.match.ID.test(w[0])&&!o.match.ID.test(w[w.length-1])&&(n=m.find(w.shift(),d,v),d=n.expr?m.filter(n.expr,n.set)[0]:n.set[0]);if(d){n=f?{expr:w.pop(),set:s(f)}:m.find(w.pop(),w.length===1&&(w[0]==="~"||w[0]==="+")&&d.parentNode?d.parentNode:d,v),j=n.expr?m.filter(n.expr,n.set):n.set,w.length>0?k=s(j):u=!1;while(w.length)q=w.pop(),r=q,o.relative[q]?r=w.pop():q="",r==null&&(r=d),o.relative[q](k,r,v)}else k=w=[]}k||(k=j),k||m.error(q||b);if(g.call(k)==="[object Array]")if(!u)e.push.apply(e,k);else if(d&&d.nodeType===1)for(t=0;k[t]!=null;t++)k[t]&&(k[t]===!0||k[t].nodeType===1&&m.contains(d,k[t]))&&e.push(j[t]);else for(t=0;k[t]!=null;t++)k[t]&&k[t].nodeType===1&&e.push(j[t]);else s(k,e);l&&(m(l,h,e,f),m.uniqueSort(e));return e};m.uniqueSort=function(a){if(u){h=i,a.sort(u);if(h)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},m.matches=function(a,b){return m(a,null,null,b)},m.matchesSelector=function(a,b){return m(b,null,null,[a]).length>0},m.find=function(a,b,c){var d,e,f,g,h,i;if(!a)return[];for(e=0,f=o.order.length;e<f;e++){h=o.order[e];if(g=o.leftMatch[h].exec(a)){i=g[1],g.splice(1,1);if(i.substr(i.length-1)!=="\\"){g[1]=(g[1]||"").replace(j,""),d=o.find[h](g,b,c);if(d!=null){a=a.replace(o.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},m.filter=function(a,c,d,e){var f,g,h,i,j,k,l,n,p,q=a,r=[],s=c,t=c&&c[0]&&m.isXML(c[0]);while(a&&c.length){for(h in o.filter)if((f=o.leftMatch[h].exec(a))!=null&&f[2]){k=o.filter[h],l=f[1],g=!1,f.splice(1,1);if(l.substr(l.length-1)==="\\")continue;s===r&&(r=[]);if(o.preFilter[h]){f=o.preFilter[h](f,s,d,r,e,t);if(!f)g=i=!0;else if(f===!0)continue}if(f)for(n=0;(j=s[n])!=null;n++)j&&(i=k(j,f,n,s),p=e^i,d&&i!=null?p?g=!0:s[n]=!1:p&&(r.push(j),g=!0));if(i!==b){d||(s=r),a=a.replace(o.match[h],"");if(!g)return[];break}}if(a===q)if(g==null)m.error(a);else break;q=a}return s},m.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)};var n=m.getText=function(a){var b,c,d=a.nodeType,e="";if(d){if(d===1||d===9||d===11){if(typeof a.textContent=="string")return a.textContent;if(typeof a.innerText=="string")return a.innerText.replace(k,"");for(a=a.firstChild;a;a=a.nextSibling)e+=n(a)}else if(d===3||d===4)return a.nodeValue}else for(b=0;c=a[b];b++)c.nodeType!==8&&(e+=n(c));return e},o=m.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!l.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&m.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!l.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&m.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(j,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(j,"")},TAG:function(a,b){return a[1].replace(j,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||m.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&m.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(j,"");!f&&o.attrMap[g]&&(a[1]=o.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(j,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=m(b[3],null,null,c);else{var g=m.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(o.match.POS.test(b[0])||o.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!m(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=o.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||n([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}m.error(e)},CHILD:function(a,b){var c,e,f,g,h,i,j,k=b[1],l=a;switch(k){case"only":case"first":while(l=l.previousSibling)if(l.nodeType===1)return!1;if(k==="first")return!0;l=a;case"last":while(l=l.nextSibling)if(l.nodeType===1)return!1;return!0;case"nth":c=b[2],e=b[3];if(c===1&&e===0)return!0;f=b[0],g=a.parentNode;if(g&&(g[d]!==f||!a.nodeIndex)){i=0;for(l=g.firstChild;l;l=l.nextSibling)l.nodeType===1&&(l.nodeIndex=++i);g[d]=f}j=a.nodeIndex-e;return c===0?j===0:j%c===0&&j/c>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||!!a.nodeName&&a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=m.attr?m.attr(a,c):o.attrHandle[c]?o.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":!f&&m.attr?d!=null:f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=o.setFilters[e];if(f)return f(a,c,b,d)}}},p=o.match.POS,q=function(a,b){return"\\"+(b-0+1)};for(var r in o.match)o.match[r]=new RegExp(o.match[r].source+/(?![^\[]*\])(?![^\(]*\))/.source),o.leftMatch[r]=new RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[r].source.replace(/\\(\d+)/g,q));o.match.globalPOS=p;var s=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(t){s=function(a,b){var c=0,d=b||[];if(g.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var u,v;c.documentElement.compareDocumentPosition?u=function(a,b){if(a===b){h=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(u=function(a,b){if(a===b){h=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,i=b.parentNode,j=g;if(g===i)return v(a,b);if(!g)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return v(e[k],f[k]);return k===c?v(a,f[k],-1):v(e[k],b,1)},v=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(o.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},o.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(o.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(o.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=m,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){m=function(b,e,f,g){e=e||c;if(!g&&!m.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return s(e.getElementsByTagName(b),f);if(h[2]&&o.find.CLASS&&e.getElementsByClassName)return s(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return s([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return s([],f);if(i.id===h[3])return s([i],f)}try{return s(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var k=e,l=e.getAttribute("id"),n=l||d,p=e.parentNode,q=/^\s*[+~]/.test(b);l?n=n.replace(/'/g,"\\$&"):e.setAttribute("id",n),q&&p&&(e=e.parentNode);try{if(!q||p)return s(e.querySelectorAll("[id='"+n+"'] "+b),f)}catch(r){}finally{l||k.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)m[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}m.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!m.isXML(a))try{if(e||!o.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return m(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;o.order.splice(1,0,"CLASS"),o.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?m.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?m.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:m.contains=function(){return!1},m.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var y=function(a,b,c){var d,e=[],f="",g=b.nodeType?[b]:b;while(d=o.match.PSEUDO.exec(a))f+=d[0],a=a.replace(o.match.PSEUDO,"");a=o.relative[a]?a+"*":a;for(var h=0,i=g.length;h<i;h++)m(a,g[h],e,c);return m.filter(f,e)};m.attr=f.attr,m.selectors.attrMap={},f.find=m,f.expr=m.selectors,f.expr[":"]=f.expr.filters,f.unique=m.uniqueSort,f.text=m.getText,f.isXMLDoc=m.isXML,f.contains=m.contains}();var L=/Until$/,M=/^(?:parents|prevUntil|prevAll)/,N=/,/,O=/^.[^:#\[\.,]*$/,P=Array.prototype.slice,Q=f.expr.match.globalPOS,R={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(T(this,a,!1),"not",a)},filter:function(a){return this.pushStack(T(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?Q.test(a)?f(a,this.context).index(this[0])>=0:f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h=1;while(g&&g.ownerDocument&&g!==b){for(d=0;d<a.length;d++)f(g).is(a[d])&&c.push({selector:a[d],elem:g,level:h});g=g.parentNode,h++}return c}var i=Q.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(i?i.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a)return this[0]&&this[0].parentNode?this.prevAll().length:-1;if(typeof a=="string")return f.inArray(this[0],f(a));return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(S(c[0])||S(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c);L.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!R[a]?f.unique(e):e,(this.length>1||N.test(d))&&M.test(a)&&(e=e.reverse());return this.pushStack(e,a,P.call(arguments).join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var V="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",W=/ jQuery\d+="(?:\d+|null)"/g,X=/^\s+/,Y=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Z=/<([\w:]+)/,$=/<tbody/i,_=/<|&#?\w+;/,ba=/<(?:script|style)/i,bb=/<(?:script|object|embed|option|style)/i,bc=new RegExp("<(?:"+V+")[\\s/>]","i"),bd=/checked\s*(?:[^=]|=\s*.checked.)/i,be=/\/(java|ecma)script/i,bf=/^\s*<!(?:\[CDATA\[|\-\-)/,bg={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bh=U(c);bg.optgroup=bg.option,bg.tbody=bg.tfoot=bg.colgroup=bg.caption=bg.thead,bg.th=bg.td,f.support.htmlSerialize||(bg._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){return f.access(this,function(a){return a===b?f.text(this):this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=f.isFunction(a);return this.each(function(c){f(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f
+.clean(arguments);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f.clean(arguments));return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){return f.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(W,""):null;if(typeof a=="string"&&!ba.test(a)&&(f.support.leadingWhitespace||!X.test(a))&&!bg[(Z.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Y,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(f.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(g){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bd.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bi(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,function(a,b){b.src?f.ajax({type:"GET",global:!1,url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(bf,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i,j=a[0];b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof j=="string"&&j.length<512&&i===c&&j.charAt(0)==="<"&&!bb.test(j)&&(f.support.checkClone||!bd.test(j))&&(f.support.html5Clone||!bc.test(j))&&(g=!0,h=f.fragments[j],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[j]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d,e,g,h=f.support.html5Clone||f.isXMLDoc(a)||!bc.test("<"+a.nodeName+">")?a.cloneNode(!0):bo(a);if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bk(a,h),d=bl(a),e=bl(h);for(g=0;d[g];++g)e[g]&&bk(d[g],e[g])}if(b){bj(a,h);if(c){d=bl(a),e=bl(h);for(g=0;d[g];++g)bj(d[g],e[g])}}d=e=null;return h},clean:function(a,b,d,e){var g,h,i,j=[];b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);for(var k=0,l;(l=a[k])!=null;k++){typeof l=="number"&&(l+="");if(!l)continue;if(typeof l=="string")if(!_.test(l))l=b.createTextNode(l);else{l=l.replace(Y,"<$1></$2>");var m=(Z.exec(l)||["",""])[1].toLowerCase(),n=bg[m]||bg._default,o=n[0],p=b.createElement("div"),q=bh.childNodes,r;b===c?bh.appendChild(p):U(b).appendChild(p),p.innerHTML=n[1]+l+n[2];while(o--)p=p.lastChild;if(!f.support.tbody){var s=$.test(l),t=m==="table"&&!s?p.firstChild&&p.firstChild.childNodes:n[1]==="<table>"&&!s?p.childNodes:[];for(i=t.length-1;i>=0;--i)f.nodeName(t[i],"tbody")&&!t[i].childNodes.length&&t[i].parentNode.removeChild(t[i])}!f.support.leadingWhitespace&&X.test(l)&&p.insertBefore(b.createTextNode(X.exec(l)[0]),p.firstChild),l=p.childNodes,p&&(p.parentNode.removeChild(p),q.length>0&&(r=q[q.length-1],r&&r.parentNode&&r.parentNode.removeChild(r)))}var u;if(!f.support.appendChecked)if(l[0]&&typeof (u=l.length)=="number")for(i=0;i<u;i++)bn(l[i]);else bn(l);l.nodeType?j.push(l):j=f.merge(j,l)}if(d){g=function(a){return!a.type||be.test(a.type)};for(k=0;j[k];k++){h=j[k];if(e&&f.nodeName(h,"script")&&(!h.type||be.test(h.type)))e.push(h.parentNode?h.parentNode.removeChild(h):h);else{if(h.nodeType===1){var v=f.grep(h.getElementsByTagName("script"),g);j.splice.apply(j,[k+1,0].concat(v))}d.appendChild(h)}}}return j},cleanData:function(a){var b,c,d=f.cache,e=f.event.special,g=f.support.deleteExpando;for(var h=0,i;(i=a[h])!=null;h++){if(i.nodeName&&f.noData[i.nodeName.toLowerCase()])continue;c=i[f.expando];if(c){b=d[c];if(b&&b.events){for(var j in b.events)e[j]?f.event.remove(i,j):f.removeEvent(i,j,b.handle);b.handle&&(b.handle.elem=null)}g?delete i[f.expando]:i.removeAttribute&&i.removeAttribute(f.expando),delete d[c]}}}});var bp=/alpha\([^)]*\)/i,bq=/opacity=([^)]*)/,br=/([A-Z]|^ms)/g,bs=/^[\-+]?(?:\d*\.)?\d+$/i,bt=/^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,bu=/^([\-+])=([\-+.\de]+)/,bv=/^margin/,bw={position:"absolute",visibility:"hidden",display:"block"},bx=["Top","Right","Bottom","Left"],by,bz,bA;f.fn.css=function(a,c){return f.access(this,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)},a,c,arguments.length>1)},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=by(a,"opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d,h==="string"&&(g=bu.exec(d))&&(d=+(g[1]+1)*+g[2]+parseFloat(f.css(a,c)),h="number");if(d==null||h==="number"&&isNaN(d))return;h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(by)return by(a,c)},swap:function(a,b,c){var d={},e,f;for(f in b)d[f]=a.style[f],a.style[f]=b[f];e=c.call(a);for(f in b)a.style[f]=d[f];return e}}),f.curCSS=f.css,c.defaultView&&c.defaultView.getComputedStyle&&(bz=function(a,b){var c,d,e,g,h=a.style;b=b.replace(br,"-$1").toLowerCase(),(d=a.ownerDocument.defaultView)&&(e=d.getComputedStyle(a,null))&&(c=e.getPropertyValue(b),c===""&&!f.contains(a.ownerDocument.documentElement,a)&&(c=f.style(a,b))),!f.support.pixelMargin&&e&&bv.test(b)&&bt.test(c)&&(g=h.width,h.width=c,c=e.width,h.width=g);return c}),c.documentElement.currentStyle&&(bA=function(a,b){var c,d,e,f=a.currentStyle&&a.currentStyle[b],g=a.style;f==null&&g&&(e=g[b])&&(f=e),bt.test(f)&&(c=g.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),g.left=b==="fontSize"?"1em":f,f=g.pixelLeft+"px",g.left=c,d&&(a.runtimeStyle.left=d));return f===""?"auto":f}),by=bz||bA,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth!==0?bB(a,b,d):f.swap(a,bw,function(){return bB(a,b,d)})},set:function(a,b){return bs.test(b)?b+"px":b}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bq.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=f.isNumeric(b)?"alpha(opacity="+b*100+")":"",g=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&f.trim(g.replace(bp,""))===""){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bp.test(g)?g.replace(bp,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){return f.swap(a,{display:"inline-block"},function(){return b?by(a,"margin-right"):a.style.marginRight})}})}),f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style&&a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)}),f.each({margin:"",padding:"",border:"Width"},function(a,b){f.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bx[d]+b]=e[d]||e[d-2]||e[0];return f}}});var bC=/%20/g,bD=/\[\]$/,bE=/\r?\n/g,bF=/#.*$/,bG=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bH=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bI=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bJ=/^(?:GET|HEAD)$/,bK=/^\/\//,bL=/\?/,bM=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bN=/^(?:select|textarea)/i,bO=/\s+/,bP=/([?&])_=[^&]*/,bQ=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bR=f.fn.load,bS={},bT={},bU,bV,bW=["*/"]+["*"];try{bU=e.href}catch(bX){bU=c.createElement("a"),bU.href="",bU=bU.href}bV=bQ.exec(bU.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bR)return bR.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bM,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bN.test(this.nodeName)||bH.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bE,"\r\n")}}):{name:b.name,value:c.replace(bE,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.on(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?b$(a,f.ajaxSettings):(b=a,a=f.ajaxSettings),b$(a,b);return a},ajaxSettings:{url:bU,isLocal:bI.test(bV[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":bW},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bY(bS),ajaxTransport:bY(bT),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a>0?4:0;var o,r,u,w=c,x=l?ca(d,v,l):b,y,z;if(a>=200&&a<300||a===304){if(d.ifModified){if(y=v.getResponseHeader("Last-Modified"))f.lastModified[k]=y;if(z=v.getResponseHeader("Etag"))f.etag[k]=z}if(a===304)w="notmodified",o=!0;else try{r=cb(d,x),w="success",o=!0}catch(A){w="parsererror",u=A}}else{u=w;if(!w||a)w="error",a<0&&(a=0)}v.status=a,v.statusText=""+(c||w),o?h.resolveWith(e,[r,w,v]):h.rejectWith(e,[v,w,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.fireWith(e,[v,w]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f.Callbacks("once memory"),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bG.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.add,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bF,"").replace(bK,bV[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bO),d.crossDomain==null&&(r=bQ.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bV[1]&&r[2]==bV[2]&&(r[3]||(r[1]==="http:"?80:443))==(bV[3]||(bV[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),bZ(bS,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bJ.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bL.test(d.url)?"&":"?")+d.data,delete d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bP,"$1_="+x);d.url=y+(y===d.url?(bL.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", "+bW+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=bZ(bT,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){if(s<2)w(-1,z);else throw z}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)b_(g,a[g],c,e);return d.join("&").replace(bC,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var cc=f.now(),cd=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+cc++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=typeof b.data=="string"&&/^application\/x\-www\-form\-urlencoded/.test(b.contentType);if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(cd.test(b.url)||e&&cd.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(cd,l),b.url===j&&(e&&(k=k.replace(cd,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var ce=a.ActiveXObject?function(){for(var a in cg)cg[a](0,1)}:!1,cf=0,cg;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ch()||ci()}:ch,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,ce&&delete cg[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n);try{m.text=h.responseText}catch(a){}try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cf,ce&&(cg||(cg={},f(a).unload(ce)),cg[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cj={},ck,cl,cm=/^(?:toggle|show|hide)$/,cn=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,co,cp=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cq;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(ct("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),(e===""&&f.css(d,"display")==="none"||!f.contains(d.ownerDocument.documentElement,d))&&f._data(d,"olddisplay",cu(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(ct("hide",3),a,b,c);var d,e,g=0,h=this.length;for(;g<h;g++)d=this[g],d.style&&(e=f.css(d,"display"),e!=="none"&&!f._data(d,"olddisplay")&&f._data(d,"olddisplay",e));for(g=0;g<h;g++)this[g].style&&(this[g].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(ct("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){function g(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o,p,q;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]);if((k=f.cssHooks[g])&&"expand"in k){l=k.expand(a[g]),delete a[g];for(i in l)i in a||(a[i]=l[i])}}for(g in a){h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(!f.support.inlineBlockNeedsLayout||cu(this.nodeName)==="inline"?this.style.display="inline-block":this.style.zoom=1))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)j=new f.fx(this,b,i),h=a[i],cm.test(h)?(q=f._data(this,"toggle"+i)||(h==="toggle"?d?"show":"hide":0),q?(f._data(this,"toggle"+i,q==="show"?"hide":"show"),j[q]()):j[h]()):(m=cn.exec(h),n=j.cur(),m?(o=parseFloat(m[2]),p=m[3]||(f.cssNumber[i]?"":"px"),p!=="px"&&(f.style(this,i,(o||1)+p),n=(o||1)/j.cur()*n,f.style(this,i,n+p)),m[1]&&(o=(m[1]==="-="?-1:1)*o+n),j.custom(n,o,p)):j.custom(n,h,""));return!0}var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return e.queue===!1?this.each(g):this.queue(e.queue,g)},stop:function(a,c,d){typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]);return this.each(function(){function h(a,b,c){var e=b[c];f.removeData(a,c,!0),e.stop(d)}var b,c=!1,e=f.timers,g=f._data(this);d||f._unmark(!0,this);if(a==null)for(b in g)g[b]&&g[b].stop&&b.indexOf(".run")===b.length-4&&h(this,g,b);else g[b=a+".run"]&&g[b].stop&&h(this,g,b);for(b=e.length;b--;)e[b].elem===this&&(a==null||e[b].queue===a)&&(d?e[b](!0):e[b].saveState(),c=!0,e.splice(b,1));(!d||!c)&&f.dequeue(this,a)})}}),f.each({slideDown:ct("show",1),slideUp:ct("hide",1),slideToggle:ct("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue?f.dequeue(this,d.queue):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a){return a},swing:function(a){return-Math.cos(a*Math.PI)/2+.5}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,c,d){function h(a){return e.step(a)}var e=this,g=f.fx;this.startTime=cq||cr(),this.end=c,this.now=this.start=a,this.pos=this.state=0,this.unit=d||this.unit||(f.cssNumber[this.prop]?"":"px"),h.queue=this.options.queue,h.elem=this.elem,h.saveState=function(){f._data(e.elem,"fxshow"+e.prop)===b&&(e.options.hide?f._data(e.elem,"fxshow"+e.prop,e.start):e.options.show&&f._data(e.elem,"fxshow"+e.prop,e.end))},h()&&f.timers.push(h)&&!co&&(co=setInterval(g.tick,g.interval))},show:function(){var a=f._data(this.elem,"fxshow"+this.prop);this.options.orig[this.prop]=a||f.style(this.elem,this.prop),this.options.show=!0,a!==b?this.custom(this.cur(),a):this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f._data(this.elem,"fxshow"+this.prop)||f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b,c,d,e=cq||cr(),g=!0,h=this.elem,i=this.options;if(a||e>=i.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),i.animatedProperties[this.prop]=!0;for(b in i.animatedProperties)i.animatedProperties[b]!==!0&&(g=!1);if(g){i.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){h.style["overflow"+b]=i.overflow[a]}),i.hide&&f(h).hide();if(i.hide||i.show)for(b in i.animatedProperties)f.style(h,b,i.orig[b]),f.removeData(h,"fxshow"+b,!0),f.removeData(h,"toggle"+b,!0);d=i.complete,d&&(i.complete=!1,d.call(h))}return!1}i.duration==Infinity?this.now=e:(c=e-this.startTime,this.state=c/i.duration,this.pos=f.easing[i.animatedProperties[this.prop]](this.state,c,0,1,i.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){var a,b=f.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||f.fx.stop()},interval:13,stop:function(){clearInterval(co),co=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=a.now+a.unit:a.elem[a.prop]=a.now}}}),f.each(cp.concat.apply([],cp),function(a,b){b.indexOf("margin")&&(f.fx.step[b]=function(a){f.style(a.elem,b,Math.max(0,a.now)+a.unit)})}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var cv,cw=/^t(?:able|d|h)$/i,cx=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?cv=function(a,b,c,d){try{d=a.getBoundingClientRect()}catch(e){}if(!d||!f.contains(c,a))return d?{top:d.top,left:d.left}:{top:0,left:0};var g=b.body,h=cy(b),i=c.clientTop||g.clientTop||0,j=c.clientLeft||g.clientLeft||0,k=h.pageYOffset||f.support.boxModel&&c.scrollTop||g.scrollTop,l=h.pageXOffset||f.support.boxModel&&c.scrollLeft||g.scrollLeft,m=d.top+k-i,n=d.left+l-j;return{top:m,left:n}}:cv=function(a,b,c){var d,e=a.offsetParent,g=a,h=b.body,i=b.defaultView,j=i?i.getComputedStyle(a,null):a.currentStyle,k=a.offsetTop,l=a.offsetLeft;while((a=a.parentNode)&&a!==h&&a!==c){if(f.support.fixedPosition&&j.position==="fixed")break;d=i?i.getComputedStyle(a,null):a.currentStyle,k-=a.scrollTop,l-=a.scrollLeft,a===e&&(k+=a.offsetTop,l+=a.offsetLeft,f.support.doesNotAddBorder&&(!f.support.doesAddBorderForTableAndCells||!cw.test(a.nodeName))&&(k+=parseFloat(d.borderTopWidth)||0,l+=parseFloat(d.borderLeftWidth)||0),g=e,e=a.offsetParent),f.support.subtractsBorderForOverflowNotVisible&&d.overflow!=="visible"&&(k+=parseFloat(d.borderTopWidth)||0,l+=parseFloat(d.borderLeftWidth)||0),j=d}if(j.position==="relative"||j.position==="static")k+=h.offsetTop,l+=h.offsetLeft;f.support.fixedPosition&&j.position==="fixed"&&(k+=Math.max(c.scrollTop,h.scrollTop),l+=Math.max(c.scrollLeft,h.scrollLeft));return{top:k,left:l}},f.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){f.offset.setOffset(this,a,b)});var c=this[0],d=c&&c.ownerDocument;if(!d)return null;if(c===d.body)return f.offset.bodyOffset(c);return cv(c,d,d.documentElement)},f.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cx.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cx.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);f.fn[a]=function(e){return f.access(this,function(a,e,g){var h=cy(a);if(g===b)return h?c in h?h[c]:f.support.boxModel&&h.document.documentElement[e]||h.document.body[e]:a[e];h?h.scrollTo(d?f(h).scrollLeft():g,d?g:f(h).scrollTop()):a[e]=g},a,e,arguments.length,null)}}),f.each({Height:"height",Width:"width"},function(a,c){var d="client"+a,e="scroll"+a,g="offset"+a;f.fn["inner"+a]=function(){var a=this[0];return a?a.style?parseFloat(f.css(a,c,"padding")):this[c]():null},f.fn["outer"+a]=function(a){var b=this[0];return b?b.style?parseFloat(f.css(b,c,a?"margin":"border")):this[c]():null},f.fn[c]=function(a){return f.access(this,function(a,c,h){var i,j,k,l;if(f.isWindow(a)){i=a.document,j=i.documentElement[d];return f.support.boxModel&&j||i.body&&i.body[d]||j}if(a.nodeType===9){i=a.documentElement;if(i[d]>=i[e])return i[d];return Math.max(a.body[e],i[e],a.body[g],i[g])}if(h===b){k=f.css(a,c),l=parseFloat(k);return f.isNumeric(l)?l:k}f(a).css(c,h)},c,a,arguments.length,null)}}),a.jQuery=a.$=f,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return f})})(window);
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.ajaxQueue.js b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.ajaxQueue.js
new file mode 100644
index 0000000..cd4492c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.ajaxQueue.js
@@ -0,0 +1,119 @@
+/**
+ * Ajax Queue Plugin
+ *
+ * Homepage: http://jquery.com/plugins/project/ajaxqueue
+ * Documentation: http://docs.jquery.com/AjaxQueue
+ */
+
+/**
+
+<script>
+$(function(){
+	jQuery.ajaxQueue({
+		url: "test.php",
+		success: function(html){ jQuery("ul").append(html); }
+	});
+	jQuery.ajaxQueue({
+		url: "test.php",
+		success: function(html){ jQuery("ul").append(html); }
+	});
+	jQuery.ajaxSync({
+		url: "test.php",
+		success: function(html){ jQuery("ul").append("<b>"+html+"</b>"); }
+	});
+	jQuery.ajaxSync({
+		url: "test.php",
+		success: function(html){ jQuery("ul").append("<b>"+html+"</b>"); }
+	});
+});
+</script>
+<ul style="position: absolute; top: 5px; right: 5px;"></ul>
+
+ */
+/*
+ * Queued Ajax requests.
+ * A new Ajax request won't be started until the previous queued
+ * request has finished.
+ */
+
+/*
+ * Synced Ajax requests.
+ * The Ajax request will happen as soon as you call this method, but
+ * the callbacks (success/error/complete) won't fire until all previous
+ * synced requests have been completed.
+ */
+
+
+(function(jQuery) {
+
+	var ajax = jQuery.ajax;
+
+	var pendingRequests = {};
+
+	var synced = [];
+	var syncedData = [];
+
+	jQuery.ajax = function(settings) {
+		// create settings for compatibility with ajaxSetup
+		settings = jQuery.extend(settings, jQuery.extend({}, jQuery.ajaxSettings, settings));
+
+		var port = settings.port;
+
+		switch(settings.mode) {
+		case "abort":
+			if ( pendingRequests[port] ) {
+				pendingRequests[port].abort();
+			}
+			return pendingRequests[port] = ajax.apply(this, arguments);
+		case "queue":
+			var _old = settings.complete;
+			settings.complete = function(){
+				if ( _old )
+					_old.apply( this, arguments );
+				jQuery([ajax]).dequeue("ajax" + port );;
+			};
+
+			jQuery([ ajax ]).queue("ajax" + port, function(){
+				ajax( settings );
+			});
+			return;
+		case "sync":
+			var pos = synced.length;
+
+			synced[ pos ] = {
+				error: settings.error,
+				success: settings.success,
+				complete: settings.complete,
+				done: false
+			};
+
+			syncedData[ pos ] = {
+				error: [],
+				success: [],
+				complete: []
+			};
+
+			settings.error = function(){ syncedData[ pos ].error = arguments; };
+			settings.success = function(){ syncedData[ pos ].success = arguments; };
+			settings.complete = function(){
+				syncedData[ pos ].complete = arguments;
+				synced[ pos ].done = true;
+
+				if ( pos == 0 || !synced[ pos-1 ] )
+					for ( var i = pos; i < synced.length && synced[i].done; i++ ) {
+						if ( synced[i].error ) synced[i].error.apply( jQuery, syncedData[i].error );
+						if ( synced[i].success ) synced[i].success.apply( jQuery, syncedData[i].success );
+						if ( synced[i].complete ) synced[i].complete.apply( jQuery, syncedData[i].complete );
+
+						synced[i] = null;
+						syncedData[i] = null;
+					}
+			};
+		}
+		return ajax.apply(this, arguments);
+	};
+
+})((typeof window.jQuery == 'undefined' && typeof window.django != 'undefined')
+  ? django.jQuery
+  : jQuery
+);
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.autocomplete.js b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.autocomplete.js
new file mode 100644
index 0000000..77c1db6
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.autocomplete.js
@@ -0,0 +1,1152 @@
+/**
+ * @fileOverview jquery-autocomplete, the jQuery Autocompleter
+ * @author <a href="mailto:dylan@dyve.net">Dylan Verheul</a>
+ * @version 2.4.4
+ * @requires jQuery 1.6+
+ * @license MIT | GPL | Apache 2.0, see LICENSE.txt
+ * @see https://github.com/dyve/jquery-autocomplete
+ */
+(function($) {
+    "use strict";
+
+    /**
+     * jQuery autocomplete plugin
+     * @param {object|string} options
+     * @returns (object} jQuery object
+     */
+    $.fn.autocomplete = function(options) {
+        var url;
+        if (arguments.length > 1) {
+            url = options;
+            options = arguments[1];
+            options.url = url;
+        } else if (typeof options === 'string') {
+            url = options;
+            options = { url: url };
+        }
+        var opts = $.extend({}, $.fn.autocomplete.defaults, options);
+        return this.each(function() {
+            var $this = $(this);
+            $this.data('autocompleter', new $.Autocompleter(
+                $this,
+                $.meta ? $.extend({}, opts, $this.data()) : opts
+            ));
+        });
+    };
+
+    /**
+     * Store default options
+     * @type {object}
+     */
+    $.fn.autocomplete.defaults = {
+        inputClass: 'acInput',
+        loadingClass: 'acLoading',
+        resultsClass: 'acResults',
+        selectClass: 'acSelect',
+        queryParamName: 'q',
+        extraParams: {},
+        remoteDataType: false,
+        lineSeparator: '\n',
+        cellSeparator: '|',
+        minChars: 2,
+        maxItemsToShow: 10,
+        delay: 400,
+        useCache: true,
+        maxCacheLength: 10,
+        matchSubset: true,
+        matchCase: false,
+        matchInside: true,
+        mustMatch: false,
+        selectFirst: false,
+        selectOnly: false,
+        showResult: null,
+        preventDefaultReturn: 1,
+        preventDefaultTab: 0,
+        autoFill: false,
+        filterResults: true,
+        filter: true,
+        sortResults: true,
+        sortFunction: null,
+        onItemSelect: null,
+        onNoMatch: null,
+        onFinish: null,
+        matchStringConverter: null,
+        beforeUseConverter: null,
+        autoWidth: 'min-width',
+        useDelimiter: false,
+        delimiterChar: ',',
+        delimiterKeyCode: 188,
+        processData: null,
+        onError: null,
+        enabled: true
+    };
+
+    /**
+     * Sanitize result
+     * @param {Object} result
+     * @returns {Object} object with members value (String) and data (Object)
+     * @private
+     */
+    var sanitizeResult = function(result) {
+        var value, data;
+        var type = typeof result;
+        if (type === 'string') {
+            value = result;
+            data = {};
+        } else if ($.isArray(result)) {
+            value = result[0];
+            data = result.slice(1);
+        } else if (type === 'object') {
+            value = result.value;
+            data = result.data;
+        }
+        value = String(value);
+        if (typeof data !== 'object') {
+            data = {};
+        }
+        return {
+            value: value,
+            data: data
+        };
+    };
+
+    /**
+     * Sanitize integer
+     * @param {mixed} value
+     * @param {Object} options
+     * @returns {Number} integer
+     * @private
+     */
+    var sanitizeInteger = function(value, stdValue, options) {
+        var num = parseInt(value, 10);
+        options = options || {};
+        if (isNaN(num) || (options.min && num < options.min)) {
+            num = stdValue;
+        }
+        return num;
+    };
+
+    /**
+     * Create partial url for a name/value pair
+     */
+    var makeUrlParam = function(name, value) {
+        return [name, encodeURIComponent(value)].join('=');
+    };
+
+    /**
+     * Build an url
+     * @param {string} url Base url
+     * @param {object} [params] Dictionary of parameters
+     */
+    var makeUrl = function(url, params) {
+        var urlAppend = [];
+        $.each(params, function(index, value) {
+            urlAppend.push(makeUrlParam(index, value));
+        });
+        if (urlAppend.length) {
+            url += url.indexOf('?') === -1 ? '?' : '&';
+            url += urlAppend.join('&');
+        }
+        return url;
+    };
+
+    /**
+     * Default sort filter
+     * @param {object} a
+     * @param {object} b
+     * @param {boolean} matchCase
+     * @returns {number}
+     */
+    var sortValueAlpha = function(a, b, matchCase) {
+        a = String(a.value);
+        b = String(b.value);
+        if (!matchCase) {
+            a = a.toLowerCase();
+            b = b.toLowerCase();
+        }
+        if (a > b) {
+            return 1;
+        }
+        if (a < b) {
+            return -1;
+        }
+        return 0;
+    };
+
+    /**
+     * Parse data received in text format
+     * @param {string} text Plain text input
+     * @param {string} lineSeparator String that separates lines
+     * @param {string} cellSeparator String that separates cells
+     * @returns {array} Array of autocomplete data objects
+     */
+    var plainTextParser = function(text, lineSeparator, cellSeparator) {
+        var results = [];
+        var i, j, data, line, value, lines;
+        // Be nice, fix linebreaks before splitting on lineSeparator
+        lines = String(text).replace('\r\n', '\n').split(lineSeparator);
+        for (i = 0; i < lines.length; i++) {
+            line = lines[i].split(cellSeparator);
+            data = [];
+            for (j = 0; j < line.length; j++) {
+                data.push(decodeURIComponent(line[j]));
+            }
+            value = data.shift();
+            results.push({ value: value, data: data });
+        }
+        return results;
+    };
+
+    /**
+     * Autocompleter class
+     * @param {object} $elem jQuery object with one input tag
+     * @param {object} options Settings
+     * @constructor
+     */
+    $.Autocompleter = function($elem, options) {
+
+        /**
+         * Assert parameters
+         */
+        if (!$elem || !($elem instanceof $) || $elem.length !== 1 || $elem.get(0).tagName.toUpperCase() !== 'INPUT') {
+            throw new Error('Invalid parameter for jquery.Autocompleter, jQuery object with one element with INPUT tag expected.');
+        }
+
+        /**
+         * @constant Link to this instance
+         * @type object
+         * @private
+         */
+        var self = this;
+
+        /**
+         * @property {object} Options for this instance
+         * @public
+         */
+        this.options = options;
+
+        /**
+         * @property object Cached data for this instance
+         * @private
+         */
+        this.cacheData_ = {};
+
+        /**
+         * @property {number} Number of cached data items
+         * @private
+         */
+        this.cacheLength_ = 0;
+
+        /**
+         * @property {string} Class name to mark selected item
+         * @private
+         */
+        this.selectClass_ = 'jquery-autocomplete-selected-item';
+
+        /**
+         * @property {number} Handler to activation timeout
+         * @private
+         */
+        this.keyTimeout_ = null;
+
+        /**
+         * @property {number} Handler to finish timeout
+         * @private
+         */
+        this.finishTimeout_ = null;
+
+        /**
+         * @property {number} Last key pressed in the input field (store for behavior)
+         * @private
+         */
+        this.lastKeyPressed_ = null;
+
+        /**
+         * @property {string} Last value processed by the autocompleter
+         * @private
+         */
+        this.lastProcessedValue_ = null;
+
+        /**
+         * @property {string} Last value selected by the user
+         * @private
+         */
+        this.lastSelectedValue_ = null;
+
+        /**
+         * @property {boolean} Is this autocompleter active (showing results)?
+         * @see showResults
+         * @private
+         */
+        this.active_ = false;
+
+        /**
+         * @property {boolean} Is this autocompleter allowed to finish on blur?
+         * @private
+         */
+        this.finishOnBlur_ = true;
+
+        /**
+         * Sanitize options
+         */
+        this.options.minChars = sanitizeInteger(this.options.minChars, $.fn.autocomplete.defaults.minChars, { min: 0 });
+        this.options.maxItemsToShow = sanitizeInteger(this.options.maxItemsToShow, $.fn.autocomplete.defaults.maxItemsToShow, { min: 0 });
+        this.options.maxCacheLength = sanitizeInteger(this.options.maxCacheLength, $.fn.autocomplete.defaults.maxCacheLength, { min: 1 });
+        this.options.delay = sanitizeInteger(this.options.delay, $.fn.autocomplete.defaults.delay, { min: 0 });
+        if (this.options.preventDefaultReturn != 2) {
+            this.options.preventDefaultReturn = this.options.preventDefaultReturn ? 1 : 0;
+        }
+        if (this.options.preventDefaultTab != 2) {
+            this.options.preventDefaultTab = this.options.preventDefaultTab ? 1 : 0;
+        }
+
+        /**
+         * Init DOM elements repository
+         */
+        this.dom = {};
+
+        /**
+         * Store the input element we're attached to in the repository
+         */
+        this.dom.$elem = $elem;
+
+        /**
+         * Switch off the native autocomplete and add the input class
+         */
+        this.dom.$elem.attr('autocomplete', 'off').addClass(this.options.inputClass);
+
+        /**
+         * Create DOM element to hold results, and force absolute position
+         */
+        this.dom.$results = $('<div></div>').hide().addClass(this.options.resultsClass).css({
+            position: 'absolute'
+        });
+        $('body').append(this.dom.$results);
+
+        /**
+         * Attach keyboard monitoring to $elem
+         */
+        $elem.keydown(function(e) {
+            self.lastKeyPressed_ = e.keyCode;
+            switch(self.lastKeyPressed_) {
+
+                case self.options.delimiterKeyCode: // comma = 188
+                    if (self.options.useDelimiter && self.active_) {
+                        self.selectCurrent();
+                    }
+                    break;
+
+                // ignore navigational & special keys
+                case 35: // end
+                case 36: // home
+                case 16: // shift
+                case 17: // ctrl
+                case 18: // alt
+                case 37: // left
+                case 39: // right
+                    break;
+
+                case 38: // up
+                    e.preventDefault();
+                    if (self.active_) {
+                        self.focusPrev();
+                    } else {
+                        self.activate();
+                    }
+                    return false;
+
+                case 40: // down
+                    e.preventDefault();
+                    if (self.active_) {
+                        self.focusNext();
+                    } else {
+                        self.activate();
+                    }
+                    return false;
+
+                case 9: // tab
+                    if (self.active_) {
+                        self.selectCurrent();
+                        if (self.options.preventDefaultTab) {
+                            e.preventDefault();
+                            return false;
+                        }
+                    }
+                    if (self.options.preventDefaultTab === 2) {
+                        e.preventDefault();
+                        return false;
+                    }
+                break;
+
+                case 13: // return
+                    if (self.active_) {
+                        self.selectCurrent();
+                        if (self.options.preventDefaultReturn) {
+                            e.preventDefault();
+                            return false;
+                        }
+                    }
+                    if (self.options.preventDefaultReturn === 2) {
+                        e.preventDefault();
+                        return false;
+                    }
+                break;
+
+                case 27: // escape
+                    if (self.active_) {
+                        e.preventDefault();
+                        self.deactivate(true);
+                        return false;
+                    }
+                break;
+
+                default:
+                    self.activate();
+
+            }
+        });
+
+        /**
+         * Attach paste event listener because paste may occur much later then keydown or even without a keydown at all
+         */
+        $elem.on('paste', function() {
+            self.activate();
+        });
+
+        /**
+         * Finish on blur event
+         * Use a timeout because instant blur gives race conditions
+         */
+        var onBlurFunction = function() {
+            self.deactivate(true);
+        }
+        $elem.blur(function() {
+            if (self.finishOnBlur_) {
+                self.finishTimeout_ = setTimeout(onBlurFunction, 200);
+            }
+        });
+        /**
+         * Catch a race condition on form submit
+         */
+        $elem.parents('form').on('submit', onBlurFunction);
+
+    };
+
+    /**
+     * Position output DOM elements
+     * @private
+     */
+    $.Autocompleter.prototype.position = function() {
+        var offset = this.dom.$elem.offset();
+        var height = this.dom.$results.outerHeight();
+        var totalHeight = $(window).outerHeight();
+        var inputBottom = offset.top + this.dom.$elem.outerHeight();
+        var bottomIfDown = inputBottom + height;
+        // Set autocomplete results at the bottom of input
+        var position = {top: inputBottom, left: offset.left};
+        if (bottomIfDown > totalHeight) {
+            // Try to set autocomplete results at the top of input
+            var topIfUp = offset.top - height;
+            if (topIfUp >= 0) {
+                position.top = topIfUp;
+            }
+        }
+        this.dom.$results.css(position);
+    };
+
+    /**
+     * Read from cache
+     * @private
+     */
+    $.Autocompleter.prototype.cacheRead = function(filter) {
+        var filterLength, searchLength, search, maxPos, pos;
+        if (this.options.useCache) {
+            filter = String(filter);
+            filterLength = filter.length;
+            if (this.options.matchSubset) {
+                searchLength = 1;
+            } else {
+                searchLength = filterLength;
+            }
+            while (searchLength <= filterLength) {
+                if (this.options.matchInside) {
+                    maxPos = filterLength - searchLength;
+                } else {
+                    maxPos = 0;
+                }
+                pos = 0;
+                while (pos <= maxPos) {
+                    search = filter.substr(0, searchLength);
+                    if (this.cacheData_[search] !== undefined) {
+                        return this.cacheData_[search];
+                    }
+                    pos++;
+                }
+                searchLength++;
+            }
+        }
+        return false;
+    };
+
+    /**
+     * Write to cache
+     * @private
+     */
+    $.Autocompleter.prototype.cacheWrite = function(filter, data) {
+        if (this.options.useCache) {
+            if (this.cacheLength_ >= this.options.maxCacheLength) {
+                this.cacheFlush();
+            }
+            filter = String(filter);
+            if (this.cacheData_[filter] !== undefined) {
+                this.cacheLength_++;
+            }
+            this.cacheData_[filter] = data;
+            return this.cacheData_[filter];
+        }
+        return false;
+    };
+
+    /**
+     * Flush cache
+     * @public
+     */
+    $.Autocompleter.prototype.cacheFlush = function() {
+        this.cacheData_ = {};
+        this.cacheLength_ = 0;
+    };
+
+    /**
+     * Call hook
+     * Note that all called hooks are passed the autocompleter object
+     * @param {string} hook
+     * @param data
+     * @returns Result of called hook, false if hook is undefined
+     */
+    $.Autocompleter.prototype.callHook = function(hook, data) {
+        var f = this.options[hook];
+        if (f && $.isFunction(f)) {
+            return f(data, this);
+        }
+        return false;
+    };
+
+    /**
+     * Set timeout to activate autocompleter
+     */
+    $.Autocompleter.prototype.activate = function() {
+        if (!this.options.enabled) return;
+        var self = this;
+        if (this.keyTimeout_) {
+            clearTimeout(this.keyTimeout_);
+        }
+        this.keyTimeout_ = setTimeout(function() {
+            self.activateNow();
+        }, this.options.delay);
+    };
+
+    /**
+     * Activate autocompleter immediately
+     */
+    $.Autocompleter.prototype.activateNow = function() {
+        var value = this.beforeUseConverter(this.dom.$elem.val());
+        if (value !== this.lastProcessedValue_ && value !== this.lastSelectedValue_) {
+            this.fetchData(value);
+        }
+    };
+
+    /**
+     * Get autocomplete data for a given value
+     * @param {string} value Value to base autocompletion on
+     * @private
+     */
+    $.Autocompleter.prototype.fetchData = function(value) {
+        var self = this;
+        var processResults = function(results, filter) {
+            if (self.options.processData) {
+                results = self.options.processData(results);
+            }
+            self.showResults(self.filterResults(results, filter), filter);
+        };
+        this.lastProcessedValue_ = value;
+        if (value.length < this.options.minChars) {
+            processResults([], value);
+        } else if (this.options.data) {
+            processResults(this.options.data, value);
+        } else {
+            this.fetchRemoteData(value, function(remoteData) {
+                processResults(remoteData, value);
+            });
+        }
+    };
+
+    /**
+     * Get remote autocomplete data for a given value
+     * @param {string} filter The filter to base remote data on
+     * @param {function} callback The function to call after data retrieval
+     * @private
+     */
+    $.Autocompleter.prototype.fetchRemoteData = function(filter, callback) {
+        var data = this.cacheRead(filter);
+        if (data) {
+            callback(data);
+        } else {
+            var self = this;
+            var dataType = self.options.remoteDataType === 'json' ? 'json' : 'text';
+            var ajaxCallback = function(data) {
+                var parsed = false;
+                if (data !== false) {
+                    parsed = self.parseRemoteData(data);
+                    self.cacheWrite(filter, parsed);
+                }
+                self.dom.$elem.removeClass(self.options.loadingClass);
+                callback(parsed);
+            };
+            this.dom.$elem.addClass(this.options.loadingClass);
+            $.ajax({
+                url: this.makeUrl(filter),
+                success: ajaxCallback,
+                error: function(jqXHR, textStatus, errorThrown) {
+                    if($.isFunction(self.options.onError)) {
+                        self.options.onError(jqXHR, textStatus, errorThrown);
+                    } else {
+                      ajaxCallback(false);
+                    }
+                },
+                dataType: dataType
+            });
+        }
+    };
+
+    /**
+     * Create or update an extra parameter for the remote request
+     * @param {string} name Parameter name
+     * @param {string} value Parameter value
+     * @public
+     */
+    $.Autocompleter.prototype.setExtraParam = function(name, value) {
+        var index = $.trim(String(name));
+        if (index) {
+            if (!this.options.extraParams) {
+                this.options.extraParams = {};
+            }
+            if (this.options.extraParams[index] !== value) {
+                this.options.extraParams[index] = value;
+                this.cacheFlush();
+            }
+        }
+
+        return this;
+    };
+
+    /**
+     * Build the url for a remote request
+     * If options.queryParamName === false, append query to url instead of using a GET parameter
+     * @param {string} param The value parameter to pass to the backend
+     * @returns {string} The finished url with parameters
+     */
+    $.Autocompleter.prototype.makeUrl = function(param) {
+        var self = this;
+        var url = this.options.url;
+        var params = $.extend({}, this.options.extraParams);
+
+        if (this.options.queryParamName === false) {
+            url += encodeURIComponent(param);
+        } else {
+            params[this.options.queryParamName] = param;
+        }
+
+        return makeUrl(url, params);
+    };
+
+    /**
+     * Parse data received from server
+     * @param remoteData Data received from remote server
+     * @returns {array} Parsed data
+     */
+    $.Autocompleter.prototype.parseRemoteData = function(remoteData) {
+        var remoteDataType;
+        var data = remoteData;
+        if (this.options.remoteDataType === 'json') {
+            remoteDataType = typeof(remoteData);
+            switch (remoteDataType) {
+                case 'object':
+                    data = remoteData;
+                    break;
+                case 'string':
+                    data = $.parseJSON(remoteData);
+                    break;
+                default:
+                    throw new Error("Unexpected remote data type: " + remoteDataType);
+            }
+            return data;
+        }
+        return plainTextParser(data, this.options.lineSeparator, this.options.cellSeparator);
+    };
+
+    /**
+     * Default filter for results
+     * @param {Object} result
+     * @param {String} filter
+     * @returns {boolean} Include this result
+     * @private
+     */
+    $.Autocompleter.prototype.defaultFilter = function(result, filter) {
+        if (!result.value) {
+            return false;
+        }
+        if (this.options.filterResults) {
+            var pattern = this.matchStringConverter(filter);
+            var testValue = this.matchStringConverter(result.value);
+            if (!this.options.matchCase) {
+                pattern = pattern.toLowerCase();
+                testValue = testValue.toLowerCase();
+            }
+            var patternIndex = testValue.indexOf(pattern);
+            if (this.options.matchInside) {
+                return patternIndex > -1;
+            } else {
+                return patternIndex === 0;
+            }
+        }
+        return true;
+    };
+
+    /**
+     * Filter result
+     * @param {Object} result
+     * @param {String} filter
+     * @returns {boolean} Include this result
+     * @private
+     */
+    $.Autocompleter.prototype.filterResult = function(result, filter) {
+        // No filter
+        if (this.options.filter === false) {
+            return true;
+        }
+        // Custom filter
+        if ($.isFunction(this.options.filter)) {
+            return this.options.filter(result, filter);
+        }
+        // Default filter
+        return this.defaultFilter(result, filter);
+    };
+
+    /**
+     * Filter results
+     * @param results
+     * @param filter
+     */
+    $.Autocompleter.prototype.filterResults = function(results, filter) {
+        var filtered = [];
+        var i, result;
+
+        for (i = 0; i < results.length; i++) {
+            result = sanitizeResult(results[i]);
+            if (this.filterResult(result, filter)) {
+                filtered.push(result);
+            }
+        }
+        if (this.options.sortResults) {
+            filtered = this.sortResults(filtered, filter);
+        }
+        if (this.options.maxItemsToShow > 0 && this.options.maxItemsToShow < filtered.length) {
+            filtered.length = this.options.maxItemsToShow;
+        }
+        return filtered;
+    };
+
+    /**
+     * Sort results
+     * @param results
+     * @param filter
+     */
+    $.Autocompleter.prototype.sortResults = function(results, filter) {
+        var self = this;
+        var sortFunction = this.options.sortFunction;
+        if (!$.isFunction(sortFunction)) {
+            sortFunction = function(a, b, f) {
+                return sortValueAlpha(a, b, self.options.matchCase);
+            };
+        }
+        results.sort(function(a, b) {
+            return sortFunction(a, b, filter, self.options);
+        });
+        return results;
+    };
+
+    /**
+     * Convert string before matching
+     * @param s
+     * @param a
+     * @param b
+     */
+    $.Autocompleter.prototype.matchStringConverter = function(s, a, b) {
+        var converter = this.options.matchStringConverter;
+        if ($.isFunction(converter)) {
+            s = converter(s, a, b);
+        }
+        return s;
+    };
+
+    /**
+     * Convert string before use
+     * @param {String} s
+     */
+    $.Autocompleter.prototype.beforeUseConverter = function(s) {
+        s = this.getValue(s);
+        var converter = this.options.beforeUseConverter;
+        if ($.isFunction(converter)) {
+            s = converter(s);
+        }
+        return s;
+    };
+
+    /**
+     * Enable finish on blur event
+     */
+    $.Autocompleter.prototype.enableFinishOnBlur = function() {
+        this.finishOnBlur_ = true;
+    };
+
+    /**
+     * Disable finish on blur event
+     */
+    $.Autocompleter.prototype.disableFinishOnBlur = function() {
+        this.finishOnBlur_ = false;
+    };
+
+    /**
+     * Create a results item (LI element) from a result
+     * @param result
+     */
+    $.Autocompleter.prototype.createItemFromResult = function(result) {
+        var self = this;
+        var $li = $('<li/>');
+        $li.html(this.showResult(result.value, result.data));
+        $li.data({value: result.value, data: result.data})
+            .click(function() {
+                self.selectItem($li);
+            })
+            .mousedown(self.disableFinishOnBlur)
+            .mouseup(self.enableFinishOnBlur)
+        ;
+        return $li;
+    };
+
+    /**
+     * Get all items from the results list
+     * @param result
+     */
+    $.Autocompleter.prototype.getItems = function() {
+        return $('>ul>li', this.dom.$results);
+    };
+
+    /**
+     * Show all results
+     * @param results
+     * @param filter
+     */
+    $.Autocompleter.prototype.showResults = function(results, filter) {
+        var numResults = results.length;
+        var self = this;
+        var $ul = $('<ul></ul>');
+        var i, result, $li, autoWidth, first = false, $first = false;
+
+        if (numResults) {
+            for (i = 0; i < numResults; i++) {
+                result = results[i];
+                $li = this.createItemFromResult(result);
+                $ul.append($li);
+                if (first === false) {
+                    first = String(result.value);
+                    $first = $li;
+                    $li.addClass(this.options.firstItemClass);
+                }
+                if (i === numResults - 1) {
+                    $li.addClass(this.options.lastItemClass);
+                }
+            }
+
+            this.dom.$results.html($ul).show();
+
+            // Always recalculate position since window size or
+            // input element location may have changed.
+            this.position();
+            if (this.options.autoWidth) {
+                autoWidth = this.dom.$elem.outerWidth() - this.dom.$results.outerWidth() + this.dom.$results.width();
+                this.dom.$results.css(this.options.autoWidth, autoWidth);
+            }
+            this.getItems().hover(
+                function() { self.focusItem(this); },
+                function() { /* void */ }
+            );
+            if (this.autoFill(first, filter) || this.options.selectFirst || (this.options.selectOnly && numResults === 1)) {
+                this.focusItem($first);
+            }
+            this.active_ = true;
+        } else {
+            this.hideResults();
+            this.active_ = false;
+        }
+    };
+
+    $.Autocompleter.prototype.showResult = function(value, data) {
+        if ($.isFunction(this.options.showResult)) {
+            return this.options.showResult(value, data);
+        } else {
+            return $('<p></p>').text(value).html();
+        }
+    };
+
+    $.Autocompleter.prototype.autoFill = function(value, filter) {
+        var lcValue, lcFilter, valueLength, filterLength;
+        if (this.options.autoFill && this.lastKeyPressed_ !== 8) {
+            lcValue = String(value).toLowerCase();
+            lcFilter = String(filter).toLowerCase();
+            valueLength = value.length;
+            filterLength = filter.length;
+            if (lcValue.substr(0, filterLength) === lcFilter) {
+                var d = this.getDelimiterOffsets();
+                var pad = d.start ? ' ' : ''; // if there is a preceding delimiter
+                this.setValue( pad + value );
+                var start = filterLength + d.start + pad.length;
+                var end = valueLength + d.start + pad.length;
+                this.selectRange(start, end);
+                return true;
+            }
+        }
+        return false;
+    };
+
+    $.Autocompleter.prototype.focusNext = function() {
+        this.focusMove(+1);
+    };
+
+    $.Autocompleter.prototype.focusPrev = function() {
+        this.focusMove(-1);
+    };
+
+    $.Autocompleter.prototype.focusMove = function(modifier) {
+        var $items = this.getItems();
+        modifier = sanitizeInteger(modifier, 0);
+        if (modifier) {
+            for (var i = 0; i < $items.length; i++) {
+                if ($($items[i]).hasClass(this.selectClass_)) {
+                    this.focusItem(i + modifier);
+                    return;
+                }
+            }
+        }
+        this.focusItem(0);
+    };
+
+    $.Autocompleter.prototype.focusItem = function(item) {
+        var $item, $items = this.getItems();
+        if ($items.length) {
+            $items.removeClass(this.selectClass_).removeClass(this.options.selectClass);
+            if (typeof item === 'number') {
+                if (item < 0) {
+                    item = 0;
+                } else if (item >= $items.length) {
+                    item = $items.length - 1;
+                }
+                $item = $($items[item]);
+            } else {
+                $item = $(item);
+            }
+            if ($item) {
+                $item.addClass(this.selectClass_).addClass(this.options.selectClass);
+            }
+        }
+    };
+
+    $.Autocompleter.prototype.selectCurrent = function() {
+        var $item = $('li.' + this.selectClass_, this.dom.$results);
+        if ($item.length === 1) {
+            this.selectItem($item);
+        } else {
+            this.deactivate(false);
+        }
+    };
+
+    $.Autocompleter.prototype.selectItem = function($li) {
+        var value = $li.data('value');
+        var data = $li.data('data');
+        var displayValue = this.displayValue(value, data);
+        var processedDisplayValue = this.beforeUseConverter(displayValue);
+        this.lastProcessedValue_ = processedDisplayValue;
+        this.lastSelectedValue_ = processedDisplayValue;
+        var d = this.getDelimiterOffsets();
+        var delimiter = this.options.delimiterChar;
+        var elem = this.dom.$elem;
+        var extraCaretPos = 0;
+        if ( this.options.useDelimiter ) {
+            // if there is a preceding delimiter, add a space after the delimiter
+            if ( elem.val().substring(d.start-1, d.start) == delimiter && delimiter != ' ' ) {
+                displayValue = ' ' + displayValue;
+            }
+            // if there is not already a delimiter trailing this value, add it
+            if ( elem.val().substring(d.end, d.end+1) != delimiter && this.lastKeyPressed_ != this.options.delimiterKeyCode ) {
+                displayValue = displayValue + delimiter;
+            } else {
+                // move the cursor after the existing trailing delimiter
+                extraCaretPos = 1;
+            }
+        }
+        this.setValue(displayValue);
+        this.setCaret(d.start + displayValue.length + extraCaretPos);
+        this.callHook('onItemSelect', { value: value, data: data });
+        this.deactivate(true);
+        elem.focus();
+    };
+
+    $.Autocompleter.prototype.displayValue = function(value, data) {
+        if ($.isFunction(this.options.displayValue)) {
+            return this.options.displayValue(value, data);
+        }
+        return value;
+    };
+
+    $.Autocompleter.prototype.hideResults = function() {
+        this.dom.$results.hide();
+    };
+
+    $.Autocompleter.prototype.deactivate = function(finish) {
+        if (this.finishTimeout_) {
+            clearTimeout(this.finishTimeout_);
+        }
+        if (this.keyTimeout_) {
+            clearTimeout(this.keyTimeout_);
+        }
+        if (finish) {
+            if (this.lastProcessedValue_ !== this.lastSelectedValue_) {
+                if (this.options.mustMatch) {
+                    this.setValue('');
+                }
+                this.callHook('onNoMatch');
+            }
+            if (this.active_) {
+                this.callHook('onFinish');
+            }
+            this.lastKeyPressed_ = null;
+            this.lastProcessedValue_ = null;
+            this.lastSelectedValue_ = null;
+            this.active_ = false;
+        }
+        this.hideResults();
+    };
+
+    $.Autocompleter.prototype.selectRange = function(start, end) {
+        var input = this.dom.$elem.get(0);
+        if (input.setSelectionRange) {
+            input.focus();
+            input.setSelectionRange(start, end);
+        } else if (input.createTextRange) {
+            var range = input.createTextRange();
+            range.collapse(true);
+            range.moveEnd('character', end);
+            range.moveStart('character', start);
+            range.select();
+        }
+    };
+
+    /**
+     * Move caret to position
+     * @param {Number} pos
+     */
+    $.Autocompleter.prototype.setCaret = function(pos) {
+        this.selectRange(pos, pos);
+    };
+
+    /**
+     * Get caret position
+     */
+    $.Autocompleter.prototype.getCaret = function() {
+        var $elem = this.dom.$elem;
+        var elem = $elem[0];
+        var val, selection, range, start, end, stored_range;
+        if (elem.createTextRange) { // IE
+            selection = document.selection;
+            if (elem.tagName.toLowerCase() != 'textarea') {
+                val = $elem.val();
+                range = selection.createRange().duplicate();
+                range.moveEnd('character', val.length);
+                if (range.text === '') {
+                    start = val.length;
+                } else {
+                    start = val.lastIndexOf(range.text);
+                }
+                range = selection.createRange().duplicate();
+                range.moveStart('character', -val.length);
+                end = range.text.length;
+            } else {
+                range = selection.createRange();
+                stored_range = range.duplicate();
+                stored_range.moveToElementText(elem);
+                stored_range.setEndPoint('EndToEnd', range);
+                start = stored_range.text.length - range.text.length;
+                end = start + range.text.length;
+            }
+        } else {
+            start = $elem[0].selectionStart;
+            end = $elem[0].selectionEnd;
+        }
+        return {
+            start: start,
+            end: end
+        };
+    };
+
+    /**
+     * Set the value that is currently being autocompleted
+     * @param {String} value
+     */
+    $.Autocompleter.prototype.setValue = function(value) {
+        if ( this.options.useDelimiter ) {
+            // set the substring between the current delimiters
+            var val = this.dom.$elem.val();
+            var d = this.getDelimiterOffsets();
+            var preVal = val.substring(0, d.start);
+            var postVal = val.substring(d.end);
+            value = preVal + value + postVal;
+        }
+        this.dom.$elem.val(value);
+    };
+
+    /**
+     * Get the value currently being autocompleted
+     * @param {String} value
+     */
+    $.Autocompleter.prototype.getValue = function(value) {
+        if ( this.options.useDelimiter ) {
+            var d = this.getDelimiterOffsets();
+            return value.substring(d.start, d.end).trim();
+        } else {
+            return value;
+        }
+    };
+
+    /**
+     * Get the offsets of the value currently being autocompleted
+     */
+    $.Autocompleter.prototype.getDelimiterOffsets = function() {
+        var val = this.dom.$elem.val();
+        if ( this.options.useDelimiter ) {
+            var preCaretVal = val.substring(0, this.getCaret().start);
+            var start = preCaretVal.lastIndexOf(this.options.delimiterChar) + 1;
+            var postCaretVal = val.substring(this.getCaret().start);
+            var end = postCaretVal.indexOf(this.options.delimiterChar);
+            if ( end == -1 ) end = val.length;
+            end += this.getCaret().start;
+        } else {
+            start = 0;
+            end = val.length;
+        }
+        return {
+            start: start,
+            end: end
+        };
+    };
+
+})((typeof window.jQuery == 'undefined' && typeof window.django != 'undefined')? django.jQuery : jQuery);
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.bgiframe.min.js b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.bgiframe.min.js
new file mode 100644
index 0000000..7165d7a
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/static/django_extensions/js/jquery.bgiframe.min.js
@@ -0,0 +1,10 @@
+/* Copyright (c) 2006 Brandon Aaron (http://brandonaaron.net)
+ * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
+ * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
+ *
+ * $LastChangedDate: 2007-07-22 01:45:56 +0200 (Son, 22 Jul 2007) $
+ * $Rev: 2447 $
+ *
+ * Version 2.1.1
+ */
+(function($){$.fn.bgIframe=$.fn.bgiframe=function(s){if($.browser.msie&&/6.0/.test(navigator.userAgent)){s=$.extend({top:'auto',left:'auto',width:'auto',height:'auto',opacity:true,src:'javascript:false;'},s||{});var prop=function(n){return n&&n.constructor==Number?n+'px':n;},html='<iframe class="bgiframe"frameborder="0"tabindex="-1"src="'+s.src+'"'+'style="display:block;position:absolute;z-index:-1;'+(s.opacity!==false?'filter:Alpha(Opacity=\'0\');':'')+'top:'+(s.top=='auto'?'expression(((parseInt(this.parentNode.currentStyle.borderTopWidth)||0)*-1)+\'px\')':prop(s.top))+';'+'left:'+(s.left=='auto'?'expression(((parseInt(this.parentNode.currentStyle.borderLeftWidth)||0)*-1)+\'px\')':prop(s.left))+';'+'width:'+(s.width=='auto'?'expression(this.parentNode.offsetWidth+\'px\')':prop(s.width))+';'+'height:'+(s.height=='auto'?'expression(this.parentNode.offsetHeight+\'px\')':prop(s.height))+';'+'"/>';return this.each(function(){if($('> iframe.bgiframe',this).length==0)this.insertBefore(document.createElement(html),this.firstChild);});}return this;};})((typeof window.jQuery=='undefined' && typeof window.django!='undefined')? django.jQuery : jQuery);
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/digraph.dot b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/digraph.dot
new file mode 100644
index 0000000..7e0e315
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/digraph.dot
@@ -0,0 +1,26 @@
+{% block digraph %}digraph model_graph {
+  // Dotfile by Django-Extensions graph_models
+  // Created: {{ created_at }}
+  {% if cli_options %}// Cli Options: {{ cli_options }}{% endif %}
+
+  {% block digraph_options %}fontname = "Helvetica"
+  fontsize = 8
+  splines  = true{% endblock %}
+
+  node [{% block node_options %}
+    fontname = "Helvetica"
+    fontsize = 8
+    shape = "plaintext"
+  {% endblock %}]
+
+  edge [{% block edge_options %}
+    fontname = "Helvetica"
+    fontsize = 8
+  {% endblock %}]
+
+  // Labels
+{% block labels %}{% for graph in graphs %}{% include "django_extensions/graph_models/label.dot" %}{% endfor %}{% endblock %}
+
+  // Relations
+{% block relations %}{% for graph in graphs %}{% include "django_extensions/graph_models/relation.dot" %}{% endfor %}{% endblock %}
+}{% endblock %}
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/label.dot b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/label.dot
new file mode 100644
index 0000000..91ef18f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/label.dot
@@ -0,0 +1,30 @@
+{% load indent_text %}{% if use_subgraph %}  subgraph {{ graph.cluster_app_name }} {
+    label=<
+          <TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0">
+          <TR><TD COLSPAN="2" CELLPADDING="4" ALIGN="CENTER">
+          <FONT FACE="Helvetica Bold" COLOR="Black" POINT-SIZE="12">
+          {{ graph.app_name }}
+          </FONT>
+          </TD></TR>
+          </TABLE>
+          >
+    color=olivedrab4
+    style="rounded"{% endif %}
+{% indentby 2 if use_subgraph %}{% for model in graph.models %}
+  {{ model.app_name }}_{{ model.name }} [label=<
+    <TABLE BGCOLOR="palegoldenrod" BORDER="0" CELLBORDER="0" CELLSPACING="0">
+    <TR><TD COLSPAN="2" CELLPADDING="4" ALIGN="CENTER" BGCOLOR="olivedrab4">
+    <FONT FACE="Helvetica Bold" COLOR="white">
+    {{ model.label }}{% if model.abstracts %}<BR/>&lt;<FONT FACE="Helvetica Italic">{{ model.abstracts|join:"," }}</FONT>&gt;{% endif %}
+    </FONT></TD></TR>
+  {% if not disable_fields %}{% for field in model.fields %}
+    <TR><TD ALIGN="LEFT" BORDER="0">
+    <FONT {% if not field.primary_key and field.blank %}COLOR="#7B7B7B" {% endif %}FACE="Helvetica {% if field.abstract %}Italic{% endif %}{% if field.relation or field.primary_key %}Bold{% endif %}">{{ field.label }}</FONT>
+    </TD><TD ALIGN="LEFT">
+    <FONT {% if not field.primary_key and field.blank %}COLOR="#7B7B7B" {% endif %}FACE="Helvetica {% if field.abstract %}Italic{% endif %}{% if field.relation or field.primary_key %}Bold{% endif %}">{{ field.type }}</FONT>
+    </TD></TR>
+  {% endfor %}{% endif %}
+    </TABLE>
+    >]
+{% endfor %}{% endindentby %}
+{% if use_subgraph %}  }{% endif %}
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/relation.dot b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/relation.dot
new file mode 100644
index 0000000..aa351e6
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/graph_models/relation.dot
@@ -0,0 +1,10 @@
+{% for model in graph.models %}{% for relation in model.relations %}{% if relation.needs_node %}  {{ relation.target_app }}_{{ relation.target }} [label=<
+  <TABLE BGCOLOR="palegoldenrod" BORDER="0" CELLBORDER="0" CELLSPACING="0">
+  <TR><TD COLSPAN="2" CELLPADDING="4" ALIGN="CENTER" BGCOLOR="olivedrab4">
+  <FONT FACE="Helvetica Bold" COLOR="white">{{ relation.target }}</FONT>
+  </TD></TR>
+  </TABLE>
+  >]{% endif %}
+  {{ model.app_name }}_{{ model.name }} -> {{ relation.target_app }}_{{ relation.target }}
+  [label="{{ relation.label }}"] {{ relation.arrows }};
+{% endfor %}{% endfor %}
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/widgets/foreignkey_searchinput.html b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/widgets/foreignkey_searchinput.html
new file mode 100644
index 0000000..bf6e3cc
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templates/django_extensions/widgets/foreignkey_searchinput.html
@@ -0,0 +1,61 @@
+{% load i18n staticfiles %}
+<input type="text" id="lookup_{{ name }}" value="{{ label }}" style="display:none;" />
+<a href="{{ related_url }}{{ url }}" class="related-lookup" id="lookup_id_{{ name }}" onclick="return showRelatedObjectLookupPopup(this);">
+    <img src="{% static "admin/img/selector-search.gif" %}" width="16" height="16" alt="{% trans "Lookup" %}" />
+</a>
+<script type="text/javascript">
+(function($) {
+    // Show lookup input
+    $('#lookup_{{ name }}').show();
+    function reset() {
+        $('#id_{{ name }}, #lookup_{{ name }}').val('');
+    };
+    function lookup(query) {
+        $.get('{{ search_path }}', {
+            'search_fields': '{{ search_fields }}',
+            'app_label': '{{ app_label }}',
+            'model_name': '{{ model_name }}',
+            'object_pk': query
+        }, function(data) {
+            $('#lookup_{{ name }}').val(data);
+            {{ name }}_value = query;
+        });
+    };
+    $('#id_{{ name }}').bind('keyup', function(event) {
+        if ($(this).val()) {
+            if (event.keyCode == 27) {
+                reset();
+            } else {
+                lookup($(this).val());
+            };
+        };
+    });
+    $('#lookup_{{ name }}').bind('keyup', function(event) {
+        if ($(this).val()) {
+            if (event.keyCode == 27) {
+                reset();
+            }
+        }
+    });
+    $('#lookup_{{ name }}').autocomplete('{{ search_path }}', {
+        extraParams: {
+            'search_fields': '{{ search_fields }}',
+            'app_label': '{{ app_label }}',
+            'model_name': '{{ model_name }}'
+        },
+        onItemSelect: function(item) {
+            $('#id_{{ name }}').val(item.data[0]);
+        }
+    });
+    var {{ name }}_value = $('#id_{{ name }}').val();
+    function check() {
+        {{ name }}_check = $('#id_{{ name }}').val();
+        if ({{ name }}_check) {
+            if ({{ name }}_check != {{ name }}_value) {
+                lookup({{ name }}_check);
+            }
+        }
+    };
+    timeout = window.setInterval(check, 300);
+})((typeof window.jQuery == 'undefined' && typeof window.django != 'undefined')? django.jQuery : jQuery);
+</script>
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/highlighting.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/highlighting.py
new file mode 100644
index 0000000..567a97e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/highlighting.py
@@ -0,0 +1,97 @@
+"""
+Similar to syntax_color.py but this is intended more for being able to
+copy+paste actual code into your Django templates without needing to
+escape or anything crazy.
+
+http://lobstertech.com/2008/aug/30/django_syntax_highlight_template_tag/
+
+Example:
+
+ {% load highlighting %}
+
+ <style>
+ @import url("http://lobstertech.com/media/css/highlight.css");
+ .highlight { background: #f8f8f8; }
+ .highlight { font-size: 11px; margin: 1em; border: 1px solid #ccc;
+              border-left: 3px solid #F90; padding: 0; }
+ .highlight pre { padding: 1em; overflow: auto; line-height: 120%; margin: 0; }
+ .predesc { margin: 1.5em 1.5em -2.5em 1em; text-align: right;
+            font: bold 12px Tahoma, Arial, sans-serif;
+            letter-spacing: 1px; color: #333; }
+ </style>
+
+ <h2>check out this code</h2>
+
+ {% highlight 'python' 'Excerpt: blah.py' %}
+ def need_food(self):
+     print("Love is <colder> than &death&")
+ {% endhighlight %}
+
+"""
+
+from django import template
+from django.template import Template, Context, Node, Variable, TemplateSyntaxError
+from django.template.defaultfilters import stringfilter
+from django.utils.safestring import mark_safe
+try:
+    from pygments import highlight as pyghighlight
+    from pygments.lexers import get_lexer_by_name
+    from pygments.formatters import HtmlFormatter
+except ImportError:
+    raise ImportError("Please install 'pygments' library to use highlighting.")
+
+register = template.Library()
+
+
+@register.filter
+@stringfilter
+def parse_template(value):
+    return mark_safe(Template(value).render(Context()))
+parse_template.is_safe = True
+
+
+class CodeNode(Node):
+    def __init__(self, language, nodelist, name=''):
+        self.language = Variable(language)
+        self.nodelist = nodelist
+        if name:
+            self.name = Variable(name)
+        else:
+            self.name = None
+
+    def render(self, context):
+        code = self.nodelist.render(context).strip()
+        lexer = get_lexer_by_name(self.language.resolve(context))
+        formatter = HtmlFormatter(linenos=False)
+        html = ""
+        if self.name:
+            name = self.name.resolve(context)
+            html = '<div class="predesc"><span>%s</span></div>' % (name)
+        return html + pyghighlight(code, lexer, formatter)
+
+
+@register.tag
+def highlight(parser, token):
+    """
+    Allows you to put a highlighted source code <pre> block in your code.
+    This takes two arguments, the language and a little explaination message
+    that will be generated before the code.  The second argument is optional.
+
+    Your code will be fed through pygments so you can use any language it
+    supports.
+
+    Usage::
+
+      {% load highlighting %}
+      {% highlight 'python' 'Excerpt: blah.py' %}
+      def need_food(self):
+          print("Love is colder than death")
+      {% endhighlight %}
+
+    """
+    nodelist = parser.parse(('endhighlight',))
+    parser.delete_first_token()
+    bits = token.split_contents()[1:]
+    if len(bits) < 1:
+        raise TemplateSyntaxError("'highlight' statement requires an argument")
+    return CodeNode(bits[0], nodelist, *bits[1:])
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/indent_text.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/indent_text.py
new file mode 100644
index 0000000..0085423
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/indent_text.py
@@ -0,0 +1,55 @@
+from django import template
+
+register = template.Library()
+
+
+class IndentByNode(template.Node):
+    def __init__(self, nodelist, indent_level, if_statement):
+        self.nodelist = nodelist
+        self.indent_level = template.Variable(indent_level)
+        if if_statement:
+            self.if_statement = template.Variable(if_statement)
+        else:
+            self.if_statement = None
+
+    def render(self, context):
+        indent_level = self.indent_level.resolve(context)
+        if self.if_statement:
+            try:
+                if_statement = bool(self.if_statement.resolve(context))
+            except template.VariableDoesNotExist:
+                if_statement = False
+        else:
+            if_statement = True
+        output = self.nodelist.render(context)
+        if if_statement:
+            indent = " " * indent_level
+            output = indent + indent.join(output.splitlines(True))
+        return output
+
+
+def indentby(parser, token):
+    """
+    Adds indentation to text between the tags by the given indentation level.
+
+    {% indentby <indent_level> [if <statement>] %}
+    ...
+    {% endindentby %}
+
+    Arguments:
+      indent_level - Number of spaces to indent text with.
+      statement - Only apply indent_level if the boolean statement evalutates to True.
+    """
+    args = token.split_contents()
+    largs = len(args)
+    if largs not in (2, 4):
+        raise template.TemplateSyntaxError("%r tag requires 1 or 3 arguments")
+    indent_level = args[1]
+    if_statement = None
+    if largs == 4:
+        if_statement = args[3]
+    nodelist = parser.parse(('endindentby', ))
+    parser.delete_first_token()
+    return IndentByNode(nodelist, indent_level, if_statement)
+
+indentby = register.tag(indentby)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/syntax_color.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/syntax_color.py
new file mode 100644
index 0000000..39e1c7f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/syntax_color.py
@@ -0,0 +1,95 @@
+r"""
+Template filter for rendering a string with syntax highlighting.
+It relies on Pygments to accomplish this.
+
+Some standard usage examples (from within Django templates).
+Coloring a string with the Python lexer:
+
+    {% load syntax_color %}
+    {{ code_string|colorize:"python" }}
+
+You may use any lexer in Pygments. The complete list of which
+can be found [on the Pygments website][1].
+
+[1]: http://pygments.org/docs/lexers/
+
+You may also have Pygments attempt to guess the correct lexer for
+a particular string. However, if may not be able to choose a lexer,
+in which case it will simply return the string unmodified. This is
+less efficient compared to specifying the lexer to use.
+
+    {{ code_string|colorize }}
+
+You may also render the syntax highlighed text with line numbers.
+
+    {% load syntax_color %}
+    {{ some_code|colorize_table:"html+django" }}
+    {{ let_pygments_pick_for_this_code|colorize_table }}
+
+Please note that before you can load the ``syntax_color`` template filters
+you will need to add the ``django_extensions.utils`` application to the
+``INSTALLED_APPS``setting in your project's ``settings.py`` file.
+"""
+
+__author__ = 'Will Larson <lethain@gmail.com>'
+
+
+from django import template
+from django.template.defaultfilters import stringfilter
+from django.utils.safestring import mark_safe
+
+try:
+    from pygments import highlight
+    from pygments.formatters import HtmlFormatter
+    from pygments.lexers import get_lexer_by_name, guess_lexer, ClassNotFound
+except ImportError:
+    raise ImportError("Please install 'pygments' library to use syntax_color.")
+
+register = template.Library()
+
+
+@register.simple_tag
+def pygments_css():
+    return HtmlFormatter().get_style_defs('.highlight')
+
+
+def generate_pygments_css(path=None):
+    if path is None:
+        import os
+        path = os.path.join(os.getcwd(), 'pygments.css')
+    f = open(path, 'w')
+    f.write(pygments_css())
+    f.close()
+
+
+def get_lexer(value, arg):
+    if arg is None:
+        return guess_lexer(value)
+    return get_lexer_by_name(arg)
+
+
+@register.filter(name='colorize')
+@stringfilter
+def colorize(value, arg=None):
+    try:
+        return mark_safe(highlight(value, get_lexer(value, arg), HtmlFormatter()))
+    except ClassNotFound:
+        return value
+
+
+@register.filter(name='colorize_table')
+@stringfilter
+def colorize_table(value, arg=None):
+    try:
+        return mark_safe(highlight(value, get_lexer(value, arg), HtmlFormatter(linenos='table')))
+    except ClassNotFound:
+        return value
+
+
+@register.filter(name='colorize_noclasses')
+@stringfilter
+def colorize_noclasses(value, arg=None):
+    try:
+        return mark_safe(highlight(value, get_lexer(value, arg), HtmlFormatter(noclasses=True)))
+    except ClassNotFound:
+        return value
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/truncate_letters.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/truncate_letters.py
new file mode 100644
index 0000000..b77a6b1
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/truncate_letters.py
@@ -0,0 +1,28 @@
+import django
+from django import template
+from django.template.defaultfilters import stringfilter
+
+register = template.Library()
+
+
+def truncateletters(value, arg):
+    """
+    Truncates a string after a certain number of letters
+
+    Argument: Number of letters to truncate after
+    """
+    from django_extensions.utils.text import truncate_letters
+    try:
+        length = int(arg)
+    except ValueError:  # invalid literal for int()
+        return value  # Fail silently
+    return truncate_letters(value, length)
+
+if django.get_version() >= "1.4":
+    truncateletters = stringfilter(truncateletters)
+    register.filter(truncateletters, is_safe=True)
+else:
+    truncateletters.is_safe = True
+    truncateletters = stringfilter(truncateletters)
+    register.filter(truncateletters)
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/widont.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/widont.py
new file mode 100644
index 0000000..a2d0af3
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/templatetags/widont.py
@@ -0,0 +1,65 @@
+import re
+from django.template import Library
+try:
+    from django.utils.encoding import force_text
+except ImportError:
+    # Django 1.4 compatibility
+    from django.utils.encoding import force_unicode as force_text
+
+register = Library()
+re_widont = re.compile(r'\s+(\S+\s*)$')
+re_widont_html = re.compile(r'([^<>\s])\s+([^<>\s]+\s*)(</?(?:address|blockquote|br|dd|div|dt|fieldset|form|h[1-6]|li|noscript|p|td|th)[^>]*>|$)', re.IGNORECASE)
+
+
+def widont(value, count=1):
+    """
+    Adds an HTML non-breaking space between the final two words of the string to
+    avoid "widowed" words.
+
+    Examples:
+
+    >>> print(widont('Test   me   out'))
+    Test   me&nbsp;out
+
+    >>> widont('It works with trailing spaces too  ')
+    u'It works with trailing spaces&nbsp;too  '
+
+    >>> print(widont('NoEffect'))
+    NoEffect
+    """
+    def replace(matchobj):
+        return force_text('&nbsp;%s' % matchobj.group(1))
+    for i in range(count):
+        value = re_widont.sub(replace, force_text(value))
+    return value
+
+
+def widont_html(value):
+    """
+    Adds an HTML non-breaking space between the final two words at the end of
+    (and in sentences just outside of) block level tags to avoid "widowed"
+    words.
+
+    Examples:
+
+    >>> print(widont_html('<h2>Here is a simple  example  </h2> <p>Single</p>'))
+    <h2>Here is a simple&nbsp;example  </h2> <p>Single</p>
+
+    >>> print(widont_html('<p>test me<br /> out</p><h2>Ok?</h2>Not in a p<p title="test me">and this</p>'))
+    <p>test&nbsp;me<br /> out</p><h2>Ok?</h2>Not in a&nbsp;p<p title="test me">and&nbsp;this</p>
+
+    >>> print(widont_html('leading text  <p>test me out</p>  trailing text'))
+    leading&nbsp;text  <p>test me&nbsp;out</p>  trailing&nbsp;text
+    """
+    def replace(matchobj):
+        return force_text('%s&nbsp;%s%s' % matchobj.groups())
+    return re_widont_html.sub(replace, force_text(value))
+
+register.filter(widont)
+register.filter(widont_html)
+
+if __name__ == "__main__":
+    def _test():
+        import doctest
+        doctest.testmod()
+    _test()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/__init__.py
new file mode 100644
index 0000000..c1bdd47
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/__init__.py
@@ -0,0 +1,26 @@
+from django.db import models  # NOQA
+from django_extensions.tests.test_dumpscript import DumpScriptTests
+from django_extensions.tests.utils import TruncateLetterTests
+from django_extensions.tests.json_field import JsonFieldTest
+from django_extensions.tests.uuid_field import (UUIDFieldTest,
+                                                PostgreSQLUUIDFieldTest)
+from django_extensions.tests.shortuuid_field import ShortUUIDFieldTest
+from django_extensions.tests.fields import AutoSlugFieldTest
+from django_extensions.tests.management_command import CommandTest, \
+    ShowTemplateTagsTests, UpdatePermissionsTests, CommandSignalTests
+from django_extensions.tests.test_templatetags import TemplateTagsTests
+from django_extensions.tests.test_clean_pyc import CleanPycTests
+from django_extensions.tests.test_compile_pyc import CompilePycTests
+
+__test_classes__ = [
+    DumpScriptTests, JsonFieldTest, UUIDFieldTest, AutoSlugFieldTest,
+    CommandTest, ShowTemplateTagsTests, TruncateLetterTests, TemplateTagsTests,
+    ShortUUIDFieldTest, PostgreSQLUUIDFieldTest, CleanPycTests, CompilePycTests,
+    UpdatePermissionsTests, CommandSignalTests
+]
+
+try:
+    from django_extensions.tests.encrypted_fields import EncryptedFieldsTestCase
+    __test_classes__.append(EncryptedFieldsTestCase)
+except ImportError:
+    pass
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/encrypted_fields.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/encrypted_fields.py
new file mode 100644
index 0000000..dee9fd3
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/encrypted_fields.py
@@ -0,0 +1,258 @@
+from contextlib import contextmanager
+import functools
+
+from django.conf import settings
+from django.db import connection, models
+from django.db.models import loading
+
+from django_extensions.tests.models import Secret
+from django_extensions.tests.fields import FieldTestCase
+
+# Only perform encrypted fields tests if keyczar is present. Resolves
+# http://github.com/django-extensions/django-extensions/issues/#issue/17
+try:
+    from django_extensions.db.fields.encrypted import EncryptedTextField, EncryptedCharField  # NOQA
+    from keyczar import keyczar, keyczart, keyinfo  # NOQA
+    keyczar_active = True
+except ImportError:
+    keyczar_active = False
+
+
+def run_if_active(func):
+    "Method decorator that only runs a test if KeyCzar is available."
+
+    @functools.wraps(func)
+    def inner(self):
+        if not keyczar_active:
+            return
+        return func(self)
+    return inner
+
+
+# Locations of both private and public keys.
+KEY_LOCS = getattr(settings, 'ENCRYPTED_FIELD_KEYS_DIR', {})
+
+
+@contextmanager
+def keys(purpose, mode=None):
+    """
+    A context manager that sets up the correct KeyCzar environment for a test.
+
+    Arguments:
+        purpose: Either keyczar.keyinfo.DECRYPT_AND_ENCRYPT or
+                 keyczar.keyinfo.ENCRYPT.
+        mode: If truthy, settings.ENCRYPTED_FIELD_MODE will be set to (and then
+              reverted from) this value. If falsy, settings.ENCRYPTED_FIELD_MODE
+              will not be changed. Optional. Default: None.
+
+    Yields:
+        A Keyczar subclass for the stated purpose. This will be keyczar.Crypter
+        for DECRYPT_AND_ENCRYPT or keyczar.Encrypter for ENCRYPT. In addition,
+        settings.ENCRYPTED_FIELD_KEYS_DIR will be set correctly, and then
+        reverted when the manager exits.
+    """
+    # Store the original settings so we can restore when the manager exits.
+    orig_setting_dir = getattr(settings, 'ENCRYPTED_FIELD_KEYS_DIR', None)
+    orig_setting_mode = getattr(settings, 'ENCRYPTED_FIELD_MODE', None)
+    try:
+        if mode:
+            settings.ENCRYPTED_FIELD_MODE = mode
+
+        if purpose == keyinfo.DECRYPT_AND_ENCRYPT:
+            settings.ENCRYPTED_FIELD_KEYS_DIR = KEY_LOCS['DECRYPT_AND_ENCRYPT']
+            yield keyczar.Crypter.Read(settings.ENCRYPTED_FIELD_KEYS_DIR)
+        else:
+            settings.ENCRYPTED_FIELD_KEYS_DIR = KEY_LOCS['ENCRYPT']
+            yield keyczar.Encrypter.Read(settings.ENCRYPTED_FIELD_KEYS_DIR)
+
+    except:
+        raise  # Reraise any exceptions.
+
+    finally:
+        # Restore settings.
+        settings.ENCRYPTED_FIELD_KEYS_DIR = orig_setting_dir
+        if mode:
+            if orig_setting_mode:
+                settings.ENCRYPTED_FIELD_MODE = orig_setting_mode
+            else:
+                del settings.ENCRYPTED_FIELD_MODE
+
+
+@contextmanager
+def secret_model():
+    """
+    A context manager that yields a Secret model defined at runtime.
+
+    All EncryptedField init logic occurs at model class definition time, not at
+    object instantiation time. This means that in order to test different keys
+    and modes, we must generate a new class definition at runtime, after
+    establishing the correct KeyCzar settings. This context manager handles
+    that process.
+
+    See http://dynamic-models.readthedocs.org/en/latest/ and
+    https://docs.djangoproject.com/en/dev/topics/db/models/
+        #differences-between-proxy-inheritance-and-unmanaged-models
+    """
+
+    # Store Django's cached model, if present, so we can restore when the
+    # manager exits.
+    orig_model = None
+    try:
+        orig_model = loading.cache.app_models['tests']['secret']
+        del loading.cache.app_models['tests']['secret']
+    except KeyError:
+        pass
+
+    try:
+        # Create a new class that shadows tests.models.Secret.
+        attrs = {
+            'name': EncryptedCharField("Name", max_length=Secret._meta.get_field('name').max_length),
+            'text': EncryptedTextField("Text"),
+            '__module__': 'django_extensions.tests.models',
+            'Meta': type('Meta', (object, ), {
+                'managed': False,
+                'db_table': Secret._meta.db_table
+            })
+        }
+        yield type('Secret', (models.Model, ), attrs)
+
+    except:
+        raise  # Reraise any exceptions.
+
+    finally:
+        # Restore Django's model cache.
+        try:
+            loading.cache.app_models['tests']['secret'] = orig_model
+        except KeyError:
+            pass
+
+
+class EncryptedFieldsTestCase(FieldTestCase):
+    @run_if_active
+    def testCharFieldCreate(self):
+        """
+        Uses a private key to encrypt data on model creation.
+        Verifies the data is encrypted in the database and can be decrypted.
+        """
+        with keys(keyinfo.DECRYPT_AND_ENCRYPT) as crypt:
+            with secret_model() as model:
+                test_val = "Test Secret"
+                secret = model.objects.create(name=test_val)
+
+                cursor = connection.cursor()
+                query = "SELECT name FROM %s WHERE id = %d" % (model._meta.db_table, secret.id)
+                cursor.execute(query)
+                db_val, = cursor.fetchone()
+                decrypted_val = crypt.Decrypt(db_val[len(EncryptedCharField.prefix):])
+                self.assertEqual(test_val, decrypted_val)
+
+    @run_if_active
+    def testCharFieldRead(self):
+        """
+        Uses a private key to encrypt data on model creation.
+        Verifies the data is decrypted when reading the value back from the
+        model.
+        """
+        with keys(keyinfo.DECRYPT_AND_ENCRYPT):
+            with secret_model() as model:
+                test_val = "Test Secret"
+                secret = model.objects.create(name=test_val)
+                retrieved_secret = model.objects.get(id=secret.id)
+                self.assertEqual(test_val, retrieved_secret.name)
+
+    @run_if_active
+    def testTextFieldCreate(self):
+        """
+        Uses a private key to encrypt data on model creation.
+        Verifies the data is encrypted in the database and can be decrypted.
+        """
+        with keys(keyinfo.DECRYPT_AND_ENCRYPT) as crypt:
+            with secret_model() as model:
+                test_val = "Test Secret"
+                secret = model.objects.create(text=test_val)
+                cursor = connection.cursor()
+                query = "SELECT text FROM %s WHERE id = %d" % (model._meta.db_table, secret.id)
+                cursor.execute(query)
+                db_val, = cursor.fetchone()
+                decrypted_val = crypt.Decrypt(db_val[len(EncryptedCharField.prefix):])
+                self.assertEqual(test_val, decrypted_val)
+
+    @run_if_active
+    def testTextFieldRead(self):
+        """
+        Uses a private key to encrypt data on model creation.
+        Verifies the data is decrypted when reading the value back from the
+        model.
+        """
+        with keys(keyinfo.DECRYPT_AND_ENCRYPT):
+            with secret_model() as model:
+                test_val = "Test Secret"
+                secret = model.objects.create(text=test_val)
+                retrieved_secret = model.objects.get(id=secret.id)
+                self.assertEqual(test_val, retrieved_secret.text)
+
+    @run_if_active
+    def testCannotDecrypt(self):
+        """
+        Uses a public key to encrypt data on model creation.
+        Verifies that the data cannot be decrypted using the same key.
+        """
+        with keys(keyinfo.ENCRYPT, mode=keyinfo.ENCRYPT.name):
+            with secret_model() as model:
+                test_val = "Test Secret"
+                secret = model.objects.create(name=test_val)
+                retrieved_secret = model.objects.get(id=secret.id)
+                self.assertNotEqual(test_val, retrieved_secret.name)
+                self.assertTrue(retrieved_secret.name.startswith(EncryptedCharField.prefix))
+
+    @run_if_active
+    def testUnacceptablePurpose(self):
+        """
+        Tries to create an encrypted field with a mode mismatch.
+        A purpose of "DECRYPT_AND_ENCRYPT" cannot be used with a public key,
+        since public keys cannot be used for decryption. This should raise an
+        exception.
+        """
+        with self.assertRaises(keyczar.errors.KeyczarError):
+            with keys(keyinfo.ENCRYPT):
+                with secret_model():
+                    # A KeyCzar exception should get raised during class
+                    # definition time, so any code in here would never get run.
+                    pass
+
+    @run_if_active
+    def testDecryptionForbidden(self):
+        """
+        Uses a private key to encrypt data, but decryption is not allowed.
+        ENCRYPTED_FIELD_MODE is explicitly set to ENCRYPT, meaning data should
+        not be decrypted, even though the key would allow for it.
+        """
+        with keys(keyinfo.DECRYPT_AND_ENCRYPT, mode=keyinfo.ENCRYPT.name):
+            with secret_model() as model:
+                test_val = "Test Secret"
+                secret = model.objects.create(name=test_val)
+                retrieved_secret = model.objects.get(id=secret.id)
+                self.assertNotEqual(test_val, retrieved_secret.name)
+                self.assertTrue(retrieved_secret.name.startswith(EncryptedCharField.prefix))
+
+    @run_if_active
+    def testEncryptPublicDecryptPrivate(self):
+        """
+        Uses a public key to encrypt, and a private key to decrypt data.
+        """
+        test_val = "Test Secret"
+
+        # First, encrypt data with public key and save to db.
+        with keys(keyinfo.ENCRYPT, mode=keyinfo.ENCRYPT.name):
+            with secret_model() as model:
+                secret = model.objects.create(name=test_val)
+                enc_retrieved_secret = model.objects.get(id=secret.id)
+                self.assertNotEqual(test_val, enc_retrieved_secret.name)
+                self.assertTrue(enc_retrieved_secret.name.startswith(EncryptedCharField.prefix))
+
+        # Next, retrieve data from db, and decrypt with private key.
+        with keys(keyinfo.DECRYPT_AND_ENCRYPT):
+            with secret_model() as model:
+                retrieved_secret = model.objects.get(id=secret.id)
+                self.assertEqual(test_val, retrieved_secret.name)
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/fields.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/fields.py
new file mode 100644
index 0000000..16e683f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/fields.py
@@ -0,0 +1,159 @@
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db.models import loading
+from django.db import models
+from django.utils import unittest
+
+from django_extensions.db.fields import AutoSlugField
+from django_extensions.tests.testapp.models import SluggedTestModel, ChildSluggedTestModel
+
+if django.VERSION[:2] >= (1, 7):
+    from django.db import migrations  # NOQA
+    from django.db.migrations.writer import MigrationWriter  # NOQA
+    from django.utils import six  # NOQA
+    import django_extensions  # NOQA
+
+
+class FieldTestCase(unittest.TestCase):
+    def setUp(self):
+        self.old_installed_apps = settings.INSTALLED_APPS
+        #settings.INSTALLED_APPS = list(settings.INSTALLED_APPS)
+        #settings.INSTALLED_APPS.append('django_extensions.tests.testapp')
+        loading.cache.loaded = False
+
+        # Don't migrate if south is installed
+        migrate = 'south' not in settings.INSTALLED_APPS
+        call_command('syncdb', verbosity=0, migrate=migrate)
+
+    def tearDown(self):
+        settings.INSTALLED_APPS = self.old_installed_apps
+
+    def safe_exec(self, string, value=None):
+        l = {}
+        try:
+            exec(string, globals(), l)
+        except Exception as e:
+            if value:
+                self.fail("Could not exec %r (from value %r): %s" % (string.strip(), value, e))
+            else:
+                self.fail("Could not exec %r: %s" % (string.strip(), e))
+        return l
+
+
+class AutoSlugFieldTest(FieldTestCase):
+    def tearDown(self):
+        super(AutoSlugFieldTest, self).tearDown()
+
+        SluggedTestModel.objects.all().delete()
+
+    def testAutoCreateSlug(self):
+        m = SluggedTestModel(title='foo')
+        m.save()
+        self.assertEqual(m.slug, 'foo')
+
+    def testAutoCreateNextSlug(self):
+        m = SluggedTestModel(title='foo')
+        m.save()
+
+        m = SluggedTestModel(title='foo')
+        m.save()
+        self.assertEqual(m.slug, 'foo-2')
+
+    def testAutoCreateSlugWithNumber(self):
+        m = SluggedTestModel(title='foo 2012')
+        m.save()
+        self.assertEqual(m.slug, 'foo-2012')
+
+    def testAutoUpdateSlugWithNumber(self):
+        m = SluggedTestModel(title='foo 2012')
+        m.save()
+        m.save()
+        self.assertEqual(m.slug, 'foo-2012')
+
+    def testUpdateSlug(self):
+        m = SluggedTestModel(title='foo')
+        m.save()
+        self.assertEqual(m.slug, 'foo')
+
+        # update m instance without using `save'
+        SluggedTestModel.objects.filter(pk=m.pk).update(slug='foo-2012')
+        # update m instance with new data from the db
+        m = SluggedTestModel.objects.get(pk=m.pk)
+        self.assertEqual(m.slug, 'foo-2012')
+
+        m.save()
+        self.assertEqual(m.title, 'foo')
+        self.assertEqual(m.slug, 'foo-2012')
+
+        # Check slug is not overwrite
+        m.title = 'bar'
+        m.save()
+        self.assertEqual(m.title, 'bar')
+        self.assertEqual(m.slug, 'foo-2012')
+
+    def testSimpleSlugSource(self):
+        m = SluggedTestModel(title='-foo')
+        m.save()
+        self.assertEqual(m.slug, 'foo')
+
+        n = SluggedTestModel(title='-foo')
+        n.save()
+        self.assertEqual(n.slug, 'foo-2')
+
+        n.save()
+        self.assertEqual(n.slug, 'foo-2')
+
+    def testEmptySlugSource(self):
+        # regression test
+
+        m = SluggedTestModel(title='')
+        m.save()
+        self.assertEqual(m.slug, '-2')
+
+        n = SluggedTestModel(title='')
+        n.save()
+        self.assertEqual(n.slug, '-3')
+
+        n.save()
+        self.assertEqual(n.slug, '-3')
+
+    def testInheritanceCreatesNextSlug(self):
+        m = SluggedTestModel(title='foo')
+        m.save()
+
+        n = ChildSluggedTestModel(title='foo')
+        n.save()
+        self.assertEqual(n.slug, 'foo-2')
+
+        o = SluggedTestModel(title='foo')
+        o.save()
+        self.assertEqual(o.slug, 'foo-3')
+
+    @unittest.skipIf(django.VERSION[0] <= 1 and django.VERSION[1] <= 6,
+                     "Migrations are handled by south in Django <1.7")
+    def test_17_migration(self):
+        """
+        Tests making migrations with Django 1.7+'s migration framework
+        """
+
+        fields = {
+            'autoslugfield': AutoSlugField(populate_from='otherfield'),
+        }
+
+        migration = type(str("Migration"), (migrations.Migration,), {
+            "operations": [
+                migrations.CreateModel("MyModel", tuple(fields.items()),
+                                       {'populate_from': 'otherfield'},
+                                       (models.Model,)),
+            ],
+        })
+        writer = MigrationWriter(migration)
+        output = writer.as_string()
+        # It should NOT be unicode.
+        self.assertIsInstance(output, six.binary_type,
+                              "Migration as_string returned unicode")
+        # We don't test the output formatting - that's too fragile.
+        # Just make sure it runs for now, and that things look alright.
+        result = self.safe_exec(output)
+        self.assertIn("Migration", result)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/json_field.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/json_field.py
new file mode 100644
index 0000000..ace83bd
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/json_field.py
@@ -0,0 +1,17 @@
+from django_extensions.tests.fields import FieldTestCase
+from django_extensions.tests.testapp.models import JSONFieldTestModel
+
+
+class JsonFieldTest(FieldTestCase):
+    def testCharFieldCreate(self):
+        j = JSONFieldTestModel.objects.create(a=6, j_field=dict(foo='bar'))
+        self.assertEqual(j.a, 6)
+
+    def testDefault(self):
+        j = JSONFieldTestModel.objects.create(a=1)
+        self.assertEqual(j.j_field, {})
+
+    def testEmptyList(self):
+        j = JSONFieldTestModel.objects.create(a=6, j_field=[])
+        self.assertTrue(isinstance(j.j_field, list))
+        self.assertEqual(j.j_field, [])
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/commands/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/commands/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/commands/error_raising_command.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/commands/error_raising_command.py
new file mode 100644
index 0000000..3bc646c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management/commands/error_raising_command.py
@@ -0,0 +1,10 @@
+
+from django_extensions.management.base import LoggingBaseCommand
+
+
+class Command(LoggingBaseCommand):
+    help = 'Test error'
+
+    def handle(self, *args, **options):
+        raise Exception("Test Error")
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management_command.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management_command.py
new file mode 100644
index 0000000..04c8216
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/management_command.py
@@ -0,0 +1,107 @@
+# -*- coding: utf-8 -*-
+import sys
+import logging
+
+try:
+    from cStringIO import StringIO  # NOQA
+except ImportError:
+    from io import StringIO  # NOQA
+
+try:
+    import importlib  # NOQA
+except ImportError:
+    from django.utils import importlib  # NOQA
+
+from django.core.management import call_command
+from django.test import TestCase
+
+
+class MockLoggingHandler(logging.Handler):
+    """ Mock logging handler to check for expected logs. """
+
+    def __init__(self, *args, **kwargs):
+        self.reset()
+        logging.Handler.__init__(self, *args, **kwargs)
+
+    def emit(self, record):
+        self.messages[record.levelname.lower()].append(record.getMessage())
+
+    def reset(self):
+        self.messages = {
+            'debug': [],
+            'info': [],
+            'warning': [],
+            'error': [],
+            'critical': [],
+        }
+
+
+class CommandTest(TestCase):
+    def test_error_logging(self):
+        # Ensure command errors are properly logged and reraised
+        from django_extensions.management.base import logger
+        logger.addHandler(MockLoggingHandler())
+        module_path = "django_extensions.tests.management.commands.error_raising_command"
+        module = importlib.import_module(module_path)
+        error_raising_command = module.Command()
+        self.assertRaises(Exception, error_raising_command.execute)
+        handler = logger.handlers[0]
+        self.assertEqual(len(handler.messages['error']), 1)
+
+
+class ShowTemplateTagsTests(TestCase):
+    def test_some_output(self):
+        out = StringIO()
+        call_command('show_templatetags', stdout=out)
+        output = out.getvalue()
+        # Once django_extension is installed during tests it should appear with
+        # its templatetags
+        self.assertIn('django_extensions', output)
+        # let's check at least one
+        self.assertIn('truncate_letters', output)
+
+
+class UpdatePermissionsTests(TestCase):
+    def test_works(self):
+        from django.db import models
+
+        class PermModel(models.Model):
+            class Meta:
+                app_label = 'django_extensions'
+                permissions = (('test_permission', 'test_permission'),)
+
+        original_stdout = sys.stdout
+        out = sys.stdout = StringIO()
+        call_command('update_permissions', stdout=out, verbosity=3)
+        sys.stdout = original_stdout
+        self.assertIn("Can change perm model", out.getvalue())
+
+
+class CommandSignalTests(TestCase):
+    pre = None
+    post = None
+
+    def test_works(self):
+        from django_extensions.management.signals import post_command, \
+            pre_command
+        from django_extensions.management.commands.show_templatetags import \
+            Command
+
+        def pre(sender, **kwargs):
+            CommandSignalTests.pre = dict(**kwargs)
+
+        def post(sender, **kwargs):
+            CommandSignalTests.post = dict(**kwargs)
+
+        pre_command.connect(pre, Command)
+        post_command.connect(post, Command)
+
+        out = StringIO()
+        call_command('show_templatetags', stdout=out)
+
+        self.assertIn('args', CommandSignalTests.pre)
+        self.assertIn('kwargs', CommandSignalTests.pre)
+
+        self.assertIn('args', CommandSignalTests.post)
+        self.assertIn('kwargs', CommandSignalTests.post)
+        self.assertIn('outcome', CommandSignalTests.post)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/shortuuid_field.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/shortuuid_field.py
new file mode 100644
index 0000000..d3ec136
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/shortuuid_field.py
@@ -0,0 +1,39 @@
+import six
+from django.conf import settings
+from django.core.management import call_command
+from django.db.models import loading
+from django.utils import unittest
+
+from django_extensions.tests.testapp.models import ShortUUIDTestModel_field, ShortUUIDTestModel_pk, ShortUUIDTestAgregateModel, ShortUUIDTestManyToManyModel
+
+
+class ShortUUIDFieldTest(unittest.TestCase):
+    def setUp(self):
+        self.old_installed_apps = settings.INSTALLED_APPS
+        settings.INSTALLED_APPS = list(settings.INSTALLED_APPS)
+        settings.INSTALLED_APPS.append('django_extensions.tests')
+        loading.cache.loaded = False
+        call_command('syncdb', verbosity=0)
+
+    def tearDown(self):
+        settings.INSTALLED_APPS = self.old_installed_apps
+
+    def testUUIDFieldCreate(self):
+        j = ShortUUIDTestModel_field.objects.create(a=6, uuid_field=six.u('vytxeTZskVKR7C7WgdSP3d'))
+        self.assertEqual(j.uuid_field, six.u('vytxeTZskVKR7C7WgdSP3d'))
+
+    def testUUIDField_pkCreate(self):
+        j = ShortUUIDTestModel_pk.objects.create(uuid_field=six.u('vytxeTZskVKR7C7WgdSP3d'))
+        self.assertEqual(j.uuid_field, six.u('vytxeTZskVKR7C7WgdSP3d'))
+        self.assertEqual(j.pk, six.u('vytxeTZskVKR7C7WgdSP3d'))
+
+    def testUUIDField_pkAgregateCreate(self):
+        j = ShortUUIDTestAgregateModel.objects.create(a=6)
+        self.assertEqual(j.a, 6)
+        self.assertIsInstance(j.pk, six.string_types)
+        self.assertTrue(len(j.pk) < 23)
+
+    def testUUIDFieldManyToManyCreate(self):
+        j = ShortUUIDTestManyToManyModel.objects.create(uuid_field=six.u('vytxeTZskVKR7C7WgdSP3e'))
+        self.assertEqual(j.uuid_field, six.u('vytxeTZskVKR7C7WgdSP3e'))
+        self.assertEqual(j.pk, six.u('vytxeTZskVKR7C7WgdSP3e'))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_clean_pyc.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_clean_pyc.py
new file mode 100644
index 0000000..6a19cc9
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_clean_pyc.py
@@ -0,0 +1,61 @@
+import os
+import six
+import shutil
+import fnmatch
+from django.test import TestCase
+from django.core.management import call_command
+from django_extensions.management.utils import get_project_root
+
+
+class CleanPycTests(TestCase):
+    def setUp(self):
+        self._settings = os.environ.get('DJANGO_SETTINGS_MODULE')
+        os.environ['DJANGO_SETTINGS_MODULE'] = 'django_extensions.settings'
+
+    def tearDown(self):
+        if self._settings:
+            os.environ['DJANGO_SETTINGS_MODULE'] = self._settings
+
+    def _find_pyc(self, path):
+        pyc_glob = []
+        for root, dirnames, filenames in os.walk(path):
+            for filename in fnmatch.filter(filenames, '*.pyc'):
+                pyc_glob.append(os.path.join(root, filename))
+        return pyc_glob
+
+    def test_removes_pyc_files(self):
+        with self.settings(BASE_DIR=get_project_root()):
+            call_command('compile_pyc')
+        pyc_glob = self._find_pyc(get_project_root())
+        self.assertTrue(len(pyc_glob) > 0)
+        with self.settings(BASE_DIR=get_project_root()):
+            call_command('clean_pyc')
+        pyc_glob = self._find_pyc(get_project_root())
+        self.assertEqual(len(pyc_glob), 0)
+
+    def test_takes_path(self):
+        out = six.StringIO()
+        project_root = os.path.join(get_project_root(), 'tests', 'testapp')
+        call_command('compile_pyc', path=project_root)
+        pyc_glob = self._find_pyc(project_root)
+        self.assertTrue(len(pyc_glob) > 0)
+        call_command('clean_pyc', verbosity=2, path=project_root, stdout=out)
+        output = out.getvalue().splitlines()
+        self.assertEqual(sorted(pyc_glob), sorted(output))
+
+    def test_removes_pyo_files(self):
+        out = six.StringIO()
+        project_root = os.path.join(get_project_root(), 'tests', 'testapp')
+        call_command('compile_pyc', path=project_root)
+        pyc_glob = self._find_pyc(project_root)
+        self.assertTrue(len(pyc_glob) > 0)
+        # Create some fake .pyo files since we can't force them to be created.
+        pyo_glob = []
+        for fn in pyc_glob:
+            pyo = '%s.pyo' % os.path.splitext(fn)[0]
+            shutil.copyfile(fn, pyo)
+            pyo_glob.append(pyo)
+        call_command('clean_pyc', verbosity=2, path=project_root,
+                     optimize=True, stdout=out)
+        output = out.getvalue().splitlines()
+        self.assertEqual(sorted(pyc_glob + pyo_glob), sorted(output))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_compile_pyc.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_compile_pyc.py
new file mode 100644
index 0000000..6ccd948
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_compile_pyc.py
@@ -0,0 +1,51 @@
+import os
+import six
+import fnmatch
+from django.test import TestCase
+from django.core.management import call_command
+from django_extensions.management.utils import get_project_root
+
+
+class CompilePycTests(TestCase):
+    def setUp(self):
+        self._settings = os.environ.get('DJANGO_SETTINGS_MODULE')
+        os.environ['DJANGO_SETTINGS_MODULE'] = 'django_extensions.settings'
+
+    def tearDown(self):
+        if self._settings:
+            os.environ['DJANGO_SETTINGS_MODULE'] = self._settings
+
+    def _find_pyc(self, path, mask='*.pyc'):
+        pyc_glob = []
+        for root, dirs, filenames in os.walk(path):
+            for filename in fnmatch.filter(filenames, mask):
+                pyc_glob.append(os.path.join(root, filename))
+        return pyc_glob
+
+    def test_compiles_pyc_files(self):
+        with self.settings(BASE_DIR=get_project_root()):
+            call_command('clean_pyc')
+        pyc_glob = self._find_pyc(get_project_root())
+        self.assertEqual(len(pyc_glob), 0)
+        with self.settings(BASE_DIR=get_project_root()):
+            call_command('compile_pyc')
+        pyc_glob = self._find_pyc(get_project_root())
+        self.assertTrue(len(pyc_glob) > 0)
+        with self.settings(BASE_DIR=get_project_root()):
+            call_command('clean_pyc')
+
+    def test_takes_path(self):
+        out = six.StringIO()
+        project_root = os.path.join(get_project_root(), 'tests', 'testapp')
+        with self.settings(BASE_DIR=get_project_root()):
+            call_command('clean_pyc', path=project_root)
+        pyc_glob = self._find_pyc(project_root)
+        self.assertEqual(len(pyc_glob), 0)
+        with self.settings(BASE_DIR=get_project_root()):
+            call_command('compile_pyc', verbosity=2, path=project_root, stdout=out)
+        expected = ['Compiling %s...' % fn for fn in
+                    sorted(self._find_pyc(project_root, mask='*.py'))]
+        output = out.getvalue().splitlines()
+        self.assertEqual(expected, sorted(output))
+        with self.settings(BASE_DIR=get_project_root()):
+            call_command('clean_pyc')
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_dumpscript.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_dumpscript.py
new file mode 100644
index 0000000..2330875
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_dumpscript.py
@@ -0,0 +1,86 @@
+import sys
+import six
+
+if sys.version_info[:2] >= (2, 6):
+    import ast as compiler  # NOQA
+else:
+    import compiler  # NOQA
+
+from django.core.management import call_command
+
+from django_extensions.tests.testapp.models import Name, Note, Person
+from django_extensions.tests.fields import FieldTestCase
+
+
+class DumpScriptTests(FieldTestCase):
+    def setUp(self):
+        super(DumpScriptTests, self).setUp()
+
+        self.real_stdout = sys.stdout
+        self.real_stderr = sys.stderr
+        sys.stdout = six.StringIO()
+        sys.stderr = six.StringIO()
+
+    def tearDown(self):
+        super(DumpScriptTests, self).tearDown()
+
+        sys.stdout = self.real_stdout
+        sys.stderr = self.real_stderr
+
+    def test_runs(self):
+        # lame test...does it run?
+        n = Name(name='Gabriel')
+        n.save()
+        call_command('dumpscript', 'django_extensions')
+        self.assertTrue('Gabriel' in sys.stdout.getvalue())
+
+    #----------------------------------------------------------------------
+    def test_replaced_stdout(self):
+        # check if stdout can be replaced
+        sys.stdout = six.StringIO()
+        n = Name(name='Mike')
+        n.save()
+        tmp_out = six.StringIO()
+        call_command('dumpscript', 'django_extensions', stdout=tmp_out)
+        self.assertTrue('Mike' in tmp_out.getvalue())  # script should go to tmp_out
+        self.assertEqual(0, len(sys.stdout.getvalue()))  # there should not be any output to sys.stdout
+        tmp_out.close()
+
+    #----------------------------------------------------------------------
+    def test_replaced_stderr(self):
+        # check if stderr can be replaced, without changing stdout
+        n = Name(name='Fred')
+        n.save()
+        tmp_err = six.StringIO()
+        sys.stderr = six.StringIO()
+        call_command('dumpscript', 'django_extensions', stderr=tmp_err)
+        self.assertTrue('Fred' in sys.stdout.getvalue())  # script should still go to stdout
+        self.assertTrue('Name' in tmp_err.getvalue())  # error output should go to tmp_err
+        self.assertEqual(0, len(sys.stderr.getvalue()))  # there should not be any output to sys.stderr
+        tmp_err.close()
+
+    #----------------------------------------------------------------------
+    def test_valid_syntax(self):
+        n1 = Name(name='John')
+        n1.save()
+        p1 = Person(name=n1, age=40)
+        p1.save()
+        n2 = Name(name='Jane')
+        n2.save()
+        p2 = Person(name=n2, age=18)
+        p2.save()
+        p2.children.add(p1)
+        note1 = Note(note="This is the first note.")
+        note1.save()
+        note2 = Note(note="This is the second note.")
+        note2.save()
+        p2.notes.add(note1, note2)
+        tmp_out = six.StringIO()
+        call_command('dumpscript', 'django_extensions', stdout=tmp_out)
+        ast_syntax_tree = compiler.parse(tmp_out.getvalue())
+        if hasattr(ast_syntax_tree, 'body'):
+            self.assertTrue(len(ast_syntax_tree.body) > 1)
+        else:
+            self.assertTrue(len(ast_syntax_tree.asList()) > 1)
+        tmp_out.close()
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_models.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_models.py
new file mode 100644
index 0000000..3d4f68d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_models.py
@@ -0,0 +1,42 @@
+from django.test import TestCase
+
+from django_extensions.db.models import ActivatorModel
+from django_extensions.tests.testapp.models import Post
+
+
+class ActivatorModelTestCase(TestCase):
+    def test_active_includes_active(self):
+        post = Post.objects.create(status=ActivatorModel.ACTIVE_STATUS)
+        active = Post.objects.active()
+        self.assertIn(post, active)
+        post.delete()
+
+    def test_active_excludes_inactive(self):
+        post = Post.objects.create(status=ActivatorModel.INACTIVE_STATUS)
+        active = Post.objects.active()
+        self.assertNotIn(post, active)
+        post.delete()
+
+    def test_inactive_includes_inactive(self):
+        post = Post.objects.create(status=ActivatorModel.INACTIVE_STATUS)
+        inactive = Post.objects.inactive()
+        self.assertIn(post, inactive)
+        post.delete()
+
+    def test_inactive_excludes_active(self):
+        post = Post.objects.create(status=ActivatorModel.ACTIVE_STATUS)
+        inactive = Post.objects.inactive()
+        self.assertNotIn(post, inactive)
+        post.delete()
+
+    def test_active_is_chainable(self):
+        post = Post.objects.create(title='Foo', status=ActivatorModel.ACTIVE_STATUS)
+        specific_post = Post.objects.filter(title='Foo').active()
+        self.assertIn(post, specific_post)
+        post.delete()
+
+    def test_inactive_is_chainable(self):
+        post = Post.objects.create(title='Foo', status=ActivatorModel.INACTIVE_STATUS)
+        specific_post = Post.objects.filter(title='Foo').inactive()
+        self.assertIn(post, specific_post)
+        post.delete()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_templatetags.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_templatetags.py
new file mode 100644
index 0000000..70e23d7
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/test_templatetags.py
@@ -0,0 +1,15 @@
+import six
+
+from django.test import TestCase
+
+from django_extensions.templatetags.widont import widont, widont_html
+
+
+class TemplateTagsTests(TestCase):
+    def test_widont(self):
+        widont('Test Value')
+        widont(six.u('Test Value'))
+
+    def test_widont_html(self):
+        widont_html('Test Value')
+        widont_html(six.u('Test Value'))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/models.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/models.py
new file mode 100644
index 0000000..313ee48
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/models.py
@@ -0,0 +1,125 @@
+from django.db import models
+
+from django_extensions.db.models import ActivatorModel
+from django_extensions.db.fields import AutoSlugField
+from django_extensions.db.fields import UUIDField
+from django_extensions.db.fields import ShortUUIDField
+from django_extensions.db.fields.json import JSONField
+
+
+class Secret(models.Model):
+    name = models.CharField(blank=True, max_length=255, null=True)
+    text = models.TextField(blank=True, null=True)
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class Name(models.Model):
+    name = models.CharField(max_length=50)
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class Note(models.Model):
+    note = models.TextField()
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class Person(models.Model):
+    name = models.ForeignKey(Name)
+    age = models.PositiveIntegerField()
+    children = models.ManyToManyField('self')
+    notes = models.ManyToManyField(Note)
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class Post(ActivatorModel):
+    title = models.CharField(max_length=255)
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class SluggedTestModel(models.Model):
+    title = models.CharField(max_length=42)
+    slug = AutoSlugField(populate_from='title')
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class ChildSluggedTestModel(SluggedTestModel):
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class JSONFieldTestModel(models.Model):
+    a = models.IntegerField()
+    j_field = JSONField()
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class UUIDTestModel_field(models.Model):
+    a = models.IntegerField()
+    uuid_field = UUIDField()
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class UUIDTestModel_pk(models.Model):
+    uuid_field = UUIDField(primary_key=True)
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class UUIDTestAgregateModel(UUIDTestModel_pk):
+    a = models.IntegerField()
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class UUIDTestManyToManyModel(UUIDTestModel_pk):
+    many = models.ManyToManyField(UUIDTestModel_field)
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class ShortUUIDTestModel_field(models.Model):
+    a = models.IntegerField()
+    uuid_field = ShortUUIDField()
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class ShortUUIDTestModel_pk(models.Model):
+    uuid_field = ShortUUIDField(primary_key=True)
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class ShortUUIDTestAgregateModel(ShortUUIDTestModel_pk):
+    a = models.IntegerField()
+
+    class Meta:
+        app_label = 'django_extensions'
+
+
+class ShortUUIDTestManyToManyModel(ShortUUIDTestModel_pk):
+    many = models.ManyToManyField(ShortUUIDTestModel_field)
+
+    class Meta:
+        app_label = 'django_extensions'
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/urls.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/testapp/urls.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/utils.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/utils.py
new file mode 100644
index 0000000..23935b6
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/utils.py
@@ -0,0 +1,76 @@
+# -*- coding: utf-8 -*-
+import sys
+import six
+
+from django.test import TestCase
+from django.utils.unittest import skipIf
+
+from django_extensions.utils.text import truncate_letters
+try:
+    import uuid
+    assert uuid
+except ImportError:
+    from django_extensions.utils import uuid
+
+
+class TruncateLetterTests(TestCase):
+    def test_truncate_more_than_text_length(self):
+        self.assertEqual(six.u("hello tests"), truncate_letters("hello tests", 100))
+
+    def test_truncate_text(self):
+        self.assertEqual(six.u("hello..."), truncate_letters("hello tests", 5))
+
+    def test_truncate_with_range(self):
+        for i in range(10, -1, -1):
+            self.assertEqual(
+                six.u('hello tests'[:i]) + '...',
+                truncate_letters("hello tests", i)
+            )
+
+    def test_with_non_ascii_characters(self):
+        self.assertEqual(
+            six.u('\u5ce0 (\u3068\u3046\u3052 t\u014dg...'),
+            truncate_letters("峠 (とうげ tōge - mountain pass)", 10)
+        )
+
+
+class UUIDTests(TestCase):
+    @skipIf(sys.version_info >= (2, 5, 0), 'uuid already in stdlib')
+    def test_uuid3(self):
+        # make a UUID using an MD5 hash of a namespace UUID and a name
+        self.assertEqual(
+            uuid.UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e'),
+            uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
+        )
+
+    @skipIf(sys.version_info >= (2, 5, 0), 'uuid already in stdlib')
+    def test_uuid5(self):
+        # make a UUID using a SHA-1 hash of a namespace UUID and a name
+        self.assertEqual(
+            uuid.UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d'),
+            uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
+        )
+
+    @skipIf(sys.version_info >= (2, 5, 0), 'uuid already in stdlib')
+    def test_uuid_str(self):
+        # make a UUID from a string of hex digits (braces and hyphens ignored)
+        x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')
+        # convert a UUID to a string of hex digits in standard form
+        self.assertEqual('00010203-0405-0607-0809-0a0b0c0d0e0f', str(x))
+
+    @skipIf(sys.version_info >= (2, 5, 0), 'uuid already in stdlib')
+    def test_uuid_bytes(self):
+        # make a UUID from a string of hex digits (braces and hyphens ignored)
+        x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')
+        # get the raw 16 bytes of the UUID
+        self.assertEqual(
+            '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f',
+            x.bytes
+        )
+
+    @skipIf(sys.version_info >= (2, 5, 0), 'uuid already in stdlib')
+    def test_make_uuid_from_byte_string(self):
+        self.assertEqual(
+            uuid.UUID(bytes='\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'),
+            uuid.UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')
+        )
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/uuid_field.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/uuid_field.py
new file mode 100644
index 0000000..761c406
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/tests/uuid_field.py
@@ -0,0 +1,47 @@
+import re
+import uuid
+
+import six
+
+from django_extensions.db.fields import PostgreSQLUUIDField
+from django_extensions.tests.fields import FieldTestCase
+from django_extensions.tests.testapp.models import UUIDTestModel_field, UUIDTestModel_pk, UUIDTestAgregateModel, UUIDTestManyToManyModel
+
+
+class UUIDFieldTest(FieldTestCase):
+    def testUUIDFieldCreate(self):
+        j = UUIDTestModel_field.objects.create(a=6, uuid_field=six.u('550e8400-e29b-41d4-a716-446655440000'))
+        self.assertEqual(j.uuid_field, six.u('550e8400-e29b-41d4-a716-446655440000'))
+
+    def testUUIDField_pkCreate(self):
+        j = UUIDTestModel_pk.objects.create(uuid_field=six.u('550e8400-e29b-41d4-a716-446655440000'))
+        self.assertEqual(j.uuid_field, six.u('550e8400-e29b-41d4-a716-446655440000'))
+        self.assertEqual(j.pk, six.u('550e8400-e29b-41d4-a716-446655440000'))
+
+    def testUUIDField_pkAgregateCreate(self):
+        j = UUIDTestAgregateModel.objects.create(a=6, uuid_field=six.u('550e8400-e29b-41d4-a716-446655440001'))
+        self.assertEqual(j.a, 6)
+        self.assertIsInstance(j.pk, six.string_types)
+        self.assertEqual(len(j.pk), 36)
+
+    def testUUIDFieldManyToManyCreate(self):
+        j = UUIDTestManyToManyModel.objects.create(uuid_field=six.u('550e8400-e29b-41d4-a716-446655440010'))
+        self.assertEqual(j.uuid_field, six.u('550e8400-e29b-41d4-a716-446655440010'))
+        self.assertEqual(j.pk, six.u('550e8400-e29b-41d4-a716-446655440010'))
+
+
+class PostgreSQLUUIDFieldTest(FieldTestCase):
+    def test_uuid_casting(self):
+        # As explain by postgres documentation
+        # http://www.postgresql.org/docs/9.1/static/datatype-uuid.html
+        # an uuid needs to be a sequence of lower-case hexadecimal digits, in
+        # several groups separated by hyphens, specifically a group of 8 digits
+        # followed by three groups of 4 digits followed by a group of 12 digits
+        matcher = re.compile('^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}'
+                             '-[\da-f]{12}$')
+        field = PostgreSQLUUIDField()
+        for value in (str(uuid.uuid4()), uuid.uuid4().urn, uuid.uuid4().hex,
+                      uuid.uuid4().int, uuid.uuid4().bytes):
+            prepared_value = field.get_db_prep_value(value, None)
+            self.assertTrue(matcher.match(prepared_value) is not None,
+                            prepared_value)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/__init__.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/dia2django.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/dia2django.py
new file mode 100644
index 0000000..d179cbd
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/dia2django.py
@@ -0,0 +1,214 @@
+# -*- coding: UTF-8 -*-
+##Author Igor Támara igor@tamarapatino.org
+##Use this little program as you wish, if you
+#include it in your work, let others know you
+#are using it preserving this note, you have
+#the right to make derivative works, Use it
+#at your own risk.
+#Tested to work on(etch testing 13-08-2007):
+#  Python 2.4.4 (#2, Jul 17 2007, 11:56:54)
+#  [GCC 4.1.3 20070629 (prerelease) (Debian 4.1.2-13)] on linux2
+
+dependclasses = ["User", "Group", "Permission", "Message"]
+
+import re
+import six
+import sys
+import gzip
+import codecs
+from xml.dom.minidom import *  # NOQA
+
+#Type dictionary translation types SQL -> Django
+tsd = {
+    "text": "TextField",
+    "date": "DateField",
+    "varchar": "CharField",
+    "int": "IntegerField",
+    "float": "FloatField",
+    "serial": "AutoField",
+    "boolean": "BooleanField",
+    "numeric": "FloatField",
+    "timestamp": "DateTimeField",
+    "bigint": "IntegerField",
+    "datetime": "DateTimeField",
+    "date": "DateField",
+    "time": "TimeField",
+    "bool": "BooleanField",
+    "int": "IntegerField",
+}
+
+#convert varchar -> CharField
+v2c = re.compile('varchar\((\d+)\)')
+
+
+def index(fks, id):
+    """Looks for the id on fks, fks is an array of arrays, each array has on [1]
+    the id of the class in a dia diagram.  When not present returns None, else
+    it returns the position of the class with id on fks"""
+    for i, j in fks.items():
+        if fks[i][1] == id:
+            return i
+    return None
+
+
+def addparentstofks(rels, fks):
+    """Gets a list of relations, between parents and sons and a dict of
+    clases named in dia, and modifies the fks to add the parent as fk to get
+    order on the output of classes and replaces the base class of the son, to
+    put the class parent name.
+    """
+    for j in rels:
+        son = index(fks, j[1])
+        parent = index(fks, j[0])
+        fks[son][2] = fks[son][2].replace("models.Model", parent)
+        if parent not in fks[son][0]:
+            fks[son][0].append(parent)
+
+
+def dia2django(archivo):
+    models_txt = ''
+    f = codecs.open(archivo, "rb")
+    #dia files are gzipped
+    data = gzip.GzipFile(fileobj=f).read()
+    ppal = parseString(data)
+    #diagram -> layer -> object -> UML - Class -> name, (attribs : composite -> name,type)
+    datos = ppal.getElementsByTagName("dia:diagram")[0].getElementsByTagName("dia:layer")[0].getElementsByTagName("dia:object")
+    clases = {}
+    herit = []
+    imports = six.u("")
+    for i in datos:
+        #Look for the classes
+        if i.getAttribute("type") == "UML - Class":
+            myid = i.getAttribute("id")
+            for j in i.childNodes:
+                if j.nodeType == Node.ELEMENT_NODE and j.hasAttributes():
+                    if j.getAttribute("name") == "name":
+                        actclas = j.getElementsByTagName("dia:string")[0].childNodes[0].data[1:-1]
+                        myname = "\nclass %s(models.Model) :\n" % actclas
+                        clases[actclas] = [[], myid, myname, 0]
+                    if j.getAttribute("name") == "attributes":
+                        for l in j.getElementsByTagName("dia:composite"):
+                            if l.getAttribute("type") == "umlattribute":
+                                #Look for the attribute name and type
+                                for k in l.getElementsByTagName("dia:attribute"):
+                                    if k.getAttribute("name") == "name":
+                                        nc = k.getElementsByTagName("dia:string")[0].childNodes[0].data[1:-1]
+                                    elif k.getAttribute("name") == "type":
+                                        tc = k.getElementsByTagName("dia:string")[0].childNodes[0].data[1:-1]
+                                    elif k.getAttribute("name") == "value":
+                                        val = k.getElementsByTagName("dia:string")[0].childNodes[0].data[1:-1]
+                                        if val == '##':
+                                            val = ''
+                                    elif k.getAttribute("name") == "visibility" and k.getElementsByTagName("dia:enum")[0].getAttribute("val") == "2":
+                                        if tc.replace(" ", "").lower().startswith("manytomanyfield("):
+                                                #If we find a class not in our model that is marked as being to another model
+                                                newc = tc.replace(" ", "")[16:-1]
+                                                if dependclasses.count(newc) == 0:
+                                                        dependclasses.append(newc)
+                                        if tc.replace(" ", "").lower().startswith("foreignkey("):
+                                                #If we find a class not in our model that is marked as being to another model
+                                                newc = tc.replace(" ", "")[11:-1]
+                                                if dependclasses.count(newc) == 0:
+                                                        dependclasses.append(newc)
+
+                                #Mapping SQL types to Django
+                                varch = v2c.search(tc)
+                                if tc.replace(" ", "").startswith("ManyToManyField("):
+                                    myfor = tc.replace(" ", "")[16:-1]
+                                    if actclas == myfor:
+                                        #In case of a recursive type, we use 'self'
+                                        tc = tc.replace(myfor, "'self'")
+                                    elif clases[actclas][0].count(myfor) == 0:
+                                        #Adding related class
+                                        if myfor not in dependclasses:
+                                            #In case we are using Auth classes or external via protected dia visibility
+                                            clases[actclas][0].append(myfor)
+                                    tc = "models." + tc
+                                    if len(val) > 0:
+                                        tc = tc.replace(")", "," + val + ")")
+                                elif tc.find("Field") != -1:
+                                    if tc.count("()") > 0 and len(val) > 0:
+                                        tc = "models.%s" % tc.replace(")", "," + val + ")")
+                                    else:
+                                        tc = "models.%s(%s)" % (tc, val)
+                                elif tc.replace(" ", "").startswith("ForeignKey("):
+                                    myfor = tc.replace(" ", "")[11:-1]
+                                    if actclas == myfor:
+                                        #In case of a recursive type, we use 'self'
+                                        tc = tc.replace(myfor, "'self'")
+                                    elif clases[actclas][0].count(myfor) == 0:
+                                        #Adding foreign classes
+                                        if myfor not in dependclasses:
+                                            #In case we are using Auth classes
+                                            clases[actclas][0].append(myfor)
+                                    tc = "models." + tc
+                                    if len(val) > 0:
+                                        tc = tc.replace(")", "," + val + ")")
+                                elif varch is None:
+                                    tc = "models." + tsd[tc.strip().lower()] + "(" + val + ")"
+                                else:
+                                    tc = "models.CharField(max_length=" + varch.group(1) + ")"
+                                    if len(val) > 0:
+                                        tc = tc.replace(")", ", " + val + " )")
+                                if not (nc == "id" and tc == "AutoField()"):
+                                    clases[actclas][2] = clases[actclas][2] + ("    %s = %s\n" % (nc, tc))
+        elif i.getAttribute("type") == "UML - Generalization":
+            mycons = ['A', 'A']
+            a = i.getElementsByTagName("dia:connection")
+            for j in a:
+                if len(j.getAttribute("to")):
+                    mycons[int(j.getAttribute("handle"))] = j.getAttribute("to")
+            print(mycons)
+            if 'A' not in mycons:
+                herit.append(mycons)
+        elif i.getAttribute("type") == "UML - SmallPackage":
+            a = i.getElementsByTagName("dia:string")
+            for j in a:
+                if len(j.childNodes[0].data[1:-1]):
+                    imports += six.u("from %s.models import *" % j.childNodes[0].data[1:-1])
+
+    addparentstofks(herit, clases)
+    #Ordering the appearance of classes
+    #First we make a list of the classes each classs is related to.
+    ordered = []
+    for j, k in six.iteritems(clases):
+        k[2] = k[2] + "\n    def %s(self):\n        return u\"\"\n" % (("__str__" if six.PY3 else "__unicode__"), )
+        for fk in k[0]:
+            if fk not in dependclasses:
+                clases[fk][3] += 1
+        ordered.append([j] + k)
+
+    i = 0
+    while i < len(ordered):
+        mark = i
+        j = i + 1
+        while j < len(ordered):
+            if ordered[i][0] in ordered[j][1]:
+                mark = j
+            j += 1
+        if mark == i:
+            i += 1
+        else:
+            # swap %s in %s" % ( ordered[i] , ordered[mark]) to make ordered[i] to be at the end
+            if ordered[i][0] in ordered[mark][1] and ordered[mark][0] in ordered[i][1]:
+                #Resolving simplistic circular ForeignKeys
+                print("Not able to resolve circular ForeignKeys between %s and %s" % (ordered[i][1], ordered[mark][0]))
+                break
+            a = ordered[i]
+            ordered[i] = ordered[mark]
+            ordered[mark] = a
+        if i == len(ordered) - 1:
+            break
+    ordered.reverse()
+    if imports:
+        models_txt = str(imports)
+    for i in ordered:
+        models_txt += '%s\n' % str(i[3])
+
+    return models_txt
+
+if __name__ == '__main__':
+    if len(sys.argv) == 2:
+        dia2django(sys.argv[1])
+    else:
+        print(" Use:\n \n   " + sys.argv[0] + " diagram.dia\n\n")
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/text.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/text.py
new file mode 100644
index 0000000..fd650cf
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/text.py
@@ -0,0 +1,23 @@
+import six
+
+from django.utils.functional import allow_lazy
+
+# conditional import, force_unicode was renamed in Django 1.5
+try:
+    from django.utils.encoding import force_unicode  # NOQA
+except ImportError:
+    from django.utils.encoding import force_text as force_unicode  # NOQA
+
+
+def truncate_letters(s, num):
+    """
+    truncates a string to a number of letters, similar to truncate_words
+    """
+    s = force_unicode(s)
+    length = int(num)
+    if len(s) > length:
+        s = s[:length]
+        if not s.endswith('...'):
+            s += '...'
+    return s
+truncate_letters = allow_lazy(truncate_letters, six.text_type)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/validatingtemplatetags.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/validatingtemplatetags.py
new file mode 100644
index 0000000..b36ca7e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/utils/validatingtemplatetags.py
@@ -0,0 +1,91 @@
+from django.template.base import Library, Node
+from django.template import defaulttags
+from django.templatetags import future
+register = Library()
+
+error_on_old_style_url_tag = False
+new_style_url_tag = False
+errors = []
+
+
+def before_new_template(force_new_urls):
+    """Reset state ready for new template"""
+    global new_style_url_tag, error_on_old_style_url_tag, errors
+    new_style_url_tag = False
+    error_on_old_style_url_tag = force_new_urls
+    errors = []
+
+
+def get_template_errors():
+    return errors
+
+
+# Disable extends and include as they are not needed, slow parsing down, and cause duplicate errors
+class NoOpNode(Node):
+    def render(self, context):
+        return ''
+
+
+@register.tag
+def extends(parser, token):
+    return NoOpNode()
+
+
+@register.tag
+def include(parser, token):
+    return NoOpNode()
+
+
+# We replace load to determine whether new style urls are in use and re-patch url after
+# a future version is loaded
+@register.tag
+def load(parser, token):
+    global new_style_url_tag
+    bits = token.contents.split()
+
+    reloaded_url_tag = False
+    if len(bits) >= 4 and bits[-2] == "from" and bits[-1] == "future":
+        for name in bits[1:-2]:
+            if name == "url":
+                new_style_url_tag = True
+                reloaded_url_tag = True
+
+    try:
+        return defaulttags.load(parser, token)
+    finally:
+        if reloaded_url_tag:
+            parser.tags['url'] = new_style_url
+
+
+@register.tag(name='url')
+def old_style_url(parser, token):
+    global error_on_old_style_url_tag
+
+    bits = token.split_contents()
+    view = bits[1]
+
+    if error_on_old_style_url_tag:
+        _error("Old style url tag used (only reported once per file): {%% %s %%}" % (" ".join(bits)), token)
+        error_on_old_style_url_tag = False
+
+    if view[0] in "\"'" and view[0] == view[-1]:
+        _error("Old style url tag with quotes around view name: {%% %s %%}" % (" ".join(bits)), token)
+
+    return defaulttags.url(parser, token)
+
+
+def new_style_url(parser, token):
+    bits = token.split_contents()
+    view = bits[1]
+
+    if view[0] not in "\"'" or view[0] != view[-1]:
+        _error("New style url tag without quotes around view name: {%% %s %%}" % (" ".join(bits)), token)
+
+    return future.url(parser, token)
+
+
+def _error(message, token):
+    origin, (start, upto) = token.source
+    source = origin.reload()
+    line = source.count("\n", 0, start) + 1  # 1 based line numbering
+    errors.append((origin, line, message))
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/validators.py b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/validators.py
new file mode 100644
index 0000000..a12ce64
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/django_extensions/validators.py
@@ -0,0 +1,65 @@
+import unicodedata
+
+from django.core.exceptions import ValidationError
+from django.utils.deconstruct import deconstructible
+from django.utils.encoding import force_text
+from django.utils.translation import ugettext_lazy as _
+
+
+@deconstructible
+class NoControlCharactersValidator(object):
+    message = _("Control Characters like new lines or tabs are not allowed.")
+    code = "no_control_characters"
+    whitelist = None
+
+    def __init__(self, message=None, code=None, whitelist=None):
+        if message:
+            self.message = message
+        if code:
+            self.code = code
+        if whitelist:
+            self.whitelist = whitelist
+
+    def __call__(self, value):
+        value = force_text(value)
+        whitelist = self.whitelist
+        category = unicodedata.category
+        for character in value:
+            if whitelist and character in whitelist:
+                continue
+            if category(character)[0] == "C":
+                params = {'value': value, 'whitelist': whitelist}
+                raise ValidationError(self.message, code=self.code, params=params)
+
+    def __eq__(self, other):
+        return (
+            isinstance(other, NoControlCharactersValidator) and
+            (self.whitelist == other.whitelist) and
+            (self.message == other.message) and
+            (self.code == other.code)
+        )
+
+
+@deconstructible
+class NoWhitespaceValidator(object):
+    message = _("Leading and Trailing whitespace is not allowed.")
+    code = "no_whitespace"
+
+    def __init__(self, message=None, code=None, whitelist=None):
+        if message:
+            self.message = message
+        if code:
+            self.code = code
+
+    def __call__(self, value):
+        value = force_text(value)
+        if value != value.strip():
+            params = {'value': value}
+            raise ValidationError(self.message, code=self.code, params=params)
+
+    def __eq__(self, other):
+        return (
+            isinstance(other, NoWhitespaceValidator) and
+            (self.message == other.message) and
+            (self.code == other.code)
+        )
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/AUTHORS b/desktop/core/ext-py/django-extensions-1.5.0/docs/AUTHORS
new file mode 100644
index 0000000..47903b5
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/AUTHORS
@@ -0,0 +1,24 @@
+The following individuals have contributed to this project
+
+Antonio Cavedoni - For the GraphViz stuff (http://cavedoni.com/)
+Ludvig Ericson (toxic)
+Collin Grady (magus)
+Gabriel Grant (gabrielgrant)
+Rob Hudson (robhudson)
+Jannis Leidel (leidel)
+Brian Rosner (brosner)
+Michael Trier (empty)
+Doug Napoleone (dougn)
+Bas van Oostveen (trbs)
+David Krauth (dakrauth)
+Will Larson (lethain) - syntax_color template filters.
+Patrick Altman (paltman) - patched sync_media_s3
+Chris Beaven (smileychris) - widont filter
+qMax - various graph_model patches
+Tyson Clugg (tclugg) - patched sqldiff
+Domen Kožar (iElectric) - staticfiles patch improvement
+Ceesjan Luiten (quinox) - original staticfiles patch
+Camilo Nova (camilonova)
+Wiktor Kołodziej (viciu)
+Marc Tudurí (marctc)
+Rick van Hattem (WoLpH)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/Makefile b/desktop/core/ext-py/django-extensions-1.5.0/docs/Makefile
new file mode 100644
index 0000000..969e598
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/Makefile
@@ -0,0 +1,75 @@
+# Makefile for Sphinx documentation
+#
+
+# You can set these variables from the command line.
+SPHINXOPTS    =
+SPHINXBUILD   = sphinx-build
+PAPER         =
+
+# Internal variables.
+PAPEROPT_a4     = -D latex_paper_size=a4
+PAPEROPT_letter = -D latex_paper_size=letter
+ALLSPHINXOPTS   = -d _build/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
+
+.PHONY: help clean html web pickle htmlhelp latex changes linkcheck
+
+help:
+	@echo "Please use \`make <target>' where <target> is one of"
+	@echo "  html      to make standalone HTML files"
+	@echo "  pickle    to make pickle files"
+	@echo "  json      to make JSON files"
+	@echo "  htmlhelp  to make HTML files and a HTML help project"
+	@echo "  latex     to make LaTeX files, you can set PAPER=a4 or PAPER=letter"
+	@echo "  changes   to make an overview over all changed/added/deprecated items"
+	@echo "  linkcheck to check all external links for integrity"
+
+clean:
+	-rm -rf _build/*
+
+html:
+	mkdir -p _build/html _build/doctrees _static
+	$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) _build/html
+	@echo
+	@echo "Build finished. The HTML pages are in _build/html."
+
+pickle:
+	mkdir -p _build/pickle _build/doctrees
+	$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) _build/pickle
+	@echo
+	@echo "Build finished; now you can process the pickle files."
+
+web: pickle
+
+json:
+	mkdir -p _build/json _build/doctrees
+	$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) _build/json
+	@echo
+	@echo "Build finished; now you can process the JSON files."
+
+htmlhelp:
+	mkdir -p _build/htmlhelp _build/doctrees
+	$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) _build/htmlhelp
+	@echo
+	@echo "Build finished; now you can run HTML Help Workshop with the" \
+	      ".hhp project file in _build/htmlhelp."
+
+latex:
+	mkdir -p _build/latex _build/doctrees
+	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) _build/latex
+	@echo
+	@echo "Build finished; the LaTeX files are in _build/latex."
+	@echo "Run \`make all-pdf' or \`make all-ps' in that directory to" \
+	      "run these through (pdf)latex."
+
+changes:
+	mkdir -p _build/changes _build/doctrees
+	$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) _build/changes
+	@echo
+	@echo "The overview file is in _build/changes."
+
+linkcheck:
+	mkdir -p _build/linkcheck _build/doctrees
+	$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) _build/linkcheck
+	@echo
+	@echo "Link check complete; look for any errors in the above output " \
+	      "or in _build/linkcheck/output.txt."
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/admin_extensions.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/admin_extensions.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..2c366d39f51fd12c3e925ed2104858dde130df36
GIT binary patch
literal 7216
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
Ull5vEc}foBODae3nN*7Z1$CDilK=n!

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/command_extension_ideas.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/command_extension_ideas.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..57babe3becda5e4b3fa64ccac671d1201bfdcd86
GIT binary patch
literal 3829
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
Il{IJo4d4cQg8%>k

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/command_extensions.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/command_extensions.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..1d9b92ce5e9fab4e910656b934d34050d4488ca1
GIT binary patch
literal 31306
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

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/create_app.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/create_app.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..a09d953a8200d9febe10126158e39b5016476b9a
GIT binary patch
literal 7054
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
beFj+T`b_+_{VqO&=(F&U>a+1TX;%LQ6+wq?

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/dumpscript.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/dumpscript.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..2163dc88ef6467fc17c068476a2212fa6ddb73c0
GIT binary patch
literal 17229
zcmeHP2bdexwKlH1ayQr%n=oiG?5@4LwlQrNV;qCQS-df}2aAx6Jd$R2MwT?XXGU9+
z41pvNJB?IALK2dYg!JBf@4feg6w-U|??30xNVAfhX9G#zdwKr+X=d&{{hWL6xoxkT
zoiBL#THu!a{)$(y{S<$e?MjeR$MsyVW`}A{x7k^-%62eawS6@=RP(wsb7#$(HR()m
zRr5zO3-F$|CTuJ4)q;^s2R_H}Q6oTij0mXXO>R}4BbgHg%?b=RF!EOAtiULEM)$NG
zoZh2SBbgMc3$=39&y!mX)WVU>GL(R~TNyX<US+K0=D}pqNX=aC*K&T~29VsVWDE9~
zuNH@DiMga|k#A?qw(ncx5Mb%3T4pZE*NC7}*7s_Zx7G3yGgYwj9$Ad7R*aY{tXklW
zd0tTQ0z2ym76t0~;p5B&thih7)d`_m+3n0X=Rj+<%2{A8h*dt(=`cI$3ZLY3nscD8
zI@w8?Crmn4(B}qy(6uk<D|mfSRh{B21p9`XtDQyWGOc7^L&-HYvm@`gr2+(3r;e)o
zH2cZ7^DKQzod!1<p*kIIB5N{IF>TH==ff7zT6H<I&G}LJ8JR6G>453m<PZ3Ya+dE8
z>?W@WYW_f>XjR6&K6@&#D?W&$#LMHSE^I&ffm&-W2&{3oj5^a?5Xqs=GE-I%kejOo
zuzPo?db-VyLaoYhzUm!?#Y$j?_jRLYN6yM0B=*|+QF9I(xNlVTJF6{oo`xS7RU4dz
zR?VDSax1plI6ND~qR3R6oY@Xca&~vKO%M<zJEb<mBIkta+-@h`98>2xU5??L;jDGe
zH0KGpI^Th?7j!$lqt3cfXZ@(tH|h+G)*SG3B2I(NjP}7qDK*qg{lXirS6f1L5g0qn
z>6}{5s^yxI$6UKq$d+6mB(_4-i$k>y80M^mY^es2x-Sd3y`6w_V*xK|%Oj;O1^FGJ
zx-2Gtajd$KSC=#8o&S*X{aTEyC1W?G)G+8@5vpBmX>R!bbj7RsuCGRz^8H&WcR4%Q
zb-SIRnebP_a(hCxmn}B}J6r+F!9|f7B-ZvF$&xv*Fr88+M7b(d`&pE$Aj)NS#YO|S
zeZw-)peqHd<W+2A_jKTR6+?G1Mt}xtOuD6#L3Y)v)=EG?p=}hbz(U)wjhfG$kC&4M
z(w}0rGDlSF>Si~f1zO`|Rh^W20OY$SR1akN%zu`AY81A+DspmXox6Gv%bjhNd*kq2
zcE<s@<DVy!1>fdEm1p0weAh^;NVu0Bs0y{5Efo%1$_~{STk3bP)IRv*K%);jfT5sV
zhC_|<V{&oo=v-_tJF75ZRnW=VhBt<Ia1lh+DtT7kG4Re&lfn>&SKIQZjleT%l>&NH
z4zu+Ji&pl?HpWW!l$$GYL|GN1;1W97(zFo;8pjnvEft5_dc&hA+%mha=x=lej(Bgp
zo%iO)9e~pf7xJjg(kmAhFNW$MTQDvJJ=nK7K&1=Jq9?X7ROHd3OE7*pR24>D1bRus
za}as0Vt_CQQ56z2jo=D$P^f$mlisbYTlLZ=t}3YIfP5F&{b%@A)nJ&3P))Lx|8vyV
zA&4k+IA@s()pQ&f(U9z%#Ub|K86l<~;;gbTAghNu^DQ2g7sW9jb~`-MUmL22u^l<k
z_j68q9r#S?KG2cD{rVXMqrtsS=HXGx5!^?>F^>$@4It<+oogFi(v6{d6!SS<w=%SE
zq*oYR#_UNWhn{H64bU}s(p?OyLkS_I{T^;7#FAK-M?;9CBm5Xh_}EZAjwNI!H;RPK
z?K)R0mFyr&G9C{r-4v=P07aT%WE^v00!lrRP5-2BbG|NAPtF_%MSD3LLQbTUBb^p4
zi-mqlOK!kPP1X(Ua!NfFOm7a=)7WHHP%0rMHwt8xEeyDUgC4SAmkfKtD@hJNXpEuD
zbjK^kL3`Ra&|wxzcEPCdM8Ybe*JLEG78pA(@z<v+usL_LWS6}OfaO7@TtP1lkAMa!
z6=0g1;(@R(mb!(te0m#KjKoSkL&l$5L-ovmm*nbMkp1Q;fF*XG-A3TyW!&lBhPe56
zSXVs<VffroJ&(hX<-JwH5ZSK7j=w!r&u8;FaJ*f>P#Nc2o{=X^4sB!O`VAX4_&mJE
zqj<r<WQANLY&z#cJQyVp>E!wbNJ?f0>y4_;;t)eM#Fb$Od8B4_hdbis7ql^2-ODc&
zFW(WW7qOV*|2i?%iy`OjN$0+#jhw?P*tsu-bN`j1y$n8md8l5&K4mfQh<(akHfLq8
z4AraHUYEmOJK!FB$|_e&Hm5uWyBRGpax`YVah}tZP)p-ST8_Cta_qrD^=fd6yK9N|
z*R(Up%D8>L7Dl=3-s7)c2c=&hsyDD+_aa>=^~$zAa|vcbkCx4qy!^qGdLzvGrck|^
z+1~=SIO<))tr$~;xwzfE3C*NuFlFFh)x$hxi?JJz?w)!{zpBBQn5?5JeP#UKwYHEp
z)*5aDtXj)uVR0K^{9wXpgZ#h8SZ4%o*+zdHSltC{+TY?P==)gP>F#Mb$y_``1@#v0
zQs0WzhpBRD(63rpV0oL_QN{9)O%t|ydz%sD#MqhdfHVImYpvdi=y+GC-VOK2(D^3u
zsWgW7gzCNQwcFseJ+@V<&l!C^qr`k6XXP+*<!mG8j*r{am>FOOQ^jHy{D2nY@p2gE
z5;fl*tCdnnA<z*5+V{$~F=3V9)2K_tbOBQnEQcXL05Jwz3r&>k2FMeNL~p4Zqu;OI
z*KnVnO}xKd8#^_2%Lm|={|#z=5Z?Jvs6GrgIIQA(#5-|<`H@h4H1^w!1oLAvlvf{j
zPLc%k6HbRDm|d|MKB*JTPlf8!>}X!#*b%R6eg^D5l1wr`JA-JHWY$T24i=q(|9Oc1
zg;0HwMQ2){(t*XP+LuE0<yh{Rg=A-6>2{8sm934X{%W@j!Cwp2*IDW-AayS~YtF5P
z?de_#nBHAhWqO~-zdLv}%I`J0^{5+-tP>Ww2woe5FP223^$*Uydek={?Uy3WWuX0L
z8_nwj?YE?@+!?BGv!;yuwdCOUoi@0`YkBbdZcB1$m#dD2#if+`9;|d%sJ_qo@gy~=
zANNK-Xr<ca+{sjb2tV*7wP6tTBY5J+q54T|^1I*(EIoC^?9@+Xb~+DOVmtLSApAU3
zzhLh5QYdyO;8?O>hU!;bw}K^WF*M8f>m$nd8_36t-py$0w_y6aQ2joZ@|Pl|qh;%1
z*^b(Qe*mdJhU!l&<1t}s9nrkvH1E%$`U_L(2mifxX{;|^NZ_@Nq*IJ;&enHr+SOyo
z@}aN(+8jlHYqiP7dKCSgqlji<MiSC-_ytpkDf~GROEg<5T9<LpgyU(BR1Rg9w-c4-
zqV|UCX&xRS%@@#gdr+sV$YN+$(*i;0h!EO@B6Uh#vrw7{%auZXOH9&2ltP|Gc!acA
zNXYn8WQIx4vpOxtr6n4Dsh}^@=%P*wXkDF#S82JRt%%S#iucxXeR}ntSGJHR_;fs~
zn_NgI2uicAbuZFN#$iXU!b?ae3V6DxNfnuG(w!$sbqlrOv)F7WGw_f!u{Oe;f?Akw
zH69_Y5ju4?%v&Nj3Sv4{pzfogGTWeT?{*KvYbDr+9k1RfV5RBHRK?9>+KGi?-XC$?
zs&8~-%fs+(%shR+W*eK&?xE8_t=T$;aA?sdj&VAjao9R(yoA&x;OU|!Rb(lX);U9}
zTc{0pvvt-=CHf*d6K^4%CEw}H;%4R08BupzN?k=3gNgO<b11VAxCy&ZFN$H~b$Eod
z9=}n~RAiRP5Zw&KyJf^a&7og73}_CSyGsp$&I;8RnK4VH4MKTiMEL~BxyQy<q3=%E
zaB;LG>eD6wG&}QbL25C7-I<#ihn;y2UP3xoz|%!ds>qC!&OA@5Tc{29u>H?x;GxVB
z#k&CYaKs=UAq@$oIwR&jBiJt#s4W^Qb27)nHf(*yNdT{(*i-pZtzZ}EB0x3ky;U$<
zB(3XxG2^h_+wc<7eFZ#S)TD~cJ*oG0scxY*+{=1jB9$D(m*Op?9r7Iw_z9sohA(SN
zsH@0QFs;k^sYm_>ChbHiEO$RVLK?<z9Ky^n8N%FdWNoQ#n=3TxE<qj9sM5S<fFbBu
zf*C<~e?i$Dp<D{eyJ7W85Ou7A?^Q5ua4Xsm#w2I=70>XH+>;@j!qMs(_C^oNnxh-g
zm7v({tv$k}#lCfK?PVPH);_$1WD0n?s7V!B(xkVplIj*}!|T|>`x$sBbMNWH%a3r*
z)p&&T0AXF1jK!T1*4GHs12t4;EsVOeQgA2SLJjjWJ!0{J1D=Z28+IYZOGe2|mPUm@
zi-vW3JqYz;udMJp5b^6eI(}p^dRLK!P1-dlWLmfmuV=gF8F(mjv@8k$ht+I6LK+jo
z>0-o}g^sO;;Xaxs(YU}m8dfH`MkF1t#*-@*3F)Ya66X}2GSNYPP06fjLp1-Ok|1DZ
zp2~O&sUqKLIsCDo_gh;Je~`y?x{54H#G4oHsVb-m-qEzG&Py@E&_5(i0D(n(JVFYD
zV7eIbV*$k?4(44{6OaiF!iGr7!xJ!?l)59&!8XM<m=Zu9W2S}ZgEi62ZjO`!FBZrG
zw`?s(E1<1ug==%GZ}iW-jo9_EBot>Gkdq~k?8Y-PdWf)Vv0FWkAIk9D?nAtUbgh7=
z|5?(p36k;tFk#ms-S8%k_v@r`C^K;EmZIx{3s*lJkB}ZAgwl715G=}uiE{i$3b`91
za-0SwT*B7AQL38t(KJ}4N1+};+6m11;6sN{2w4x~5z?cDg3j=n9b(csGn(720$O{=
z(_=J^#|n+dX&RX$!`IbH<ob^n+?yiYG#i~)marJ;@>*fh!&(zgLSP|aFivmJrzZfs
zP1HS6s5IN5k^Vo4(Kza!jF*s}BH-y_M2#g$M#)p9x`o>CW;W@~3_O%MN_n3KXxRD|
zJVJW9(5<s&S>jHS*G=dd0(Gl~5^G+zb8nQt#x^)_6OSD&&F-0k)FN`d**y#OVt{80
zkJ}<1oY}SGLC<0Mt|Cj6w9In_uZ7L<Ic%BdF|f`S+tR!p^{~bB@d)V!LMdI07_nHf
zEfNF73kCKL4cj_Eyhth%;?Rpx;+!l4#7p?KQwE3&;?D7<g1`gB%kUP`%jH{d;9icC
zg7gYT>MAndNN*VpUMX-1M$u?cC;Tc#(8nNz&a3eaU0;JoNUs&_bTJ~%tVLIG$m;~;
z^%_LBH}-i3A32c)Ro<vD#>guh*ol;qD5XH-u#9m`7b?aja&(T5i5T4n@XH%j2YLnv
z=?x${QyJdmpf?JyR%M1_E4@hohB6l-I_`-u^kxu(72bkJNN*LY>3d8S8nMmLMdH8+
zy-jGpJ)+GWUEKt%>pP^PSyxSgWA>e>hu;<eFR~oH3q=t6-FSrb9>Le$BeT-oqdqh;
z8%RBa^j;1BK7oI~hR^7_x~QD+V7rArAV43CfX)ShGmQR$vQ@!(pZ@B!_&wUjio`K4
ziuSeq0p7XdcmUu`uktnseMpGD&1tvku_gBGhXDk2?>=Mt2q?fhAH^f2j|oq09agOo
z)gPDoPw4v0HYnOYkcu_z#^ID4(h(e1lGttpasMt}@EM82`IDeFQ*jCBPYIJ|7jGQi
z8Y}&20T{}xJ2olkGr)tYpT#4j&k2$Au@Zs2Y>FsYKQE-d5Rp0_^2EWKP?eqeMFDBn
zNz>x6{SxZoM_z)9;-o=<zKlx9{S`by`l?XUE@Jj=0{Ckh{_6t&4GrH2U@d+ez~2<0
zZ$&^Cga3aQzzxBUI+X7e^6f);TkO?u0|+L#H$<TCfEFzFT|7eio^aO|V|5!reV5dK
zU)M_`LQwN&BZsi=i{TA@3J>dao>kE2O?YRFw=xUSzBBy*B-%vs4~25G*EbGtk9GbL
z;|*obf!XgCXZkS+K+&Jz5z<eEUHa~mg9>aCZ6NO6ekOE(9?|9DV`g+jw$ejXs;RD4
ziBD=o{oG6oNhkLUA>BSQE{(19O8~)2_mn;T3UpwsU*i$dZ-lds3Rbfb6~C4G-|6~{
z1*J!Dl7G<HQ&*^B+Xdg~jkZL4`J@(B11#?DaE4?(Z^K4MQ#exeVNH*wW!=|G^=7kf
z#SOAq^!vOdT(WUMGnt`CFZg@m-x@oY$5#1+01Qc5*<L{UBS4_=pYRCj&jO$R2k?-B
zb&uvMe-W&|Mp!%$*A?a-?Qc@iET5*pJ=)(<52x`!9NCFxVGxBl$KesuZ2ZP+WXwwU
zV|ovYCv3-PRGOoS&lTeHG;x`*9V4NcMwl<;7DVJ^%{%EmHbjS19@!9`sD~kVvX?-m
z6pCStg?NOtNNDI_WR^)|%x7arl+a?0vqW%~YMe}?zAkzq;a(=N%Qb9k!o5N&62jB*
zC~;1dg!=@3T_6eft~lye3IZqGtMG=67x_+$pSSCqJ9HA`brqR)GUq;7Koh*8oV!l@
z6h_b?6O&qvB3Nk+9wD771k%NbJ`12*EslWFeFWq*4I(Qp3I4MBWJq0tKb?*eXN~BZ
z=GR4{>+V?BE<s>j&%j$qYvnsFo2p1+c*UiD$%f8k0$oKGBdPRRf|FnxDP3pM%?Ns<
zwuNR7>Y#lu9wDt0O6g+6h(&7jS?dL)PlIH(qCM>{;XFCcOIZhPELUPJUf)lU^<OPJ
z_f0qjS;dYMhZmnk$IvJ5JmbI#OOH3~Q@mT}=z&i!8|zw3Sf+6Y%5ck7j{>7=1x~-g
zC%N1TA70O+A9VS^J32-^K48+H;!hvM4NKU?N4%J#ocz+nY$DL%MOH75O%!ylc?&06
z4BWxsWotPCuOZ<Bp$Qgp28Pcr>0a39wLyIb5Z$wk-ON0$lqnb&G%f>(=D_l?``l0c
zu;omDO1C^9CT{iTo;YYWFy7GryFd<8-ZK|$geejJoA3zfY%zSg82N<*z7hVL1>_tJ
zB8M_A)yD~a%$m<daT`ybC(x~)+#h@Le8$sjZFOpN0SY10ARgEu6B21zj;n)!6^o;V
z<0R@rf!z|pejMF-m$9EbMDEOlDG`Zri@8XL=Row0gdvscGWNLRPH@b~Su8jl6M_D{
zI5dX#f}_<<a^Uh~RHLV^iB3<lx{E~D_F3K4v3a)w2<H7iXAim<iXlX{;elOCF@+x4
zIS?c)^!SWli;n`D3j>_b^l@6VjE-+RfJV&4^$VofWAf<|p>-*K%?=bu2TVJp@G>r3
z=1-S%UMU-6`E)soM`<TlF1L~wQib0Aq;{BVPiR8r3p_quAppA=pfm3V`h)_FNa_9Y
z%T6>G#dl%(UM1~DF>b%sb*W#Rr7Hz(4}MvC9xb5fUIFiL3;K#I?ZY>2$u3R`>ys&{
zS2611SPm`Wew2m8(^_+xiw!!y5S7Jc+i^Sa>1siH09STkHWy%+@aY<SCJusO1mKey
zh16AYEHXt8M7>9&_zmen3~R24?V05}rm{myS=2zz<H66P0<H^JK?C=laM+v<pl-xm
zL}Pg%;OcOVN@StTT<ruwb#P!H@H||OcI{xS-=pyXCn%Q&D8~?;uv^}itE_o^AHwZp
zyV|%+<x@duFYz&?RkM6+4g0)4*;2YV@R(yP;usU0hkBZ(aeiN1!uj7CmZX4)yJZfS
z&9*D#@=GTl;l+quu2K=-EWh|DTe2tY5*<VtZp<!%rZ^gmI}{jVsU(0Y$134oh=7$D
zY@WF|l22dHr3%A2=Z~0cWJu4#PF?}d$m&mhGXsM?z|3W=fX}%G_?KV|s&etXf}N|4
zlVVEdGP|6!Ibx=fuQ;|H5TX3Ad8*E1jzr&QLi1U)d_VzzEat1mm0CGF#m$atD1%d%
zau=MfN3c&5C`V(&ZDF@E=0(7h8hFX1MHSWsbZx6lQv$n^-Nxw@J3outD^LaDK8;Eo
zWVWk)Yd35z(1ZDNId1gf9yuCU&5x}35GFm(oX=^cJ5CQ3lHzj&_k`=afkzZd>B>BE
znuA%pY`LYZRlwbDz7S2<qVkY=DpW1kdxJ(8W#vpYJq$pH%{g{ug02%{TJfrH*9y?G
zT%zlxc$qy_^$^E$Lbzh#sMf=!d<9z%x90WTJ8i;82+f81Za6LrRSwc41$YTJ2Xrd>
zR-jKeNa@lhkI{`NHs{rXvA*-^QT(2YNO2=Nq$#--B&&5N(_sed6qG(6=6W=LFU=NQ
zpLdxM>te*m2yQ1j8k{2^bEoLB48|?a%4H|rLg3KjP%_+ME}0pm^mqpBF!%Ot+q-?|
zPP&Od7ep8T=?VC9)|yMv-vqe9%}o;L)dPAW$`6^H(M=S%>q#gWF_%baH4OP=DP823
z@#g`us)hvypPquU!{#E6pnCW5RFs*gMcv2b<Rk`MzH}_zN5P&L0I)wmH!~Cl0o*g4
z$~s67N}M9l)3|sp?kbPdE&RG>rU9E;;nM+9l-99?JK=1@V$WdY*=~Vu<(DOB4oS~H
z6NQJ()w<=|C0lwXST=C7`k<dr&jJYAQREV7A3i-Bg`;#ElUyY&1``LHxPO6**@Fdo
z4k{0s3-PxI>P62*5swpM&wAhfJd}>qa^}kB(G1Ot0=k`%X31X%py%Tq+g14Oc23lj
z)RS=hdKE5?oUB)2*63N>DSFR-wPV!G6^Qo6--yuT?+b;{9r(ot>n2_bc##lAN+}oJ
t;y;vtKM;UF27vo+W@kK}`1E3cj?zo;YtHAeEco<Ne1!Be{MK^){{?K%RYL#(

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/environment.pickle b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/environment.pickle
new file mode 100644
index 0000000000000000000000000000000000000000..b300f747e10ec39c7496ce9d23c859555c97e2cd
GIT binary patch
literal 44908
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
Q_HQZe*E67FzaH`b0J%LPy8r+H

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/export_emails.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/export_emails.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..45a06c8606fcc08fccdd62e753b1ccd057cbe531
GIT binary patch
literal 11031
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

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/field_extensions.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/field_extensions.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..9def65b2c1e0af6c29125ce731812d8fb9e17b99
GIT binary patch
literal 15998
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
S8*|<w{11hg9>6my<o*xl#Jdy#

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/graph_models.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/graph_models.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..31e904f4126b4a75d2dd9f317448c889e6a439ea
GIT binary patch
literal 19435
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

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/index.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/index.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..2ce6e0708c9c34338cb62127f4c0e34ea8554c6a
GIT binary patch
literal 13046
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

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/installation_instructions.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/installation_instructions.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..b7880698ee44b37a39be7ef605b8e5e9f0c6132a
GIT binary patch
literal 16462
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%0AmR
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
YfDTg;f8`Df?psp{FA>@JTN}y#2Q4f4M*si-

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/jobs_scheduling.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/jobs_scheduling.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..6f1005d22507cd806317beb2b79f92528d3d9596
GIT binary patch
literal 8055
zcmds62bkQ%6}FA9t$k<vY=d#Z!eD#`@2%-znhmDd2S+giQx>6>W_RS%N;@->?~X(X
zPC{a*lO9q@Bb9`ZN)pmZC!KUsNF$we(*HM-cJJ0}J}~({zU2GtJ?Uxm=KcSB^WM|U
z^|Kr|bmGYK)o>8HOcm(1&Vr~QX0F{OW+mc)A+s;A>nxgVFePRuqHAdTz>FC)c7zqB
z9M0U>_kx<}9^F1KlNwXRJ)_&#LL6~V84bI}4E){6<fKuL9d6jhcqqpVFEAQ1tVyPn
z=pBvC1uCwn$ctcC7+5Z=D$$pSf;rHzrD9ec<Dg23Ib|`|9B^VOVX&pbSUODfkD3LS
zIia-aZ80!v4%%@PR>Lp~!iZTavSlRZjm$KA2$tt6F+ULthIqF*(1vM{_n7lYR-A%p
zA@4QU5}qRADdI2TDH5KdT_ik3FDN$gEQ-xuhkL#Y8^z+XIIx{?#T+uUAPxfGOA>J~
z_?Gr~hGwZb!|VoZ02IskEVDb4FW-J9Xf2tFNmWupR&1q87s+r3w5gK2!wza;kxfJ_
zP*4s@=%^Awv06}urHaG~vnR4^#DqA+?8%G~E6su(MbfLp5qLHdap;iQ>&6Wlr^KqV
z+2i<_5!Z*6&EAUbj7jp+;brpxB6M|G9KjdbW>-3XO<4@_9y>N?BUG4JJ2DH(vN#h*
z@>v|b95vKV3<AJs1+fma6caH##Fy#_+X@g<Bdo-i@g;mYU%?MCyYxF^J%`0d5AjuH
zeps0wUgoRId`&s#n3!kN9n(JBr68*yj_o+baX0J|$0y<hn80beVqCG~O1p-t$9&iF
zJq0}{!swF{aWdX8XG}4$&>AE*kd>!&vT}BA<*6O#D2UUb{`5qgk*hx`$FJ3kjih<g
zLux*AFS=99$YBL>7W8jU#M#7oFXBv124O>aN}NNQ&)r+|GJZNa@jQO)^zmE3+}1>l
z5Oe2%hs|IPe#&UjQFs2nn5=~EWI<d2Q$`bUA(?UtOxc{pjb7bG7#NOZxDINiSmD>8
z7^j4?xqS%~3S|35`?USycCNAN?3%P2ydW-t5!(`RDH(C{qcK95AYnA~R$p@laT(cm
z`QEmz9hptMZU?WAZr&^4h$|Cu6*+=z*rr2xiZ6(5adli_`T?h8R8GV-7(X?D`ARa>
znr5iDmJixkU&7|yHZ8K=JbWudoK~-s2$z_nszIxFTdQg?m{LyZ;Cj_or>V|XZBt<l
zJao{)0nSUr4gyCSofd|%MEE&|d?JmZK5Zfq@I@L!$a^)0xjBYLia{ho5{4sz;nIB-
zGvjiqW?KRSi8!rh3f7EG#TQMRHpADPEC#+uIKxh0A5X*tVW-(dik%{MG7;C2&9}kk
zv$9o^t`DkGDlNgjH^z**9iWy`**Bc9jyqR1D|5P#h6^Y)=~`o!USm;+*YK`wtfBig
zhU-ZbpAfa(L(y@W5mpU5FziOd_Z+=khYOpk5tBy5ZA?TKVNk$~#$?2?lB=GNYdnX(
zVez;r)am8%_)gRf<bFy(-Tx-gC%}VGOvLr%K>|J5^5CvSJc&Gb9z3`$tTRJ-^#({{
z6E^)-1{wouopyq5*QiW_S!Sfg-)a^AVePL5iZq-&ES}s>>{B`sJD3xD1Bm^v&i_>4
zeOe-R6JD}qR}1f+L_D4F-UGawC=94wwDb5-j`SLlG44gwIZ~9`I^4EmoNh;qaqgk3
z)W{LRRT<U`=b<a~CoyE5vDx;rtIHW1)0ajljSIpc;`(mb*b*7sRyrur@$%43W3?Wu
z$f&S_W}lV`*mi8+$DcK9f}w$CYu076!{Y4GIA?+ONCrg4!LWEnJNwV<#Qvh3{bzyw
z|6?|ujaYb2BA!dJK+NoE#lnq=cpk;VQ99!?qZ;~tI8G(LnW8BACG(L+;HOZhwhiL>
z?F7G|6TwSzf?o)NAL$e?g4Hih#7oF(n(jtzb$kC%i4h=C))2lF`S_+pybQ1CdYTml
zbIz1e;^kCaUom8Mr$X_{?K1)XNNQiv#HQVB+Q%-<&41NieH=BQmKU*lLA)B1-kgZn
z5RJz{Q<`#h`d*jkU!5_UnOj9NcA^-(R<SY=w@SPg0B_1WmZoy?I<ock9jG16O?v~U
zB6Le4-bg%=nwzsqsMGnII=nlwl)9Za!zKG|?pxrSw<h9k`JA_C-=JOR#Kx_OcssGN
z1Z-eA0^m9Wf00h8c|>M~M7*Pgm}{7~buhIF^PL*z?TL67O-b+GIu+)-JG?uxj9|V8
zFdx#6_X5iM67l|A@9oo|+>wY65R_w@P*jG+_YJPIUdg45R~pyZu2fI+oc3y=9pVQ&
znAwE*Ar0})M0}VgJbHg76d%EicT6Sbqa9`(Sx&@!48-i;Bp(N3pGd?fi7}e+&YUrH
zwHm`+iTD&@C;<aCG^^4e7*cDEqQ8og2t~Mo)UIhlc5%X5;9bYuVex4w%zHT<!Jp}b
z;E+80KMNH5GtK9K;q!_30%4#j@6s5w^>-)Yi)8&uSihCNbKKCto<<tM*yE_9%c9yd
zX&frP)NbvUJ6UVw)_w)nJ{+}Qg>_#`#Mj9>n&R%3b@wFV8)Th=bytKj+DkCWP^{6>
zrE3g}i^_JaO;io$c-2Wt=(<Rvr*R@9^3dgAHzcj(l$^3`Pn`hVQ$fa$gLPE5W8IJ<
zsO`!IW5b4ayx;7EcU6w}Tfp0R3=9?D27%v6#CM6Q$HD;6bdUB~d%5yaGo<ZX6+d*w
z3gUanmiH#&`(!62<Be%bF-i?P;-x4o)hA2nJZZnFlzu)8Hzvt9aI(tskN82$DQ5q)
z3B(Vne*6e~T@!VGgF<u4#C>LO1ABl>?quS}9g5!S+<8BN^Y+`OpTYq@OT^CsOjqK2
z(+DQK_b1{PgqKq4Mx8q!CR{yM{IZ3XYk0pJ;`i}RNY>^^ehno1Ioof5<F|?UU5?}a
z7LErJ@%yIV((L~*fuw`QAKH=pabHM^Ig&r+KG~o7{tPUCNyJ}sEDyA>JeY{T5tb9k
zCwU2bctMzr7JqL?^N)R@IXXx4PoQ}eGyV&B{+-AfXy0;34{AuLL+L-8qR*TYNjp$z
zwdzdDnHW84_BS`GX-8Ggf-sQ>;MeShK<}r@*;?2|!ue{lUI~3Ge@n@3h|98v9xj-+
z@vZgs>Zg75bWz)@mL5>h1Ln|xKF5pnce|2vwX`3<#E>~R-*cz^TsZ(ScG;U)nj7?T
zo_=jUe#!bqD3N010zJIfbJMMOIf#4g#`jM(R>_6>)kXAbe{M%=;bO=Vc_2NR?*-|u
zgN04~8jF-XNWZp(9`-60(Z-;X2jg~1pN#K9e8B~7;WFEgapWPF;&~{S;Wv@XX{<Sz
z^J&rEHc*Z!xdKmM=R)cUq>E#T26V8%@tBf_;Mu4-S5_UofFlZgbIO&Fnag+-H8zxx
zFhd-%cr2<8hq6}UQQa>|gGTg$H;3sh^h0sK8>bwsK}Z=k{T=9DrF9RWHTN18RYQD#
zDtVZe_D3Pjn45SwDeS^?IVo4ub-#~;fEb_sc+q9@2$IcWfm}luefWN6I1Z^d<Ph%3
ze(fX6XFHiM*FuJ!`nf=g!<axvf;>_WEO6V$myI5F6b<V#`!oB}V*$C2#_{!|=5lyE
zlop_bE}UVdw;UhuJ}!$GX3i%73NLcZ?}H3EOyVw=RpOc~ktTCKt5+CB%p|rwIAf7q
z5BVN*MHokoINF!~qe)RWndU_D7`o}FBaR@hTNAYG<gt*!sq@^p-msbxtmJW!V=>~C
z!V9WlHu(5-@W8k&1HuBm%&yB5^w`DZHrm1>=Ue#x0u+S%iFk;*#u~-d>yLBgNp!n_
zO?Wu3!s3cm#^TAOy36c#!l3Ha<OZ!$``n4Fou2Zr(;-jM(#4J++G7^0qq(<i7Y9pp
z5F<~;!`<czK&>~kK`V?bU1H^F7_`ScfCW3{=~`I|yrEd^0%hHoXK3+!Hqi(X#~v1n
z3~XP?jaoiP?BR4ypR;7FY|=XCqz6;@+zrO$nR@U5Er%(Ae3q8ZYx9`g46)f2N7dp<
z@@%>;WU6Qpos(+vf~iiH=hCn~{Yp`RuJh=Ap5=PVuD}5qiCgr$eMmHDE2`dv+)Be}
z#n}~W+;bx?M<5yLH3y~#sXU(s_L|#@o3@>`WsAIkZhNu=MmdT*zQUY`d=p`-iIybV
zmq=a+`EIkX#*h+eV@h5G!KgW)L#svP#acR7)o~1Ii5N$cN?rol9&;{5P&0jOgUno+
zrH}FPakN*oORCd{%XXG9Se4|ZGzvukUGRj(y&CuNKawViXZvALlb6xu^63P&t-{MO
zWQSfI1C)fV7GtylVb1bgc?DezU^z_n{FM;yF_)z)pZR(NS%KMzTiNlTyb43Gjxv|%
z^`Yd|5SC?`R34~T3^t6J)Q7z+AP>6o8a&)>&cQ(_mUb$#Afh^<`E2I)YatztE9T<%
zYNpS5rA;r*(5I5Jg6l*&_#NVdICfZwbHhb^EH($Hoj0d7*42X<emQ;88Hudw7qJVY
qw`1~?Se!fJj1jvsW?x=2l&oQBS#tcE-4uGRk{)gnxdXp(W%xfgy2aiA

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/model_extensions.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/model_extensions.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..c7754315409019f13d7d5e2a800e6200080d89c8
GIT binary patch
literal 4304
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
R4eFx6qWbTY{*yFj{tMLKBP9R;

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/namespace_proposal.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/namespace_proposal.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..1bcc6656c4b55c8f311f767a622a2cdef74c8773
GIT binary patch
literal 6575
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
Dum9Vt

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/print_settings.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/print_settings.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..5b15591dc532955f6ef34d3ecb81141d3383b6cb
GIT binary patch
literal 10450
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
LSXJ>iDvkdylewCI

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runprofileserver.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runprofileserver.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..6be9390590e28993462edc14051f45b129005908
GIT binary patch
literal 15785
zcmeHO2Y4LC^_Pom>1?@T44ASqCYBZMPLd6_6hbou9DxAa3nD~0_HI|&J?-7zyxp}d
z$P%1{#7^&(B&3nvd+)s$(t8i-3F+<sdvAA7r@J%oC;kH87d~6JyEAXzygoB;X0BgY
zGQCn5IIf?odZy)P__JbFgN$0R<$ziksYQKych#s^!EDX))#6BX_Kh#==;)X(8714A
zBByGqC1d03Q8Z-)wnc>+d6SN775u;m{9J8TEgc*0M78Twr+w8mHohDmPBkFU3`>FI
zRaN)c_$ri9SWVjc7VWc0WyZ#jLiwae6(i96npJWposuDKmK_ZB)qYs?11A6jUbSFa
zlfGIWsUCer%^=?@R4m^&ra<+I3AIvRQ3{E`S;6;0Dp_jPn4U4Ml1DMV)nob^BMiJr
z&kL$vAmme^){HLDmoop3>8rJoI;ziJqAzP?ex1EkUmvrcO~}s*>shdVwB4n5#*DAG
zyY=Ps*gnS2=&M?oKGt5Q9~HBlozL=dq25)p9oGaKYQuy&zFB#`CGyOu6QH{jBXtsV
zN5)LTu%>tDOCTA@K=s-S^(9I9#_^pHa$bkf{k*TJX!w5qQu4~c=I70_QJwO#*8ae%
z`Vccpypo@9COb!dpib782F4UiOKsAZCe)}?^o$V%<P^gIy0}lIHuvdWW>{l5U-eDs
zOG_@g#QT;By{l-HrinG#KcO#Tq2G5xooXLz=$$cqc0%Rsj1lUKAy!M}M;8KFVzg?&
zUT8xwgMH1CfswdYMh!tOTO+lt&(_4^c866k%GSCkwz$*mUi(CQqkXcyN$-?K>U0|<
zZ|}4FChRQ}cK?KZ-w8WA5!&e4PWs!?+}&P?E2D<n_c3zA0d>DfodF_j?r&>YG{Ryt
z3Mk5$BBN$!)cryAnUOk+slExS>c7I$2$oxcqncV^!#9c+EXLAiy-<VgQJ}?^=v1dP
zqdKd(&|wHy&^*da668MP(X>FjmO)j`s(Rs+tr<lx3^WI>=EZ0k-=t-^8ahJ<fl+iV
zZN>>~&2*-wfIS0)_RzxD@M2NbKp^Q?XE#W(yUvI@hb4J#J4r51CAqU%3|6IP8@}Ub
z)OnD?`H^}6i|uU2bU`boUi(be|AqGO`12vCd$yd^E*QcCBQ*++^bUyZd>8`kt}EqP
zT_l!av;HrR)EMjkXQF>-fHmcZlZb~799o;MdNZzNLd8(ujN`f*f|%x2-C5X%)`w_1
zyCq{AWNL6j*8FCei|b5V0DuN7#xxX59@~rWhm{&fRA1{eU|^HZe#_sI)6VfVL!%HD
z;7!6j!b<VfObPZ=Jyn~r(BTX@0fGc<#bhHviEX(xu`)w*K~05C6y{phJkWEEWw>7G
zXDUvKysU>FE6z0%i+yPgJGx}fj%+cWOIuZ*AMHww=Q5jZWOt<Yu#H^8HnO+1L9cx=
z+lUSu`3c*||AZ{n<*>CYA~l}c+HSEmyTQV)jMRhJ!k)txw%2xiEe)$0-X&l-RgNoD
zgmE>e?V1$TN_gNnQG#AY;T#__MGLk-dA1L-2ysU<Ow(bjGF-%pcznZG5_9Il)p;`B
zXf-tSVWF0>&(e%c9P9$v#8u5U@!(b!=SO=|o0t%rcu1rQY!g?pO<djDpx3^VZNh*}
zJPYjKQ@K|~Xt5M2Gu7fl=4p{feJfIvX>Br)*{3kqQ}ei1wtb9&VN5x8x4~oC+EifW
zKAT6$=}5V34Ln!d)i_tHK>k)dLfSGkR_7s3hQ>NN4<c>BQ3D$)Qp74@eA9Dr&W}{U
z{r-imuz8Zv9}jN678}WCAK|DP&lP!us&KTD(aH7#AAk9}S!DvxbA60+Jc5}p-Xuu+
zY+gAALzr_dA84w9;Z%9x#ALQ%7;UiGc+lhOtjzebHB5XlB4SJqJetjEW0*h211RiV
zvoKM{c&$RqM+`I&9KC9a*~*wkU`XHWWlWBlYml%+y|A5x*QE;E*C!@E6RG_yxHWAB
z#}+W#il*20+3v4_lG;wduZ5x>8mS0~WrUik+glPn|2Gt(u7eyN7OCr5z&vRDZ?FwJ
z!~)9-i!uW_5UGbV|K}{|=s0&)!)nV2-JrostSsAdHufV#{n(lj?6rJQsc9j?d9%;(
zsP9$boXO&DmWLFK7Bf{1v)CysX!NQ*#=g`o#c6=p&?=aJpmZ{H=Rh-lKv-FZAb|%Y
zpC>remL*dWN?h8~1cygcXn&1mVw!9Uke^UnEx92NVerRH-<60A0S}3Y6h(xPS@^L#
z8CGSv1-G5`1FM2(2v0YB?FuZ4y%`LeSPok;KGOpVo|0Mn9Y5Hj9?|UNk8JhM{OED1
zlivV;yI1f>Lhz4*D?d6?2Vu%KE8)Q0*mEdSk6{b{Bs_et#}<wiX5C)cu4M@-mYhU>
zF4STx&S~c*E)h>|GBB5o*YeO1<*qfuIL$CJaJm^){M@ye?OM@Bt?$xVOy#SYs~-^O
zIQBH=IJ7hDAgGPxWyOs|3Pa{#vH7ie*C~=gvw2uLtUqT575C)0TTU6Ad3Aw%hsT*)
zT1Jz{wllPoQbT)OA1uxL?+ZXZ9(s8~q@KtMxEuP1B^+v9gd-6F53ZJwI(QN$MNf{@
zQ<%QXAfF?yF&?6y+NUpO8<VtGJCo3tfTWNd^|bNrAmT3Chk80EF_6lLa~hn@0Q)=>
zcm}l3DYtfgt7k$*&x+KuAp)5VJXvM~NHL{SQqO4>VI0RZ>ba2LjgfjD%Wnid+;!vD
zGxZKl_59HVLi;9tN!*iq0Soe`zEn~+^QvBGA7?Z&tX^a<!@PIH1O~U^@eJsha~Snv
z@cEKRy_89vUlm(PIwIa2sh2TKH=3Wn->6{C;*Y4811Oy!%k=FP?Hq1X>Ts__|ML;N
z3f;dtQm+AOn~~it5vn;cQgpr2bU}rfYG%}HA>7wR>h)+MnnC|#$RsRl08(#YxxBFr
zEn_JuZ))iybX_YbxEQfA>dolmEs=U_+y`*I4KgkYgnIipCIub+ZLI2bY*p`Q$;UCu
zf`dUbquvR;?~2sBS&|O~mW^?2%*LTJTMwNGn;W$(kL4bjSW?Dw`+1X&;%t4M&GA*e
zhgp7aE6ct1TbQi($-L(Mk@^6O`aKZ!yOM>C=<S284fCV-;f5cA&W<ptABNID5~+`-
zl)PV*&gr1;x~$a4V67~!k4NegEUvRfTrFcuGUg;hOoPZ8<dZhau!ug{%4s5^Pl<>=
z9jVW7e`o#Y{i)AF%pY$Q^XFPS&yQ|qF@GLnJ`!Di0kZvKq`t(m<?cV7%GQQJE%B2%
zLswsxTJ~{XPu~)$ub`cH)x7oeSLczfzGfdS>*=rCOJzOXpE}hy;`Q`5BlRs7;qC2{
zd>gdg(zvw#&b&U7rF9+icOjnJL-#$f{ryP&fZ1l$-xS6~p+Ah&kC>Y8K%q&(1?y+b
zP;1D(V=^p@Xam0Hx$JPp6mmY;;*beErtzjTDdS?CW=>YloC(hG%C-(|rameVIZe_k
zf)kUIl7ZM_YW;`VH0tLGImcv#Idp7d8R0uvI`aymzvxu^=cfCdj+A9X!ikC4BD)P(
zTJY>A6{$G&kK2j#)KpnN;n~l1ce_y3PocV>Me66Qqr0CR$nb}72Trcu8mV6}QO80?
zhgBVilwY>W8Cck>e{~0D`)lz2n@If@-H6xS3bVC0ai$UtH=y6!u?+P)H2!_0{=hWe
z0c-<Tw?*oY+=6#0#kiP*KOL5XKZB4(0EHQ<zo5gvM(S@VwYN1=yP2u2=Y?+9PSxLm
z=pT{#C)4r&Xcu#VXq5)6e?{uwDKU)!i#jkw&tr)epu}FsVT%^>>k^4vLy0rcB58nR
zAT7pQM4j@j$?osyPTu{!fOmgs3AgRF|J4w=XsN)qZkg4QcX6ZP7F^vZzTp66@Q7%c
zAkoTk2W6(B9>Qq3fb_&5;~#*ecUvXi3BlHa>{GJ1+hh=JNho6rLQ)SL-6RJ%m+Xr(
z196Ve&>9%!6eEUKhxfqZwN_5s<4F>nbKhxx!`ffMZU|G-&{pz~+zQ5PxU<)!iHu|t
zBgqJkRjCj;R?!M!u2qQJQVp#XfZ_4A?YXB_sE0IH;}Ovs0oD!&Z1<K~q_LmVT4{1r
z(&Vr?MOr5i%_PRC;OulX>Y?U#$wgX^I#72E9uXZYh{WT|+<BuL-N<fq57rwU7jv>f
zI5|G%Wc;2^bzR}fa)wS2@=r|2Z&;IzjL=CaZ8lF$Ae(icAKj6fXD>Gz9`AzslI76|
zZA2NAeli{rZ4wOHJP44*govXzuSZ<07|3u7vaHF_DS$(Cx{u)6oZwoE$h=9bOe5?{
z<}F{Dtsl$alwW3(mdj(O0K4Hxsqh9u;)BUPLN?oQxT7(_e}B$mwqU#5a2=p!f39HP
z6WiapTxLMCh&=M)@F8X~nPg&;L?&%8H;}D)evl<gcDb^9E+3P>u*%!G*iQ|8M(AS?
z4NqU&%#jBxF^kXE@Ue_sTD3WIp0&?%y&9j{K?6QE!y5@;OZG5~KudB2gG1YM1Nb*M
zvSVOiAfLG`#6~eky`+&$`F371ws-d>7iD+mGFJ_5&5wEe@<RgyJG6n*M}~$+w(gkF
zHePW4UM;U(xOeZR`N7=aMh*4aw!y)H?QL5Or!9P_4hM2f$H?P+iIpq){#o0%ZEZp{
zxP55o&LeWYDKA%ppypGvb=&rBcbb?owq>woQ}&yY3=VAFdZ)42mSI9uZHO7#cIWvK
z!L(4a{j|Z%8Kr>SZ0SrGZ=-d#v&cN*08?&o=rl-ocrbU`@Q`e8%{i~$GtZ5v501m5
z%@%eby?cMf9r3XYu&5sedRGm*y<%4PWw_?FQGRqJ_4ZS_9%IqH{&%nc-RpnN{zqB3
z2L`?z9uej7n@rNnJbcYfYX_u$Fs>ipg`x98-a~>(8Jb@r3y1KqvCVT^+nbU2jYC`5
z!%nupeXZh5*#TC~-ZbyLHB3QAXb4#6;((l}p{>$W>mWXwy7e}0G<<|9ISoi5jMMRm
zXuFW0m1FYCEP+@a$ZFCK0U3@#WIdQpkvX49BT~^qewxyx`=OpQ9(0D_xqpmj`~t`|
z85aX8;_Ryx<m17q;`pWX%wzN1pmAo9#g3z!E7zvzOzxt$%!D?iwdgGAs)e#qK72%H
zGca}(i1+j&I#*z|vY-N2JNY|JV8^A+fw#BJ95Jr*_&Iz;Svnsmp`Hie5zz(sO>LFQ
zjc4Y_^yAPX{wM2Bx=?_3%>k$9DCPJGJy0qd#6hDdvDeG$^CEujlGW#>soh;H4S4lA
zhPQ|=k?(koei5G}rc1e1Z<#x8TzXz6fDJt*d9ym^-P~YU7W*-xJtzRXd+~@!m*!eI
z!Ooq>)`<K!T`nM3#2{>qjlF-F4U!Y#efHt<;rY?sDSuZAAhNmiAVGRnjC6cx&NTTT
zUCxyAQ0cr6Zl0fUrX4<?i@it8IpVn`Js8bF4ilIN<6}(DgkWtEM%_Oi!tm@L1-wLb
zwSa5o1RGP<Xw!yNw_pQPu)`t)vrU)q5|Jse2`W%x@ps*(rGr+RW-1uhBtM7msw}3^
z8v3;Hh{(ZjYQ9WallgK!oyr0^9Yac}OM=79%uJ4^vD}!#BWIamuIA=v^0hQV#7hTg
zA)A~y$|7so7$)-M0&5$^RHU;OQPvex<z}oH4=)kb1Y9d8*qGo(#VDz6!8W>wg-Hy|
zit+IhQ6R7hDkvu8@48~7gI2{b6^v^iKjYEh$cbnMNTIL&ctkXd-&9{ra65fnBaqj|
zkmH3r^q3;yGzLy1#=ext>5%Gl`hg_g+%d8IVY1QmQ1sPCi;<AfBKNu$uj6K{#fRY~
zqU!}*D<{~PjYcgVkm?p}qkCEM4`*Q3;v?`9(IW*mK?N<|z~6N(N(Zf4WGWcfqxd=e
zUlH7+(G_%i5RZrs;WyPSv(Zksj}gen#*pJX=5))x=(*vng`miXAlNH;b-F!2ur-h0
zIbTfFOpgPSHcETE;BFCfU1?9?W~{U);w7Rd3Ak2HurYm&N_(<Yw_qF9S<p{mU{=~w
z@e<L~1U5khr9GX$>q?UjT9w9BFs^6tbND}#$TNWh+ISWo5j`8fsWzCtcG`H3Kt4By
z9M8{b!*?oPl@ED4K6Y7n{=|ub{Kdv>erPCfTE$TA2juBSv~8n==LyOdvDKCEd~U`{
zcmZA_x=Fyba)OP?YE;4trMd;%=;bW97cnp^;l+4~=p_Q1pn?)!%HMS*NC&M-U@92b
z&HNm`OM-YAnnLz3$0MRw;5U^$lhq{qIG>MSgEv9+WdRvgpL5R0E4>onV|q{ho)Qj2
z`1C5l`fB{@T_})qO7t2jd@UEQ@@FeW&n={_e0m*<C+PKDxq9BcC&BjyseL2Y9@W&e
zAOLR?fHyNhcgev`FKo8?^cE?7D}H&Jqc2adT=7*MdK-#y$*Rsv{eBj`U7EcEzf64%
z7frzDI|aPUG5I1H1@ta_<1$uHBe6ccTbjOyoA#u1#1y_4Wf8rPYgS>KLQdxv;xi&X
zy<eJrfGfMwTpE24pA9D!CUG4C_ZiF#a(p<uo1qV(-lGrWH=>U)tiC3dXMwLRflEwF
zKZ+XAxt4F}kcnGqHQ>M*BFFOSW2hU`m(yek4RAv(B$qypGJQk38sTHgImZenCC2f&
zt~`B$A-W;Ak|npJK8f#xxa4NlnA7-xl24x!+$(tRvsU2cATokJeOgL;0*`x4N&E~W
z>_k1y(r5X-C%qtqhB#aCIWAjhRq6Bm(vAEkjxOVT3w;6KOuy);;BxAbzKAkh!deba
zaTl*DmOx(;KwLO+aePF;zRX~qdQU=MeB+C5VL1ErG5vVSm=+)>k27h7_!D<UOc$?T
z0hqpu8Sv52M*l8nsJ_a@of2&5Ym7->WmSq6Tg)uZ;@FlI(AQCZNIwDBWolt?IQ-vW
zL`#@7B-*~oA3c0~tr}Je``PX2TPTB4SDLsQQ>a_8Pv1s4oDnxA_<VQ*{GAwh#SE@i
zF)zSt85R1jz^-Gp@v%WxegP+7zzWR$d#FUR&8lTj8Q5mh_xW=*&Whr?BAhGq6Dj_H
zQFrP~a7=yDnW7&GO3`^KDC~2PW%Y=DB&F+0u4haatcu~d1zf)1TN^OJAEWZ1egasn
z)T6<i85QEx-%kK^NMB@C_t8%US<HCNw?Y$KR$Tg-6tA-OBav+t>X*Oh=Tg3grH8Y_
za)U0B%B_NPS$ydbXNs!R^a}xA!S2vt$iI}*l}#F>U!hp<41>w+4*E5}XA)HGM8AnK
zIn_ob({CB9Tbg8ji0gO!y|RD<0(=bswk|^ay|nE{ph2z^m!0Sj48|U36bmzs8Q63i
zN=Cc%74wah{>Xq``kw4Ldv@;HMStSYrOEwL`ZK=lll7H2#T?)|AiE^essa54<p=fd
zDGMRdV0HZ!1!MXOF|9d4{!L1k`xV5#_?VYZe@EFNeK}iDJ$(EFW%@}ClktXgqNcSk
z4`AHZ{3k<U5WwYz{RJB-BA3%d^e--6?Bd!N{hMEppD(~BFYH*@(NPxfSiwQKFekAE
zsL>ZXCN1Qb6>x_}%`ZaXA$>#a`PlN1$OOp-b|Ja>Ns9pjKT1?0{^3(63McfV#aVFt
z!y+DJ;KFi;gO;H7puP<ETkAzjQN%-ph_W8myBK#^)Yml+WbwGt&5b(bt|?{kj(unR
z_Sx&O8GD?4qrE;};~#@Vea9lFakPC)sIQrK@i-oBmrL6o{Nl920585*2p-HzWImDJ
ox5eF3+#|)AOT9ZCJ$zaT&<R?FUzv&E-Yc!f2X<}o8y0i_2SJ=$d;kCd

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runscript.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runscript.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..796487910e19766b7a0aff8f8f44ac8fb2c1de9f
GIT binary patch
literal 12976
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

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runserver_plus.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/runserver_plus.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..b03235e946d5ec900b4651ba6ef455eac0cbad81
GIT binary patch
literal 21903
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
WZpNo9V&Seyx&=S5+X|mJEB<%Kc>b^e

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/shell_plus.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/shell_plus.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..248b35433d5c8d6cf549b16e6f2f431639a72070
GIT binary patch
literal 15910
zcmeHO33wdEv9^tENoz|!zy^Ym2OE$K(h46S5IEoqENsh;<pFUhtJ&RI&8%m4wtHqR
zD`W^xAlT$05R#CD5OR{6+~gz|xyem#a*~tW<R-`at9p8OwOaY{F!5);@9~*kZFhBb
z)nC=s)z>vMGFd-U4qY!u7X7RpB<N?sE`|v)eZ@X8BN9h-nk_}EV29%+I}kG?F{^VZ
zF>Ttkz_C3qRr1P#m_0BwA0=*SJaqh`QS?JQ?fbh$)Bd4WlxO^6&K)gFD|G#$XdW0k
zo`{Q~Ev-!G?y-%y9diss%fQe=5Lnr)OARc~a0?}0hJi>7l+6V}IUR&<2$}t2Dr@Hg
zF((pp&9;&y13Oi)gTNYvpsmBA&1}n*rGzr6z%R>;E#?iFiL9ORV^QW0m<z3P=;wSt
zB%xD5Xvt74*fQO0B9+~2AQndA=uT(0nPBO<S>I!vCUbtQZFfc6MNYHXI#JifPK$Yb
zji%j7)9zT)W1R#9sOZ_P^*pX@HfJ2y%R+W>{IGaZy^#VN!1=|5H~}_V5{VOGBWaDr
zTDF_h%-Mhgii@Sr40Co|ZVasju03X8%b+I^GHnGx&kpJ5!7b>?=B?tW-)-*=?P37t
zDDg9(tC%?{gHW7gHigzGfg_fgO|cwextXxSP`c@I2<T6a#3`L-bGBR}x<H&dY&K;)
zbcVk>hRx=*mDw%HaGk^EQH1e|VR4#sjAhPJ^rsJtE@!q?HfMTn(H7lXW`J4jmLloQ
zZ~#e9XFVqH3C~W5Gl0m-NUZ8~+UwnPwX@V&;uy|J&N6crlZ!PDggvv<Id$0S7<M{`
zofX5*>BD6QeL8VZXVrJK3lJqlZ$0<3uiGcii9{bdcBrS7<+N2!*Ei0&wwFzLZU7eN
zLe%pju@)`NX*IGXszl<+B;fgt1e~b_yr5wp39%0B*GFQ5W`CYmo!N_x#Cg*}IbS#l
zWF;AyDIqQb|ILx;C#0L<SiyMFF9mKOE+)=fCUaiutS8fLb$Tb#Zv%1zk=RbiT?`yH
z138!|hJk%;$5cqB{p@%`JO!fcjKm;`axO&K$i8f_?;2xn=omE2J>SZ@#Zkl08KGkv
zR;d&iSu3<K4s4@<=;sBA1j)W@O4-eNtTD{2QE8Q&gt!DkTpEcX65^ag5kg!B5O&7a
zYN_-fE+^Tpm@HfOmYIa>mB97T`W=QLo*Ic18G>ZElwG*S7KFAKDW`3&a47m%kw}BS
z)`6YnBxq)Wpd#xWYhh>!+i9_Ad^KzL&2>67W=A985OOp(^w-P{JJg&qNMR@tE~K&)
zG7gX3{DfZOv0LH28;~5Fp$C-<ktmYN#C%j~Mz-`LQ6h;pL!w=dEp5XMjG$bixyZ=*
z5>6y-+sL}P94d>U!80UzS53s9IJYH*s8N9JDH|z}(BK46;BoCggudlS>>+(g7Qd?R
zSS0q6zAa<{1$$qg7_S%jX^jM)s|CI)9^9INcse?aB5^fwrYNB+z;=xLt{+jJONoJ(
zN_&20cS1Y^mbfMo`>6dgv_IKM_7tol=J;f3T#ax}LX7V2ct)-YY_?8dCZ0)t`7F$p
zdkbD)P_mE_Tx&L$q>UMIk1ejF=#M!-O$KTjXw!;48;U);{>AlBd4D7hKx7^k*HkgS
zArjBg7_YBj{M@R@4m-v38ezOZi}L&!W6eOk03F^Ki5F^&bp_bop!y~hZ;Hgtj{?QC
z%28@WV%T2P>0IkHLg;8M)-C@#LNRagVhH?_NW4@dbW;_fTO;u@tw#l*m)A(c0KK9S
zK#R2`w?UF7_)6Sfyb|5r9*I{G-<onTy|oI@9g%o75f}$|vXW=H#Ts!KoYzbR&T(3#
z*FvO6!&$rzvc5hNZ_v=(QHAEtNW76G?1O{|NCuK$tL%ja{MYw5A2xiMwI$+IpAkdd
zWyGVRD~?1-@unK-8O%2~0`mkd`CB0QA@=xI==8QoydA<j)cc)Po$iXnJ4mNAbh^wh
z8yTx;SYF^8fsKF)B_|}*hF_w**BIQqY3tV1j;-dP5&DL`x8%7Qq<@G9B|GEh#*Hz@
z%{ay$B)UXC4#s0vF-(eg*6aSRM!KJ<b$>T>KTMLn2N=CK67M67NXomao_Tj9-mmSx
z+*s$0S>u6GM$Qt)Ql5;ed3vG-owdfY*#66EG-sdvz*IhalGgr%vE?6opW;K%>cf%v
z2*l@5csFZ>^nr7Sdm`~sT@xqfDtGwU1gnUTJBvAY_=MBUxkHDR@RKTcxHl4?B7kVI
zxnaU$^V87!p4xojGZQ$+`9g)?XQA<ACZB^6pO3^B(1k+`@2$G;eUbPg^?Wya9`vzD
zcCp~;ijzqrC;b9BpEUe2xHaXQRxxY%@M~$5Y`^5$9Vnu5$HF=|<9nXVDJn07x)Mk-
z$af1CJR1H>&YtlLXcpS!?7Q8Pp_5t~H>DETsYEtuY^IC_i$EiQTo@x3wF@Xcar`mj
zl=U&dEDVY-)qunS;meIcTA@Mz3P5^7>-$yM^J|g#I@yzSzprY~`y=rUvghTn=KyvD
z`V0hGj5I`}5K9Lb3xN7XfRFK)MWPqDS=3h6$ZX#+*Yju-#ITSVW<uowc5#m@{UU9x
zB*i!D5&u>r#Je=&-v;9UWr@B6Ouie5?-3>>-Tev^${QYt#P<o4TY$-OW2a5NsTNRJ
zQx&kOlVK+W9B{p|XB*q%Js7~F=t?C6+1w~O9er0eX_7UeDz$C<#!XvO>$di<8{9N#
ztTnFcAli;T{Gl1*2NzZtbVOZIBB}wCBij$Aifm_SKz|58k63lYk6?=*N8%>{orC5B
zRa-n5iJy`!u3=kj^br#%05HrQ0W#;HgTg=;`ys~%nnO7x7#$@y6PA%IbkrI~p<HW-
zjoSxyrM7Ngw-H9TB4*m9fKOIf3{QsrXH&s`mWKW3fc;32T>JtE|1uK4(g;6TjQ|ft
z;@5=mN+3KTAwl3xV>?QLnX)_=y9O$rXJLjEnIS2DQ{#&qN`KpEV4tf2`5gdxY#sd`
z8vG#=e}t$Gb^1_MgNGyWC(?k{jr}1lT1$QqxM_?`3_y3Z=+ndy?}t=IZGfD~E+VYa
z4oPK!)n$0@ZX3(MKi4bvmqv=M)r$QUie2>h^)LPgb^jiTe~?~}BVQ=>aCLA!5{Z9O
z2kRmDL6(_h?rt7+7-=i9?wnAtDygF2${N5pD*bD!;c>nO?cV_H@#$Oq=em7z+VpAD
zA~_wOP>KV|BNZo+Gr007RXKDUG~VDBVD>C+xf-<Rgk%QkvkD}7_KO4h#GE|m!n0^z
zEZB0?&UPW;;H(9yd?K)Nl&JtH8;OrXCa7^k&X81^U+tatR{WyfP017-l9u{%CM2yv
zl*X2v#nMmSx?L9oDrZxp-Y0-|O%N0oYsOb3TUf33yiz$&ma5t<!6b7O$<U1rhZrpl
zM)cZ%vKTsy8A;KkFkx#-EsymsDXo|iXbO`XV|Lm|OMeXeB8C+hZpiBmEG%hbE{A;+
z@FLg1QVj(~<N(NCIScCRtGCizmUXg~Hfk%iGC}Xq;whDpZ6E<Y^Y9hP`Apw_5PD~6
zo^YDHXN*$^+N#Ug3Aq3SEB48S%<|}%<<StK0di(DFR}O7S$Pa7w@i;az$SG|g{54C
zDss!k#LS#YX%Zic)my@xjW%WJ%40z|bOE|_!m!lW(-W`MlD-_(e<QYJdb0MOo|-Mi
z9w#h#NH5u}N%|p=qps^WuZ|y<$5VN4Ln-8wPzOv;z*i)f;4_XAd4fbaT<=g0(j6YZ
zktZs7+F72ZN}j{mf5m5Laf-B88Z5|3u^`I<#6ji+ZH^k}r=TyFar4F-XBX)KupC6N
z(xdD`o(ysr?i74Q@>K4C!+V}2u11OuuJ2U!L)SxoEM*LRGNL1ToU+rhwC*T`Lpr4i
zJlFAJ2k8T1b)v=>)u6|!bJX+GIH~1zD{ZW*O&p5k_3odPD<D%1P#nuoV>u^BiGB^z
z>C~wAh|;4ABEb;d_=;qb6==^Z<?@7n)fPQWa)u%qvhlr6154=^QZ(ccwvon6X=KU)
zmQ@wlD(A8Bo)&2N)Z7YTlJq!^v(+Xb+Lmy{O6<r+BO~2(lxwI{-Bg83kW{%HuS2!h
zR;x!w5|$k03jj1r)6A?VkfdSs=Xhc-+UOd!)SnhtZOrl1PK{!tCv@X3oe>y5HsvHO
znu$ycuUjL(;O&xnFXgN>K`llQo-f<AdHX<W-Oh{5ZJP#m4UUZH<vB#W5FQurbxfX$
zR<Z#mJK0w4WUH8<cW4Bo<-ctqxf-3peb(SBl4o+y?T4jjggSD_$<t$eT9S}wp&B8u
zmqj}}7VR8>@|fL<g5f#Ls2+YL3=S}5AL=p0&qP0u$$90uU;sqV!&fBNa&Ia!k|G$5
zn6H~+9p#g`2;JR|?v8M$m*+!RD0Tt9BDoHqv`l#d2ww5DeC$!{S%VF+28-CE8VqRi
zmW@m_wYO|SJ<PWNJSK6F7ork?U4*YlZe~u(6G#B|gnY#Tjs=G)B8co)d@g1_TNIz6
zgEXipth0!%+;Uso^5#au(l$%Nz<(X=^&Qx2`9DVOj;^})h4GTQ)`Lr3Do?D2_$qPM
zPM1gVbGT+Q=B#Ca#ciCm4C+|99YnzY2vte$fOznLr{F7+J6R#+0c4Tt%sj~TyHq`|
z6nFWR36^(BIQ_x2+J$qrf?Y^sNrbu2#-$QEX)9*DvYyQ9FHm*p`7NQXfT=0IU4@f6
zY~|wwo7Ps9EQ@CE3@)P3LW>vC>g1r(Dk)7!T4OHGoi1VN>qkoWmdmuME~Q3l9eiYK
zHv~apw9D`n$;(--_PkO#PnN3M?FuHjQjt_P$B|T6>e#S8>ojt<MVp^UwCteR5h8El
zn}OJzz?DT91LowUsj``av_hpN$$Gqpx!1{fU#anaDiib$ZNPA+4CoNWk}2>5EF<`e
zq{YnJA1~&JScGLctwVI0d&$JT%!3Lv>DRzQ!8yy-^$;jlG?i0|3y+(F)-`Qq4#iMp
z6km~an1>pa)M;H<rpqGQ0@76t^W1Q^YRK0~G(|-X1m5}^CAic%YKIBwp&hcC0y8Pb
zOoq@+GHIlcSE`#vI%OT{GY)lKZYC<b16k>#L)tme=aJ@YC6_Frf-n^%QJyvh^6`3J
zN~&69)m}=G0hKlJIcO?&IKGfYC#o_;WhBe^)O&ul=c;lKSJaqIjuE%x=yX-?r9TtQ
zIIBH*oEzYNmV6riisV)NyPYrSuB%*JHTu;BUHNoku{2Lo)Ev6Xh+EZk8=t#Yy1AMf
z^iIX~8K{NVT!XJj?qgo<`M4_*s~Q!a$t2HGBttZ8`msk9%gNi0ENHw)Qd{{!Woe=>
z52*859Htc1RwcKg#aX;uNhWsjp&%cw@`VGJm&Y~N5>h*MZc6oU+p&G;u0h^Ht)9uJ
zc5ENqrR$P(zDVcy*gK_Vpt=EUXA@}~g;+%w$K&JT_-?S#8I*Ce0lRMqSXv;hh@x4+
z9a6Q2OSu#I;z*K8z%~(UsVtW?*5kK2g$~?;>sivkea_I@n=}S-Xb`W<^f4%1y`pX3
zK6x!Lo@jBNlCEPDOtyGVJJz$QUGM*!=rEY*dO(fgvmalPJivx&&&PJ70i%WwZF$|m
zB+pSKLw6xE*1BztN3S(HIpgf?Q2R$oT*{A+J&?Y3cJOWQm6XZm%0<4azN%xz3YDc!
zZnLVEaCOI&bgPN(G+jTb>opyT6%$>NliBC8I*pUrf_BH}fe7ySL{wQmAF{)~FThtM
zZ)9!Nq)O(j#>N+N{Y|QVD1vb*^jK+Z$mkstW6Upm*a&nbt}P%l3Z+#H;GukQNC72>
z3o8B?h0l_jEIC<Km#tLWG%>UBqJ(y*IEL}I4Q06Msz4ma`sB@!WTLq^a=eHIoE$kq
zZK_+SUGEW~z>6UWaDNHDBKcAlyFDLkMPOIQ)vZkOGDX6NHhk_iY3#(|-%!J+%cu;V
zL__*jnqJebZcMjY)18)3=*I_f)ls`<q9J(Pyqv{tJZ{FdF<t>87=zBC8j845cYXL(
zlD9!N*yok_isbFAjT#qZj_SC071!UP>W9u#<ASdIj2F_rhhuTN%>%c#_E?w}=@cE4
zZ{XuvVLS=*xtGCDhk~ShH5g4qlim6?%zv_5U#*dREw$@C^!{H5KG6F0_=@BkxYzc4
zEEK8AiX%zJKZ}lq%{e^ERSF{S1jT^aT6qwK{56noWL|H=Cmn?4c#mJcnG4^7&xUWm
zhUHsP#b-%YV9r-yrZnF`z74g*^6mIE7f^7}H7V}#F0OqC)gDvVR1v(B3Eo8nEx7r~
zFUtb?ZZ3TfJ_%KGu73SRXWH_;D8_rQinf(YMDl&y>~4ILessMbTh#Ao@@6-y9)-yd
z;5Xidwblw7$PaSU4^h)rEr*iu!zhd7N2q4LTT~%6r853N-owp4N|ntzr;;DT&zc7}
z7*9BDEoKv!SY8<q^W?`-@5@i%Gm@VqT619qHF{D7Eq4d<UerL&qY=V!85j@b=;R$o
zo~|9pPoZwWoGWvg6uo&#m8B;?jWY9uc%>8i@c5)_hdDlkq_f2y`5B^U0d5(aUv7OC
zzxU(4on0bL)p=?lKgYb=0=xn%rEph<4j2OYc`j`Yed<w*_yuA(3-xkb-ba78dU$$P
z#yLM4;{Ng%sceQ_lwYDhT5v99V{{ct^2_*5^0SRnp1sHR<X2FJ2V!%fDV_z=QM6x_
zUuD9CgX8I#>}y0e%WRG1Q?JqF*NM(qGhi-(#eJCqPCnhgOsSs^-G{)R_k+xwPYPf*
z4Djj$m%uZ&{00@z;$1ZPP2yzEr~M)Fm~mXSbZk46-$MBT^F+TKmdfE&{J%|%W|L@{
zP=1Ggw9?DEV!4poO9NAW7iBQ&yllBpN>w~Kkl#Z&hAR$<-D1v<i62nJZDW=!k}lwD
zTLt-jrd>p4qtu;@pTZIcs=(cUfJ(fCuuI*ioUtY=e@H(U*n3^PoW$TN2Qi92BG$9a
z+3Es_{4uj+n`gq*9v2tTd?|mzrHeASBC|VX7Z5d5Sc2gM9d`@lgQ(nZo(NS7m1t0P
zqZB{NkUs^{0rMzanUp_cW=io=V3)Jd5(nNt=i>Re`R&7x`9Km6MFaT@E?-FKAtmKE
zelaS)WS(=>Q%F3(EAE!RV&XO$4mFPa5SPxYvzYufip^Q&FxP#y{0;q`h*{Af`mN&R
z7Hf?xe@A33+@w2jN9FJ7_q<fr4QLvHuhX+w`3G*>f<S|ZC^>hp{3DUkh_lkEF*l1>
zMh~N8OS9QF(Mjc>h_Kll>|Qsxp}$}LnSM6KPhI6-@XI;LoQIu{5c`KTBylbq%D<v~
zzu7WsBP3d6uD_vRz-(jJssj0UE}a_`@E|rN%GksT<Ude$z?@4SR0$uCpv+tvhmWzb
zF{}*f4KRlfy0-x0phy0bs4xl8f->c}qmGCFL-{W%p6U6;QTcEBbIC*i>qg;!K$7Rt
z(MCZyRYh#t3^bnMX61DHqYcBM*77q@c)&bCjeOg~CN3fqkPV$w{3=x*1rm&-*d#nY
z0yz_f!{%ZhEV$@vOMY>T>#s0gR?b50esd09-C|U$qS+{-DT1M_g!LxkT~3>e>L)VJ
z7-Tawn#S*7Wefg}WCEX^&arsswkThK&dy?N86BrKRgQ6%l+A?`o<OVVcn&w6i%(}6
zCO>Q^wK5xI9DFZCKLW<%S3GpZ+a|L`Pac761L?4whfltnf+x9hK7K@U0Y1y=<o^Ko
CFPjDc

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sqlcreate.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sqlcreate.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..f4c3df0b2f1330f9803eb89b899363ec7480839c
GIT binary patch
literal 8377
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
DFb3{z

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sqldiff.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sqldiff.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..953b6dac9dfc68815c7598cedea8dae6d0a6b6d6
GIT binary patch
literal 7367
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
Qd5%^EJjBYu|0qBBFTORzegFUf

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sync_s3.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/sync_s3.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..80ce0eacc8f4d2c5433b34d995cf208d9e46ccd8
GIT binary patch
literal 10721
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
DViDqK

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/validate_templates.doctree b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/doctrees/validate_templates.doctree
new file mode 100644
index 0000000000000000000000000000000000000000..3bc65cdb6e6503b3dc3dcf0ae9a3e8ff14337541
GIT binary patch
literal 7497
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

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/.buildinfo b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/.buildinfo
new file mode 100644
index 0000000..6014860
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/.buildinfo
@@ -0,0 +1,4 @@
+# Sphinx build info version 1
+# This file hashes the configuration used when building these files. When it is not found, a full rebuild will be done.
+config: 6df91c5f3729816803eed093fe3f80db
+tags: 645f666f9bcd5a90fca523b33c5a78b7
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/admin_extensions.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/admin_extensions.txt
new file mode 100644
index 0000000..599558f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/admin_extensions.txt
@@ -0,0 +1,53 @@
+Current Admin Extensions
+========================
+
+:synopsis: Current Field Extensions
+
+
+* *ForeignKeyAutocompleteAdmin* - ForeignKeyAutocompleteAdmin will enable the
+  admin app to show ForeignKey fields with an search input field. The search
+  field is rendered by the ForeignKeySearchInput form widget and uses jQuery
+  to do configureable autocompletion.
+
+
+Example Usage
+-------------
+
+To enable the Admin Autocomplete you can follow this code example
+in your admin.py file:
+
+::
+
+    from django.contrib import admin
+    from foo.models import Permission
+    from django_extensions.admin import ForeignKeyAutocompleteAdmin
+
+
+    class PermissionAdmin(ForeignKeyAutocompleteAdmin):
+        # User is your FK attribute in your model
+        # first_name and email are attributes to search for in the FK model
+        related_search_fields = {
+           'user': ('first_name', 'email'),
+        }
+
+        fields = ('user', 'avatar', 'is_active')
+
+        ...
+
+    admin.site.register(Permission, PermissionAdmin)
+
+
+If you are using django-reversion you should follow this code example:
+
+::
+
+    from django.contrib import admin
+    from foo.models import MyVersionModel
+    from reversion.admin import VersionAdmin
+    from django_extensions.admin import ForeignKeyAutocompleteAdmin
+
+
+    class MyVersionModelAdmin(VersionAdmin, ForeignKeyAutocompleteAdmin):
+        ...
+
+    admin.site.register(MyVersionModel, MyVersionModelAdmin)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/command_extension_ideas.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/command_extension_ideas.txt
new file mode 100644
index 0000000..c33742b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/command_extension_ideas.txt
@@ -0,0 +1,7 @@
+Ideas for New Command Extensions
+================================
+
+:synopsis: Here are some ideas for some future command extensions.
+
+* create form/manager for App
+* CSS and JS concatenation and minification scripts
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/command_extensions.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/command_extensions.txt
new file mode 100644
index 0000000..5087559
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/command_extensions.txt
@@ -0,0 +1,104 @@
+Current Command Extensions
+==========================
+
+:synopsis: Current Command Extensions
+
+* :doc:`shell_plus` - An enhanced version of the Django shell.  It will autoload
+  all your models making it easy to work with the ORM right away.
+
+* *admin_generator* - Generate automatic Django Admin classes by providing an app name. Outputs
+  source code at STDOUT.
+
+* `create_app`_ - Creates an application directory structure for the specified
+  app name.  This command allows you to specify the --template option where you
+  can indicate a template directory structure to use as your default.
+
+* *create_command* - Creates a command extension directory structure within the
+  specified application.  This makes it easy to get started with adding a
+  command extension to your application.
+
+* *create_template_tags* - Creates a template tag directory structure within the
+  specified application.
+
+* *create_jobs* - Creates a Django jobs command directory structure for the
+  given app name in the current directory.  This is part of the impressive jobs
+  system.
+
+* *create_superuser* - Makes it easy to create a superuser for the
+  django.contrib.auth.
+
+* *clear_cache* - Clear django cache, useful when testing or deploying.
+
+* *describe_form* - Used to display a form definition for a model. Copy and
+  paste the contents into your forms.py and you're ready to go.
+
+* :doc:`dumpscript <dumpscript>` - Generates a Python script that will
+  repopulate the database using objects. The advantage of this approach is that
+  it is easy to understand, and more flexible than directly populating the
+  database, or using XML.
+
+* `export_emails`_ - export the email addresses for your
+  users in one of many formats.  Currently supports Address, Google, Outlook,
+  LinkedIn, and VCard formats.
+
+* *generate_secret_key* - Creates a new secret key that you can put in your
+  settings.py module.
+
+* `graph_models`_ - Creates a GraphViz_ dot file.  You need
+  to send this output to a file yourself.  Great for graphing your models. Pass
+  multiple application names to combine all the models into a single dot file.
+
+* *mail_debug* - Starts a mail server which echos out the contents of the email
+  instead of sending it.
+
+* *passwd* - Makes it easy to reset a user's password.
+
+* `print_settings`_ - Similar to ``diffsettings`` but shows *selected*
+  active Django settings or *all* if no args passed.
+
+* *print_user_for_session* - Print the user information for the provided
+  session key. this is very helpful when trying to track down the person who
+  experienced a site crash.
+
+* *reset_db* - Resets a database (currently sqlite3, mysql, postgres). Uses "DROP DATABASE" and "CREATE DATABASE".
+
+* *runjob* - Run a single maintenance job.  Part of the jobs system.
+
+* *runjobs* - Runs scheduled maintenance jobs. Specify hourly, daily, weekly,
+  monthly.  Part of the jobs system.
+
+* :doc:`runprofileserver <runprofileserver>` - Starts *runserver* with hotshot/profiling tools enabled.
+  I haven't had a chance to check this one out, but it looks really cool.
+
+* `runscript`_ - Runs a script in the django context.
+
+* `runserver_plus`_ - The standard runserver stuff but with
+  the Werkzeug debugger baked in. Requires Werkzeug_. This one kicks ass.
+
+* *set_fake_passwords* -  Sets all user passwords to a common value (*password* by default). *DEBUG only*.
+
+* *show_urls* - Displays the url routes that are defined in your project. Very
+  crude at this point.
+
+* :doc:`sqldiff` - Prints the (approximated) difference between an app's models and
+  what is in the database.  This is very nice, but also very experimental at
+  the moment.  It can not catch everything but it's a great sanity check.
+
+* :doc:`sqlcreate` - Generates the SQL to create your database for you, as specified
+  in settings.py.
+
+* `sync_s3`_ - Copies files found in settings.MEDIA_ROOT to S3.
+  Optionally can also gzip CSS and Javascript files and set the
+  Content-Encoding header, and also set a far future expires header for browser
+  caching.
+
+
+.. _`create_app`: create_app.html
+.. _`export_emails`: export_emails.html
+.. _`graph_models`: graph_models.html
+.. _`print_settings`: print_settings.html
+.. _`runscript`: runscript.html
+.. _`runserver_plus`: runserver_plus.html
+.. _`sync_s3`: sync_s3.html
+.. _GraphViz: http://www.graphviz.org/
+.. _Werkzeug: http://werkzeug.pocoo.org/
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/create_app.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/create_app.txt
new file mode 100644
index 0000000..83fbff4
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/create_app.txt
@@ -0,0 +1,41 @@
+create_app
+==========
+
+:synopsis: Creates an application directory structure for the specified application name.
+
+This command allows you to specify the --template option where you can indicate
+a template directory structure to use as your default.
+
+The --diagram option generates the models.py and admin.py from a .dia file.
+
+
+Example Usage
+-------------
+
+All examples assume your current directory is the project directory and
+settings.py is under it.
+
+::
+
+  # Get command help
+  ./manage.py create_app --help
+
+::
+
+  # Generate models.py and admin.py from [APP_NAME].dia file. This file should
+  # be placed in the settings.py directory.
+  ./manage.py create_app -d APP_NAME
+
+
+Example generated from sample.dia
+---------------------------------
+
+::
+
+  ./manage.py create_app --diagram=sample.dia webdata
+
+-d switch or --diagram option use dia2django_ to generate models.py and is
+better documented in `django wiki`_.
+
+.. _dia2django: https://svn.devnull.li/main/pythonware/dia2django/trunk/doc/
+.. _`django wiki`: http://code.djangoproject.com/wiki/Dia2Django
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/dumpscript.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/dumpscript.txt
new file mode 100644
index 0000000..b1e1b1b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/dumpscript.txt
@@ -0,0 +1,99 @@
+dumpscript
+==========
+
+:synopsis: Generates a standalone Python script that will repopulate the database using objects.
+
+The `dumpscript` command generates a standalone Python script that will
+repopulate the database using objects. The advantage of this approach is that
+it is easy to understand, and more flexible than directly populating the
+database, or using XML.
+
+Why?
+----
+
+There are a few benefits to this:
+
+* less drama with model evolution: foreign keys handled naturally without IDs,
+  new and removed columns are ignored
+* edit script to create 1,000s of generated entries using for loops, generated
+  names, python modules etc.
+
+For example, an edited script can populate the database with test data::
+
+  for i in xrange(2000):
+      poll = Poll()
+      poll.question = "Question #%d" % i
+      poll.pub_date = date(2001,01,01) + timedelta(days=i)
+      poll.save()
+
+Real databases will probably be bigger and more complicated so it is useful
+to enter some values using the admin interface and then edit the generated
+scripts.
+
+
+Features
+--------
+
+* *ForeignKey* and *ManyToManyFields* (using python variables, not object IDs)
+* Self-referencing *ForeignKey* (and M2M) fields
+* Sub-classed models
+* *ContentType* fields and generic relationships (but see issue 43)
+* Recursive references
+* *AutoFields* are excluded
+* Parent models are only included when no other child model links to it
+* Individual models can be referenced
+
+
+What it can't do (yet!)
+-----------------------
+
+* Ideal handling of generic relationships (ie no *AutoField* references):
+  issue 43
+* Intermediate join tables: issue 48
+* GIS fields: issue 72
+
+
+How?
+----
+
+To dump the data from all the models in a given Django app (`appname`)::
+
+  $ ./manage.py dumpscript appname > scripts/testdata.py
+
+To dump the data from just a single model (`appname.ModelName`)::
+
+  $ ./manage.py dumpscript appname.ModelName > scripts/testdata.py
+
+To reset a given app, and reload with the saved data::
+
+  $ ./manage.py reset appname
+  $ ./manage.py runscript testdata
+
+Note: Runscript needs *scripts* to be a module, so create the directory and a
+*__init__.py* file.
+
+
+Caveats
+-------
+
+Naming conflicts
+~~~~~~~~~~~~~~~~
+
+Please take care that when naming the output files these filenames do not
+clash with other names in your import path. For instance, if the appname is
+the same as the script name, an importerror can occur because rather than importing 
+the application modules it tries to load the modules from the dumpscript file itself.
+
+Examples::
+
+  # Wrong
+  $ ./manage.py dumpscript appname > dumps/appname.py
+  
+  # Right
+  $ ./manage.py dumpscript appname > dumps/appname_all.py
+  
+  # Right
+  $ ./manage.py dumpscript appname.Somemodel > dumps/appname_somemodel.py
+
+
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/export_emails.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/export_emails.txt
new file mode 100644
index 0000000..80493aa
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/export_emails.txt
@@ -0,0 +1,81 @@
+export_emails
+=============
+
+:synopsis: export the email addresses for your users in one of many formats
+
+Most Django sites include a registered user base. There are times when you
+would like to import these e-mail addresses into other systems (generic mail
+program, GMail, google docs invites, give edit permissions, LinkedLn Group
+pre-approved listing). The export_emails command extension gives you this
+ability. The users exported can be filtered by Group name association.
+
+
+Example Usage
+-------------
+
+::
+
+  # Export all the addresses in the '"First Last" <my@addr.com>;' format.
+  $ ./manage.py export_emails > addresses.txt
+
+::
+
+  # Export users from the group 'Attendees' in the linked in pre-approve Group csv format.
+  $ ./manage.py export_emails -g Attendees -f linkedin pycon08.csv
+
+::
+
+  # Create a csv file importable by GMail or Google Docs
+  $ ./manage.py export_emails --format=google google.csv
+
+
+Supported Formats
+-----------------
+
+address
+^^^^^^^
+
+This is the default basic text format. Each entry is on its own line in the
+format::
+
+  "First Last" <user@host.com>;
+
+This can be used with all known mail programs (that I know about anyway).
+
+
+google
+^^^^^^
+
+A CSV (comma separated value) format which Google applications can import.
+This can be used to import directly into GMail, a GMail mailing group, Google
+Docs invite (to read), Google Docs grant edit permissions, Google Calendar
+invites, etc.
+
+Only two columns are supplied. One for the person's name and one for the email address.
+This is also nice for importing into spreadsheets.
+
+
+outlook
+^^^^^^^
+
+A CSV (comma separated value) format which Outlook can parse and import.
+Supplies all the columns that Outlook 'requires', but only the name and email
+address are supplied.
+
+
+linkedin
+^^^^^^^^
+
+A CSV (comma separated value) format which can be imported by `LinkedIn Groups`_
+to pre-approve a list of people for joining the group.
+
+This supplies 3 columns: first name, last name, and email address. This is the
+best generic csv file for importing into spreadsheets as well.
+
+
+vcard
+^^^^^
+
+A vCard format which Apple Address Book can parse and import.
+
+.. _`LinkedIn Groups`: http://www.linkedin.com/static?key=groups_info
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/field_extensions.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/field_extensions.txt
new file mode 100644
index 0000000..99be7ca
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/field_extensions.txt
@@ -0,0 +1,37 @@
+Field Extensions
+================
+
+:synopsis: Current Field Extensions
+
+
+Current Database Model Field Extensions
+---------------------------------------
+
+* *AutoSlugField* - AutoSlugfield will automatically create a unique slug
+  incrementing an appended number on the slug until it is unique. Inspired by
+  SmileyChris' Unique Slugify snippet.
+
+* *CreationDateTimeField* - DateTimeField that will automatically set its date
+  when the object is first saved to the database. Works in the same way as the
+  auto_now_add keyword.
+
+* *ModificationDateTimeField* - DateTimeField that will automatically set its
+  date when an object is saved to the database. Works in the same way as the
+  auto_now keyword.
+
+* *UUIDField* - UUIDField for Django, supports all uuid versions that are
+  natively supported by the uuid python module.
+
+  .. deprecated:: 1.4.7
+     Django 1.8 features a native UUIDField. Django-Extensions will support *UUIDField* until Django 1.7 becomes unsupported.
+
+* *PostgreSQLUUIDField* - UUIDField for Django, uses PostgreSQL uuid type.
+
+  .. deprecated:: 1.4.7
+     Django 1.8 features a native UUIDField. Django-Extensions will support *UUIDField* until Django 1.7 becomes unsupported.
+
+* *EncryptedCharField* - CharField which transparently encrypts its value as it goes in and out of the database.  Encryption is handled by `Keyczar <http://www.keyczar.org/>`_.  To use this field you must have Keyczar installed, have generated a primary encryption key, and have ``settings.ENCRYPTED_FIELD_KEYS_DIR`` set to the full path of your keys directory.
+
+* *EncryptedTextField* - CharField which transparently encrypts its value as it goes in and out of the database.  Encryption is handled by `Keyczar <http://www.keyczar.org/>`_.  To use this field you must have Keyczar installed, have generated a primary encryption key, and have ``settings.ENCRYPTED_FIELD_KEYS_DIR`` set to the full path of your keys directory.
+
+* *ShortUUIDField* - CharField which transparently generates a UUID and pass it to base57. It result in shorter 22 characters values useful e.g. for concise, unambiguous URLS. It's possible to get shorter values with length parameter: they are not Universal Unique any more but probability of collision is still low
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/graph_models.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/graph_models.txt
new file mode 100644
index 0000000..2bfa30f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/graph_models.txt
@@ -0,0 +1,110 @@
+Graph models
+============
+
+:synopsis: Renders a graphical overview of your project or specified apps.
+
+Creates a GraphViz_ dot file for the specified app names based on their models.py.
+You can pass multiple app names and they will all be combined into a single model.
+Output is usually directed to a dot file.
+
+Several options are available: grouping models, including inheritance,
+excluding models and columns, and changing the layout when rendering to an output
+image.
+
+With the latest revisions it's also possible to specify an output file if
+pygraphviz_ is installed and render directly to an image or other supported
+file-type.
+
+
+Selecting a library
+-------------------
+
+You need to select the library to generate the image. You can do so by passing
+the --pygraphviz or --pydot parameter, depending on which library you want to use.
+
+When neither of the command line parameters are given the default is to try and load
+pygraphviz or pydot (in that order) to generate the image.
+
+To install pygraphviz you usually need to run this command::
+
+  $ pip install pygraphviz
+
+It is possible you can't install it because it needs some C extensions to build. In
+that case you can try other methods to install or you can use PyDot.
+
+To install pydot you need to run this command::
+
+  $ pip install pyparsing==1.5.7
+  $ pip install pydot
+
+Installation should be fast and easy. Remember to install this exact version of
+pyparsing, otherwise it's possible you get this error:
+
+    Couldn't import dot_parser, loading of dot files will not be possible.
+
+
+Default Settings
+----------------
+
+The option GRAPH_MODELS = {} can be used in the settings file to specify default options::
+
+  GRAPH_MODELS = {
+    'all_applications': True,
+    'group_models': True,
+  }
+
+It uses the same names as on the command line only with the leading two dashes removed and
+the other dashes replaced by underscores.
+
+
+Templates
+---------
+
+Django templates are used to generate the dot code. This in turn can be drawn into a image
+by libraries like *pygraphviz* or *pydot*. You can extend or override the templates if needed.
+
+Templates used:
+
+ - django_extensions/graph_models/digraph.dot
+ - django_extensions/graph_models/label.dot
+ - django_extensions/graph_models/relation.dot
+
+Documentation on how to create dot files can be found here: http://www.graphviz.org/Documentation.php
+
+.. warning::
+  Modifying Django's default templates behaviour might break *graph_models*
+
+  Please be aware that if you use any *template_loaders* or extensions that change the
+  way templates are rendered that this can cause *graph_models* to fail.
+
+  An example of this is
+  the Django app *django-template-minifier* this automatically removed the newlines before/after
+  template tags even for none-html templates which leads to a mallformed file.
+
+Example Usage
+-------------
+
+With *django-extensions* installed you can create a dot-file or an
+image by using the *graph_models* command::
+
+  # Create a dot file
+  $ ./manage.py graph_models -a > my_project.dot
+
+::
+
+  # Create a PNG image file called my_project_visualized.png with application grouping
+  $ ./manage.py graph_models -a -g -o my_project_visualized.png
+
+  # Same example but with explicit selection of pygraphviz or pydot
+  $ ./manage.py graph_models --pygraphviz -a -g -o my_project_visualized.png
+  $ ./manage.py graph_models --pydot -a -g -o my_project_visualized.png
+
+::
+
+  # Create a dot file for only the 'foo' and 'bar' applications of your project
+  $ ./manage.py graph_models foo bar > my_project.dot
+
+
+.. _GraphViz: http://www.graphviz.org/
+.. _pygraphviz: https://networkx.lanl.gov/wiki/pygraphviz
+.. _pydot: https://pypi.python.org/pypi/pydot
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/index.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/index.txt
new file mode 100644
index 0000000..3d0a4ef
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/index.txt
@@ -0,0 +1,81 @@
+.. django-extensions documentation master file, created by
+   sphinx-quickstart on Wed Apr  1 20:39:40 2009.
+   You can adapt this file completely to your liking, but it should at least
+   contain the root `toctree` directive.
+
+Welcome to the django-extensions documentation!
+===============================================
+
+Django Extensions is a collection of custom extensions for the Django Framework.
+
+These include management commands, additional database fields, admin extensions and
+much more.
+
+`这篇文档当然还有中文版 <http://django-extensions-zh.readthedocs.org/zh_CN/latest/>`_
+
+Getting Started
+===============
+
+The easiest way to figure out what Django Extensions are all about is to watch the `excellent screencast by Eric Holscher`__. In a couple minutes Eric walks you through a half a dozen command extensions.
+
+Getting it
+==========
+
+You can get Django Extensions by using pip or easy_install::
+
+ $ pip install django-extensions
+ or
+ $ easy_install django-extensions
+
+If you want to install it from source, grab the git repository and run setup.py::
+
+ $ git clone git://github.com/django-extensions/django-extensions.git
+ $ cd django-extensions
+ $ python setup.py install
+
+For more detailed instructions check out our :doc:`installation_instructions`. Enjoy.
+
+Compatibility with versions of Python and Django
+=================================================
+
+We follow the Django guidelines for supported Python and Django versions. See more at `Django Supported Versions <https://docs.djangoproject.com/en/dev/internals/release-process/#supported-versions>`_
+
+This might mean the django-extensions may work with older or unsupported versions but we do not guarantee it and most likely will not fix bugs related to incompatibilities with older versions.
+
+At the time of writing we support: Python 2.6, 2.7 and 3.3. Django supported versions are 1.4, 1.5 and 1.6.
+
+Contents
+========
+
+.. toctree::
+   :maxdepth: 3
+
+   installation_instructions
+   command_extensions
+   command_extension_ideas
+   admin_extensions
+   shell_plus
+   create_app
+   dumpscript
+   runscript
+   export_emails
+   field_extensions
+   graph_models
+   jobs_scheduling
+   model_extensions
+   namespace_proposal
+   print_settings
+   runprofileserver
+   runserver_plus
+   sync_s3
+   sqldiff
+   sqlcreate
+   validate_templates
+
+
+Indices and tables
+==================
+
+* :ref:`search`
+
+__ http://ericholscher.com/blog/2008/sep/12/screencast-django-command-extensions/
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/installation_instructions.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/installation_instructions.txt
new file mode 100644
index 0000000..f59101c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/installation_instructions.txt
@@ -0,0 +1,100 @@
+Installation instructions
+=========================
+
+:synopsis: Installing django-extensions
+
+
+Download and installation
+-------------------------
+
+Pip and easy_install
+^^^^^^^^^^^^^^^^^^^^
+
+You can use pip or easy_install to install django-extensions::
+
+  $ pip install django-extensions
+
+or::
+
+  $ easy_install django-extensions
+
+Download
+^^^^^^^^
+
+Download the latest packaged version from
+http://pypi.python.org/pypi/django-extensions/ and unpack it. Inside is a
+script called setup.py. Enter this command::
+
+  python setup.py install
+
+...and the package will install automatically.
+
+Installation
+^^^^^^^^^^^^
+
+You will need to add the *django_extensions* application to the INSTALLED_APPS
+setting of your Django project *settings.py* file.::
+
+  INSTALLED_APPS = (
+      ...
+      'django_extensions',
+  )
+
+This will make sure that Django finds the additional management commands
+provided by *django-extensions*.
+
+The next time you invoke *./manage.py help* you should be able to see all the
+newly available commands.
+
+Some commands or options require additional applications or python libraries,
+for example:
+
+  * 'export_emails' will require the *python vobject* module to create vcard
+    files.
+  * 'graph_models' requires *pygraphviz* to render directly to image file.
+
+If the given application or python library is not installed on your system (or
+not in the python path) the executed command will raise an exception and inform
+you of the missing dependency.
+
+Version Control
+---------------
+
+Django-extensions is hosted on github::
+
+ https://github.com/django-extensions/django-extensions
+
+Source code can be accessed by performing a Git clone.
+
+Tracking the development version of *django command extensions* should be
+pretty stable and will keep you up-to-date with the latests fixes.
+
+The following command will check the application's source code out to a
+directory called *django-extensions*:
+
+Git::
+
+  git clone git://github.com/django-extensions/django-extensions.git
+
+You should either install the resulting project with *python setup.py install*
+or put the *extensions* directory into your PYTHONPATH. The most common way
+is to symlink (junction, if you're on Windows) the extensions directory inside
+a directory which is on your PYTHONPATH, such as your python installation's
+site-packages directory.
+
+::
+
+  ln -sf /full/path/to/django-extensions/django_extensions /usr/lib/python2.7/site-packages/django_extensions
+
+You can verify that the application is available on your PYTHONPATH by opening a python interpreter and entering the following commands:
+
+::
+
+  >>> import django_extensions
+  >>> django_extensions.VERSION
+  (0, 8)
+
+Keep in mind that the current code in the git repository may be different from the
+packaged release. It may contain bugs and backwards-incompatible changes but most
+likely also new goodies to play with.
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/jobs_scheduling.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/jobs_scheduling.txt
new file mode 100644
index 0000000..5cf2dd4
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/jobs_scheduling.txt
@@ -0,0 +1,49 @@
+Jobs scheduling
+===============
+
+:synopsis: Documentation on creating/using jobs in Django-extensions
+
+
+JobsScheduling
+--------------
+
+
+This page is very much a  Work In Progress
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Creating jobs works much like management commands work in Django.
+Use create_jobs to make a 'jobs' directory inside of an application.
+After that create one python file per job.
+
+Some simple examples are provided by the django_extensions.jobs package.
+
+A job is a python script with a mandatory Job class which extends from
+HourlyJob, DailyJob, WeeklyJob or MonthlyJob. It has one method that must be
+implemented called 'execute', which is called when the job is run.
+
+The following commands are related to jobs:
+
+* create_jobs, create the directory structure for jobs
+* runjob, run a single job
+* runjobs, run all hourly/daily/weekly/monthly jobs
+
+Use "runjob(s) -l" to list all jobs recognized.
+
+Jobs do not run automatically !
+
+You must either run a job manually specifying  the exact time on
+which the command is to be run, or use crontab: ::
+
+@hourly /path/to/my/project/manage.py runjobs hourly
+
+::
+
+@daily /path/to/my/project/manage.py runjobs daily
+
+::
+
+@weekly /path/to/my/project/manage.py runjobs weekly
+
+::
+
+@monthly /path/to/my/project/manage.py runjobs monthly
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/model_extensions.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/model_extensions.txt
new file mode 100644
index 0000000..4e9025d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/model_extensions.txt
@@ -0,0 +1,11 @@
+Model extensions
+================
+
+:synopsis: Current Model Extensions
+
+
+Current Database Model Extensions
+---------------------------------
+
+* *TimeStampedModel* - TimeStampedModel An abstract base class model that
+  provides self-managed "created" and "modified" fields.
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/namespace_proposal.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/namespace_proposal.txt
new file mode 100644
index 0000000..4f1befd
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/namespace_proposal.txt
@@ -0,0 +1,29 @@
+Namespace proposal
+==================
+
+:synopsis: Namespace Proposal
+
+
+Introduction
+------------
+
+Please change / write your proposal for splitting django_extensions into
+namespaces here.
+
+
+Proposal of a Namespace
+-----------------------
+
+Rough proposal for splitting into functional parts:
+
+* django_extensions.commands (20% that everbody uses / production)
+* django_extensions.commands.development (everything development)
+* django_extensions.commands.extra (not fitting about category's?)
+* django_extensions.db
+* django_extensions.templates
+* django_extensions.jobs
+
+The db part should be okay where it is right now. It's only used when
+somebody explicitly imports::
+
+  from django_extensions.db.models import something
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/print_settings.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/print_settings.txt
new file mode 100644
index 0000000..7ad8f38
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/print_settings.txt
@@ -0,0 +1,60 @@
+print_settings
+==============
+
+:synopsis: Django managment command similar to ``diffsettings`` but shows *selected* active Django settings or *all* if no args passed.
+
+
+Introduction
+------------
+
+Django comes with a ``diffsettings`` command that shows how your project's
+settings differ from the Django defaults.  Sometimes it is useful to just see
+the settings that are in effect for your project. This is particularly
+true if you have a more complex system for settings than just a single
+:file:`settings.py` file. For example, you might have settings files that
+import other settings file, such as dev, test, and production settings files
+that source a base settings file.
+
+This command also supports dumping the data in a few different formats.
+
+More Info
+---------------
+
+The simplest way to run it is with no arguments::
+
+    $ python manage.py print_settings
+
+Some variations::
+
+    $ python manage.py print_settings --format=json
+    $ python manage.py print_settings --format=yaml    # Requires PyYAML
+
+Show just selected settings::
+
+    $ python manage.py print_settings DEBUG INSTALLED_APPS
+    $ python manage.py print_settings DEBUG INSTALLED_APPS --format=pprint
+
+For more info, take a look at the built-in help::
+
+    $ python manage.py print_settings --help
+    Usage: manage.py print_settings [options]
+
+    Print the active Django settings.
+
+    Options:
+      -v VERBOSITY, --verbosity=VERBOSITY
+                            Verbosity level; 0=minimal output, 1=normal output,
+                            2=verbose output, 3=very verbose output
+      --settings=SETTINGS   The Python path to a settings module, e.g.
+                            "myproject.settings.main". If this isn't provided, the
+                            DJANGO_SETTINGS_MODULE environment variable will be
+                            used.
+      --pythonpath=PYTHONPATH
+                            A directory to add to the Python path, e.g.
+                            "/home/djangoprojects/myproject".
+      --traceback           Print traceback on exception
+      --format=FORMAT       Specifies output format.
+      --indent=INDENT       Specifies indent level for JSON and YAML
+      --version             show program's version number and exit
+      -h, --help            show this help message and exit
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runprofileserver.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runprofileserver.txt
new file mode 100644
index 0000000..940e150
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runprofileserver.txt
@@ -0,0 +1,86 @@
+RunProfileServer
+================
+
+*We recommend that before you start profiling any language or
+framework you learn enough about it so that you feel comfortable with digging
+into its internals.*
+
+*Without sufficient knowledge it will not only be (very)
+hard but you're likely to make wrong assumptions (and fixes). As a rule of thumb,
+clean, well written code will help you a lot more than overzealous
+micro-optimizations will.*
+
+*This document is work in progress. If you feel you can help with
+better/clearer or additional information about profiling Django please leave a
+comment.*
+
+
+Introduction
+------------
+
+*runprofileserver* starts Django's runserver command with hotshot/profiling
+tools enabled. It will save .prof files containing the profiling information
+into the --prof-path directory. Note that for each request made one profile
+data file is saved.
+
+By default the profile-data-files are saved in /tmp use the --prof-path option
+to specify your own target directory. Saving the data in a meaningful directory
+structure helps to keep your profile data organized and keeps /tmp uncluttered. 
+(Yes this probably malfunctions systems such as Windows where /tmp does not exist)
+
+To define profile filenames use --prof-file option. Default format
+is "{path}.{duration:06d}ms.{time}" (Python
+`Format Specification <http://docs.python.org/3/library/string.html#formatspec>`_
+is used).
+
+Examples:
+
+  * "{time}-{path}-{duration}ms" - to order profile-data-files by request time
+  * "{duration:06d}ms.{path}.{time}" - to order by request duration
+
+gather_profile_stats.py
+-----------------------
+
+Django comes packed with a tool to aggregate these different prof files into
+one aggregated profile file. This tool is called *gather_profile_stats.py* and
+is located inside the *bin* directory of your Django distribution.
+
+
+KCacheGrind
+-----------
+
+Recent versions of *runprofileserver* have an option to save the profile data
+into a KCacheGrind compatible format. So you can use the excellent KCacheGrind
+tool for analyzing the profile data.
+
+Example::
+
+  $ mkdir /tmp/my-profile-data
+  $ ./manage.py runprofileserver --kcachegrind --prof-path=/tmp/my-profile-data
+  Validating models...
+  0 errors found
+
+  Django version 1.0-post-release-SVN-SVN-unknown, using settings 'complete_project.settings'
+  Development server is running at http://127.0.0.1:8000/
+  Quit the server with CONTROL-C.
+  [13/Nov/2008 06:29:38] "GET / HTTP/1.1" 200 41107
+  [13/Nov/2008 06:29:39] "GET /site_media/base.css?743 HTTP/1.1" 200 17227
+  [13/Nov/2008 06:29:39] "GET /site_media/logo.png HTTP/1.1" 200 3474
+  [13/Nov/2008 06:29:39] "GET /site_media/jquery.js HTTP/1.1" 200 31033
+  [13/Nov/2008 06:29:39] "GET /site_media/heading.png HTTP/1.1" 200 247
+  [13/Nov/2008 06:29:39] "GET /site_media/base.js HTTP/1.1" 200 751
+  <ctrl-c>
+  $ kcachegrind /tmp/my-profile-data/root.12574391.592.prof
+
+Here is a screenshot of how the above commands might look in KCacheGrind:
+
+  http://trbs.net/media/misc/django-runprofileserver-kcachegrind-full.jpg
+
+Links
+-----
+
+* http://code.djangoproject.com/wiki/ProfilingDjango
+* http://www.rkblog.rk.edu.pl/w/p/django-profiling-hotshot-and-kcachegrind/
+* http://code.djangoproject.com/browser/django/trunk/django/bin/profiling/gather_profile_stats.py
+* http://www.oluyede.org/blog/2007/03/07/profiling-django/
+* http://simonwillison.net/2008/May/22/debugging/
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runscript.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runscript.txt
new file mode 100644
index 0000000..c304c26
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runscript.txt
@@ -0,0 +1,88 @@
+RunScript
+=============
+
+:synopsis: Runs a script in the django context.
+
+
+Introduction
+------------
+
+The runscript command lets you run an arbritrary set of python commands within
+the django context. It offers the same usability and functionality as running a
+set of commands in shell accessed by::
+
+  $ python manage.py shell
+
+
+Getting Started
+---------------
+
+To get started create a scripts directory in your project root, next to
+manage.py::
+
+  $ mkdir scripts
+  $ touch scripts/__init__.py
+
+Note: The *__init__.py* file is necessary so that the folder is picked up as a
+python package.
+
+Next, create a python file with the name of the script you want to run within
+the scripts directory::
+
+  $ touch scripts/delete_all_polls.py
+
+This file must implement a *run()* function. This is what gets called when you
+run the script. You can import any models or other parts of your django project
+to use in these scripts.
+
+For example::
+
+  # scripts/delete_all_polls.py
+
+  from Polls.models import Poll
+
+  def run():
+      # Get all polls
+      all_polls = Poll.objects.all()
+      # Delete polls
+      all_polls.delete()
+
+Note: You can put a script inside a *scripts* folder in any of your apps too.
+
+Usage
+-----
+
+To run any script you use the command *runscript* with the name of the script
+that you want to run.
+
+For example::
+
+  $ python manage.py runscript delete_all_polls
+
+Note: The command first checks for scripts in your apps i.e. *app_name/scripts*
+folder and runs them before checking for and running scripts in the
+*project_root/scripts* folder. You can have multiple scripts with the same name
+and they will all be run sequentially.
+
+Passing arguments
+-----------------
+
+You can pass arguments from the command line to your script by passing a comma-separated
+list of values with ``--script-args``. For example::
+
+  $ python manage.py runscript delete_all_polls --script-args=staleonly
+
+The list of argument values gets passed as arguments to your *run()* function. For
+example::
+
+  # scripts/delete_all_polls.py
+  
+  from Polls.models import Poll
+  
+  def run(*args):
+      # Get all polls
+      all_polls = Poll.object.all()
+      if 'staleonly' in args:
+          all_polls = all_polls.filter(active=False)
+      # Delete polls
+      all_polls.delete()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runserver_plus.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runserver_plus.txt
new file mode 100644
index 0000000..4b03c0c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/runserver_plus.txt
@@ -0,0 +1,152 @@
+RunServerPlus
+=============
+
+:synopsis: RunServerPlus-typical runserver with Werkzeug debugger baked in
+
+
+Introduction
+------------
+
+This item requires that you have the `Werkzeug WSGI utilities` (version 0.3)
+installed.  Included with Werkzeug is a kick ass debugger that renders nice
+debugging tracebacks and adds an AJAX based debugger (which allows code execution 
+in the context of the traceback’s frames).  Additionally it provides a nice 
+access view to the source code.
+
+
+Getting Started
+---------------
+
+To get started we just use the *runserver_plus* command instead of the normal
+*runserver* command::
+
+  $ python manage.py runserver_plus
+
+  * Running on http://127.0.0.1:8000/
+  * Restarting with reloader...
+
+  Validating models...
+  0 errors found
+
+  Django version 0.97-newforms-admin-SVN-unknown, using settings 'screencasts.settings'
+  Development server is running at http://127.0.0.1:8000/
+  Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+  Quit the server with CONTROL-C.
+
+Note: all normal runserver options apply. In other words, if you need to change
+the port number or the host information, you can do so like you would normally.
+
+
+Usage
+-----
+
+Instead of the default Django traceback page, the Werkzeug traceback page 
+will be shown when an exception occurs.
+
+.. image:: https://f.cloud.github.com/assets/202559/1261027/2637f826-2c22-11e3-83c6-646acc87808b.png
+    :alt: werkzeug-traceback
+
+Along with the typical traceback information we have a couple of options. These
+options appear when hovering over a particular traceback line.  Notice that
+two buttons appear to the right:
+
+.. image:: https://f.cloud.github.com/assets/202559/1261035/558ad0ee-2c22-11e3-8ddd-6678d84d77e7.png
+    :alt: werkzeug-options
+
+The options are:
+
+
+View Source
+^^^^^^^^^^^
+
+This displays the source underneath the traceback:
+
+.. image:: https://f.cloud.github.com/assets/202559/1261036/583c8c42-2c22-11e3-9eb9-5c16b8732512.png
+    :alt: werkzeug-source
+
+Being able to view the source file is handy because it provides more
+context information around the error.  The actual traceback areas are 
+highlighted so they are easy to spot.
+
+One awkward aspect of th UI is that the page is not scrolled to the bottom.
+At first I thought nothing was happening because of this.
+
+
+Interactive Debugging Console
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Clicking on this button opens up a new pane under the traceback line
+you're on. This is the money shot:
+
+.. image:: https://f.cloud.github.com/assets/202559/1261037/5d12eda6-2c22-11e3-802a-2639ff8813fa.png
+    :alt: werkzeug-debugger
+
+An ajax based console appears in the pane and you can start debugging.
+Notice in the screenshot above I did a `print environ` to see what was in the
+environment parameter coming into the function.
+
+*WARNING*: This should *never* be used in any kind of production environment.
+Not even for a quick problem check.  I cannot emphasize this enough. The
+interactive debugger allows you to evaluate python code right against the
+server.  You've been warned.
+
+.. _`Werkzeug WSGI utilities`: http://werkzeug.pocoo.org/
+
+
+SSL
+^^^
+
+runserver_plus also supports SSL, so that you can easily debug bugs that to pop up 
+when https is used. To use SSL simply provide a file name for certificates;  
+a key and certificate file will be automatically generated::
+
+  $ python manage.py runserver_plus --cert cert
+  Validating models...
+  0 errors found
+
+  Django version 1.6.dev20130122125534, using settings 'mysite.settings'
+  Development server is running at http://127.0.0.1:8000/
+  Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+  Quit the server with CONTROL-C.
+   * Running on https://127.0.0.1:8000/
+   * Restarting with reloader
+  Validating models...
+  0 errors found
+
+  Django version 1.6.dev20130122125534, using settings 'mysite.settings'
+  Development server is running at http://127.0.0.1:8000/
+  Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+  Quit the server with CONTROL-C.
+  
+After running this command, your web application can be accessed through 
+https://127.0.0.1:8000. 
+
+You will also find that two files are created in  the current working directory: 
+a key file and a certificate file. If you run the above command again, these 
+certificate files will be reused so that you do not have to keep accepting the 
+self-generated certificates from your browser every time. You can also provide 
+a specific file for the certificate to be used if you already have one::
+
+  $ python manage.py runserver_plus --cert /tmp/cert 
+  
+Note that you need the OpenSSL library to use SSL, and Werkzeug 0.9 or later 
+if you want to reuse existing certificates. 
+
+To install OpenSSL::
+
+  $ pip install pyOpenSSL
+
+Configuration
+^^^^^^^^^^^^^
+
+The `RUNSERVERPLUS_SERVER_ADDRESS_PORT` setting can be configured to specify
+which address and port the development server should bind to.
+
+If you find yourself frequently starting the server with::
+
+  $ python manage.py runserver_plus 0.0.0.0:8000 
+
+You can use settings to automatically default your development to an address/port::
+
+    RUNSERVERPLUS_SERVER_ADDRESS_PORT = '0.0.0.0:8000'
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/shell_plus.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/shell_plus.txt
new file mode 100644
index 0000000..2353aef
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/shell_plus.txt
@@ -0,0 +1,126 @@
+shell_plus
+==========
+
+:synopsis: Django shell with autoloading of the apps database models
+
+
+Interactive Python Shells
+-------------------------
+
+There is support for three different types of interactive python shells.
+
+IPython::
+
+  $ ./manage.py shell_plus --ipython
+
+
+BPython::
+
+  $ ./manage.py shell_plus --bpython
+
+
+Python::
+
+  $ ./manage.py shell_plus --plain
+
+
+The default resolution order is: bpython, ipython, python.
+
+You can also set the configuration option SHELL_PLUS to explicitly specify which version you want.
+
+::
+
+  # Always use IPython for shell_plus
+  SHELL_PLUS = "ipython"
+
+
+
+Configuration
+-------------
+
+Sometimes, models from your own apps and other people's apps have colliding names,
+or you may want to completely skip loading an app's models. Here are some examples of how to do that.
+
+Note: These settings are only used inside shell_plus and will not affect your environment.
+
+::
+
+  # Rename the automatic loaded module Messages in the app blog to blog_messages.
+  SHELL_PLUS_MODEL_ALIASES = {'blog': {'Messages': 'blog_messages'},}
+  }
+
+::
+
+  # Dont load the 'sites' app, and skip the model 'pictures' in the app 'blog'
+  SHELL_PLUS_DONT_LOAD = ['sites', 'blog.pictures']
+  }
+
+
+You can also combine model_aliases and dont_load.
+
+It is possible to ignore autoloaded modules when using manage.py, like::
+
+  $ ./manage.py shell_plus --dont-load app1 --dont-load app2.module1
+
+Commandline parameters and settings in the configuration file are merged, so you can
+safely append modules to ignore from the commandline for one-time usage.
+
+It is possible to use `IPython Notebook`_, an interactive Python shell which
+uses a web browser as its user interface, as an alternative shell::
+
+    $ ./manage.py shell_plus --notebook
+
+The Django settings module and database models are auto-loaded into the
+interactive shell's global namespace also for IPython Notebook.
+
+Auto-loading is done by a custom IPython extension which is activated by
+default by passing the
+``--ext django_extensions.management.notebook_extension``
+argument to the Notebook.  If you need to pass custom options to the IPython
+Notebook, you can override the default options in your Django settings using
+the ``IPYTHON_ARGUMENTS`` setting.  For example::
+
+    IPYTHON_ARGUMENTS = [
+        '--ext', 'django_extensions.management.notebook_extension',
+        '--ext', 'myproject.notebook_extension',
+        '--debug',
+    ]
+
+To activate auto-loading, remember to either include the django-extensions' default
+notebook extension or copy its auto-loading code into your own extension.
+
+Note that the IPython Notebook feature doesn't currently honor the
+``--dont-load`` option.
+
+.. _`IPython Notebook`: http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html
+
+
+
+Additional Imports
+------------------
+
+In addition to importing the models you can specify other items to import by default.
+These are specified in SHELL_PLUS_PRE_IMPORTS and SHELL_PLUS_POST_IMPORTS. The former is imported
+before any other imports (such as the default models import) and the latter is imported after any
+other imports. Both have similar syntax. So in your settings.py file:
+
+::
+
+    SHELL_PLUS_PRE_IMPORTS = (
+        ('module.submodule1', ('class1', 'function2')),
+        ('module.submodule2', 'function3'),
+        ('module.submodule3', '*'),
+        'module.submodule4'
+    )
+
+The above example would directly translate to the following python code which would be executed before
+the automatic imports:
+
+::
+
+    from module.submodule1 import class1, function2
+    from module.submodule2 import function3
+    from module.submodule3 import *
+    import module.submodule4
+
+These symbols will be available as soon as the shell starts.
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sqlcreate.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sqlcreate.txt
new file mode 100644
index 0000000..059be88
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sqlcreate.txt
@@ -0,0 +1,45 @@
+sqlcreate
+==========
+
+:synopsis: Helps you setup your database(s) more easily
+
+
+Introduction
+-------------
+
+Stop creating databases by hand.  Your settings.py file already contains the correct
+information, so DRY.
+
+Usage
+-------------
+
+  $ python manage.py sqlcreate [--router=<routername>] | <my_database_shell_command>
+  
+It will spit out SQL which you can review (if you want). Ultimately you want to
+pipe it into the database shell command of your choice.
+
+If there were a good way to ensure that the user in the database settings had the
+proper permissions, we could submit the commands straight to the database.
+However, due to the nature of this portion of the project setup, that will never happen.
+
+Example
+-------------
+
+PostgreSQL
+~~~~~~~~~~
+  $ ./manage.py sqlcreate [--router=<routername>] | psql -U <db_administrator> -W
+  
+
+MySQL
+~~~~~
+  $ ./manage.py sqlcreate [--router=<routername>] | mysql -u <db_administrator> -p
+  
+
+Known Issues
+------------
+
+ * CREATE DATABASE is not SQL standard so might not work everywhere.
+ * When using fallback user is not created and password is not set.
+   But it does try to do a GRANT to the database user.
+ * Missing options for tablespaces, etc.
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sqldiff.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sqldiff.txt
new file mode 100644
index 0000000..85a5221
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sqldiff.txt
@@ -0,0 +1,44 @@
+sqldiff
+=======
+
+:synopsis: Prints the ALTER TABLE statements for the given appnames.
+
+Django command that scans all models for the given appnames and compares
+their database schema with the real database tables.
+
+It indicates how columns in the database are different from the SQL that would
+be generated by Django. This command is not a database migration tool, though
+it might certainly be of help during migrations. Its purpose is to show the
+current differences as a way to check or debug your models compared to
+the real database tables and columns.
+
+Supported Databases
+-------------------
+
+Currently the following databases are supported:
+
+* PostgreSQL
+* Sqlite3
+* MySQL
+* Oracle
+
+Patches to support other databases are welcome! :-)
+
+Exit Codes
+----------
+
+Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.
+
+
+Example Usage
+-------------
+
+::
+
+  # View SQL differences for all installed applications
+  $ ./manage.py sqldiff -a
+
+::
+
+  # View SQL differences for all installed applications using text instead of SQL
+  $ ./manage.py sqldiff -a -t
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sync_s3.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sync_s3.txt
new file mode 100644
index 0000000..aafc2ac
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/sync_s3.txt
@@ -0,0 +1,70 @@
+sync_s3
+=======
+
+:synopsis: sync your MEDIA_ROOT and STATIC_ROOT folders to S3
+
+Django command that scans all files in your settings.MEDIA_ROOT and
+settings.STATIC_ROOT folders, then uploads them to S3 with the same
+directory structure.
+
+This command can optionally do the following but it is off by default:
+
+  * gzip compress any CSS and Javascript files it finds and adds the
+    appropriate 'Content-Encoding' header.
+  * set a far future 'Expires' header for optimal caching.
+  * upload only media or static files.
+  * use any other provider compatible with Amazon S3.
+  * set other than 'public-read' ACL.
+
+Example Usage
+-------------
+
+::
+
+  # Upload files to S3 into the bucket 'mybucket'
+  $ ./manage.py sync_s3 mybucket
+
+::
+
+  # Upload files to S3 into the bucket 'mybucket' and enable gzipping CSS/JS files and setting of a far future expires header
+  $ ./manage.py sync_s3 mybucket --gzip --expires
+
+::
+
+  # Upload only media files to S3 into the bucket 'mybucket'
+  $ ./manage.py sync_s3 mybucket  --media-only  # or --static-only
+
+::
+
+  # Upload only media files to a S3 compatible provider into the bucket 'mybucket' and set private file ACLs
+  $ ./manage.py sync_s3 mybucket  --media-only  --s3host=cs.example.com --acl=private
+
+Required libraries and settings
+-------------------------------
+
+This management command requires the boto library and was tested with version
+1.4c:
+
+  https://github.com/boto/boto
+
+It also requires an account with Amazon Web Services (AWS) and the AWS S3 keys.
+Bucket name is required and cannot be empty.
+The keys and bucket name are added to your settings.py file, for example::
+
+  # settings.py
+  AWS_ACCESS_KEY_ID = ''
+  AWS_SECRET_ACCESS_KEY = ''
+  AWS_BUCKET_NAME = 'bucket'
+
+Optional settings
+-----------------
+
+It is possible to customize sync_s3 directly from django settings file, for example::
+
+  # settings.py
+  AWS_S3_HOST = 'cs.example.com'
+  AWS_DEFAULT_ACL = 'private'
+  SYNC_S3_PREFIX = 'some_prefix'
+  FILTER_LIST = 'dir1, dir2'
+  AWS_CLOUDFRONT_DISTRIBUTION = 'E27LVI50CSW06W'
+  SYNC_S3_RENAME_GZIP_EXT = '.gz'
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/validate_templates.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/validate_templates.txt
new file mode 100644
index 0000000..2bff8d5
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_sources/validate_templates.txt
@@ -0,0 +1,38 @@
+validate_templates
+==================
+
+:synopsis: Checks templates on syntax or compile errors.
+
+Options
+-------
+
+verbosity
+~~~~~~~~~
+A higher verbosity level will print out all the files that are processed 
+instead of only the ones that contain errors.
+
+break
+~~~~~
+Do not continue scanning other templates after the first failure.
+
+includes
+~~~~~~~~
+Use -i (can be used multiple times) to add directories to the TEMPLATE_DIRS.
+
+Settings
+--------
+
+VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+You can use `VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS` to include a number of template 
+dirs by default directly from the settings file. This can be useful for situations 
+where TEMPLATE_DIRS is dynamically generated or switched in middleware, or when you 
+have other template dirs for external applications like celery, and you want to 
+check those as well.
+
+Usage Example
+-------------
+
+ ./manage.py validate_templates
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/ajax-loader.gif b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/ajax-loader.gif
new file mode 100644
index 0000000000000000000000000000000000000000..61faf8cab23993bd3e1560bff0668bd628642330
GIT binary patch
literal 673
zcmZ?wbhEHb6krfw_{6~Q|Nno%(3)e{?)x>&1u}A`t?OF7Z|1gRivOgXi&7IyQd1Pl
zGfOfQ60;I3a`F>X^fL3(@);C=vM_KlFfb_o=k{|A33hf2a5d61U}gjg=>Rd%XaNQW
zW@C<Bcm5fi^2`=a=CI<BoWt%nBaPE_qv4@lA~O$e(@QvVsPKYrw1nl|W$cy`JnUZC
z&pm)ff{kWGHpc{Hj$e<Wf^-Yd?hVhnTne26LlO)n6%u@0qor2V$ZRdW|29#Ay+Pr+
z#G^K6$xW&%T0&5Rn2-%J<Je`StbNMy#Dp_b!t~i%lV$k6Ncw&BbV{7Dx<KXw*O|?G
zWsa@TW{P|({)e&oFu&2t6sh_9S)fKSBO3+uTav2wDWkTDZ{~!>w{|b%Y*pl8F?4B9
zlo4Fz*0kZGJabY|>}Okf0}CCg{u4`zEPY^pV?j2@h+|igy0+Kz6p;@SpM4s6)XEMg
z#3Y4GX>Hjlml5ftdH$4x0JGdn8~MX(U~_^d!Hi)=HU{V%g+mi8#UGbE-*ao8f#h+S
z2a0-5+vc7MU$e-NhmBjLIC1v|)9+Im8x1yacJ7{^tLX(ZhYi^rpmXm0`@ku9b53aN
zEXH@Y3JaztblgpxbJt{AtE1ad1Ca>{v$rwwvK(>{m~Gf_=-Ro7Fk{#;i~+{{>QtvI
yb2P8Zac~?~=sRA>$6{!(^3;ZP0TPFR(G_-UDU(8Jl0?(IXu$~#4A!880|o%~Al1tN

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/basic.css b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/basic.css
new file mode 100644
index 0000000..967e36c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/basic.css
@@ -0,0 +1,537 @@
+/*
+ * basic.css
+ * ~~~~~~~~~
+ *
+ * Sphinx stylesheet -- basic theme.
+ *
+ * :copyright: Copyright 2007-2014 by the Sphinx team, see AUTHORS.
+ * :license: BSD, see LICENSE for details.
+ *
+ */
+
+/* -- main layout ----------------------------------------------------------- */
+
+div.clearer {
+    clear: both;
+}
+
+/* -- relbar ---------------------------------------------------------------- */
+
+div.related {
+    width: 100%;
+    font-size: 90%;
+}
+
+div.related h3 {
+    display: none;
+}
+
+div.related ul {
+    margin: 0;
+    padding: 0 0 0 10px;
+    list-style: none;
+}
+
+div.related li {
+    display: inline;
+}
+
+div.related li.right {
+    float: right;
+    margin-right: 5px;
+}
+
+/* -- sidebar --------------------------------------------------------------- */
+
+div.sphinxsidebarwrapper {
+    padding: 10px 5px 0 10px;
+}
+
+div.sphinxsidebar {
+    float: left;
+    width: 230px;
+    margin-left: -100%;
+    font-size: 90%;
+}
+
+div.sphinxsidebar ul {
+    list-style: none;
+}
+
+div.sphinxsidebar ul ul,
+div.sphinxsidebar ul.want-points {
+    margin-left: 20px;
+    list-style: square;
+}
+
+div.sphinxsidebar ul ul {
+    margin-top: 0;
+    margin-bottom: 0;
+}
+
+div.sphinxsidebar form {
+    margin-top: 10px;
+}
+
+div.sphinxsidebar input {
+    border: 1px solid #98dbcc;
+    font-family: sans-serif;
+    font-size: 1em;
+}
+
+div.sphinxsidebar #searchbox input[type="text"] {
+    width: 170px;
+}
+
+div.sphinxsidebar #searchbox input[type="submit"] {
+    width: 30px;
+}
+
+img {
+    border: 0;
+    max-width: 100%;
+}
+
+/* -- search page ----------------------------------------------------------- */
+
+ul.search {
+    margin: 10px 0 0 20px;
+    padding: 0;
+}
+
+ul.search li {
+    padding: 5px 0 5px 20px;
+    background-image: url(file.png);
+    background-repeat: no-repeat;
+    background-position: 0 7px;
+}
+
+ul.search li a {
+    font-weight: bold;
+}
+
+ul.search li div.context {
+    color: #888;
+    margin: 2px 0 0 30px;
+    text-align: left;
+}
+
+ul.keywordmatches li.goodmatch a {
+    font-weight: bold;
+}
+
+/* -- index page ------------------------------------------------------------ */
+
+table.contentstable {
+    width: 90%;
+}
+
+table.contentstable p.biglink {
+    line-height: 150%;
+}
+
+a.biglink {
+    font-size: 1.3em;
+}
+
+span.linkdescr {
+    font-style: italic;
+    padding-top: 5px;
+    font-size: 90%;
+}
+
+/* -- general index --------------------------------------------------------- */
+
+table.indextable {
+    width: 100%;
+}
+
+table.indextable td {
+    text-align: left;
+    vertical-align: top;
+}
+
+table.indextable dl, table.indextable dd {
+    margin-top: 0;
+    margin-bottom: 0;
+}
+
+table.indextable tr.pcap {
+    height: 10px;
+}
+
+table.indextable tr.cap {
+    margin-top: 10px;
+    background-color: #f2f2f2;
+}
+
+img.toggler {
+    margin-right: 3px;
+    margin-top: 3px;
+    cursor: pointer;
+}
+
+div.modindex-jumpbox {
+    border-top: 1px solid #ddd;
+    border-bottom: 1px solid #ddd;
+    margin: 1em 0 1em 0;
+    padding: 0.4em;
+}
+
+div.genindex-jumpbox {
+    border-top: 1px solid #ddd;
+    border-bottom: 1px solid #ddd;
+    margin: 1em 0 1em 0;
+    padding: 0.4em;
+}
+
+/* -- general body styles --------------------------------------------------- */
+
+a.headerlink {
+    visibility: hidden;
+}
+
+h1:hover > a.headerlink,
+h2:hover > a.headerlink,
+h3:hover > a.headerlink,
+h4:hover > a.headerlink,
+h5:hover > a.headerlink,
+h6:hover > a.headerlink,
+dt:hover > a.headerlink {
+    visibility: visible;
+}
+
+div.body p.caption {
+    text-align: inherit;
+}
+
+div.body td {
+    text-align: left;
+}
+
+.field-list ul {
+    padding-left: 1em;
+}
+
+.first {
+    margin-top: 0 !important;
+}
+
+p.rubric {
+    margin-top: 30px;
+    font-weight: bold;
+}
+
+img.align-left, .figure.align-left, object.align-left {
+    clear: left;
+    float: left;
+    margin-right: 1em;
+}
+
+img.align-right, .figure.align-right, object.align-right {
+    clear: right;
+    float: right;
+    margin-left: 1em;
+}
+
+img.align-center, .figure.align-center, object.align-center {
+  display: block;
+  margin-left: auto;
+  margin-right: auto;
+}
+
+.align-left {
+    text-align: left;
+}
+
+.align-center {
+    text-align: center;
+}
+
+.align-right {
+    text-align: right;
+}
+
+/* -- sidebars -------------------------------------------------------------- */
+
+div.sidebar {
+    margin: 0 0 0.5em 1em;
+    border: 1px solid #ddb;
+    padding: 7px 7px 0 7px;
+    background-color: #ffe;
+    width: 40%;
+    float: right;
+}
+
+p.sidebar-title {
+    font-weight: bold;
+}
+
+/* -- topics ---------------------------------------------------------------- */
+
+div.topic {
+    border: 1px solid #ccc;
+    padding: 7px 7px 0 7px;
+    margin: 10px 0 10px 0;
+}
+
+p.topic-title {
+    font-size: 1.1em;
+    font-weight: bold;
+    margin-top: 10px;
+}
+
+/* -- admonitions ----------------------------------------------------------- */
+
+div.admonition {
+    margin-top: 10px;
+    margin-bottom: 10px;
+    padding: 7px;
+}
+
+div.admonition dt {
+    font-weight: bold;
+}
+
+div.admonition dl {
+    margin-bottom: 0;
+}
+
+p.admonition-title {
+    margin: 0px 10px 5px 0px;
+    font-weight: bold;
+}
+
+div.body p.centered {
+    text-align: center;
+    margin-top: 25px;
+}
+
+/* -- tables ---------------------------------------------------------------- */
+
+table.docutils {
+    border: 0;
+    border-collapse: collapse;
+}
+
+table.docutils td, table.docutils th {
+    padding: 1px 8px 1px 5px;
+    border-top: 0;
+    border-left: 0;
+    border-right: 0;
+    border-bottom: 1px solid #aaa;
+}
+
+table.field-list td, table.field-list th {
+    border: 0 !important;
+}
+
+table.footnote td, table.footnote th {
+    border: 0 !important;
+}
+
+th {
+    text-align: left;
+    padding-right: 5px;
+}
+
+table.citation {
+    border-left: solid 1px gray;
+    margin-left: 1px;
+}
+
+table.citation td {
+    border-bottom: none;
+}
+
+/* -- other body styles ----------------------------------------------------- */
+
+ol.arabic {
+    list-style: decimal;
+}
+
+ol.loweralpha {
+    list-style: lower-alpha;
+}
+
+ol.upperalpha {
+    list-style: upper-alpha;
+}
+
+ol.lowerroman {
+    list-style: lower-roman;
+}
+
+ol.upperroman {
+    list-style: upper-roman;
+}
+
+dl {
+    margin-bottom: 15px;
+}
+
+dd p {
+    margin-top: 0px;
+}
+
+dd ul, dd table {
+    margin-bottom: 10px;
+}
+
+dd {
+    margin-top: 3px;
+    margin-bottom: 10px;
+    margin-left: 30px;
+}
+
+dt:target, .highlighted {
+    background-color: #fbe54e;
+}
+
+dl.glossary dt {
+    font-weight: bold;
+    font-size: 1.1em;
+}
+
+.field-list ul {
+    margin: 0;
+    padding-left: 1em;
+}
+
+.field-list p {
+    margin: 0;
+}
+
+.optional {
+    font-size: 1.3em;
+}
+
+.versionmodified {
+    font-style: italic;
+}
+
+.system-message {
+    background-color: #fda;
+    padding: 5px;
+    border: 3px solid red;
+}
+
+.footnote:target  {
+    background-color: #ffa;
+}
+
+.line-block {
+    display: block;
+    margin-top: 1em;
+    margin-bottom: 1em;
+}
+
+.line-block .line-block {
+    margin-top: 0;
+    margin-bottom: 0;
+    margin-left: 1.5em;
+}
+
+.guilabel, .menuselection {
+    font-family: sans-serif;
+}
+
+.accelerator {
+    text-decoration: underline;
+}
+
+.classifier {
+    font-style: oblique;
+}
+
+abbr, acronym {
+    border-bottom: dotted 1px;
+    cursor: help;
+}
+
+/* -- code displays --------------------------------------------------------- */
+
+pre {
+    overflow: auto;
+    overflow-y: hidden;  /* fixes display issues on Chrome browsers */
+}
+
+td.linenos pre {
+    padding: 5px 0px;
+    border: 0;
+    background-color: transparent;
+    color: #aaa;
+}
+
+table.highlighttable {
+    margin-left: 0.5em;
+}
+
+table.highlighttable td {
+    padding: 0 0.5em 0 0.5em;
+}
+
+tt.descname {
+    background-color: transparent;
+    font-weight: bold;
+    font-size: 1.2em;
+}
+
+tt.descclassname {
+    background-color: transparent;
+}
+
+tt.xref, a tt {
+    background-color: transparent;
+    font-weight: bold;
+}
+
+h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
+    background-color: transparent;
+}
+
+.viewcode-link {
+    float: right;
+}
+
+.viewcode-back {
+    float: right;
+    font-family: sans-serif;
+}
+
+div.viewcode-block:target {
+    margin: -1px -10px;
+    padding: 0 10px;
+}
+
+/* -- math display ---------------------------------------------------------- */
+
+img.math {
+    vertical-align: middle;
+}
+
+div.body div.math p {
+    text-align: center;
+}
+
+span.eqno {
+    float: right;
+}
+
+/* -- printout stylesheet --------------------------------------------------- */
+
+@media print {
+    div.document,
+    div.documentwrapper,
+    div.bodywrapper {
+        margin: 0 !important;
+        width: 100%;
+    }
+
+    div.sphinxsidebar,
+    div.related,
+    div.footer,
+    #top-link {
+        display: none;
+    }
+}
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment-bright.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment-bright.png
new file mode 100644
index 0000000000000000000000000000000000000000..551517b8c83b76f734ff791f847829a760ad1903
GIT binary patch
literal 3500
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
a`ab|E?o=hKA+1LM0000<MNUMnLSTYql%5L!

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment-close.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment-close.png
new file mode 100644
index 0000000000000000000000000000000000000000..09b54be46da3f0d4a5061da289dc91d8a2cdbc9c
GIT binary patch
literal 3578
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
A2LJ#7

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/comment.png
new file mode 100644
index 0000000000000000000000000000000000000000..92feb52b8824c6b0f59b658b1196c61de9162a95
GIT binary patch
literal 3445
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
Xn!ZpXD%P(H00000NkvXXu0mjf<Culu

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/default.css b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/default.css
new file mode 100644
index 0000000..5f1399a
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/default.css
@@ -0,0 +1,256 @@
+/*
+ * default.css_t
+ * ~~~~~~~~~~~~~
+ *
+ * Sphinx stylesheet -- default theme.
+ *
+ * :copyright: Copyright 2007-2014 by the Sphinx team, see AUTHORS.
+ * :license: BSD, see LICENSE for details.
+ *
+ */
+
+@import url("basic.css");
+
+/* -- page layout ----------------------------------------------------------- */
+
+body {
+    font-family: sans-serif;
+    font-size: 100%;
+    background-color: #11303d;
+    color: #000;
+    margin: 0;
+    padding: 0;
+}
+
+div.document {
+    background-color: #1c4e63;
+}
+
+div.documentwrapper {
+    float: left;
+    width: 100%;
+}
+
+div.bodywrapper {
+    margin: 0 0 0 230px;
+}
+
+div.body {
+    background-color: #ffffff;
+    color: #000000;
+    padding: 0 20px 30px 20px;
+}
+
+div.footer {
+    color: #ffffff;
+    width: 100%;
+    padding: 9px 0 9px 0;
+    text-align: center;
+    font-size: 75%;
+}
+
+div.footer a {
+    color: #ffffff;
+    text-decoration: underline;
+}
+
+div.related {
+    background-color: #133f52;
+    line-height: 30px;
+    color: #ffffff;
+}
+
+div.related a {
+    color: #ffffff;
+}
+
+div.sphinxsidebar {
+}
+
+div.sphinxsidebar h3 {
+    font-family: 'Trebuchet MS', sans-serif;
+    color: #ffffff;
+    font-size: 1.4em;
+    font-weight: normal;
+    margin: 0;
+    padding: 0;
+}
+
+div.sphinxsidebar h3 a {
+    color: #ffffff;
+}
+
+div.sphinxsidebar h4 {
+    font-family: 'Trebuchet MS', sans-serif;
+    color: #ffffff;
+    font-size: 1.3em;
+    font-weight: normal;
+    margin: 5px 0 0 0;
+    padding: 0;
+}
+
+div.sphinxsidebar p {
+    color: #ffffff;
+}
+
+div.sphinxsidebar p.topless {
+    margin: 5px 10px 10px 10px;
+}
+
+div.sphinxsidebar ul {
+    margin: 10px;
+    padding: 0;
+    color: #ffffff;
+}
+
+div.sphinxsidebar a {
+    color: #98dbcc;
+}
+
+div.sphinxsidebar input {
+    border: 1px solid #98dbcc;
+    font-family: sans-serif;
+    font-size: 1em;
+}
+
+
+
+/* -- hyperlink styles ------------------------------------------------------ */
+
+a {
+    color: #355f7c;
+    text-decoration: none;
+}
+
+a:visited {
+    color: #355f7c;
+    text-decoration: none;
+}
+
+a:hover {
+    text-decoration: underline;
+}
+
+
+
+/* -- body styles ----------------------------------------------------------- */
+
+div.body h1,
+div.body h2,
+div.body h3,
+div.body h4,
+div.body h5,
+div.body h6 {
+    font-family: 'Trebuchet MS', sans-serif;
+    background-color: #f2f2f2;
+    font-weight: normal;
+    color: #20435c;
+    border-bottom: 1px solid #ccc;
+    margin: 20px -20px 10px -20px;
+    padding: 3px 0 3px 10px;
+}
+
+div.body h1 { margin-top: 0; font-size: 200%; }
+div.body h2 { font-size: 160%; }
+div.body h3 { font-size: 140%; }
+div.body h4 { font-size: 120%; }
+div.body h5 { font-size: 110%; }
+div.body h6 { font-size: 100%; }
+
+a.headerlink {
+    color: #c60f0f;
+    font-size: 0.8em;
+    padding: 0 4px 0 4px;
+    text-decoration: none;
+}
+
+a.headerlink:hover {
+    background-color: #c60f0f;
+    color: white;
+}
+
+div.body p, div.body dd, div.body li {
+    text-align: justify;
+    line-height: 130%;
+}
+
+div.admonition p.admonition-title + p {
+    display: inline;
+}
+
+div.admonition p {
+    margin-bottom: 5px;
+}
+
+div.admonition pre {
+    margin-bottom: 5px;
+}
+
+div.admonition ul, div.admonition ol {
+    margin-bottom: 5px;
+}
+
+div.note {
+    background-color: #eee;
+    border: 1px solid #ccc;
+}
+
+div.seealso {
+    background-color: #ffc;
+    border: 1px solid #ff6;
+}
+
+div.topic {
+    background-color: #eee;
+}
+
+div.warning {
+    background-color: #ffe4e4;
+    border: 1px solid #f66;
+}
+
+p.admonition-title {
+    display: inline;
+}
+
+p.admonition-title:after {
+    content: ":";
+}
+
+pre {
+    padding: 5px;
+    background-color: #eeffcc;
+    color: #333333;
+    line-height: 120%;
+    border: 1px solid #ac9;
+    border-left: none;
+    border-right: none;
+}
+
+tt {
+    background-color: #ecf0f3;
+    padding: 0 1px 0 1px;
+    font-size: 0.95em;
+}
+
+th {
+    background-color: #ede;
+}
+
+.warning tt {
+    background: #efc2c2;
+}
+
+.note tt {
+    background: #d6d6d6;
+}
+
+.viewcode-back {
+    font-family: sans-serif;
+}
+
+div.viewcode-block:target {
+    background-color: #f4debf;
+    border-top: 1px solid #ac9;
+    border-bottom: 1px solid #ac9;
+}
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/doctools.js b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/doctools.js
new file mode 100644
index 0000000..c5455c9
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/doctools.js
@@ -0,0 +1,238 @@
+/*
+ * doctools.js
+ * ~~~~~~~~~~~
+ *
+ * Sphinx JavaScript utilities for all documentation.
+ *
+ * :copyright: Copyright 2007-2014 by the Sphinx team, see AUTHORS.
+ * :license: BSD, see LICENSE for details.
+ *
+ */
+
+/**
+ * select a different prefix for underscore
+ */
+$u = _.noConflict();
+
+/**
+ * make the code below compatible with browsers without
+ * an installed firebug like debugger
+if (!window.console || !console.firebug) {
+  var names = ["log", "debug", "info", "warn", "error", "assert", "dir",
+    "dirxml", "group", "groupEnd", "time", "timeEnd", "count", "trace",
+    "profile", "profileEnd"];
+  window.console = {};
+  for (var i = 0; i < names.length; ++i)
+    window.console[names[i]] = function() {};
+}
+ */
+
+/**
+ * small helper function to urldecode strings
+ */
+jQuery.urldecode = function(x) {
+  return decodeURIComponent(x).replace(/\+/g, ' ');
+};
+
+/**
+ * small helper function to urlencode strings
+ */
+jQuery.urlencode = encodeURIComponent;
+
+/**
+ * This function returns the parsed url parameters of the
+ * current request. Multiple values per key are supported,
+ * it will always return arrays of strings for the value parts.
+ */
+jQuery.getQueryParameters = function(s) {
+  if (typeof s == 'undefined')
+    s = document.location.search;
+  var parts = s.substr(s.indexOf('?') + 1).split('&');
+  var result = {};
+  for (var i = 0; i < parts.length; i++) {
+    var tmp = parts[i].split('=', 2);
+    var key = jQuery.urldecode(tmp[0]);
+    var value = jQuery.urldecode(tmp[1]);
+    if (key in result)
+      result[key].push(value);
+    else
+      result[key] = [value];
+  }
+  return result;
+};
+
+/**
+ * highlight a given string on a jquery object by wrapping it in
+ * span elements with the given class name.
+ */
+jQuery.fn.highlightText = function(text, className) {
+  function highlight(node) {
+    if (node.nodeType == 3) {
+      var val = node.nodeValue;
+      var pos = val.toLowerCase().indexOf(text);
+      if (pos >= 0 && !jQuery(node.parentNode).hasClass(className)) {
+        var span = document.createElement("span");
+        span.className = className;
+        span.appendChild(document.createTextNode(val.substr(pos, text.length)));
+        node.parentNode.insertBefore(span, node.parentNode.insertBefore(
+          document.createTextNode(val.substr(pos + text.length)),
+          node.nextSibling));
+        node.nodeValue = val.substr(0, pos);
+      }
+    }
+    else if (!jQuery(node).is("button, select, textarea")) {
+      jQuery.each(node.childNodes, function() {
+        highlight(this);
+      });
+    }
+  }
+  return this.each(function() {
+    highlight(this);
+  });
+};
+
+/**
+ * Small JavaScript module for the documentation.
+ */
+var Documentation = {
+
+  init : function() {
+    this.fixFirefoxAnchorBug();
+    this.highlightSearchWords();
+    this.initIndexTable();
+  },
+
+  /**
+   * i18n support
+   */
+  TRANSLATIONS : {},
+  PLURAL_EXPR : function(n) { return n == 1 ? 0 : 1; },
+  LOCALE : 'unknown',
+
+  // gettext and ngettext don't access this so that the functions
+  // can safely bound to a different name (_ = Documentation.gettext)
+  gettext : function(string) {
+    var translated = Documentation.TRANSLATIONS[string];
+    if (typeof translated == 'undefined')
+      return string;
+    return (typeof translated == 'string') ? translated : translated[0];
+  },
+
+  ngettext : function(singular, plural, n) {
+    var translated = Documentation.TRANSLATIONS[singular];
+    if (typeof translated == 'undefined')
+      return (n == 1) ? singular : plural;
+    return translated[Documentation.PLURALEXPR(n)];
+  },
+
+  addTranslations : function(catalog) {
+    for (var key in catalog.messages)
+      this.TRANSLATIONS[key] = catalog.messages[key];
+    this.PLURAL_EXPR = new Function('n', 'return +(' + catalog.plural_expr + ')');
+    this.LOCALE = catalog.locale;
+  },
+
+  /**
+   * add context elements like header anchor links
+   */
+  addContextElements : function() {
+    $('div[id] > :header:first').each(function() {
+      $('<a class="headerlink">\u00B6</a>').
+      attr('href', '#' + this.id).
+      attr('title', _('Permalink to this headline')).
+      appendTo(this);
+    });
+    $('dt[id]').each(function() {
+      $('<a class="headerlink">\u00B6</a>').
+      attr('href', '#' + this.id).
+      attr('title', _('Permalink to this definition')).
+      appendTo(this);
+    });
+  },
+
+  /**
+   * workaround a firefox stupidity
+   */
+  fixFirefoxAnchorBug : function() {
+    if (document.location.hash && $.browser.mozilla)
+      window.setTimeout(function() {
+        document.location.href += '';
+      }, 10);
+  },
+
+  /**
+   * highlight the search words provided in the url in the text
+   */
+  highlightSearchWords : function() {
+    var params = $.getQueryParameters();
+    var terms = (params.highlight) ? params.highlight[0].split(/\s+/) : [];
+    if (terms.length) {
+      var body = $('div.body');
+      if (!body.length) {
+        body = $('body');
+      }
+      window.setTimeout(function() {
+        $.each(terms, function() {
+          body.highlightText(this.toLowerCase(), 'highlighted');
+        });
+      }, 10);
+      $('<p class="highlight-link"><a href="javascript:Documentation.' +
+        'hideSearchWords()">' + _('Hide Search Matches') + '</a></p>')
+          .appendTo($('#searchbox'));
+    }
+  },
+
+  /**
+   * init the domain index toggle buttons
+   */
+  initIndexTable : function() {
+    var togglers = $('img.toggler').click(function() {
+      var src = $(this).attr('src');
+      var idnum = $(this).attr('id').substr(7);
+      $('tr.cg-' + idnum).toggle();
+      if (src.substr(-9) == 'minus.png')
+        $(this).attr('src', src.substr(0, src.length-9) + 'plus.png');
+      else
+        $(this).attr('src', src.substr(0, src.length-8) + 'minus.png');
+    }).css('display', '');
+    if (DOCUMENTATION_OPTIONS.COLLAPSE_INDEX) {
+        togglers.click();
+    }
+  },
+
+  /**
+   * helper function to hide the search marks again
+   */
+  hideSearchWords : function() {
+    $('#searchbox .highlight-link').fadeOut(300);
+    $('span.highlighted').removeClass('highlighted');
+  },
+
+  /**
+   * make the url absolute
+   */
+  makeURL : function(relativeURL) {
+    return DOCUMENTATION_OPTIONS.URL_ROOT + '/' + relativeURL;
+  },
+
+  /**
+   * get the current relative url
+   */
+  getCurrentURL : function() {
+    var path = document.location.pathname;
+    var parts = path.split(/\//);
+    $.each(DOCUMENTATION_OPTIONS.URL_ROOT.split(/\//), function() {
+      if (this == '..')
+        parts.pop();
+    });
+    var url = parts.join('/');
+    return path.substring(url.lastIndexOf('/') + 1, path.length - 1);
+  }
+};
+
+// quick alias for translations
+_ = Documentation.gettext;
+
+$(document).ready(function() {
+  Documentation.init();
+});
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/down-pressed.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/down-pressed.png
new file mode 100644
index 0000000000000000000000000000000000000000..6f7ad782782e4f8e39b0c6e15c7344700cdd2527
GIT binary patch
literal 368
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`jKx9jP7LeL$-D$|*pj^6U4S$Y
z{B+)352QE?JR*yM+OLB!qm#z$3ZNi+iKnkC`z>}Z23@f-Ava~9&<9T!#}JFtXD=!G
zGdl{fK6ro2OGiOl+hKvH6i=D3%%Y^j`yIkRn!8O>@bG)IQR0{Kf+mxNd=_WScA8u_
z3;8(7x2){m9`nt+U(Nab&1G)!{`SPVpDX$w8McLTzAJ39wprG3p4XLq$06M`%}2Yk
zRPPsb<eOBuJzzJtaBsDHruj&MO}CkI9@oM{u93MWs^*chA=$e7rUh<GoTlU#?wGGz
z*_K*(>ES*dnYm1wkGL;iioAUB*Or2kz6(-M_r_#Me-<g+a_(*JjN&U*z02OX#~$%(
z6#3ZLekrlFz3AKX``cC&$K^ccDa(j?XLM8b!=w9;#rq6gQ-fH_ZUFtx;OXk;vd$@?
F2>`{mj$Z%(

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/down.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/down.png
new file mode 100644
index 0000000000000000000000000000000000000000..3003a88770de3977d47a2ba69893436a2860f9e7
GIT binary patch
literal 363
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`jKx9jP7LeL$-D$|*pj^6U4S$Y
z{B+)352QE?JR*yM+OLB!qm#z$3ZNi+iKnkC`z>}xaV3tUZ$qnrLa#kt978NlpS`ru
z&)HFc^}^>{UOEce+71h5nn>6&w6A!ie<Ab_+oUB-{c$>Nbu1wh)UGh{8~et^#oZ1#
z>T7oM=FZ~xXWnTo{qnXm$ZLOlqGswI_m2{XwVK)IJmBjW{J3-B3x@C=M{ShWt#<pw
z+y29?H~r3Ic5@5&Ry#4lLZ0TfgDn1@D+(sA?zAeN{MGSl)<;wKn{AaYbJjJ-X;-#|
zTD>fYS9M?R;8K$~YwlIqwf>VA7q=YKcwf2DS4Zj5inDKXXB1zl=(YO3ST6~rDq)&z
z*o>z)=hxrfG-cDBW0G$!?6{M<$@{_4{m1o%Ub!naEtn|@^frU1tDnm{r-UW|!^@B8

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/file.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/file.png
new file mode 100644
index 0000000000000000000000000000000000000000..d18082e397e7e54f20721af768c4c2983258f1b4
GIT binary patch
literal 392
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`Y)RhkE)4%caKYZ?lYt_f1s;*b
z3=G`DAk4@xYmNj^kiEpy*OmP$Hy<xMqvo~{83qPMQBN1g5R21mCvNmQ;vmqr-?K<V
zU4kQ;TS-l(;>OL$D9)yc9|lc|nKf<9@eUiWd>3GuTC!a5vdfWYEazjncPj5ZQX%+1
zt8B*4=d)!cdDz4wr^#OMYfqGz$1LDFF>|#>*O?<HXR=hzTfCLc!DZQEwT&GKx6RhQ
zo))l-Eh>AGil(WEs?wLLy{Gj2J_@opDm%`dlax3yA*@*N$G&*ukFv>P8+2CBWO(qz
zD0k1@kN>hhb1_6`&wrCswzINE(evt-5C1B^STi2@P<G<wTm_|``|B7th)+*kX+Pib
z*M}qKJqcfCd_2yP9QQKsOSb)vO-|{xyF)I_-07lx@Zvo#rJ$WIhTj)AKCk@a+86Xn
ktMBn$GheTj#{azILsys7Te#I72ZkAgr>mdKI;Vst0PQB6!2kdN

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/jquery.js b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/jquery.js
new file mode 100644
index 0000000..83589da
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/jquery.js
@@ -0,0 +1,2 @@
+/*! jQuery v1.8.3 jquery.com | jquery.org/license */
+(function(e,t){function _(e){var t=M[e]={};return v.each(e.split(y),function(e,n){t[n]=!0}),t}function H(e,n,r){if(r===t&&e.nodeType===1){var i="data-"+n.replace(P,"-$1").toLowerCase();r=e.getAttribute(i);if(typeof r=="string"){try{r=r==="true"?!0:r==="false"?!1:r==="null"?null:+r+""===r?+r:D.test(r)?v.parseJSON(r):r}catch(s){}v.data(e,n,r)}else r=t}return r}function B(e){var t;for(t in e){if(t==="data"&&v.isEmptyObject(e[t]))continue;if(t!=="toJSON")return!1}return!0}function et(){return!1}function tt(){return!0}function ut(e){return!e||!e.parentNode||e.parentNode.nodeType===11}function at(e,t){do e=e[t];while(e&&e.nodeType!==1);return e}function ft(e,t,n){t=t||0;if(v.isFunction(t))return v.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return v.grep(e,function(e,r){return e===t===n});if(typeof t=="string"){var r=v.grep(e,function(e){return e.nodeType===1});if(it.test(t))return v.filter(t,r,!n);t=v.filter(t,r)}return v.grep(e,function(e,r){return v.inArray(e,t)>=0===n})}function lt(e){var t=ct.split("|"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function At(e,t){if(t.nodeType!==1||!v.hasData(e))return;var n,r,i,s=v._data(e),o=v._data(t,s),u=s.events;if(u){delete o.handle,o.events={};for(n in u)for(r=0,i=u[n].length;r<i;r++)v.event.add(t,n,u[n][r])}o.data&&(o.data=v.extend({},o.data))}function Ot(e,t){var n;if(t.nodeType!==1)return;t.clearAttributes&&t.clearAttributes(),t.mergeAttributes&&t.mergeAttributes(e),n=t.nodeName.toLowerCase(),n==="object"?(t.parentNode&&(t.outerHTML=e.outerHTML),v.support.html5Clone&&e.innerHTML&&!v.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):n==="input"&&Et.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):n==="option"?t.selected=e.defaultSelected:n==="input"||n==="textarea"?t.defaultValue=e.defaultValue:n==="script"&&t.text!==e.text&&(t.text=e.text),t.removeAttribute(v.expando)}function Mt(e){return typeof e.getElementsByTagName!="undefined"?e.getElementsByTagName("*"):typeof e.querySelectorAll!="undefined"?e.querySelectorAll("*"):[]}function _t(e){Et.test(e.type)&&(e.defaultChecked=e.checked)}function Qt(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Jt.length;while(i--){t=Jt[i]+n;if(t in e)return t}return r}function Gt(e,t){return e=t||e,v.css(e,"display")==="none"||!v.contains(e.ownerDocument,e)}function Yt(e,t){var n,r,i=[],s=0,o=e.length;for(;s<o;s++){n=e[s];if(!n.style)continue;i[s]=v._data(n,"olddisplay"),t?(!i[s]&&n.style.display==="none"&&(n.style.display=""),n.style.display===""&&Gt(n)&&(i[s]=v._data(n,"olddisplay",nn(n.nodeName)))):(r=Dt(n,"display"),!i[s]&&r!=="none"&&v._data(n,"olddisplay",r))}for(s=0;s<o;s++){n=e[s];if(!n.style)continue;if(!t||n.style.display==="none"||n.style.display==="")n.style.display=t?i[s]||"":"none"}return e}function Zt(e,t,n){var r=Rt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function en(e,t,n,r){var i=n===(r?"border":"content")?4:t==="width"?1:0,s=0;for(;i<4;i+=2)n==="margin"&&(s+=v.css(e,n+$t[i],!0)),r?(n==="content"&&(s-=parseFloat(Dt(e,"padding"+$t[i]))||0),n!=="margin"&&(s-=parseFloat(Dt(e,"border"+$t[i]+"Width"))||0)):(s+=parseFloat(Dt(e,"padding"+$t[i]))||0,n!=="padding"&&(s+=parseFloat(Dt(e,"border"+$t[i]+"Width"))||0));return s}function tn(e,t,n){var r=t==="width"?e.offsetWidth:e.offsetHeight,i=!0,s=v.support.boxSizing&&v.css(e,"boxSizing")==="border-box";if(r<=0||r==null){r=Dt(e,t);if(r<0||r==null)r=e.style[t];if(Ut.test(r))return r;i=s&&(v.support.boxSizingReliable||r===e.style[t]),r=parseFloat(r)||0}return r+en(e,t,n||(s?"border":"content"),i)+"px"}function nn(e){if(Wt[e])return Wt[e];var t=v("<"+e+">").appendTo(i.body),n=t.css("display");t.remove();if(n==="none"||n===""){Pt=i.body.appendChild(Pt||v.extend(i.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!Ht||!Pt.createElement)Ht=(Pt.contentWindow||Pt.contentDocument).document,Ht.write("<!doctype html><html><body>"),Ht.close();t=Ht.body.appendChild(Ht.createElement(e)),n=Dt(t,"display"),i.body.removeChild(Pt)}return Wt[e]=n,n}function fn(e,t,n,r){var i;if(v.isArray(t))v.each(t,function(t,i){n||sn.test(e)?r(e,i):fn(e+"["+(typeof i=="object"?t:"")+"]",i,n,r)});else if(!n&&v.type(t)==="object")for(i in t)fn(e+"["+i+"]",t[i],n,r);else r(e,t)}function Cn(e){return function(t,n){typeof t!="string"&&(n=t,t="*");var r,i,s,o=t.toLowerCase().split(y),u=0,a=o.length;if(v.isFunction(n))for(;u<a;u++)r=o[u],s=/^\+/.test(r),s&&(r=r.substr(1)||"*"),i=e[r]=e[r]||[],i[s?"unshift":"push"](n)}}function kn(e,n,r,i,s,o){s=s||n.dataTypes[0],o=o||{},o[s]=!0;var u,a=e[s],f=0,l=a?a.length:0,c=e===Sn;for(;f<l&&(c||!u);f++)u=a[f](n,r,i),typeof u=="string"&&(!c||o[u]?u=t:(n.dataTypes.unshift(u),u=kn(e,n,r,i,u,o)));return(c||!u)&&!o["*"]&&(u=kn(e,n,r,i,"*",o)),u}function Ln(e,n){var r,i,s=v.ajaxSettings.flatOptions||{};for(r in n)n[r]!==t&&((s[r]?e:i||(i={}))[r]=n[r]);i&&v.extend(!0,e,i)}function An(e,n,r){var i,s,o,u,a=e.contents,f=e.dataTypes,l=e.responseFields;for(s in l)s in r&&(n[l[s]]=r[s]);while(f[0]==="*")f.shift(),i===t&&(i=e.mimeType||n.getResponseHeader("content-type"));if(i)for(s in a)if(a[s]&&a[s].test(i)){f.unshift(s);break}if(f[0]in r)o=f[0];else{for(s in r){if(!f[0]||e.converters[s+" "+f[0]]){o=s;break}u||(u=s)}o=o||u}if(o)return o!==f[0]&&f.unshift(o),r[o]}function On(e,t){var n,r,i,s,o=e.dataTypes.slice(),u=o[0],a={},f=0;e.dataFilter&&(t=e.dataFilter(t,e.dataType));if(o[1])for(n in e.converters)a[n.toLowerCase()]=e.converters[n];for(;i=o[++f];)if(i!=="*"){if(u!=="*"&&u!==i){n=a[u+" "+i]||a["* "+i];if(!n)for(r in a){s=r.split(" ");if(s[1]===i){n=a[u+" "+s[0]]||a["* "+s[0]];if(n){n===!0?n=a[r]:a[r]!==!0&&(i=s[0],o.splice(f--,0,i));break}}}if(n!==!0)if(n&&e["throws"])t=n(t);else try{t=n(t)}catch(l){return{state:"parsererror",error:n?l:"No conversion from "+u+" to "+i}}}u=i}return{state:"success",data:t}}function Fn(){try{return new e.XMLHttpRequest}catch(t){}}function In(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function $n(){return setTimeout(function(){qn=t},0),qn=v.now()}function Jn(e,t){v.each(t,function(t,n){var r=(Vn[t]||[]).concat(Vn["*"]),i=0,s=r.length;for(;i<s;i++)if(r[i].call(e,t,n))return})}function Kn(e,t,n){var r,i=0,s=0,o=Xn.length,u=v.Deferred().always(function(){delete a.elem}),a=function(){var t=qn||$n(),n=Math.max(0,f.startTime+f.duration-t),r=n/f.duration||0,i=1-r,s=0,o=f.tweens.length;for(;s<o;s++)f.tweens[s].run(i);return u.notifyWith(e,[f,i,n]),i<1&&o?n:(u.resolveWith(e,[f]),!1)},f=u.promise({elem:e,props:v.extend({},t),opts:v.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:qn||$n(),duration:n.duration,tweens:[],createTween:function(t,n,r){var i=v.Tween(e,f.opts,t,n,f.opts.specialEasing[t]||f.opts.easing);return f.tweens.push(i),i},stop:function(t){var n=0,r=t?f.tweens.length:0;for(;n<r;n++)f.tweens[n].run(1);return t?u.resolveWith(e,[f,t]):u.rejectWith(e,[f,t]),this}}),l=f.props;Qn(l,f.opts.specialEasing);for(;i<o;i++){r=Xn[i].call(f,e,l,f.opts);if(r)return r}return Jn(f,l),v.isFunction(f.opts.start)&&f.opts.start.call(e,f),v.fx.timer(v.extend(a,{anim:f,queue:f.opts.queue,elem:e})),f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always)}function Qn(e,t){var n,r,i,s,o;for(n in e){r=v.camelCase(n),i=t[r],s=e[n],v.isArray(s)&&(i=s[1],s=e[n]=s[0]),n!==r&&(e[r]=s,delete e[n]),o=v.cssHooks[r];if(o&&"expand"in o){s=o.expand(s),delete e[r];for(n in s)n in e||(e[n]=s[n],t[n]=i)}else t[r]=i}}function Gn(e,t,n){var r,i,s,o,u,a,f,l,c,h=this,p=e.style,d={},m=[],g=e.nodeType&&Gt(e);n.queue||(l=v._queueHooks(e,"fx"),l.unqueued==null&&(l.unqueued=0,c=l.empty.fire,l.empty.fire=function(){l.unqueued||c()}),l.unqueued++,h.always(function(){h.always(function(){l.unqueued--,v.queue(e,"fx").length||l.empty.fire()})})),e.nodeType===1&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],v.css(e,"display")==="inline"&&v.css(e,"float")==="none"&&(!v.support.inlineBlockNeedsLayout||nn(e.nodeName)==="inline"?p.display="inline-block":p.zoom=1)),n.overflow&&(p.overflow="hidden",v.support.shrinkWrapBlocks||h.done(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t){s=t[r];if(Un.exec(s)){delete t[r],a=a||s==="toggle";if(s===(g?"hide":"show"))continue;m.push(r)}}o=m.length;if(o){u=v._data(e,"fxshow")||v._data(e,"fxshow",{}),"hidden"in u&&(g=u.hidden),a&&(u.hidden=!g),g?v(e).show():h.done(function(){v(e).hide()}),h.done(function(){var t;v.removeData(e,"fxshow",!0);for(t in d)v.style(e,t,d[t])});for(r=0;r<o;r++)i=m[r],f=h.createTween(i,g?u[i]:0),d[i]=u[i]||v.style(e,i),i in u||(u[i]=f.start,g&&(f.end=f.start,f.start=i==="width"||i==="height"?1:0))}}function Yn(e,t,n,r,i){return new Yn.prototype.init(e,t,n,r,i)}function Zn(e,t){var n,r={height:e},i=0;t=t?1:0;for(;i<4;i+=2-t)n=$t[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function tr(e){return v.isWindow(e)?e:e.nodeType===9?e.defaultView||e.parentWindow:!1}var n,r,i=e.document,s=e.location,o=e.navigator,u=e.jQuery,a=e.$,f=Array.prototype.push,l=Array.prototype.slice,c=Array.prototype.indexOf,h=Object.prototype.toString,p=Object.prototype.hasOwnProperty,d=String.prototype.trim,v=function(e,t){return new v.fn.init(e,t,n)},m=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,g=/\S/,y=/\s+/,b=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,w=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,E=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,S=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,T=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,N=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,C=/^-ms-/,k=/-([\da-z])/gi,L=function(e,t){return(t+"").toUpperCase()},A=function(){i.addEventListener?(i.removeEventListener("DOMContentLoaded",A,!1),v.ready()):i.readyState==="complete"&&(i.detachEvent("onreadystatechange",A),v.ready())},O={};v.fn=v.prototype={constructor:v,init:function(e,n,r){var s,o,u,a;if(!e)return this;if(e.nodeType)return this.context=this[0]=e,this.length=1,this;if(typeof e=="string"){e.charAt(0)==="<"&&e.charAt(e.length-1)===">"&&e.length>=3?s=[null,e,null]:s=w.exec(e);if(s&&(s[1]||!n)){if(s[1])return n=n instanceof v?n[0]:n,a=n&&n.nodeType?n.ownerDocument||n:i,e=v.parseHTML(s[1],a,!0),E.test(s[1])&&v.isPlainObject(n)&&this.attr.call(e,n,!0),v.merge(this,e);o=i.getElementById(s[2]);if(o&&o.parentNode){if(o.id!==s[2])return r.find(e);this.length=1,this[0]=o}return this.context=i,this.selector=e,this}return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e)}return v.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),v.makeArray(e,this))},selector:"",jquery:"1.8.3",length:0,size:function(){return this.length},toArray:function(){return l.call(this)},get:function(e){return e==null?this.toArray():e<0?this[this.length+e]:this[e]},pushStack:function(e,t,n){var r=v.merge(this.constructor(),e);return r.prevObject=this,r.context=this.context,t==="find"?r.selector=this.selector+(this.selector?" ":"")+n:t&&(r.selector=this.selector+"."+t+"("+n+")"),r},each:function(e,t){return v.each(this,e,t)},ready:function(e){return v.ready.promise().done(e),this},eq:function(e){return e=+e,e===-1?this.slice(e):this.slice(e,e+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(l.apply(this,arguments),"slice",l.call(arguments).join(","))},map:function(e){return this.pushStack(v.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:[].sort,splice:[].splice},v.fn.init.prototype=v.fn,v.extend=v.fn.extend=function(){var e,n,r,i,s,o,u=arguments[0]||{},a=1,f=arguments.length,l=!1;typeof u=="boolean"&&(l=u,u=arguments[1]||{},a=2),typeof u!="object"&&!v.isFunction(u)&&(u={}),f===a&&(u=this,--a);for(;a<f;a++)if((e=arguments[a])!=null)for(n in e){r=u[n],i=e[n];if(u===i)continue;l&&i&&(v.isPlainObject(i)||(s=v.isArray(i)))?(s?(s=!1,o=r&&v.isArray(r)?r:[]):o=r&&v.isPlainObject(r)?r:{},u[n]=v.extend(l,o,i)):i!==t&&(u[n]=i)}return u},v.extend({noConflict:function(t){return e.$===v&&(e.$=a),t&&e.jQuery===v&&(e.jQuery=u),v},isReady:!1,readyWait:1,holdReady:function(e){e?v.readyWait++:v.ready(!0)},ready:function(e){if(e===!0?--v.readyWait:v.isReady)return;if(!i.body)return setTimeout(v.ready,1);v.isReady=!0;if(e!==!0&&--v.readyWait>0)return;r.resolveWith(i,[v]),v.fn.trigger&&v(i).trigger("ready").off("ready")},isFunction:function(e){return v.type(e)==="function"},isArray:Array.isArray||function(e){return v.type(e)==="array"},isWindow:function(e){return e!=null&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return e==null?String(e):O[h.call(e)]||"object"},isPlainObject:function(e){if(!e||v.type(e)!=="object"||e.nodeType||v.isWindow(e))return!1;try{if(e.constructor&&!p.call(e,"constructor")&&!p.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}var r;for(r in e);return r===t||p.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw new Error(e)},parseHTML:function(e,t,n){var r;return!e||typeof e!="string"?null:(typeof t=="boolean"&&(n=t,t=0),t=t||i,(r=E.exec(e))?[t.createElement(r[1])]:(r=v.buildFragment([e],t,n?null:[]),v.merge([],(r.cacheable?v.clone(r.fragment):r.fragment).childNodes)))},parseJSON:function(t){if(!t||typeof t!="string")return null;t=v.trim(t);if(e.JSON&&e.JSON.parse)return e.JSON.parse(t);if(S.test(t.replace(T,"@").replace(N,"]").replace(x,"")))return(new Function("return "+t))();v.error("Invalid JSON: "+t)},parseXML:function(n){var r,i;if(!n||typeof n!="string")return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,"text/xml")):(r=new ActiveXObject("Microsoft.XMLDOM"),r.async="false",r.loadXML(n))}catch(s){r=t}return(!r||!r.documentElement||r.getElementsByTagName("parsererror").length)&&v.error("Invalid XML: "+n),r},noop:function(){},globalEval:function(t){t&&g.test(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(C,"ms-").replace(k,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,n,r){var i,s=0,o=e.length,u=o===t||v.isFunction(e);if(r){if(u){for(i in e)if(n.apply(e[i],r)===!1)break}else for(;s<o;)if(n.apply(e[s++],r)===!1)break}else if(u){for(i in e)if(n.call(e[i],i,e[i])===!1)break}else for(;s<o;)if(n.call(e[s],s,e[s++])===!1)break;return e},trim:d&&!d.call("\ufeff\u00a0")?function(e){return e==null?"":d.call(e)}:function(e){return e==null?"":(e+"").replace(b,"")},makeArray:function(e,t){var n,r=t||[];return e!=null&&(n=v.type(e),e.length==null||n==="string"||n==="function"||n==="regexp"||v.isWindow(e)?f.call(r,e):v.merge(r,e)),r},inArray:function(e,t,n){var r;if(t){if(c)return c.call(t,e,n);r=t.length,n=n?n<0?Math.max(0,r+n):n:0;for(;n<r;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,s=0;if(typeof r=="number")for(;s<r;s++)e[i++]=n[s];else while(n[s]!==t)e[i++]=n[s++];return e.length=i,e},grep:function(e,t,n){var r,i=[],s=0,o=e.length;n=!!n;for(;s<o;s++)r=!!t(e[s],s),n!==r&&i.push(e[s]);return i},map:function(e,n,r){var i,s,o=[],u=0,a=e.length,f=e instanceof v||a!==t&&typeof a=="number"&&(a>0&&e[0]&&e[a-1]||a===0||v.isArray(e));if(f)for(;u<a;u++)i=n(e[u],u,r),i!=null&&(o[o.length]=i);else for(s in e)i=n(e[s],s,r),i!=null&&(o[o.length]=i);return o.concat.apply([],o)},guid:1,proxy:function(e,n){var r,i,s;return typeof n=="string"&&(r=e[n],n=e,e=r),v.isFunction(e)?(i=l.call(arguments,2),s=function(){return e.apply(n,i.concat(l.call(arguments)))},s.guid=e.guid=e.guid||v.guid++,s):t},access:function(e,n,r,i,s,o,u){var a,f=r==null,l=0,c=e.length;if(r&&typeof r=="object"){for(l in r)v.access(e,n,l,r[l],1,o,i);s=1}else if(i!==t){a=u===t&&v.isFunction(i),f&&(a?(a=n,n=function(e,t,n){return a.call(v(e),n)}):(n.call(e,i),n=null));if(n)for(;l<c;l++)n(e[l],r,a?i.call(e[l],l,n(e[l],r)):i,u);s=1}return s?e:f?n.call(e):c?n(e[0],r):o},now:function(){return(new Date).getTime()}}),v.ready.promise=function(t){if(!r){r=v.Deferred();if(i.readyState==="complete")setTimeout(v.ready,1);else if(i.addEventListener)i.addEventListener("DOMContentLoaded",A,!1),e.addEventListener("load",v.ready,!1);else{i.attachEvent("onreadystatechange",A),e.attachEvent("onload",v.ready);var n=!1;try{n=e.frameElement==null&&i.documentElement}catch(s){}n&&n.doScroll&&function o(){if(!v.isReady){try{n.doScroll("left")}catch(e){return setTimeout(o,50)}v.ready()}}()}}return r.promise(t)},v.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(e,t){O["[object "+t+"]"]=t.toLowerCase()}),n=v(i);var M={};v.Callbacks=function(e){e=typeof e=="string"?M[e]||_(e):v.extend({},e);var n,r,i,s,o,u,a=[],f=!e.once&&[],l=function(t){n=e.memory&&t,r=!0,u=s||0,s=0,o=a.length,i=!0;for(;a&&u<o;u++)if(a[u].apply(t[0],t[1])===!1&&e.stopOnFalse){n=!1;break}i=!1,a&&(f?f.length&&l(f.shift()):n?a=[]:c.disable())},c={add:function(){if(a){var t=a.length;(function r(t){v.each(t,function(t,n){var i=v.type(n);i==="function"?(!e.unique||!c.has(n))&&a.push(n):n&&n.length&&i!=="string"&&r(n)})})(arguments),i?o=a.length:n&&(s=t,l(n))}return this},remove:function(){return a&&v.each(arguments,function(e,t){var n;while((n=v.inArray(t,a,n))>-1)a.splice(n,1),i&&(n<=o&&o--,n<=u&&u--)}),this},has:function(e){return v.inArray(e,a)>-1},empty:function(){return a=[],this},disable:function(){return a=f=n=t,this},disabled:function(){return!a},lock:function(){return f=t,n||c.disable(),this},locked:function(){return!f},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],a&&(!r||f)&&(i?f.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},v.extend({Deferred:function(e){var t=[["resolve","done",v.Callbacks("once memory"),"resolved"],["reject","fail",v.Callbacks("once memory"),"rejected"],["notify","progress",v.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return v.Deferred(function(n){v.each(t,function(t,r){var s=r[0],o=e[t];i[r[1]](v.isFunction(o)?function(){var e=o.apply(this,arguments);e&&v.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+"With"](this===i?n:this,[e])}:n[s])}),e=null}).promise()},promise:function(e){return e!=null?v.extend(e,r):r}},i={};return r.pipe=r.then,v.each(t,function(e,s){var o=s[2],u=s[3];r[s[1]]=o.add,u&&o.add(function(){n=u},t[e^1][2].disable,t[2][2].lock),i[s[0]]=o.fire,i[s[0]+"With"]=o.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=l.call(arguments),r=n.length,i=r!==1||e&&v.isFunction(e.promise)?r:0,s=i===1?e:v.Deferred(),o=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?l.call(arguments):r,n===u?s.notifyWith(t,n):--i||s.resolveWith(t,n)}},u,a,f;if(r>1){u=new Array(r),a=new Array(r),f=new Array(r);for(;t<r;t++)n[t]&&v.isFunction(n[t].promise)?n[t].promise().done(o(t,f,n)).fail(s.reject).progress(o(t,a,u)):--i}return i||s.resolveWith(f,n),s.promise()}}),v.support=function(){var t,n,r,s,o,u,a,f,l,c,h,p=i.createElement("div");p.setAttribute("className","t"),p.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=p.getElementsByTagName("*"),r=p.getElementsByTagName("a")[0];if(!n||!r||!n.length)return{};s=i.createElement("select"),o=s.appendChild(i.createElement("option")),u=p.getElementsByTagName("input")[0],r.style.cssText="top:1px;float:left;opacity:.5",t={leadingWhitespace:p.firstChild.nodeType===3,tbody:!p.getElementsByTagName("tbody").length,htmlSerialize:!!p.getElementsByTagName("link").length,style:/top/.test(r.getAttribute("style")),hrefNormalized:r.getAttribute("href")==="/a",opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:u.value==="on",optSelected:o.selected,getSetAttribute:p.className!=="t",enctype:!!i.createElement("form").enctype,html5Clone:i.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:i.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},u.checked=!0,t.noCloneChecked=u.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!o.disabled;try{delete p.test}catch(d){t.deleteExpando=!1}!p.addEventListener&&p.attachEvent&&p.fireEvent&&(p.attachEvent("onclick",h=function(){t.noCloneEvent=!1}),p.cloneNode(!0).fireEvent("onclick"),p.detachEvent("onclick",h)),u=i.createElement("input"),u.value="t",u.setAttribute("type","radio"),t.radioValue=u.value==="t",u.setAttribute("checked","checked"),u.setAttribute("name","t"),p.appendChild(u),a=i.createDocumentFragment(),a.appendChild(p.lastChild),t.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,t.appendChecked=u.checked,a.removeChild(u),a.appendChild(p);if(p.attachEvent)for(l in{submit:!0,change:!0,focusin:!0})f="on"+l,c=f in p,c||(p.setAttribute(f,"return;"),c=typeof p[f]=="function"),t[l+"Bubbles"]=c;return v(function(){var n,r,s,o,u="padding:0;margin:0;border:0;display:block;overflow:hidden;",a=i.getElementsByTagName("body")[0];if(!a)return;n=i.createElement("div"),n.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",a.insertBefore(n,a.firstChild),r=i.createElement("div"),n.appendChild(r),r.innerHTML="<table><tr><td></td><td>t</td></tr></table>",s=r.getElementsByTagName("td"),s[0].style.cssText="padding:0;margin:0;border:0;display:none",c=s[0].offsetHeight===0,s[0].style.display="",s[1].style.display="none",t.reliableHiddenOffsets=c&&s[0].offsetHeight===0,r.innerHTML="",r.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",t.boxSizing=r.offsetWidth===4,t.doesNotIncludeMarginInBodyOffset=a.offsetTop!==1,e.getComputedStyle&&(t.pixelPosition=(e.getComputedStyle(r,null)||{}).top!=="1%",t.boxSizingReliable=(e.getComputedStyle(r,null)||{width:"4px"}).width==="4px",o=i.createElement("div"),o.style.cssText=r.style.cssText=u,o.style.marginRight=o.style.width="0",r.style.width="1px",r.appendChild(o),t.reliableMarginRight=!parseFloat((e.getComputedStyle(o,null)||{}).marginRight)),typeof r.style.zoom!="undefined"&&(r.innerHTML="",r.style.cssText=u+"width:1px;padding:1px;display:inline;zoom:1",t.inlineBlockNeedsLayout=r.offsetWidth===3,r.style.display="block",r.style.overflow="visible",r.innerHTML="<div></div>",r.firstChild.style.width="5px",t.shrinkWrapBlocks=r.offsetWidth!==3,n.style.zoom=1),a.removeChild(n),n=r=s=o=null}),a.removeChild(p),n=r=s=o=u=a=p=null,t}();var D=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,P=/([A-Z])/g;v.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(v.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(e){return e=e.nodeType?v.cache[e[v.expando]]:e[v.expando],!!e&&!B(e)},data:function(e,n,r,i){if(!v.acceptData(e))return;var s,o,u=v.expando,a=typeof n=="string",f=e.nodeType,l=f?v.cache:e,c=f?e[u]:e[u]&&u;if((!c||!l[c]||!i&&!l[c].data)&&a&&r===t)return;c||(f?e[u]=c=v.deletedIds.pop()||v.guid++:c=u),l[c]||(l[c]={},f||(l[c].toJSON=v.noop));if(typeof n=="object"||typeof n=="function")i?l[c]=v.extend(l[c],n):l[c].data=v.extend(l[c].data,n);return s=l[c],i||(s.data||(s.data={}),s=s.data),r!==t&&(s[v.camelCase(n)]=r),a?(o=s[n],o==null&&(o=s[v.camelCase(n)])):o=s,o},removeData:function(e,t,n){if(!v.acceptData(e))return;var r,i,s,o=e.nodeType,u=o?v.cache:e,a=o?e[v.expando]:v.expando;if(!u[a])return;if(t){r=n?u[a]:u[a].data;if(r){v.isArray(t)||(t in r?t=[t]:(t=v.camelCase(t),t in r?t=[t]:t=t.split(" ")));for(i=0,s=t.length;i<s;i++)delete r[t[i]];if(!(n?B:v.isEmptyObject)(r))return}}if(!n){delete u[a].data;if(!B(u[a]))return}o?v.cleanData([e],!0):v.support.deleteExpando||u!=u.window?delete u[a]:u[a]=null},_data:function(e,t,n){return v.data(e,t,n,!0)},acceptData:function(e){var t=e.nodeName&&v.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute("classid")===t}}),v.fn.extend({data:function(e,n){var r,i,s,o,u,a=this[0],f=0,l=null;if(e===t){if(this.length){l=v.data(a);if(a.nodeType===1&&!v._data(a,"parsedAttrs")){s=a.attributes;for(u=s.length;f<u;f++)o=s[f].name,o.indexOf("data-")||(o=v.camelCase(o.substring(5)),H(a,o,l[o]));v._data(a,"parsedAttrs",!0)}}return l}return typeof e=="object"?this.each(function(){v.data(this,e)}):(r=e.split(".",2),r[1]=r[1]?"."+r[1]:"",i=r[1]+"!",v.access(this,function(n){if(n===t)return l=this.triggerHandler("getData"+i,[r[0]]),l===t&&a&&(l=v.data(a,e),l=H(a,e,l)),l===t&&r[1]?this.data(r[0]):l;r[1]=n,this.each(function(){var t=v(this);t.triggerHandler("setData"+i,r),v.data(this,e,n),t.triggerHandler("changeData"+i,r)})},null,n,arguments.length>1,null,!1))},removeData:function(e){return this.each(function(){v.removeData(this,e)})}}),v.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=v._data(e,t),n&&(!r||v.isArray(n)?r=v._data(e,t,v.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=v.queue(e,t),r=n.length,i=n.shift(),s=v._queueHooks(e,t),o=function(){v.dequeue(e,t)};i==="inprogress"&&(i=n.shift(),r--),i&&(t==="fx"&&n.unshift("inprogress"),delete s.stop,i.call(e,o,s)),!r&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return v._data(e,n)||v._data(e,n,{empty:v.Callbacks("once memory").add(function(){v.removeData(e,t+"queue",!0),v.removeData(e,n,!0)})})}}),v.fn.extend({queue:function(e,n){var r=2;return typeof e!="string"&&(n=e,e="fx",r--),arguments.length<r?v.queue(this[0],e):n===t?this:this.each(function(){var t=v.queue(this,e,n);v._queueHooks(this,e),e==="fx"&&t[0]!=="inprogress"&&v.dequeue(this,e)})},dequeue:function(e){return this.each(function(){v.dequeue(this,e)})},delay:function(e,t){return e=v.fx?v.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var r,i=1,s=v.Deferred(),o=this,u=this.length,a=function(){--i||s.resolveWith(o,[o])};typeof e!="string"&&(n=e,e=t),e=e||"fx";while(u--)r=v._data(o[u],e+"queueHooks"),r&&r.empty&&(i++,r.empty.add(a));return a(),s.promise(n)}});var j,F,I,q=/[\t\r\n]/g,R=/\r/g,U=/^(?:button|input)$/i,z=/^(?:button|input|object|select|textarea)$/i,W=/^a(?:rea|)$/i,X=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,V=v.support.getSetAttribute;v.fn.extend({attr:function(e,t){return v.access(this,v.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){v.removeAttr(this,e)})},prop:function(e,t){return v.access(this,v.prop,e,t,arguments.length>1)},removeProp:function(e){return e=v.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,s,o,u;if(v.isFunction(e))return this.each(function(t){v(this).addClass(e.call(this,t,this.className))});if(e&&typeof e=="string"){t=e.split(y);for(n=0,r=this.length;n<r;n++){i=this[n];if(i.nodeType===1)if(!i.className&&t.length===1)i.className=e;else{s=" "+i.className+" ";for(o=0,u=t.length;o<u;o++)s.indexOf(" "+t[o]+" ")<0&&(s+=t[o]+" ");i.className=v.trim(s)}}}return this},removeClass:function(e){var n,r,i,s,o,u,a;if(v.isFunction(e))return this.each(function(t){v(this).removeClass(e.call(this,t,this.className))});if(e&&typeof e=="string"||e===t){n=(e||"").split(y);for(u=0,a=this.length;u<a;u++){i=this[u];if(i.nodeType===1&&i.className){r=(" "+i.className+" ").replace(q," ");for(s=0,o=n.length;s<o;s++)while(r.indexOf(" "+n[s]+" ")>=0)r=r.replace(" "+n[s]+" "," ");i.className=e?v.trim(r):""}}}return this},toggleClass:function(e,t){var n=typeof e,r=typeof t=="boolean";return v.isFunction(e)?this.each(function(n){v(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(n==="string"){var i,s=0,o=v(this),u=t,a=e.split(y);while(i=a[s++])u=r?u:!o.hasClass(i),o[u?"addClass":"removeClass"](i)}else if(n==="undefined"||n==="boolean")this.className&&v._data(this,"__className__",this.className),this.className=this.className||e===!1?"":v._data(this,"__className__")||""})},hasClass:function(e){var t=" "+e+" ",n=0,r=this.length;for(;n<r;n++)if(this[n].nodeType===1&&(" "+this[n].className+" ").replace(q," ").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,s=this[0];if(!arguments.length){if(s)return n=v.valHooks[s.type]||v.valHooks[s.nodeName.toLowerCase()],n&&"get"in n&&(r=n.get(s,"value"))!==t?r:(r=s.value,typeof r=="string"?r.replace(R,""):r==null?"":r);return}return i=v.isFunction(e),this.each(function(r){var s,o=v(this);if(this.nodeType!==1)return;i?s=e.call(this,r,o.val()):s=e,s==null?s="":typeof s=="number"?s+="":v.isArray(s)&&(s=v.map(s,function(e){return e==null?"":e+""})),n=v.valHooks[this.type]||v.valHooks[this.nodeName.toLowerCase()];if(!n||!("set"in n)||n.set(this,s,"value")===t)this.value=s})}}),v.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,s=e.type==="select-one"||i<0,o=s?null:[],u=s?i+1:r.length,a=i<0?u:s?i:0;for(;a<u;a++){n=r[a];if((n.selected||a===i)&&(v.support.optDisabled?!n.disabled:n.getAttribute("disabled")===null)&&(!n.parentNode.disabled||!v.nodeName(n.parentNode,"optgroup"))){t=v(n).val();if(s)return t;o.push(t)}}return o},set:function(e,t){var n=v.makeArray(t);return v(e).find("option").each(function(){this.selected=v.inArray(v(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attrFn:{},attr:function(e,n,r,i){var s,o,u,a=e.nodeType;if(!e||a===3||a===8||a===2)return;if(i&&v.isFunction(v.fn[n]))return v(e)[n](r);if(typeof e.getAttribute=="undefined")return v.prop(e,n,r);u=a!==1||!v.isXMLDoc(e),u&&(n=n.toLowerCase(),o=v.attrHooks[n]||(X.test(n)?F:j));if(r!==t){if(r===null){v.removeAttr(e,n);return}return o&&"set"in o&&u&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+""),r)}return o&&"get"in o&&u&&(s=o.get(e,n))!==null?s:(s=e.getAttribute(n),s===null?t:s)},removeAttr:function(e,t){var n,r,i,s,o=0;if(t&&e.nodeType===1){r=t.split(y);for(;o<r.length;o++)i=r[o],i&&(n=v.propFix[i]||i,s=X.test(i),s||v.attr(e,i,""),e.removeAttribute(V?i:n),s&&n in e&&(e[n]=!1))}},attrHooks:{type:{set:function(e,t){if(U.test(e.nodeName)&&e.parentNode)v.error("type property can't be changed");else if(!v.support.radioValue&&t==="radio"&&v.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}},value:{get:function(e,t){return j&&v.nodeName(e,"button")?j.get(e,t):t in e?e.value:null},set:function(e,t,n){if(j&&v.nodeName(e,"button"))return j.set(e,t,n);e.value=t}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(e,n,r){var i,s,o,u=e.nodeType;if(!e||u===3||u===8||u===2)return;return o=u!==1||!v.isXMLDoc(e),o&&(n=v.propFix[n]||n,s=v.propHooks[n]),r!==t?s&&"set"in s&&(i=s.set(e,r,n))!==t?i:e[n]=r:s&&"get"in s&&(i=s.get(e,n))!==null?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode("tabindex");return n&&n.specified?parseInt(n.value,10):z.test(e.nodeName)||W.test(e.nodeName)&&e.href?0:t}}}}),F={get:function(e,n){var r,i=v.prop(e,n);return i===!0||typeof i!="boolean"&&(r=e.getAttributeNode(n))&&r.nodeValue!==!1?n.toLowerCase():t},set:function(e,t,n){var r;return t===!1?v.removeAttr(e,n):(r=v.propFix[n]||n,r in e&&(e[r]=!0),e.setAttribute(n,n.toLowerCase())),n}},V||(I={name:!0,id:!0,coords:!0},j=v.valHooks.button={get:function(e,n){var r;return r=e.getAttributeNode(n),r&&(I[n]?r.value!=="":r.specified)?r.value:t},set:function(e,t,n){var r=e.getAttributeNode(n);return r||(r=i.createAttribute(n),e.setAttributeNode(r)),r.value=t+""}},v.each(["width","height"],function(e,t){v.attrHooks[t]=v.extend(v.attrHooks[t],{set:function(e,n){if(n==="")return e.setAttribute(t,"auto"),n}})}),v.attrHooks.contenteditable={get:j.get,set:function(e,t,n){t===""&&(t="false"),j.set(e,t,n)}}),v.support.hrefNormalized||v.each(["href","src","width","height"],function(e,n){v.attrHooks[n]=v.extend(v.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return r===null?t:r}})}),v.support.style||(v.attrHooks.style={get:function(e){return e.style.cssText.toLowerCase()||t},set:function(e,t){return e.style.cssText=t+""}}),v.support.optSelected||(v.propHooks.selected=v.extend(v.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),v.support.enctype||(v.propFix.enctype="encoding"),v.support.checkOn||v.each(["radio","checkbox"],function(){v.valHooks[this]={get:function(e){return e.getAttribute("value")===null?"on":e.value}}}),v.each(["radio","checkbox"],function(){v.valHooks[this]=v.extend(v.valHooks[this],{set:function(e,t){if(v.isArray(t))return e.checked=v.inArray(v(e).val(),t)>=0}})});var $=/^(?:textarea|input|select)$/i,J=/^([^\.]*|)(?:\.(.+)|)$/,K=/(?:^|\s)hover(\.\S+|)\b/,Q=/^key/,G=/^(?:mouse|contextmenu)|click/,Y=/^(?:focusinfocus|focusoutblur)$/,Z=function(e){return v.event.special.hover?e:e.replace(K,"mouseenter$1 mouseleave$1")};v.event={add:function(e,n,r,i,s){var o,u,a,f,l,c,h,p,d,m,g;if(e.nodeType===3||e.nodeType===8||!n||!r||!(o=v._data(e)))return;r.handler&&(d=r,r=d.handler,s=d.selector),r.guid||(r.guid=v.guid++),a=o.events,a||(o.events=a={}),u=o.handle,u||(o.handle=u=function(e){return typeof v=="undefined"||!!e&&v.event.triggered===e.type?t:v.event.dispatch.apply(u.elem,arguments)},u.elem=e),n=v.trim(Z(n)).split(" ");for(f=0;f<n.length;f++){l=J.exec(n[f])||[],c=l[1],h=(l[2]||"").split(".").sort(),g=v.event.special[c]||{},c=(s?g.delegateType:g.bindType)||c,g=v.event.special[c]||{},p=v.extend({type:c,origType:l[1],data:i,handler:r,guid:r.guid,selector:s,needsContext:s&&v.expr.match.needsContext.test(s),namespace:h.join(".")},d),m=a[c];if(!m){m=a[c]=[],m.delegateCount=0;if(!g.setup||g.setup.call(e,i,h,u)===!1)e.addEventListener?e.addEventListener(c,u,!1):e.attachEvent&&e.attachEvent("on"+c,u)}g.add&&(g.add.call(e,p),p.handler.guid||(p.handler.guid=r.guid)),s?m.splice(m.delegateCount++,0,p):m.push(p),v.event.global[c]=!0}e=null},global:{},remove:function(e,t,n,r,i){var s,o,u,a,f,l,c,h,p,d,m,g=v.hasData(e)&&v._data(e);if(!g||!(h=g.events))return;t=v.trim(Z(t||"")).split(" ");for(s=0;s<t.length;s++){o=J.exec(t[s])||[],u=a=o[1],f=o[2];if(!u){for(u in h)v.event.remove(e,u+t[s],n,r,!0);continue}p=v.event.special[u]||{},u=(r?p.delegateType:p.bindType)||u,d=h[u]||[],l=d.length,f=f?new RegExp("(^|\\.)"+f.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(c=0;c<d.length;c++)m=d[c],(i||a===m.origType)&&(!n||n.guid===m.guid)&&(!f||f.test(m.namespace))&&(!r||r===m.selector||r==="**"&&m.selector)&&(d.splice(c--,1),m.selector&&d.delegateCount--,p.remove&&p.remove.call(e,m));d.length===0&&l!==d.length&&((!p.teardown||p.teardown.call(e,f,g.handle)===!1)&&v.removeEvent(e,u,g.handle),delete h[u])}v.isEmptyObject(h)&&(delete g.handle,v.removeData(e,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(n,r,s,o){if(!s||s.nodeType!==3&&s.nodeType!==8){var u,a,f,l,c,h,p,d,m,g,y=n.type||n,b=[];if(Y.test(y+v.event.triggered))return;y.indexOf("!")>=0&&(y=y.slice(0,-1),a=!0),y.indexOf(".")>=0&&(b=y.split("."),y=b.shift(),b.sort());if((!s||v.event.customEvent[y])&&!v.event.global[y])return;n=typeof n=="object"?n[v.expando]?n:new v.Event(y,n):new v.Event(y),n.type=y,n.isTrigger=!0,n.exclusive=a,n.namespace=b.join("."),n.namespace_re=n.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,h=y.indexOf(":")<0?"on"+y:"";if(!s){u=v.cache;for(f in u)u[f].events&&u[f].events[y]&&v.event.trigger(n,r,u[f].handle.elem,!0);return}n.result=t,n.target||(n.target=s),r=r!=null?v.makeArray(r):[],r.unshift(n),p=v.event.special[y]||{};if(p.trigger&&p.trigger.apply(s,r)===!1)return;m=[[s,p.bindType||y]];if(!o&&!p.noBubble&&!v.isWindow(s)){g=p.delegateType||y,l=Y.test(g+y)?s:s.parentNode;for(c=s;l;l=l.parentNode)m.push([l,g]),c=l;c===(s.ownerDocument||i)&&m.push([c.defaultView||c.parentWindow||e,g])}for(f=0;f<m.length&&!n.isPropagationStopped();f++)l=m[f][0],n.type=m[f][1],d=(v._data(l,"events")||{})[n.type]&&v._data(l,"handle"),d&&d.apply(l,r),d=h&&l[h],d&&v.acceptData(l)&&d.apply&&d.apply(l,r)===!1&&n.preventDefault();return n.type=y,!o&&!n.isDefaultPrevented()&&(!p._default||p._default.apply(s.ownerDocument,r)===!1)&&(y!=="click"||!v.nodeName(s,"a"))&&v.acceptData(s)&&h&&s[y]&&(y!=="focus"&&y!=="blur"||n.target.offsetWidth!==0)&&!v.isWindow(s)&&(c=s[h],c&&(s[h]=null),v.event.triggered=y,s[y](),v.event.triggered=t,c&&(s[h]=c)),n.result}return},dispatch:function(n){n=v.event.fix(n||e.event);var r,i,s,o,u,a,f,c,h,p,d=(v._data(this,"events")||{})[n.type]||[],m=d.delegateCount,g=l.call(arguments),y=!n.exclusive&&!n.namespace,b=v.event.special[n.type]||{},w=[];g[0]=n,n.delegateTarget=this;if(b.preDispatch&&b.preDispatch.call(this,n)===!1)return;if(m&&(!n.button||n.type!=="click"))for(s=n.target;s!=this;s=s.parentNode||this)if(s.disabled!==!0||n.type!=="click"){u={},f=[];for(r=0;r<m;r++)c=d[r],h=c.selector,u[h]===t&&(u[h]=c.needsContext?v(h,this).index(s)>=0:v.find(h,this,null,[s]).length),u[h]&&f.push(c);f.length&&w.push({elem:s,matches:f})}d.length>m&&w.push({elem:this,matches:d.slice(m)});for(r=0;r<w.length&&!n.isPropagationStopped();r++){a=w[r],n.currentTarget=a.elem;for(i=0;i<a.matches.length&&!n.isImmediatePropagationStopped();i++){c=a.matches[i];if(y||!n.namespace&&!c.namespace||n.namespace_re&&n.namespace_re.test(c.namespace))n.data=c.data,n.handleObj=c,o=((v.event.special[c.origType]||{}).handle||c.handler).apply(a.elem,g),o!==t&&(n.result=o,o===!1&&(n.preventDefault(),n.stopPropagation()))}}return b.postDispatch&&b.postDispatch.call(this,n),n.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return e.which==null&&(e.which=t.charCode!=null?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,n){var r,s,o,u=n.button,a=n.fromElement;return e.pageX==null&&n.clientX!=null&&(r=e.target.ownerDocument||i,s=r.documentElement,o=r.body,e.pageX=n.clientX+(s&&s.scrollLeft||o&&o.scrollLeft||0)-(s&&s.clientLeft||o&&o.clientLeft||0),e.pageY=n.clientY+(s&&s.scrollTop||o&&o.scrollTop||0)-(s&&s.clientTop||o&&o.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?n.toElement:a),!e.which&&u!==t&&(e.which=u&1?1:u&2?3:u&4?2:0),e}},fix:function(e){if(e[v.expando])return e;var t,n,r=e,s=v.event.fixHooks[e.type]||{},o=s.props?this.props.concat(s.props):this.props;e=v.Event(r);for(t=o.length;t;)n=o[--t],e[n]=r[n];return e.target||(e.target=r.srcElement||i),e.target.nodeType===3&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,r):e},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(e,t,n){v.isWindow(this)&&(this.onbeforeunload=n)},teardown:function(e,t){this.onbeforeunload===t&&(this.onbeforeunload=null)}}},simulate:function(e,t,n,r){var i=v.extend(new v.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?v.event.trigger(i,null,t):v.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},v.event.handle=v.event.dispatch,v.removeEvent=i.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]=="undefined"&&(e[r]=null),e.detachEvent(r,n))},v.Event=function(e,t){if(!(this instanceof v.Event))return new v.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?tt:et):this.type=e,t&&v.extend(this,t),this.timeStamp=e&&e.timeStamp||v.now(),this[v.expando]=!0},v.Event.prototype={preventDefault:function(){this.isDefaultPrevented=tt;var e=this.originalEvent;if(!e)return;e.preventDefault?e.preventDefault():e.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=tt;var e=this.originalEvent;if(!e)return;e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=tt,this.stopPropagation()},isDefaultPrevented:et,isPropagationStopped:et,isImmediatePropagationStopped:et},v.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(e,t){v.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,s=e.handleObj,o=s.selector;if(!i||i!==r&&!v.contains(r,i))e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t;return n}}}),v.support.submitBubbles||(v.event.special.submit={setup:function(){if(v.nodeName(this,"form"))return!1;v.event.add(this,"click._submit keypress._submit",function(e){var n=e.target,r=v.nodeName(n,"input")||v.nodeName(n,"button")?n.form:t;r&&!v._data(r,"_submit_attached")&&(v.event.add(r,"submit._submit",function(e){e._submit_bubble=!0}),v._data(r,"_submit_attached",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&v.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){if(v.nodeName(this,"form"))return!1;v.event.remove(this,"._submit")}}),v.support.changeBubbles||(v.event.special.change={setup:function(){if($.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")v.event.add(this,"propertychange._change",function(e){e.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),v.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),v.event.simulate("change",this,e,!0)});return!1}v.event.add(this,"beforeactivate._change",function(e){var t=e.target;$.test(t.nodeName)&&!v._data(t,"_change_attached")&&(v.event.add(t,"change._change",function(e){this.parentNode&&!e.isSimulated&&!e.isTrigger&&v.event.simulate("change",this.parentNode,e,!0)}),v._data(t,"_change_attached",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||t.type!=="radio"&&t.type!=="checkbox")return e.handleObj.handler.apply(this,arguments)},teardown:function(){return v.event.remove(this,"._change"),!$.test(this.nodeName)}}),v.support.focusinBubbles||v.each({focus:"focusin",blur:"focusout"},function(e,t){var n=0,r=function(e){v.event.simulate(t,e.target,v.event.fix(e),!0)};v.event.special[t]={setup:function(){n++===0&&i.addEventListener(e,r,!0)},teardown:function(){--n===0&&i.removeEventListener(e,r,!0)}}}),v.fn.extend({on:function(e,n,r,i,s){var o,u;if(typeof e=="object"){typeof n!="string"&&(r=r||n,n=t);for(u in e)this.on(u,n,r,e[u],s);return this}r==null&&i==null?(i=n,r=n=t):i==null&&(typeof n=="string"?(i=r,r=t):(i=r,r=n,n=t));if(i===!1)i=et;else if(!i)return this;return s===1&&(o=i,i=function(e){return v().off(e),o.apply(this,arguments)},i.guid=o.guid||(o.guid=v.guid++)),this.each(function(){v.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,s;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,v(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if(typeof e=="object"){for(s in e)this.off(s,n,e[s]);return this}if(n===!1||typeof n=="function")r=n,n=t;return r===!1&&(r=et),this.each(function(){v.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},live:function(e,t,n){return v(this.context).on(e,this.selector,t,n),this},die:function(e,t){return v(this.context).off(e,this.selector||"**",t),this},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return arguments.length===1?this.off(e,"**"):this.off(t,e||"**",n)},trigger:function(e,t){return this.each(function(){v.event.trigger(e,t,this)})},triggerHandler:function(e,t){if(this[0])return v.event.trigger(e,t,this[0],!0)},toggle:function(e){var t=arguments,n=e.guid||v.guid++,r=0,i=function(n){var i=(v._data(this,"lastToggle"+e.guid)||0)%r;return v._data(this,"lastToggle"+e.guid,i+1),n.preventDefault(),t[i].apply(this,arguments)||!1};i.guid=n;while(r<t.length)t[r++].guid=n;return this.click(i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),v.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){v.fn[t]=function(e,n){return n==null&&(n=e,e=null),arguments.length>0?this.on(t,null,e,n):this.trigger(t)},Q.test(t)&&(v.event.fixHooks[t]=v.event.keyHooks),G.test(t)&&(v.event.fixHooks[t]=v.event.mouseHooks)}),function(e,t){function nt(e,t,n,r){n=n||[],t=t||g;var i,s,a,f,l=t.nodeType;if(!e||typeof e!="string")return n;if(l!==1&&l!==9)return[];a=o(t);if(!a&&!r)if(i=R.exec(e))if(f=i[1]){if(l===9){s=t.getElementById(f);if(!s||!s.parentNode)return n;if(s.id===f)return n.push(s),n}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(f))&&u(t,s)&&s.id===f)return n.push(s),n}else{if(i[2])return S.apply(n,x.call(t.getElementsByTagName(e),0)),n;if((f=i[3])&&Z&&t.getElementsByClassName)return S.apply(n,x.call(t.getElementsByClassName(f),0)),n}return vt(e.replace(j,"$1"),t,n,r,a)}function rt(e){return function(t){var n=t.nodeName.toLowerCase();return n==="input"&&t.type===e}}function it(e){return function(t){var n=t.nodeName.toLowerCase();return(n==="input"||n==="button")&&t.type===e}}function st(e){return N(function(t){return t=+t,N(function(n,r){var i,s=e([],n.length,t),o=s.length;while(o--)n[i=s[o]]&&(n[i]=!(r[i]=n[i]))})})}function ot(e,t,n){if(e===t)return n;var r=e.nextSibling;while(r){if(r===t)return-1;r=r.nextSibling}return 1}function ut(e,t){var n,r,s,o,u,a,f,l=L[d][e+" "];if(l)return t?0:l.slice(0);u=e,a=[],f=i.preFilter;while(u){if(!n||(r=F.exec(u)))r&&(u=u.slice(r[0].length)||u),a.push(s=[]);n=!1;if(r=I.exec(u))s.push(n=new m(r.shift())),u=u.slice(n.length),n.type=r[0].replace(j," ");for(o in i.filter)(r=J[o].exec(u))&&(!f[o]||(r=f[o](r)))&&(s.push(n=new m(r.shift())),u=u.slice(n.length),n.type=o,n.matches=r);if(!n)break}return t?u.length:u?nt.error(e):L(e,a).slice(0)}function at(e,t,r){var i=t.dir,s=r&&t.dir==="parentNode",o=w++;return t.first?function(t,n,r){while(t=t[i])if(s||t.nodeType===1)return e(t,n,r)}:function(t,r,u){if(!u){var a,f=b+" "+o+" ",l=f+n;while(t=t[i])if(s||t.nodeType===1){if((a=t[d])===l)return t.sizset;if(typeof a=="string"&&a.indexOf(f)===0){if(t.sizset)return t}else{t[d]=l;if(e(t,r,u))return t.sizset=!0,t;t.sizset=!1}}}else while(t=t[i])if(s||t.nodeType===1)if(e(t,r,u))return t}}function ft(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function lt(e,t,n,r,i){var s,o=[],u=0,a=e.length,f=t!=null;for(;u<a;u++)if(s=e[u])if(!n||n(s,r,i))o.push(s),f&&t.push(u);return o}function ct(e,t,n,r,i,s){return r&&!r[d]&&(r=ct(r)),i&&!i[d]&&(i=ct(i,s)),N(function(s,o,u,a){var f,l,c,h=[],p=[],d=o.length,v=s||dt(t||"*",u.nodeType?[u]:u,[]),m=e&&(s||!t)?lt(v,h,e,u,a):v,g=n?i||(s?e:d||r)?[]:o:m;n&&n(m,g,u,a);if(r){f=lt(g,p),r(f,[],u,a),l=f.length;while(l--)if(c=f[l])g[p[l]]=!(m[p[l]]=c)}if(s){if(i||e){if(i){f=[],l=g.length;while(l--)(c=g[l])&&f.push(m[l]=c);i(null,g=[],f,a)}l=g.length;while(l--)(c=g[l])&&(f=i?T.call(s,c):h[l])>-1&&(s[f]=!(o[f]=c))}}else g=lt(g===o?g.splice(d,g.length):g),i?i(null,o,g,a):S.apply(o,g)})}function ht(e){var t,n,r,s=e.length,o=i.relative[e[0].type],u=o||i.relative[" "],a=o?1:0,f=at(function(e){return e===t},u,!0),l=at(function(e){return T.call(t,e)>-1},u,!0),h=[function(e,n,r){return!o&&(r||n!==c)||((t=n).nodeType?f(e,n,r):l(e,n,r))}];for(;a<s;a++)if(n=i.relative[e[a].type])h=[at(ft(h),n)];else{n=i.filter[e[a].type].apply(null,e[a].matches);if(n[d]){r=++a;for(;r<s;r++)if(i.relative[e[r].type])break;return ct(a>1&&ft(h),a>1&&e.slice(0,a-1).join("").replace(j,"$1"),n,a<r&&ht(e.slice(a,r)),r<s&&ht(e=e.slice(r)),r<s&&e.join(""))}h.push(n)}return ft(h)}function pt(e,t){var r=t.length>0,s=e.length>0,o=function(u,a,f,l,h){var p,d,v,m=[],y=0,w="0",x=u&&[],T=h!=null,N=c,C=u||s&&i.find.TAG("*",h&&a.parentNode||a),k=b+=N==null?1:Math.E;T&&(c=a!==g&&a,n=o.el);for(;(p=C[w])!=null;w++){if(s&&p){for(d=0;v=e[d];d++)if(v(p,a,f)){l.push(p);break}T&&(b=k,n=++o.el)}r&&((p=!v&&p)&&y--,u&&x.push(p))}y+=w;if(r&&w!==y){for(d=0;v=t[d];d++)v(x,m,a,f);if(u){if(y>0)while(w--)!x[w]&&!m[w]&&(m[w]=E.call(l));m=lt(m)}S.apply(l,m),T&&!u&&m.length>0&&y+t.length>1&&nt.uniqueSort(l)}return T&&(b=k,c=N),x};return o.el=0,r?N(o):o}function dt(e,t,n){var r=0,i=t.length;for(;r<i;r++)nt(e,t[r],n);return n}function vt(e,t,n,r,s){var o,u,f,l,c,h=ut(e),p=h.length;if(!r&&h.length===1){u=h[0]=h[0].slice(0);if(u.length>2&&(f=u[0]).type==="ID"&&t.nodeType===9&&!s&&i.relative[u[1].type]){t=i.find.ID(f.matches[0].replace($,""),t,s)[0];if(!t)return n;e=e.slice(u.shift().length)}for(o=J.POS.test(e)?-1:u.length-1;o>=0;o--){f=u[o];if(i.relative[l=f.type])break;if(c=i.find[l])if(r=c(f.matches[0].replace($,""),z.test(u[0].type)&&t.parentNode||t,s)){u.splice(o,1),e=r.length&&u.join("");if(!e)return S.apply(n,x.call(r,0)),n;break}}}return a(e,h)(r,t,s,n,z.test(e)),n}function mt(){}var n,r,i,s,o,u,a,f,l,c,h=!0,p="undefined",d=("sizcache"+Math.random()).replace(".",""),m=String,g=e.document,y=g.documentElement,b=0,w=0,E=[].pop,S=[].push,x=[].slice,T=[].indexOf||function(e){var t=0,n=this.length;for(;t<n;t++)if(this[t]===e)return t;return-1},N=function(e,t){return e[d]=t==null||t,e},C=function(){var e={},t=[];return N(function(n,r){return t.push(n)>i.cacheLength&&delete e[t.shift()],e[n+" "]=r},e)},k=C(),L=C(),A=C(),O="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",_=M.replace("w","w#"),D="([*^$|!~]?=)",P="\\["+O+"*("+M+")"+O+"*(?:"+D+O+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+_+")|)|)"+O+"*\\]",H=":("+M+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+P+")|[^:]|\\\\.)*|.*))\\)|)",B=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)",j=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),F=new RegExp("^"+O+"*,"+O+"*"),I=new RegExp("^"+O+"*([\\x20\\t\\r\\n\\f>+~])"+O+"*"),q=new RegExp(H),R=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,U=/^:not/,z=/[\x20\t\r\n\f]*[+~]/,W=/:not\($/,X=/h\d/i,V=/input|select|textarea|button/i,$=/\\(?!\\)/g,J={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),NAME:new RegExp("^\\[name=['\"]?("+M+")['\"]?\\]"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+H),POS:new RegExp(B,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),needsContext:new RegExp("^"+O+"*[>+~]|"+B,"i")},K=function(e){var t=g.createElement("div");try{return e(t)}catch(n){return!1}finally{t=null}},Q=K(function(e){return e.appendChild(g.createComment("")),!e.getElementsByTagName("*").length}),G=K(function(e){return e.innerHTML="<a href='#'></a>",e.firstChild&&typeof e.firstChild.getAttribute!==p&&e.firstChild.getAttribute("href")==="#"}),Y=K(function(e){e.innerHTML="<select></select>";var t=typeof e.lastChild.getAttribute("multiple");return t!=="boolean"&&t!=="string"}),Z=K(function(e){return e.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!e.getElementsByClassName||!e.getElementsByClassName("e").length?!1:(e.lastChild.className="e",e.getElementsByClassName("e").length===2)}),et=K(function(e){e.id=d+0,e.innerHTML="<a name='"+d+"'></a><div name='"+d+"'></div>",y.insertBefore(e,y.firstChild);var t=g.getElementsByName&&g.getElementsByName(d).length===2+g.getElementsByName(d+0).length;return r=!g.getElementById(d),y.removeChild(e),t});try{x.call(y.childNodes,0)[0].nodeType}catch(tt){x=function(e){var t,n=[];for(;t=this[e];e++)n.push(t);return n}}nt.matches=function(e,t){return nt(e,null,null,t)},nt.matchesSelector=function(e,t){return nt(t,null,null,[e]).length>0},s=nt.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(i===1||i===9||i===11){if(typeof e.textContent=="string")return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=s(e)}else if(i===3||i===4)return e.nodeValue}else for(;t=e[r];r++)n+=s(t);return n},o=nt.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?t.nodeName!=="HTML":!1},u=nt.contains=y.contains?function(e,t){var n=e.nodeType===9?e.documentElement:e,r=t&&t.parentNode;return e===r||!!(r&&r.nodeType===1&&n.contains&&n.contains(r))}:y.compareDocumentPosition?function(e,t){return t&&!!(e.compareDocumentPosition(t)&16)}:function(e,t){while(t=t.parentNode)if(t===e)return!0;return!1},nt.attr=function(e,t){var n,r=o(e);return r||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):r||Y?e.getAttribute(t):(n=e.getAttributeNode(t),n?typeof e[t]=="boolean"?e[t]?t:null:n.specified?n.value:null:null)},i=nt.selectors={cacheLength:50,createPseudo:N,match:J,attrHandle:G?{}:{href:function(e){return e.getAttribute("href",2)},type:function(e){return e.getAttribute("type")}},find:{ID:r?function(e,t,n){if(typeof t.getElementById!==p&&!n){var r=t.getElementById(e);return r&&r.parentNode?[r]:[]}}:function(e,n,r){if(typeof n.getElementById!==p&&!r){var i=n.getElementById(e);return i?i.id===e||typeof i.getAttributeNode!==p&&i.getAttributeNode("id").value===e?[i]:t:[]}},TAG:Q?function(e,t){if(typeof t.getElementsByTagName!==p)return t.getElementsByTagName(e)}:function(e,t){var n=t.getElementsByTagName(e);if(e==="*"){var r,i=[],s=0;for(;r=n[s];s++)r.nodeType===1&&i.push(r);return i}return n},NAME:et&&function(e,t){if(typeof t.getElementsByName!==p)return t.getElementsByName(name)},CLASS:Z&&function(e,t,n){if(typeof t.getElementsByClassName!==p&&!n)return t.getElementsByClassName(e)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace($,""),e[3]=(e[4]||e[5]||"").replace($,""),e[2]==="~="&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),e[1]==="nth"?(e[2]||nt.error(e[0]),e[3]=+(e[3]?e[4]+(e[5]||1):2*(e[2]==="even"||e[2]==="odd")),e[4]=+(e[6]+e[7]||e[2]==="odd")):e[2]&&nt.error(e[0]),e},PSEUDO:function(e){var t,n;if(J.CHILD.test(e[0]))return null;if(e[3])e[2]=e[3];else if(t=e[4])q.test(t)&&(n=ut(t,!0))&&(n=t.indexOf(")",t.length-n)-t.length)&&(t=t.slice(0,n),e[0]=e[0].slice(0,n)),e[2]=t;return e.slice(0,3)}},filter:{ID:r?function(e){return e=e.replace($,""),function(t){return t.getAttribute("id")===e}}:function(e){return e=e.replace($,""),function(t){var n=typeof t.getAttributeNode!==p&&t.getAttributeNode("id");return n&&n.value===e}},TAG:function(e){return e==="*"?function(){return!0}:(e=e.replace($,"").toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[d][e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==p&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r,i){var s=nt.attr(r,e);return s==null?t==="!=":t?(s+="",t==="="?s===n:t==="!="?s!==n:t==="^="?n&&s.indexOf(n)===0:t==="*="?n&&s.indexOf(n)>-1:t==="$="?n&&s.substr(s.length-n.length)===n:t==="~="?(" "+s+" ").indexOf(n)>-1:t==="|="?s===n||s.substr(0,n.length+1)===n+"-":!1):!0}},CHILD:function(e,t,n,r){return e==="nth"?function(e){var t,i,s=e.parentNode;if(n===1&&r===0)return!0;if(s){i=0;for(t=s.firstChild;t;t=t.nextSibling)if(t.nodeType===1){i++;if(e===t)break}}return i-=r,i===n||i%n===0&&i/n>=0}:function(t){var n=t;switch(e){case"only":case"first":while(n=n.previousSibling)if(n.nodeType===1)return!1;if(e==="first")return!0;n=t;case"last":while(n=n.nextSibling)if(n.nodeType===1)return!1;return!0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||nt.error("unsupported pseudo: "+e);return r[d]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?N(function(e,n){var i,s=r(e,t),o=s.length;while(o--)i=T.call(e,s[o]),e[i]=!(n[i]=s[o])}):function(e){return r(e,0,n)}):r}},pseudos:{not:N(function(e){var t=[],n=[],r=a(e.replace(j,"$1"));return r[d]?N(function(e,t,n,i){var s,o=r(e,null,i,[]),u=e.length;while(u--)if(s=o[u])e[u]=!(t[u]=s)}):function(e,i,s){return t[0]=e,r(t,null,s,n),!n.pop()}}),has:N(function(e){return function(t){return nt(e,t).length>0}}),contains:N(function(e){return function(t){return(t.textContent||t.innerText||s(t)).indexOf(e)>-1}}),enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&!!e.checked||t==="option"&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},parent:function(e){return!i.pseudos.empty(e)},empty:function(e){var t;e=e.firstChild;while(e){if(e.nodeName>"@"||(t=e.nodeType)===3||t===4)return!1;e=e.nextSibling}return!0},header:function(e){return X.test(e.nodeName)},text:function(e){var t,n;return e.nodeName.toLowerCase()==="input"&&(t=e.type)==="text"&&((n=e.getAttribute("type"))==null||n.toLowerCase()===t)},radio:rt("radio"),checkbox:rt("checkbox"),file:rt("file"),password:rt("password"),image:rt("image"),submit:it("submit"),reset:it("reset"),button:function(e){var t=e.nodeName.toLowerCase();return t==="input"&&e.type==="button"||t==="button"},input:function(e){return V.test(e.nodeName)},focus:function(e){var t=e.ownerDocument;return e===t.activeElement&&(!t.hasFocus||t.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},active:function(e){return e===e.ownerDocument.activeElement},first:st(function(){return[0]}),last:st(function(e,t){return[t-1]}),eq:st(function(e,t,n){return[n<0?n+t:n]}),even:st(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:st(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:st(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:st(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},f=y.compareDocumentPosition?function(e,t){return e===t?(l=!0,0):(!e.compareDocumentPosition||!t.compareDocumentPosition?e.compareDocumentPosition:e.compareDocumentPosition(t)&4)?-1:1}:function(e,t){if(e===t)return l=!0,0;if(e.sourceIndex&&t.sourceIndex)return e.sourceIndex-t.sourceIndex;var n,r,i=[],s=[],o=e.parentNode,u=t.parentNode,a=o;if(o===u)return ot(e,t);if(!o)return-1;if(!u)return 1;while(a)i.unshift(a),a=a.parentNode;a=u;while(a)s.unshift(a),a=a.parentNode;n=i.length,r=s.length;for(var f=0;f<n&&f<r;f++)if(i[f]!==s[f])return ot(i[f],s[f]);return f===n?ot(e,s[f],-1):ot(i[f],t,1)},[0,0].sort(f),h=!l,nt.uniqueSort=function(e){var t,n=[],r=1,i=0;l=h,e.sort(f);if(l){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e},nt.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},a=nt.compile=function(e,t){var n,r=[],i=[],s=A[d][e+" "];if(!s){t||(t=ut(e)),n=t.length;while(n--)s=ht(t[n]),s[d]?r.push(s):i.push(s);s=A(e,pt(i,r))}return s},g.querySelectorAll&&function(){var e,t=vt,n=/'|\\/g,r=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,i=[":focus"],s=[":active"],u=y.matchesSelector||y.mozMatchesSelector||y.webkitMatchesSelector||y.oMatchesSelector||y.msMatchesSelector;K(function(e){e.innerHTML="<select><option selected=''></option></select>",e.querySelectorAll("[selected]").length||i.push("\\["+O+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),e.querySelectorAll(":checked").length||i.push(":checked")}),K(function(e){e.innerHTML="<p test=''></p>",e.querySelectorAll("[test^='']").length&&i.push("[*^$]="+O+"*(?:\"\"|'')"),e.innerHTML="<input type='hidden'/>",e.querySelectorAll(":enabled").length||i.push(":enabled",":disabled")}),i=new RegExp(i.join("|")),vt=function(e,r,s,o,u){if(!o&&!u&&!i.test(e)){var a,f,l=!0,c=d,h=r,p=r.nodeType===9&&e;if(r.nodeType===1&&r.nodeName.toLowerCase()!=="object"){a=ut(e),(l=r.getAttribute("id"))?c=l.replace(n,"\\$&"):r.setAttribute("id",c),c="[id='"+c+"'] ",f=a.length;while(f--)a[f]=c+a[f].join("");h=z.test(e)&&r.parentNode||r,p=a.join(",")}if(p)try{return S.apply(s,x.call(h.querySelectorAll(p),0)),s}catch(v){}finally{l||r.removeAttribute("id")}}return t(e,r,s,o,u)},u&&(K(function(t){e=u.call(t,"div");try{u.call(t,"[test!='']:sizzle"),s.push("!=",H)}catch(n){}}),s=new RegExp(s.join("|")),nt.matchesSelector=function(t,n){n=n.replace(r,"='$1']");if(!o(t)&&!s.test(n)&&!i.test(n))try{var a=u.call(t,n);if(a||e||t.document&&t.document.nodeType!==11)return a}catch(f){}return nt(n,null,null,[t]).length>0})}(),i.pseudos.nth=i.pseudos.eq,i.filters=mt.prototype=i.pseudos,i.setFilters=new mt,nt.attr=v.attr,v.find=nt,v.expr=nt.selectors,v.expr[":"]=v.expr.pseudos,v.unique=nt.uniqueSort,v.text=nt.getText,v.isXMLDoc=nt.isXML,v.contains=nt.contains}(e);var nt=/Until$/,rt=/^(?:parents|prev(?:Until|All))/,it=/^.[^:#\[\.,]*$/,st=v.expr.match.needsContext,ot={children:!0,contents:!0,next:!0,prev:!0};v.fn.extend({find:function(e){var t,n,r,i,s,o,u=this;if(typeof e!="string")return v(e).filter(function(){for(t=0,n=u.length;t<n;t++)if(v.contains(u[t],this))return!0});o=this.pushStack("","find",e);for(t=0,n=this.length;t<n;t++){r=o.length,v.find(e,this[t],o);if(t>0)for(i=r;i<o.length;i++)for(s=0;s<r;s++)if(o[s]===o[i]){o.splice(i--,1);break}}return o},has:function(e){var t,n=v(e,this),r=n.length;return this.filter(function(){for(t=0;t<r;t++)if(v.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1),"not",e)},filter:function(e){return this.pushStack(ft(this,e,!0),"filter",e)},is:function(e){return!!e&&(typeof e=="string"?st.test(e)?v(e,this.context).index(this[0])>=0:v.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,s=[],o=st.test(e)||typeof e!="string"?v(e,t||this.context):0;for(;r<i;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&n.nodeType!==11){if(o?o.index(n)>-1:v.find.matchesSelector(n,e)){s.push(n);break}n=n.parentNode}}return s=s.length>1?v.unique(s):s,this.pushStack(s,"closest",e)},index:function(e){return e?typeof e=="string"?v.inArray(this[0],v(e)):v.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(e,t){var n=typeof e=="string"?v(e,t):v.makeArray(e&&e.nodeType?[e]:e),r=v.merge(this.get(),n);return this.pushStack(ut(n[0])||ut(r[0])?r:v.unique(r))},addBack:function(e){return this.add(e==null?this.prevObject:this.prevObject.filter(e))}}),v.fn.andSelf=v.fn.addBack,v.each({parent:function(e){var t=e.parentNode;return t&&t.nodeType!==11?t:null},parents:function(e){return v.dir(e,"parentNode")},parentsUntil:function(e,t,n){return v.dir(e,"parentNode",n)},next:function(e){return at(e,"nextSibling")},prev:function(e){return at(e,"previousSibling")},nextAll:function(e){return v.dir(e,"nextSibling")},prevAll:function(e){return v.dir(e,"previousSibling")},nextUntil:function(e,t,n){return v.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return v.dir(e,"previousSibling",n)},siblings:function(e){return v.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return v.sibling(e.firstChild)},contents:function(e){return v.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:v.merge([],e.childNodes)}},function(e,t){v.fn[e]=function(n,r){var i=v.map(this,t,n);return nt.test(e)||(r=n),r&&typeof r=="string"&&(i=v.filter(r,i)),i=this.length>1&&!ot[e]?v.unique(i):i,this.length>1&&rt.test(e)&&(i=i.reverse()),this.pushStack(i,e,l.call(arguments).join(","))}}),v.extend({filter:function(e,t,n){return n&&(e=":not("+e+")"),t.length===1?v.find.matchesSelector(t[0],e)?[t[0]]:[]:v.find.matches(e,t)},dir:function(e,n,r){var i=[],s=e[n];while(s&&s.nodeType!==9&&(r===t||s.nodeType!==1||!v(s).is(r)))s.nodeType===1&&i.push(s),s=s[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)e.nodeType===1&&e!==t&&n.push(e);return n}});var ct="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",ht=/ jQuery\d+="(?:null|\d+)"/g,pt=/^\s+/,dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,vt=/<([\w:]+)/,mt=/<tbody/i,gt=/<|&#?\w+;/,yt=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,wt=new RegExp("<(?:"+ct+")[\\s/>]","i"),Et=/^(?:checkbox|radio)$/,St=/checked\s*(?:[^=]|=\s*.checked.)/i,xt=/\/(java|ecma)script/i,Tt=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,Nt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},Ct=lt(i),kt=Ct.appendChild(i.createElement("div"));Nt.optgroup=Nt.option,Nt.tbody=Nt.tfoot=Nt.colgroup=Nt.caption=Nt.thead,Nt.th=Nt.td,v.support.htmlSerialize||(Nt._default=[1,"X<div>","</div>"]),v.fn.extend({text:function(e){return v.access(this,function(e){return e===t?v.text(this):this.empty().append((this[0]&&this[0].ownerDocument||i).createTextNode(e))},null,e,arguments.length)},wrapAll:function(e){if(v.isFunction(e))return this.each(function(t){v(this).wrapAll(e.call(this,t))});if(this[0]){var t=v(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstChild&&e.firstChild.nodeType===1)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return v.isFunction(e)?this.each(function(t){v(this).wrapInner(e.call(this,t))}):this.each(function(){var t=v(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=v.isFunction(e);return this.each(function(n){v(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){v.nodeName(this,"body")||v(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(e){(this.nodeType===1||this.nodeType===11)&&this.appendChild(e)})},prepend:function(){return this.domManip(arguments,!0,function(e){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(e,this.firstChild)})},before:function(){if(!ut(this[0]))return this.domManip(arguments,!1,function(e){this.parentNode.insertBefore(e,this)});if(arguments.length){var e=v.clean(arguments);return this.pushStack(v.merge(e,this),"before",this.selector)}},after:function(){if(!ut(this[0]))return this.domManip(arguments,!1,function(e){this.parentNode.insertBefore(e,this.nextSibling)});if(arguments.length){var e=v.clean(arguments);return this.pushStack(v.merge(this,e),"after",this.selector)}},remove:function(e,t){var n,r=0;for(;(n=this[r])!=null;r++)if(!e||v.filter(e,[n]).length)!t&&n.nodeType===1&&(v.cleanData(n.getElementsByTagName("*")),v.cleanData([n])),n.parentNode&&n.parentNode.removeChild(n);return this},empty:function(){var e,t=0;for(;(e=this[t])!=null;t++){e.nodeType===1&&v.cleanData(e.getElementsByTagName("*"));while(e.firstChild)e.removeChild(e.firstChild)}return this},clone:function(e,t){return e=e==null?!1:e,t=t==null?e:t,this.map(function(){return v.clone(this,e,t)})},html:function(e){return v.access(this,function(e){var n=this[0]||{},r=0,i=this.length;if(e===t)return n.nodeType===1?n.innerHTML.replace(ht,""):t;if(typeof e=="string"&&!yt.test(e)&&(v.support.htmlSerialize||!wt.test(e))&&(v.support.leadingWhitespace||!pt.test(e))&&!Nt[(vt.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(dt,"<$1></$2>");try{for(;r<i;r++)n=this[r]||{},n.nodeType===1&&(v.cleanData(n.getElementsByTagName("*")),n.innerHTML=e);n=0}catch(s){}}n&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(e){return ut(this[0])?this.length?this.pushStack(v(v.isFunction(e)?e():e),"replaceWith",e):this:v.isFunction(e)?this.each(function(t){var n=v(this),r=n.html();n.replaceWith(e.call(this,t,r))}):(typeof e!="string"&&(e=v(e).detach()),this.each(function(){var t=this.nextSibling,n=this.parentNode;v(this).remove(),t?v(t).before(e):v(n).append(e)}))},detach:function(e){return this.remove(e,!0)},domManip:function(e,n,r){e=[].concat.apply([],e);var i,s,o,u,a=0,f=e[0],l=[],c=this.length;if(!v.support.checkClone&&c>1&&typeof f=="string"&&St.test(f))return this.each(function(){v(this).domManip(e,n,r)});if(v.isFunction(f))return this.each(function(i){var s=v(this);e[0]=f.call(this,i,n?s.html():t),s.domManip(e,n,r)});if(this[0]){i=v.buildFragment(e,this,l),o=i.fragment,s=o.firstChild,o.childNodes.length===1&&(o=s);if(s){n=n&&v.nodeName(s,"tr");for(u=i.cacheable||c-1;a<c;a++)r.call(n&&v.nodeName(this[a],"table")?Lt(this[a],"tbody"):this[a],a===u?o:v.clone(o,!0,!0))}o=s=null,l.length&&v.each(l,function(e,t){t.src?v.ajax?v.ajax({url:t.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):v.error("no ajax"):v.globalEval((t.text||t.textContent||t.innerHTML||"").replace(Tt,"")),t.parentNode&&t.parentNode.removeChild(t)})}return this}}),v.buildFragment=function(e,n,r){var s,o,u,a=e[0];return n=n||i,n=!n.nodeType&&n[0]||n,n=n.ownerDocument||n,e.length===1&&typeof a=="string"&&a.length<512&&n===i&&a.charAt(0)==="<"&&!bt.test(a)&&(v.support.checkClone||!St.test(a))&&(v.support.html5Clone||!wt.test(a))&&(o=!0,s=v.fragments[a],u=s!==t),s||(s=n.createDocumentFragment(),v.clean(e,n,s,r),o&&(v.fragments[a]=u&&s)),{fragment:s,cacheable:o}},v.fragments={},v.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){v.fn[e]=function(n){var r,i=0,s=[],o=v(n),u=o.length,a=this.length===1&&this[0].parentNode;if((a==null||a&&a.nodeType===11&&a.childNodes.length===1)&&u===1)return o[t](this[0]),this;for(;i<u;i++)r=(i>0?this.clone(!0):this).get(),v(o[i])[t](r),s=s.concat(r);return this.pushStack(s,e,o.selector)}}),v.extend({clone:function(e,t,n){var r,i,s,o;v.support.html5Clone||v.isXMLDoc(e)||!wt.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(kt.innerHTML=e.outerHTML,kt.removeChild(o=kt.firstChild));if((!v.support.noCloneEvent||!v.support.noCloneChecked)&&(e.nodeType===1||e.nodeType===11)&&!v.isXMLDoc(e)){Ot(e,o),r=Mt(e),i=Mt(o);for(s=0;r[s];++s)i[s]&&Ot(r[s],i[s])}if(t){At(e,o);if(n){r=Mt(e),i=Mt(o);for(s=0;r[s];++s)At(r[s],i[s])}}return r=i=null,o},clean:function(e,t,n,r){var s,o,u,a,f,l,c,h,p,d,m,g,y=t===i&&Ct,b=[];if(!t||typeof t.createDocumentFragment=="undefined")t=i;for(s=0;(u=e[s])!=null;s++){typeof u=="number"&&(u+="");if(!u)continue;if(typeof u=="string")if(!gt.test(u))u=t.createTextNode(u);else{y=y||lt(t),c=t.createElement("div"),y.appendChild(c),u=u.replace(dt,"<$1></$2>"),a=(vt.exec(u)||["",""])[1].toLowerCase(),f=Nt[a]||Nt._default,l=f[0],c.innerHTML=f[1]+u+f[2];while(l--)c=c.lastChild;if(!v.support.tbody){h=mt.test(u),p=a==="table"&&!h?c.firstChild&&c.firstChild.childNodes:f[1]==="<table>"&&!h?c.childNodes:[];for(o=p.length-1;o>=0;--o)v.nodeName(p[o],"tbody")&&!p[o].childNodes.length&&p[o].parentNode.removeChild(p[o])}!v.support.leadingWhitespace&&pt.test(u)&&c.insertBefore(t.createTextNode(pt.exec(u)[0]),c.firstChild),u=c.childNodes,c.parentNode.removeChild(c)}u.nodeType?b.push(u):v.merge(b,u)}c&&(u=c=y=null);if(!v.support.appendChecked)for(s=0;(u=b[s])!=null;s++)v.nodeName(u,"input")?_t(u):typeof u.getElementsByTagName!="undefined"&&v.grep(u.getElementsByTagName("input"),_t);if(n){m=function(e){if(!e.type||xt.test(e.type))return r?r.push(e.parentNode?e.parentNode.removeChild(e):e):n.appendChild(e)};for(s=0;(u=b[s])!=null;s++)if(!v.nodeName(u,"script")||!m(u))n.appendChild(u),typeof u.getElementsByTagName!="undefined"&&(g=v.grep(v.merge([],u.getElementsByTagName("script")),m),b.splice.apply(b,[s+1,0].concat(g)),s+=g.length)}return b},cleanData:function(e,t){var n,r,i,s,o=0,u=v.expando,a=v.cache,f=v.support.deleteExpando,l=v.event.special;for(;(i=e[o])!=null;o++)if(t||v.acceptData(i)){r=i[u],n=r&&a[r];if(n){if(n.events)for(s in n.events)l[s]?v.event.remove(i,s):v.removeEvent(i,s,n.handle);a[r]&&(delete a[r],f?delete i[u]:i.removeAttribute?i.removeAttribute(u):i[u]=null,v.deletedIds.push(r))}}}}),function(){var e,t;v.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e=v.uaMatch(o.userAgent),t={},e.browser&&(t[e.browser]=!0,t.version=e.version),t.chrome?t.webkit=!0:t.webkit&&(t.safari=!0),v.browser=t,v.sub=function(){function e(t,n){return new e.fn.init(t,n)}v.extend(!0,e,this),e.superclass=this,e.fn=e.prototype=this(),e.fn.constructor=e,e.sub=this.sub,e.fn.init=function(r,i){return i&&i instanceof v&&!(i instanceof e)&&(i=e(i)),v.fn.init.call(this,r,i,t)},e.fn.init.prototype=e.fn;var t=e(i);return e}}();var Dt,Pt,Ht,Bt=/alpha\([^)]*\)/i,jt=/opacity=([^)]*)/,Ft=/^(top|right|bottom|left)$/,It=/^(none|table(?!-c[ea]).+)/,qt=/^margin/,Rt=new RegExp("^("+m+")(.*)$","i"),Ut=new RegExp("^("+m+")(?!px)[a-z%]+$","i"),zt=new RegExp("^([-+])=("+m+")","i"),Wt={BODY:"block"},Xt={position:"absolute",visibility:"hidden",display:"block"},Vt={letterSpacing:0,fontWeight:400},$t=["Top","Right","Bottom","Left"],Jt=["Webkit","O","Moz","ms"],Kt=v.fn.toggle;v.fn.extend({css:function(e,n){return v.access(this,function(e,n,r){return r!==t?v.style(e,n,r):v.css(e,n)},e,n,arguments.length>1)},show:function(){return Yt(this,!0)},hide:function(){return Yt(this)},toggle:function(e,t){var n=typeof e=="boolean";return v.isFunction(e)&&v.isFunction(t)?Kt.apply(this,arguments):this.each(function(){(n?e:Gt(this))?v(this).show():v(this).hide()})}}),v.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Dt(e,"opacity");return n===""?"1":n}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":v.support.cssFloat?"cssFloat":"styleFloat"},style:function(e,n,r,i){if(!e||e.nodeType===3||e.nodeType===8||!e.style)return;var s,o,u,a=v.camelCase(n),f=e.style;n=v.cssProps[a]||(v.cssProps[a]=Qt(f,a)),u=v.cssHooks[n]||v.cssHooks[a];if(r===t)return u&&"get"in u&&(s=u.get(e,!1,i))!==t?s:f[n];o=typeof r,o==="string"&&(s=zt.exec(r))&&(r=(s[1]+1)*s[2]+parseFloat(v.css(e,n)),o="number");if(r==null||o==="number"&&isNaN(r))return;o==="number"&&!v.cssNumber[a]&&(r+="px");if(!u||!("set"in u)||(r=u.set(e,r,i))!==t)try{f[n]=r}catch(l){}},css:function(e,n,r,i){var s,o,u,a=v.camelCase(n);return n=v.cssProps[a]||(v.cssProps[a]=Qt(e.style,a)),u=v.cssHooks[n]||v.cssHooks[a],u&&"get"in u&&(s=u.get(e,!0,i)),s===t&&(s=Dt(e,n)),s==="normal"&&n in Vt&&(s=Vt[n]),r||i!==t?(o=parseFloat(s),r||v.isNumeric(o)?o||0:s):s},swap:function(e,t,n){var r,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];r=n.call(e);for(i in t)e.style[i]=s[i];return r}}),e.getComputedStyle?Dt=function(t,n){var r,i,s,o,u=e.getComputedStyle(t,null),a=t.style;return u&&(r=u.getPropertyValue(n)||u[n],r===""&&!v.contains(t.ownerDocument,t)&&(r=v.style(t,n)),Ut.test(r)&&qt.test(n)&&(i=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=u.width,a.width=i,a.minWidth=s,a.maxWidth=o)),r}:i.documentElement.currentStyle&&(Dt=function(e,t){var n,r,i=e.currentStyle&&e.currentStyle[t],s=e.style;return i==null&&s&&s[t]&&(i=s[t]),Ut.test(i)&&!Ft.test(t)&&(n=s.left,r=e.runtimeStyle&&e.runtimeStyle.left,r&&(e.runtimeStyle.left=e.currentStyle.left),s.left=t==="fontSize"?"1em":i,i=s.pixelLeft+"px",s.left=n,r&&(e.runtimeStyle.left=r)),i===""?"auto":i}),v.each(["height","width"],function(e,t){v.cssHooks[t]={get:function(e,n,r){if(n)return e.offsetWidth===0&&It.test(Dt(e,"display"))?v.swap(e,Xt,function(){return tn(e,t,r)}):tn(e,t,r)},set:function(e,n,r){return Zt(e,n,r?en(e,t,r,v.support.boxSizing&&v.css(e,"boxSizing")==="border-box"):0)}}}),v.support.opacity||(v.cssHooks.opacity={get:function(e,t){return jt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=v.isNumeric(t)?"alpha(opacity="+t*100+")":"",s=r&&r.filter||n.filter||"";n.zoom=1;if(t>=1&&v.trim(s.replace(Bt,""))===""&&n.removeAttribute){n.removeAttribute("filter");if(r&&!r.filter)return}n.filter=Bt.test(s)?s.replace(Bt,i):s+" "+i}}),v(function(){v.support.reliableMarginRight||(v.cssHooks.marginRight={get:function(e,t){return v.swap(e,{display:"inline-block"},function(){if(t)return Dt(e,"marginRight")})}}),!v.support.pixelPosition&&v.fn.position&&v.each(["top","left"],function(e,t){v.cssHooks[t]={get:function(e,n){if(n){var r=Dt(e,t);return Ut.test(r)?v(e).position()[t]+"px":r}}}})}),v.expr&&v.expr.filters&&(v.expr.filters.hidden=function(e){return e.offsetWidth===0&&e.offsetHeight===0||!v.support.reliableHiddenOffsets&&(e.style&&e.style.display||Dt(e,"display"))==="none"},v.expr.filters.visible=function(e){return!v.expr.filters.hidden(e)}),v.each({margin:"",padding:"",border:"Width"},function(e,t){v.cssHooks[e+t]={expand:function(n){var r,i=typeof n=="string"?n.split(" "):[n],s={};for(r=0;r<4;r++)s[e+$t[r]+t]=i[r]||i[r-2]||i[0];return s}},qt.test(e)||(v.cssHooks[e+t].set=Zt)});var rn=/%20/g,sn=/\[\]$/,on=/\r?\n/g,un=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,an=/^(?:select|textarea)/i;v.fn.extend({serialize:function(){return v.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?v.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||an.test(this.nodeName)||un.test(this.type))}).map(function(e,t){var n=v(this).val();return n==null?null:v.isArray(n)?v.map(n,function(e,n){return{name:t.name,value:e.replace(on,"\r\n")}}):{name:t.name,value:n.replace(on,"\r\n")}}).get()}}),v.param=function(e,n){var r,i=[],s=function(e,t){t=v.isFunction(t)?t():t==null?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};n===t&&(n=v.ajaxSettings&&v.ajaxSettings.traditional);if(v.isArray(e)||e.jquery&&!v.isPlainObject(e))v.each(e,function(){s(this.name,this.value)});else for(r in e)fn(r,e[r],n,s);return i.join("&").replace(rn,"+")};var ln,cn,hn=/#.*$/,pn=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,dn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,vn=/^(?:GET|HEAD)$/,mn=/^\/\//,gn=/\?/,yn=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bn=/([?&])_=[^&]*/,wn=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,En=v.fn.load,Sn={},xn={},Tn=["*/"]+["*"];try{cn=s.href}catch(Nn){cn=i.createElement("a"),cn.href="",cn=cn.href}ln=wn.exec(cn.toLowerCase())||[],v.fn.load=function(e,n,r){if(typeof e!="string"&&En)return En.apply(this,arguments);if(!this.length)return this;var i,s,o,u=this,a=e.indexOf(" ");return a>=0&&(i=e.slice(a,e.length),e=e.slice(0,a)),v.isFunction(n)?(r=n,n=t):n&&typeof n=="object"&&(s="POST"),v.ajax({url:e,type:s,dataType:"html",data:n,complete:function(e,t){r&&u.each(r,o||[e.responseText,t,e])}}).done(function(e){o=arguments,u.html(i?v("<div>").append(e.replace(yn,"")).find(i):e)}),this},v.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(e,t){v.fn[t]=function(e){return this.on(t,e)}}),v.each(["get","post"],function(e,n){v[n]=function(e,r,i,s){return v.isFunction(r)&&(s=s||i,i=r,r=t),v.ajax({type:n,url:e,data:r,success:i,dataType:s})}}),v.extend({getScript:function(e,n){return v.get(e,t,n,"script")},getJSON:function(e,t,n){return v.get(e,t,n,"json")},ajaxSetup:function(e,t){return t?Ln(e,v.ajaxSettings):(t=e,e=v.ajaxSettings),Ln(e,t),e},ajaxSettings:{url:cn,isLocal:dn.test(ln[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":Tn},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":e.String,"text html":!0,"text json":v.parseJSON,"text xml":v.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:Cn(Sn),ajaxTransport:Cn(xn),ajax:function(e,n){function T(e,n,s,a){var l,y,b,w,S,T=n;if(E===2)return;E=2,u&&clearTimeout(u),o=t,i=a||"",x.readyState=e>0?4:0,s&&(w=An(c,x,s));if(e>=200&&e<300||e===304)c.ifModified&&(S=x.getResponseHeader("Last-Modified"),S&&(v.lastModified[r]=S),S=x.getResponseHeader("Etag"),S&&(v.etag[r]=S)),e===304?(T="notmodified",l=!0):(l=On(c,w),T=l.state,y=l.data,b=l.error,l=!b);else{b=T;if(!T||e)T="error",e<0&&(e=0)}x.status=e,x.statusText=(n||T)+"",l?d.resolveWith(h,[y,T,x]):d.rejectWith(h,[x,T,b]),x.statusCode(g),g=t,f&&p.trigger("ajax"+(l?"Success":"Error"),[x,c,l?y:b]),m.fireWith(h,[x,T]),f&&(p.trigger("ajaxComplete",[x,c]),--v.active||v.event.trigger("ajaxStop"))}typeof e=="object"&&(n=e,e=t),n=n||{};var r,i,s,o,u,a,f,l,c=v.ajaxSetup({},n),h=c.context||c,p=h!==c&&(h.nodeType||h instanceof v)?v(h):v.event,d=v.Deferred(),m=v.Callbacks("once memory"),g=c.statusCode||{},b={},w={},E=0,S="canceled",x={readyState:0,setRequestHeader:function(e,t){if(!E){var n=e.toLowerCase();e=w[n]=w[n]||e,b[e]=t}return this},getAllResponseHeaders:function(){return E===2?i:null},getResponseHeader:function(e){var n;if(E===2){if(!s){s={};while(n=pn.exec(i))s[n[1].toLowerCase()]=n[2]}n=s[e.toLowerCase()]}return n===t?null:n},overrideMimeType:function(e){return E||(c.mimeType=e),this},abort:function(e){return e=e||S,o&&o.abort(e),T(0,e),this}};d.promise(x),x.success=x.done,x.error=x.fail,x.complete=m.add,x.statusCode=function(e){if(e){var t;if(E<2)for(t in e)g[t]=[g[t],e[t]];else t=e[x.status],x.always(t)}return this},c.url=((e||c.url)+"").replace(hn,"").replace(mn,ln[1]+"//"),c.dataTypes=v.trim(c.dataType||"*").toLowerCase().split(y),c.crossDomain==null&&(a=wn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===ln[1]&&a[2]===ln[2]&&(a[3]||(a[1]==="http:"?80:443))==(ln[3]||(ln[1]==="http:"?80:443)))),c.data&&c.processData&&typeof c.data!="string"&&(c.data=v.param(c.data,c.traditional)),kn(Sn,c,n,x);if(E===2)return x;f=c.global,c.type=c.type.toUpperCase(),c.hasContent=!vn.test(c.type),f&&v.active++===0&&v.event.trigger("ajaxStart");if(!c.hasContent){c.data&&(c.url+=(gn.test(c.url)?"&":"?")+c.data,delete c.data),r=c.url;if(c.cache===!1){var N=v.now(),C=c.url.replace(bn,"$1_="+N);c.url=C+(C===c.url?(gn.test(c.url)?"&":"?")+"_="+N:"")}}(c.data&&c.hasContent&&c.contentType!==!1||n.contentType)&&x.setRequestHeader("Content-Type",c.contentType),c.ifModified&&(r=r||c.url,v.lastModified[r]&&x.setRequestHeader("If-Modified-Since",v.lastModified[r]),v.etag[r]&&x.setRequestHeader("If-None-Match",v.etag[r])),x.setRequestHeader("Accept",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+(c.dataTypes[0]!=="*"?", "+Tn+"; q=0.01":""):c.accepts["*"]);for(l in c.headers)x.setRequestHeader(l,c.headers[l]);if(!c.beforeSend||c.beforeSend.call(h,x,c)!==!1&&E!==2){S="abort";for(l in{success:1,error:1,complete:1})x[l](c[l]);o=kn(xn,c,n,x);if(!o)T(-1,"No Transport");else{x.readyState=1,f&&p.trigger("ajaxSend",[x,c]),c.async&&c.timeout>0&&(u=setTimeout(function(){x.abort("timeout")},c.timeout));try{E=1,o.send(b,T)}catch(k){if(!(E<2))throw k;T(-1,k)}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var Mn=[],_n=/\?/,Dn=/(=)\?(?=&|$)|\?\?/,Pn=v.now();v.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Mn.pop()||v.expando+"_"+Pn++;return this[e]=!0,e}}),v.ajaxPrefilter("json jsonp",function(n,r,i){var s,o,u,a=n.data,f=n.url,l=n.jsonp!==!1,c=l&&Dn.test(f),h=l&&!c&&typeof a=="string"&&!(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&Dn.test(a);if(n.dataTypes[0]==="jsonp"||c||h)return s=n.jsonpCallback=v.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,o=e[s],c?n.url=f.replace(Dn,"$1"+s):h?n.data=a.replace(Dn,"$1"+s):l&&(n.url+=(_n.test(f)?"&":"?")+n.jsonp+"="+s),n.converters["script json"]=function(){return u||v.error(s+" was not called"),u[0]},n.dataTypes[0]="json",e[s]=function(){u=arguments},i.always(function(){e[s]=o,n[s]&&(n.jsonpCallback=r.jsonpCallback,Mn.push(s)),u&&v.isFunction(o)&&o(u[0]),u=o=t}),"script"}),v.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(e){return v.globalEval(e),e}}}),v.ajaxPrefilter("script",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),v.ajaxTransport("script",function(e){if(e.crossDomain){var n,r=i.head||i.getElementsByTagName("head")[0]||i.documentElement;return{send:function(s,o){n=i.createElement("script"),n.async="async",e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,i){if(i||!n.readyState||/loaded|complete/.test(n.readyState))n.onload=n.onreadystatechange=null,r&&n.parentNode&&r.removeChild(n),n=t,i||o(200,"success")},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(0,1)}}}});var Hn,Bn=e.ActiveXObject?function(){for(var e in Hn)Hn[e](0,1)}:!1,jn=0;v.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&Fn()||In()}:Fn,function(e){v.extend(v.support,{ajax:!!e,cors:!!e&&"withCredentials"in e})}(v.ajaxSettings.xhr()),v.support.ajax&&v.ajaxTransport(function(n){if(!n.crossDomain||v.support.cors){var r;return{send:function(i,s){var o,u,a=n.xhr();n.username?a.open(n.type,n.url,n.async,n.username,n.password):a.open(n.type,n.url,n.async);if(n.xhrFields)for(u in n.xhrFields)a[u]=n.xhrFields[u];n.mimeType&&a.overrideMimeType&&a.overrideMimeType(n.mimeType),!n.crossDomain&&!i["X-Requested-With"]&&(i["X-Requested-With"]="XMLHttpRequest");try{for(u in i)a.setRequestHeader(u,i[u])}catch(f){}a.send(n.hasContent&&n.data||null),r=function(e,i){var u,f,l,c,h;try{if(r&&(i||a.readyState===4)){r=t,o&&(a.onreadystatechange=v.noop,Bn&&delete Hn[o]);if(i)a.readyState!==4&&a.abort();else{u=a.status,l=a.getAllResponseHeaders(),c={},h=a.responseXML,h&&h.documentElement&&(c.xml=h);try{c.text=a.responseText}catch(p){}try{f=a.statusText}catch(p){f=""}!u&&n.isLocal&&!n.crossDomain?u=c.text?200:404:u===1223&&(u=204)}}}catch(d){i||s(-1,d)}c&&s(u,f,c,l)},n.async?a.readyState===4?setTimeout(r,0):(o=++jn,Bn&&(Hn||(Hn={},v(e).unload(Bn)),Hn[o]=r),a.onreadystatechange=r):r()},abort:function(){r&&r(0,1)}}}});var qn,Rn,Un=/^(?:toggle|show|hide)$/,zn=new RegExp("^(?:([-+])=|)("+m+")([a-z%]*)$","i"),Wn=/queueHooks$/,Xn=[Gn],Vn={"*":[function(e,t){var n,r,i=this.createTween(e,t),s=zn.exec(t),o=i.cur(),u=+o||0,a=1,f=20;if(s){n=+s[2],r=s[3]||(v.cssNumber[e]?"":"px");if(r!=="px"&&u){u=v.css(i.elem,e,!0)||n||1;do a=a||".5",u/=a,v.style(i.elem,e,u+r);while(a!==(a=i.cur()/o)&&a!==1&&--f)}i.unit=r,i.start=u,i.end=s[1]?u+(s[1]+1)*n:n}return i}]};v.Animation=v.extend(Kn,{tweener:function(e,t){v.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");var n,r=0,i=e.length;for(;r<i;r++)n=e[r],Vn[n]=Vn[n]||[],Vn[n].unshift(t)},prefilter:function(e,t){t?Xn.unshift(e):Xn.push(e)}}),v.Tween=Yn,Yn.prototype={constructor:Yn,init:function(e,t,n,r,i,s){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=s||(v.cssNumber[n]?"":"px")},cur:function(){var e=Yn.propHooks[this.prop];return e&&e.get?e.get(this):Yn.propHooks._default.get(this)},run:function(e){var t,n=Yn.propHooks[this.prop];return this.options.duration?this.pos=t=v.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Yn.propHooks._default.set(this),this}},Yn.prototype.init.prototype=Yn.prototype,Yn.propHooks={_default:{get:function(e){var t;return e.elem[e.prop]==null||!!e.elem.style&&e.elem.style[e.prop]!=null?(t=v.css(e.elem,e.prop,!1,""),!t||t==="auto"?0:t):e.elem[e.prop]},set:function(e){v.fx.step[e.prop]?v.fx.step[e.prop](e):e.elem.style&&(e.elem.style[v.cssProps[e.prop]]!=null||v.cssHooks[e.prop])?v.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Yn.propHooks.scrollTop=Yn.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},v.each(["toggle","show","hide"],function(e,t){var n=v.fn[t];v.fn[t]=function(r,i,s){return r==null||typeof r=="boolean"||!e&&v.isFunction(r)&&v.isFunction(i)?n.apply(this,arguments):this.animate(Zn(t,!0),r,i,s)}}),v.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Gt).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=v.isEmptyObject(e),s=v.speed(t,n,r),o=function(){var t=Kn(this,v.extend({},e),s);i&&t.stop(!0)};return i||s.queue===!1?this.each(o):this.queue(s.queue,o)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return typeof e!="string"&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=e!=null&&e+"queueHooks",s=v.timers,o=v._data(this);if(n)o[n]&&o[n].stop&&i(o[n]);else for(n in o)o[n]&&o[n].stop&&Wn.test(n)&&i(o[n]);for(n=s.length;n--;)s[n].elem===this&&(e==null||s[n].queue===e)&&(s[n].anim.stop(r),t=!1,s.splice(n,1));(t||!r)&&v.dequeue(this,e)})}}),v.each({slideDown:Zn("show"),slideUp:Zn("hide"),slideToggle:Zn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){v.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),v.speed=function(e,t,n){var r=e&&typeof e=="object"?v.extend({},e):{complete:n||!n&&t||v.isFunction(e)&&e,duration:e,easing:n&&t||t&&!v.isFunction(t)&&t};r.duration=v.fx.off?0:typeof r.duration=="number"?r.duration:r.duration in v.fx.speeds?v.fx.speeds[r.duration]:v.fx.speeds._default;if(r.queue==null||r.queue===!0)r.queue="fx";return r.old=r.complete,r.complete=function(){v.isFunction(r.old)&&r.old.call(this),r.queue&&v.dequeue(this,r.queue)},r},v.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},v.timers=[],v.fx=Yn.prototype.init,v.fx.tick=function(){var e,n=v.timers,r=0;qn=v.now();for(;r<n.length;r++)e=n[r],!e()&&n[r]===e&&n.splice(r--,1);n.length||v.fx.stop(),qn=t},v.fx.timer=function(e){e()&&v.timers.push(e)&&!Rn&&(Rn=setInterval(v.fx.tick,v.fx.interval))},v.fx.interval=13,v.fx.stop=function(){clearInterval(Rn),Rn=null},v.fx.speeds={slow:600,fast:200,_default:400},v.fx.step={},v.expr&&v.expr.filters&&(v.expr.filters.animated=function(e){return v.grep(v.timers,function(t){return e===t.elem}).length});var er=/^(?:body|html)$/i;v.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){v.offset.setOffset(this,e,t)});var n,r,i,s,o,u,a,f={top:0,left:0},l=this[0],c=l&&l.ownerDocument;if(!c)return;return(r=c.body)===l?v.offset.bodyOffset(l):(n=c.documentElement,v.contains(n,l)?(typeof l.getBoundingClientRect!="undefined"&&(f=l.getBoundingClientRect()),i=tr(c),s=n.clientTop||r.clientTop||0,o=n.clientLeft||r.clientLeft||0,u=i.pageYOffset||n.scrollTop,a=i.pageXOffset||n.scrollLeft,{top:f.top+u-s,left:f.left+a-o}):f)},v.offset={bodyOffset:function(e){var t=e.offsetTop,n=e.offsetLeft;return v.support.doesNotIncludeMarginInBodyOffset&&(t+=parseFloat(v.css(e,"marginTop"))||0,n+=parseFloat(v.css(e,"marginLeft"))||0),{top:t,left:n}},setOffset:function(e,t,n){var r=v.css(e,"position");r==="static"&&(e.style.position="relative");var i=v(e),s=i.offset(),o=v.css(e,"top"),u=v.css(e,"left"),a=(r==="absolute"||r==="fixed")&&v.inArray("auto",[o,u])>-1,f={},l={},c,h;a?(l=i.position(),c=l.top,h=l.left):(c=parseFloat(o)||0,h=parseFloat(u)||0),v.isFunction(t)&&(t=t.call(e,n,s)),t.top!=null&&(f.top=t.top-s.top+c),t.left!=null&&(f.left=t.left-s.left+h),"using"in t?t.using.call(e,f):i.css(f)}},v.fn.extend({position:function(){if(!this[0])return;var e=this[0],t=this.offsetParent(),n=this.offset(),r=er.test(t[0].nodeName)?{top:0,left:0}:t.offset();return n.top-=parseFloat(v.css(e,"marginTop"))||0,n.left-=parseFloat(v.css(e,"marginLeft"))||0,r.top+=parseFloat(v.css(t[0],"borderTopWidth"))||0,r.left+=parseFloat(v.css(t[0],"borderLeftWidth"))||0,{top:n.top-r.top,left:n.left-r.left}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||i.body;while(e&&!er.test(e.nodeName)&&v.css(e,"position")==="static")e=e.offsetParent;return e||i.body})}}),v.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r=/Y/.test(n);v.fn[e]=function(i){return v.access(this,function(e,i,s){var o=tr(e);if(s===t)return o?n in o?o[n]:o.document.documentElement[i]:e[i];o?o.scrollTo(r?v(o).scrollLeft():s,r?s:v(o).scrollTop()):e[i]=s},e,i,arguments.length,null)}}),v.each({Height:"height",Width:"width"},function(e,n){v.each({padding:"inner"+e,content:n,"":"outer"+e},function(r,i){v.fn[i]=function(i,s){var o=arguments.length&&(r||typeof i!="boolean"),u=r||(i===!0||s===!0?"margin":"border");return v.access(this,function(n,r,i){var s;return v.isWindow(n)?n.document.documentElement["client"+e]:n.nodeType===9?(s=n.documentElement,Math.max(n.body["scroll"+e],s["scroll"+e],n.body["offset"+e],s["offset"+e],s["client"+e])):i===t?v.css(n,r,i,u):v.style(n,r,i,u)},n,o?i:t,o,null)}})}),e.jQuery=e.$=v,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return v})})(window);
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/minus.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/minus.png
new file mode 100644
index 0000000000000000000000000000000000000000..da1c5620d10c047525a467a425abe9ff5269cfc2
GIT binary patch
literal 199
zcmeAS@N?(olHy`uVBq!ia0vp^+#t-s1SHkYJtzcHoCO|{#XvD(5N2eUHAey{$X?><
z>&kweokM_|(Po{+Q=kw>iEBiObAE1aYF-J$w=>iB1I2<oT^vIsE+^X*KjUGJJ8<a0
zfdz{eHHE&rzrX(bySvGUL|lavlN4AuRwpzDOq(`sMv;5Joa+jUx<3|oWPN;mPUJ0`
pW__Wi<5+59Lc)&n_i}Q^3>R$WLpMkF=>bh=@O1TaS?83{1OVknK<NMg

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/plus.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/plus.png
new file mode 100644
index 0000000000000000000000000000000000000000..b3cb37425ea68b39ffa7b2e5fb69161275a87541
GIT binary patch
literal 199
zcmeAS@N?(olHy`uVBq!ia0vp^+#t-s1SHkYJtzcHoCO|{#XvD(5N2eUHAey{$X?><
z>&kweokM`jkU7Va11Q8%;u=xnoS&PUnpeW`?aZ|OK(QcC7sn8Z%gHvy&v=;Q4jejg
zV8NnAO`-4Z@2~&<?ryS^@YXF`T!a&o6j(S`Cmb}9IcHb(MZ@Xn$H&JXUMl#uzyAM<
o7knL=1-mEi3=josIGoJJAh%tCVFz!`HlXPYp00i_>zopr02WF_WB>pF

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/pygments.css b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/pygments.css
new file mode 100644
index 0000000..57eadc0
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/pygments.css
@@ -0,0 +1,63 @@
+.highlight .hll { background-color: #ffffcc }
+.highlight  { background: #eeffcc; }
+.highlight .c { color: #408090; font-style: italic } /* Comment */
+.highlight .err { border: 1px solid #FF0000 } /* Error */
+.highlight .k { color: #007020; font-weight: bold } /* Keyword */
+.highlight .o { color: #666666 } /* Operator */
+.highlight .cm { color: #408090; font-style: italic } /* Comment.Multiline */
+.highlight .cp { color: #007020 } /* Comment.Preproc */
+.highlight .c1 { color: #408090; font-style: italic } /* Comment.Single */
+.highlight .cs { color: #408090; background-color: #fff0f0 } /* Comment.Special */
+.highlight .gd { color: #A00000 } /* Generic.Deleted */
+.highlight .ge { font-style: italic } /* Generic.Emph */
+.highlight .gr { color: #FF0000 } /* Generic.Error */
+.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
+.highlight .gi { color: #00A000 } /* Generic.Inserted */
+.highlight .go { color: #333333 } /* Generic.Output */
+.highlight .gp { color: #c65d09; font-weight: bold } /* Generic.Prompt */
+.highlight .gs { font-weight: bold } /* Generic.Strong */
+.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
+.highlight .gt { color: #0044DD } /* Generic.Traceback */
+.highlight .kc { color: #007020; font-weight: bold } /* Keyword.Constant */
+.highlight .kd { color: #007020; font-weight: bold } /* Keyword.Declaration */
+.highlight .kn { color: #007020; font-weight: bold } /* Keyword.Namespace */
+.highlight .kp { color: #007020 } /* Keyword.Pseudo */
+.highlight .kr { color: #007020; font-weight: bold } /* Keyword.Reserved */
+.highlight .kt { color: #902000 } /* Keyword.Type */
+.highlight .m { color: #208050 } /* Literal.Number */
+.highlight .s { color: #4070a0 } /* Literal.String */
+.highlight .na { color: #4070a0 } /* Name.Attribute */
+.highlight .nb { color: #007020 } /* Name.Builtin */
+.highlight .nc { color: #0e84b5; font-weight: bold } /* Name.Class */
+.highlight .no { color: #60add5 } /* Name.Constant */
+.highlight .nd { color: #555555; font-weight: bold } /* Name.Decorator */
+.highlight .ni { color: #d55537; font-weight: bold } /* Name.Entity */
+.highlight .ne { color: #007020 } /* Name.Exception */
+.highlight .nf { color: #06287e } /* Name.Function */
+.highlight .nl { color: #002070; font-weight: bold } /* Name.Label */
+.highlight .nn { color: #0e84b5; font-weight: bold } /* Name.Namespace */
+.highlight .nt { color: #062873; font-weight: bold } /* Name.Tag */
+.highlight .nv { color: #bb60d5 } /* Name.Variable */
+.highlight .ow { color: #007020; font-weight: bold } /* Operator.Word */
+.highlight .w { color: #bbbbbb } /* Text.Whitespace */
+.highlight .mb { color: #208050 } /* Literal.Number.Bin */
+.highlight .mf { color: #208050 } /* Literal.Number.Float */
+.highlight .mh { color: #208050 } /* Literal.Number.Hex */
+.highlight .mi { color: #208050 } /* Literal.Number.Integer */
+.highlight .mo { color: #208050 } /* Literal.Number.Oct */
+.highlight .sb { color: #4070a0 } /* Literal.String.Backtick */
+.highlight .sc { color: #4070a0 } /* Literal.String.Char */
+.highlight .sd { color: #4070a0; font-style: italic } /* Literal.String.Doc */
+.highlight .s2 { color: #4070a0 } /* Literal.String.Double */
+.highlight .se { color: #4070a0; font-weight: bold } /* Literal.String.Escape */
+.highlight .sh { color: #4070a0 } /* Literal.String.Heredoc */
+.highlight .si { color: #70a0d0; font-style: italic } /* Literal.String.Interpol */
+.highlight .sx { color: #c65d09 } /* Literal.String.Other */
+.highlight .sr { color: #235388 } /* Literal.String.Regex */
+.highlight .s1 { color: #4070a0 } /* Literal.String.Single */
+.highlight .ss { color: #517918 } /* Literal.String.Symbol */
+.highlight .bp { color: #007020 } /* Name.Builtin.Pseudo */
+.highlight .vc { color: #bb60d5 } /* Name.Variable.Class */
+.highlight .vg { color: #bb60d5 } /* Name.Variable.Global */
+.highlight .vi { color: #bb60d5 } /* Name.Variable.Instance */
+.highlight .il { color: #208050 } /* Literal.Number.Integer.Long */
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/searchtools.js b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/searchtools.js
new file mode 100644
index 0000000..6e1f06b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/searchtools.js
@@ -0,0 +1,622 @@
+/*
+ * searchtools.js_t
+ * ~~~~~~~~~~~~~~~~
+ *
+ * Sphinx JavaScript utilties for the full-text search.
+ *
+ * :copyright: Copyright 2007-2014 by the Sphinx team, see AUTHORS.
+ * :license: BSD, see LICENSE for details.
+ *
+ */
+
+
+/**
+ * Porter Stemmer
+ */
+var Stemmer = function() {
+
+  var step2list = {
+    ational: 'ate',
+    tional: 'tion',
+    enci: 'ence',
+    anci: 'ance',
+    izer: 'ize',
+    bli: 'ble',
+    alli: 'al',
+    entli: 'ent',
+    eli: 'e',
+    ousli: 'ous',
+    ization: 'ize',
+    ation: 'ate',
+    ator: 'ate',
+    alism: 'al',
+    iveness: 'ive',
+    fulness: 'ful',
+    ousness: 'ous',
+    aliti: 'al',
+    iviti: 'ive',
+    biliti: 'ble',
+    logi: 'log'
+  };
+
+  var step3list = {
+    icate: 'ic',
+    ative: '',
+    alize: 'al',
+    iciti: 'ic',
+    ical: 'ic',
+    ful: '',
+    ness: ''
+  };
+
+  var c = "[^aeiou]";          // consonant
+  var v = "[aeiouy]";          // vowel
+  var C = c + "[^aeiouy]*";    // consonant sequence
+  var V = v + "[aeiou]*";      // vowel sequence
+
+  var mgr0 = "^(" + C + ")?" + V + C;                      // [C]VC... is m>0
+  var meq1 = "^(" + C + ")?" + V + C + "(" + V + ")?$";    // [C]VC[V] is m=1
+  var mgr1 = "^(" + C + ")?" + V + C + V + C;              // [C]VCVC... is m>1
+  var s_v   = "^(" + C + ")?" + v;                         // vowel in stem
+
+  this.stemWord = function (w) {
+    var stem;
+    var suffix;
+    var firstch;
+    var origword = w;
+
+    if (w.length < 3)
+      return w;
+
+    var re;
+    var re2;
+    var re3;
+    var re4;
+
+    firstch = w.substr(0,1);
+    if (firstch == "y")
+      w = firstch.toUpperCase() + w.substr(1);
+
+    // Step 1a
+    re = /^(.+?)(ss|i)es$/;
+    re2 = /^(.+?)([^s])s$/;
+
+    if (re.test(w))
+      w = w.replace(re,"$1$2");
+    else if (re2.test(w))
+      w = w.replace(re2,"$1$2");
+
+    // Step 1b
+    re = /^(.+?)eed$/;
+    re2 = /^(.+?)(ed|ing)$/;
+    if (re.test(w)) {
+      var fp = re.exec(w);
+      re = new RegExp(mgr0);
+      if (re.test(fp[1])) {
+        re = /.$/;
+        w = w.replace(re,"");
+      }
+    }
+    else if (re2.test(w)) {
+      var fp = re2.exec(w);
+      stem = fp[1];
+      re2 = new RegExp(s_v);
+      if (re2.test(stem)) {
+        w = stem;
+        re2 = /(at|bl|iz)$/;
+        re3 = new RegExp("([^aeiouylsz])\\1$");
+        re4 = new RegExp("^" + C + v + "[^aeiouwxy]$");
+        if (re2.test(w))
+          w = w + "e";
+        else if (re3.test(w)) {
+          re = /.$/;
+          w = w.replace(re,"");
+        }
+        else if (re4.test(w))
+          w = w + "e";
+      }
+    }
+
+    // Step 1c
+    re = /^(.+?)y$/;
+    if (re.test(w)) {
+      var fp = re.exec(w);
+      stem = fp[1];
+      re = new RegExp(s_v);
+      if (re.test(stem))
+        w = stem + "i";
+    }
+
+    // Step 2
+    re = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;
+    if (re.test(w)) {
+      var fp = re.exec(w);
+      stem = fp[1];
+      suffix = fp[2];
+      re = new RegExp(mgr0);
+      if (re.test(stem))
+        w = stem + step2list[suffix];
+    }
+
+    // Step 3
+    re = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;
+    if (re.test(w)) {
+      var fp = re.exec(w);
+      stem = fp[1];
+      suffix = fp[2];
+      re = new RegExp(mgr0);
+      if (re.test(stem))
+        w = stem + step3list[suffix];
+    }
+
+    // Step 4
+    re = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
+    re2 = /^(.+?)(s|t)(ion)$/;
+    if (re.test(w)) {
+      var fp = re.exec(w);
+      stem = fp[1];
+      re = new RegExp(mgr1);
+      if (re.test(stem))
+        w = stem;
+    }
+    else if (re2.test(w)) {
+      var fp = re2.exec(w);
+      stem = fp[1] + fp[2];
+      re2 = new RegExp(mgr1);
+      if (re2.test(stem))
+        w = stem;
+    }
+
+    // Step 5
+    re = /^(.+?)e$/;
+    if (re.test(w)) {
+      var fp = re.exec(w);
+      stem = fp[1];
+      re = new RegExp(mgr1);
+      re2 = new RegExp(meq1);
+      re3 = new RegExp("^" + C + v + "[^aeiouwxy]$");
+      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem))))
+        w = stem;
+    }
+    re = /ll$/;
+    re2 = new RegExp(mgr1);
+    if (re.test(w) && re2.test(w)) {
+      re = /.$/;
+      w = w.replace(re,"");
+    }
+
+    // and turn initial Y back to y
+    if (firstch == "y")
+      w = firstch.toLowerCase() + w.substr(1);
+    return w;
+  }
+}
+
+
+
+/**
+ * Simple result scoring code.
+ */
+var Scorer = {
+  // Implement the following function to further tweak the score for each result
+  // The function takes a result array [filename, title, anchor, descr, score]
+  // and returns the new score.
+  /*
+  score: function(result) {
+    return result[4];
+  },
+  */
+
+  // query matches the full name of an object
+  objNameMatch: 11,
+  // or matches in the last dotted part of the object name
+  objPartialMatch: 6,
+  // Additive scores depending on the priority of the object
+  objPrio: {0:  15,   // used to be importantResults
+            1:  5,   // used to be objectResults
+            2: -5},  // used to be unimportantResults
+  //  Used when the priority is not in the mapping.
+  objPrioDefault: 0,
+
+  // query found in title
+  title: 15,
+  // query found in terms
+  term: 5
+};
+
+
+/**
+ * Search Module
+ */
+var Search = {
+
+  _index : null,
+  _queued_query : null,
+  _pulse_status : -1,
+
+  init : function() {
+      var params = $.getQueryParameters();
+      if (params.q) {
+          var query = params.q[0];
+          $('input[name="q"]')[0].value = query;
+          this.performSearch(query);
+      }
+  },
+
+  loadIndex : function(url) {
+    $.ajax({type: "GET", url: url, data: null,
+            dataType: "script", cache: true,
+            complete: function(jqxhr, textstatus) {
+              if (textstatus != "success") {
+                document.getElementById("searchindexloader").src = url;
+              }
+            }});
+  },
+
+  setIndex : function(index) {
+    var q;
+    this._index = index;
+    if ((q = this._queued_query) !== null) {
+      this._queued_query = null;
+      Search.query(q);
+    }
+  },
+
+  hasIndex : function() {
+      return this._index !== null;
+  },
+
+  deferQuery : function(query) {
+      this._queued_query = query;
+  },
+
+  stopPulse : function() {
+      this._pulse_status = 0;
+  },
+
+  startPulse : function() {
+    if (this._pulse_status >= 0)
+        return;
+    function pulse() {
+      var i;
+      Search._pulse_status = (Search._pulse_status + 1) % 4;
+      var dotString = '';
+      for (i = 0; i < Search._pulse_status; i++)
+        dotString += '.';
+      Search.dots.text(dotString);
+      if (Search._pulse_status > -1)
+        window.setTimeout(pulse, 500);
+    }
+    pulse();
+  },
+
+  /**
+   * perform a search for something (or wait until index is loaded)
+   */
+  performSearch : function(query) {
+    // create the required interface elements
+    this.out = $('#search-results');
+    this.title = $('<h2>' + _('Searching') + '</h2>').appendTo(this.out);
+    this.dots = $('<span></span>').appendTo(this.title);
+    this.status = $('<p style="display: none"></p>').appendTo(this.out);
+    this.output = $('<ul class="search"/>').appendTo(this.out);
+
+    $('#search-progress').text(_('Preparing search...'));
+    this.startPulse();
+
+    // index already loaded, the browser was quick!
+    if (this.hasIndex())
+      this.query(query);
+    else
+      this.deferQuery(query);
+  },
+
+  /**
+   * execute search (requires search index to be loaded)
+   */
+  query : function(query) {
+    var i;
+    var stopwords = ["a","and","are","as","at","be","but","by","for","if","in","into","is","it","near","no","not","of","on","or","such","that","the","their","then","there","these","they","this","to","was","will","with"];
+
+    // stem the searchterms and add them to the correct list
+    var stemmer = new Stemmer();
+    var searchterms = [];
+    var excluded = [];
+    var hlterms = [];
+    var tmp = query.split(/\s+/);
+    var objectterms = [];
+    for (i = 0; i < tmp.length; i++) {
+      if (tmp[i] !== "") {
+          objectterms.push(tmp[i].toLowerCase());
+      }
+
+      if ($u.indexOf(stopwords, tmp[i].toLowerCase()) != -1 || tmp[i].match(/^\d+$/) ||
+          tmp[i] === "") {
+        // skip this "word"
+        continue;
+      }
+      // stem the word
+      var word = stemmer.stemWord(tmp[i].toLowerCase());
+      var toAppend;
+      // select the correct list
+      if (word[0] == '-') {
+        toAppend = excluded;
+        word = word.substr(1);
+      }
+      else {
+        toAppend = searchterms;
+        hlterms.push(tmp[i].toLowerCase());
+      }
+      // only add if not already in the list
+      if (!$u.contains(toAppend, word))
+        toAppend.push(word);
+    }
+    var highlightstring = '?highlight=' + $.urlencode(hlterms.join(" "));
+
+    // console.debug('SEARCH: searching for:');
+    // console.info('required: ', searchterms);
+    // console.info('excluded: ', excluded);
+
+    // prepare search
+    var terms = this._index.terms;
+    var titleterms = this._index.titleterms;
+
+    // array of [filename, title, anchor, descr, score]
+    var results = [];
+    $('#search-progress').empty();
+
+    // lookup as object
+    for (i = 0; i < objectterms.length; i++) {
+      var others = [].concat(objectterms.slice(0, i),
+                             objectterms.slice(i+1, objectterms.length));
+      results = results.concat(this.performObjectSearch(objectterms[i], others));
+    }
+
+    // lookup as search terms in fulltext
+    results = results.concat(this.performTermsSearch(searchterms, excluded, terms, Scorer.term))
+                     .concat(this.performTermsSearch(searchterms, excluded, titleterms, Scorer.title));
+
+    // let the scorer override scores with a custom scoring function
+    if (Scorer.score) {
+      for (i = 0; i < results.length; i++)
+        results[i][4] = Scorer.score(results[i]);
+    }
+
+    // now sort the results by score (in opposite order of appearance, since the
+    // display function below uses pop() to retrieve items) and then
+    // alphabetically
+    results.sort(function(a, b) {
+      var left = a[4];
+      var right = b[4];
+      if (left > right) {
+        return 1;
+      } else if (left < right) {
+        return -1;
+      } else {
+        // same score: sort alphabetically
+        left = a[1].toLowerCase();
+        right = b[1].toLowerCase();
+        return (left > right) ? -1 : ((left < right) ? 1 : 0);
+      }
+    });
+
+    // for debugging
+    //Search.lastresults = results.slice();  // a copy
+    //console.info('search results:', Search.lastresults);
+
+    // print the results
+    var resultCount = results.length;
+    function displayNextItem() {
+      // results left, load the summary and display it
+      if (results.length) {
+        var item = results.pop();
+        var listItem = $('<li style="display:none"></li>');
+        if (DOCUMENTATION_OPTIONS.FILE_SUFFIX === '') {
+          // dirhtml builder
+          var dirname = item[0] + '/';
+          if (dirname.match(/\/index\/$/)) {
+            dirname = dirname.substring(0, dirname.length-6);
+          } else if (dirname == 'index/') {
+            dirname = '';
+          }
+          listItem.append($('<a/>').attr('href',
+            DOCUMENTATION_OPTIONS.URL_ROOT + dirname +
+            highlightstring + item[2]).html(item[1]));
+        } else {
+          // normal html builders
+          listItem.append($('<a/>').attr('href',
+            item[0] + DOCUMENTATION_OPTIONS.FILE_SUFFIX +
+            highlightstring + item[2]).html(item[1]));
+        }
+        if (item[3]) {
+          listItem.append($('<span> (' + item[3] + ')</span>'));
+          Search.output.append(listItem);
+          listItem.slideDown(5, function() {
+            displayNextItem();
+          });
+        } else if (DOCUMENTATION_OPTIONS.HAS_SOURCE) {
+          $.ajax({url: DOCUMENTATION_OPTIONS.URL_ROOT + '_sources/' + item[0] + '.txt',
+                  dataType: "text",
+                  complete: function(jqxhr, textstatus) {
+                    var data = jqxhr.responseText;
+                    if (data !== '') {
+                      listItem.append(Search.makeSearchSummary(data, searchterms, hlterms));
+                    }
+                    Search.output.append(listItem);
+                    listItem.slideDown(5, function() {
+                      displayNextItem();
+                    });
+                  }});
+        } else {
+          // no source available, just display title
+          Search.output.append(listItem);
+          listItem.slideDown(5, function() {
+            displayNextItem();
+          });
+        }
+      }
+      // search finished, update title and status message
+      else {
+        Search.stopPulse();
+        Search.title.text(_('Search Results'));
+        if (!resultCount)
+          Search.status.text(_('Your search did not match any documents. Please make sure that all words are spelled correctly and that you\'ve selected enough categories.'));
+        else
+            Search.status.text(_('Search finished, found %s page(s) matching the search query.').replace('%s', resultCount));
+        Search.status.fadeIn(500);
+      }
+    }
+    displayNextItem();
+  },
+
+  /**
+   * search for object names
+   */
+  performObjectSearch : function(object, otherterms) {
+    var filenames = this._index.filenames;
+    var objects = this._index.objects;
+    var objnames = this._index.objnames;
+    var titles = this._index.titles;
+
+    var i;
+    var results = [];
+
+    for (var prefix in objects) {
+      for (var name in objects[prefix]) {
+        var fullname = (prefix ? prefix + '.' : '') + name;
+        if (fullname.toLowerCase().indexOf(object) > -1) {
+          var score = 0;
+          var parts = fullname.split('.');
+          // check for different match types: exact matches of full name or
+          // "last name" (i.e. last dotted part)
+          if (fullname == object || parts[parts.length - 1] == object) {
+            score += Scorer.objNameMatch;
+          // matches in last name
+          } else if (parts[parts.length - 1].indexOf(object) > -1) {
+            score += Scorer.objPartialMatch;
+          }
+          var match = objects[prefix][name];
+          var objname = objnames[match[1]][2];
+          var title = titles[match[0]];
+          // If more than one term searched for, we require other words to be
+          // found in the name/title/description
+          if (otherterms.length > 0) {
+            var haystack = (prefix + ' ' + name + ' ' +
+                            objname + ' ' + title).toLowerCase();
+            var allfound = true;
+            for (i = 0; i < otherterms.length; i++) {
+              if (haystack.indexOf(otherterms[i]) == -1) {
+                allfound = false;
+                break;
+              }
+            }
+            if (!allfound) {
+              continue;
+            }
+          }
+          var descr = objname + _(', in ') + title;
+
+          var anchor = match[3];
+          if (anchor === '')
+            anchor = fullname;
+          else if (anchor == '-')
+            anchor = objnames[match[1]][1] + '-' + fullname;
+          // add custom score for some objects according to scorer
+          if (Scorer.objPrio.hasOwnProperty(match[2])) {
+            score += Scorer.objPrio[match[2]];
+          } else {
+            score += Scorer.objPrioDefault;
+          }
+          results.push([filenames[match[0]], fullname, '#'+anchor, descr, score]);
+        }
+      }
+    }
+
+    return results;
+  },
+
+  /**
+   * search for full-text terms in the index
+   */
+  performTermsSearch : function(searchterms, excluded, terms, score) {
+    var filenames = this._index.filenames;
+    var titles = this._index.titles;
+
+    var i, j, file, files;
+    var fileMap = {};
+    var results = [];
+
+    // perform the search on the required terms
+    for (i = 0; i < searchterms.length; i++) {
+      var word = searchterms[i];
+      // no match but word was a required one
+      if ((files = terms[word]) === undefined)
+        break;
+      if (files.length === undefined) {
+        files = [files];
+      }
+      // create the mapping
+      for (j = 0; j < files.length; j++) {
+        file = files[j];
+        if (file in fileMap)
+          fileMap[file].push(word);
+        else
+          fileMap[file] = [word];
+      }
+    }
+
+    // now check if the files don't contain excluded terms
+    for (file in fileMap) {
+      var valid = true;
+
+      // check if all requirements are matched
+      if (fileMap[file].length != searchterms.length)
+          continue;
+
+      // ensure that none of the excluded terms is in the search result
+      for (i = 0; i < excluded.length; i++) {
+        if (terms[excluded[i]] == file ||
+          $u.contains(terms[excluded[i]] || [], file)) {
+          valid = false;
+          break;
+        }
+      }
+
+      // if we have still a valid result we can add it to the result list
+      if (valid) {
+        results.push([filenames[file], titles[file], '', null, score]);
+      }
+    }
+    return results;
+  },
+
+  /**
+   * helper function to return a node containing the
+   * search summary for a given text. keywords is a list
+   * of stemmed words, hlwords is the list of normal, unstemmed
+   * words. the first one is used to find the occurance, the
+   * latter for highlighting it.
+   */
+  makeSearchSummary : function(text, keywords, hlwords) {
+    var textLower = text.toLowerCase();
+    var start = 0;
+    $.each(keywords, function() {
+      var i = textLower.indexOf(this.toLowerCase());
+      if (i > -1)
+        start = i;
+    });
+    start = Math.max(start - 120, 0);
+    var excerpt = ((start > 0) ? '...' : '') +
+      $.trim(text.substr(start, 240)) +
+      ((start + 240 - text.length) ? '...' : '');
+    var rv = $('<div class="context"></div>').text(excerpt);
+    $.each(hlwords, function() {
+      rv = rv.highlightText(this, 'highlighted');
+    });
+    return rv;
+  }
+};
+
+$(document).ready(function() {
+  Search.init();
+});
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/sidebar.js b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/sidebar.js
new file mode 100644
index 0000000..4f09a0d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/sidebar.js
@@ -0,0 +1,159 @@
+/*
+ * sidebar.js
+ * ~~~~~~~~~~
+ *
+ * This script makes the Sphinx sidebar collapsible.
+ *
+ * .sphinxsidebar contains .sphinxsidebarwrapper.  This script adds
+ * in .sphixsidebar, after .sphinxsidebarwrapper, the #sidebarbutton
+ * used to collapse and expand the sidebar.
+ *
+ * When the sidebar is collapsed the .sphinxsidebarwrapper is hidden
+ * and the width of the sidebar and the margin-left of the document
+ * are decreased. When the sidebar is expanded the opposite happens.
+ * This script saves a per-browser/per-session cookie used to
+ * remember the position of the sidebar among the pages.
+ * Once the browser is closed the cookie is deleted and the position
+ * reset to the default (expanded).
+ *
+ * :copyright: Copyright 2007-2014 by the Sphinx team, see AUTHORS.
+ * :license: BSD, see LICENSE for details.
+ *
+ */
+
+$(function() {
+  
+  
+  
+  
+  
+  
+  
+
+  // global elements used by the functions.
+  // the 'sidebarbutton' element is defined as global after its
+  // creation, in the add_sidebar_button function
+  var bodywrapper = $('.bodywrapper');
+  var sidebar = $('.sphinxsidebar');
+  var sidebarwrapper = $('.sphinxsidebarwrapper');
+
+  // for some reason, the document has no sidebar; do not run into errors
+  if (!sidebar.length) return;
+
+  // original margin-left of the bodywrapper and width of the sidebar
+  // with the sidebar expanded
+  var bw_margin_expanded = bodywrapper.css('margin-left');
+  var ssb_width_expanded = sidebar.width();
+
+  // margin-left of the bodywrapper and width of the sidebar
+  // with the sidebar collapsed
+  var bw_margin_collapsed = '.8em';
+  var ssb_width_collapsed = '.8em';
+
+  // colors used by the current theme
+  var dark_color = $('.related').css('background-color');
+  var light_color = $('.document').css('background-color');
+
+  function sidebar_is_collapsed() {
+    return sidebarwrapper.is(':not(:visible)');
+  }
+
+  function toggle_sidebar() {
+    if (sidebar_is_collapsed())
+      expand_sidebar();
+    else
+      collapse_sidebar();
+  }
+
+  function collapse_sidebar() {
+    sidebarwrapper.hide();
+    sidebar.css('width', ssb_width_collapsed);
+    bodywrapper.css('margin-left', bw_margin_collapsed);
+    sidebarbutton.css({
+        'margin-left': '0',
+        'height': bodywrapper.height()
+    });
+    sidebarbutton.find('span').text('»');
+    sidebarbutton.attr('title', _('Expand sidebar'));
+    document.cookie = 'sidebar=collapsed';
+  }
+
+  function expand_sidebar() {
+    bodywrapper.css('margin-left', bw_margin_expanded);
+    sidebar.css('width', ssb_width_expanded);
+    sidebarwrapper.show();
+    sidebarbutton.css({
+        'margin-left': ssb_width_expanded-12,
+        'height': bodywrapper.height()
+    });
+    sidebarbutton.find('span').text('«');
+    sidebarbutton.attr('title', _('Collapse sidebar'));
+    document.cookie = 'sidebar=expanded';
+  }
+
+  function add_sidebar_button() {
+    sidebarwrapper.css({
+        'float': 'left',
+        'margin-right': '0',
+        'width': ssb_width_expanded - 28
+    });
+    // create the button
+    sidebar.append(
+        '<div id="sidebarbutton"><span>&laquo;</span></div>'
+    );
+    var sidebarbutton = $('#sidebarbutton');
+    light_color = sidebarbutton.css('background-color');
+    // find the height of the viewport to center the '<<' in the page
+    var viewport_height;
+    if (window.innerHeight)
+ 	  viewport_height = window.innerHeight;
+    else
+	  viewport_height = $(window).height();
+    sidebarbutton.find('span').css({
+        'display': 'block',
+        'margin-top': (viewport_height - sidebar.position().top - 20) / 2
+    });
+
+    sidebarbutton.click(toggle_sidebar);
+    sidebarbutton.attr('title', _('Collapse sidebar'));
+    sidebarbutton.css({
+        'color': '#FFFFFF',
+        'border-left': '1px solid ' + dark_color,
+        'font-size': '1.2em',
+        'cursor': 'pointer',
+        'height': bodywrapper.height(),
+        'padding-top': '1px',
+        'margin-left': ssb_width_expanded - 12
+    });
+
+    sidebarbutton.hover(
+      function () {
+          $(this).css('background-color', dark_color);
+      },
+      function () {
+          $(this).css('background-color', light_color);
+      }
+    );
+  }
+
+  function set_position_from_cookie() {
+    if (!document.cookie)
+      return;
+    var items = document.cookie.split(';');
+    for(var k=0; k<items.length; k++) {
+      var key_val = items[k].split('=');
+      var key = key_val[0].replace(/ /, "");  // strip leading spaces
+      if (key == 'sidebar') {
+        var value = key_val[1];
+        if ((value == 'collapsed') && (!sidebar_is_collapsed()))
+          collapse_sidebar();
+        else if ((value == 'expanded') && (sidebar_is_collapsed()))
+          expand_sidebar();
+      }
+    }
+  }
+
+  add_sidebar_button();
+  var sidebarbutton = $('#sidebarbutton');
+  set_position_from_cookie();
+});
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/underscore.js b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/underscore.js
new file mode 100644
index 0000000..5b55f32
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/underscore.js
@@ -0,0 +1,31 @@
+// Underscore.js 1.3.1
+// (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
+// Underscore is freely distributable under the MIT license.
+// Portions of Underscore are inspired or borrowed from Prototype,
+// Oliver Steele's Functional, and John Resig's Micro-Templating.
+// For all details and documentation:
+// http://documentcloud.github.com/underscore
+(function(){function q(a,c,d){if(a===c)return a!==0||1/a==1/c;if(a==null||c==null)return a===c;if(a._chain)a=a._wrapped;if(c._chain)c=c._wrapped;if(a.isEqual&&b.isFunction(a.isEqual))return a.isEqual(c);if(c.isEqual&&b.isFunction(c.isEqual))return c.isEqual(a);var e=l.call(a);if(e!=l.call(c))return false;switch(e){case "[object String]":return a==String(c);case "[object Number]":return a!=+a?c!=+c:a==0?1/a==1/c:a==+c;case "[object Date]":case "[object Boolean]":return+a==+c;case "[object RegExp]":return a.source==
+c.source&&a.global==c.global&&a.multiline==c.multiline&&a.ignoreCase==c.ignoreCase}if(typeof a!="object"||typeof c!="object")return false;for(var f=d.length;f--;)if(d[f]==a)return true;d.push(a);var f=0,g=true;if(e=="[object Array]"){if(f=a.length,g=f==c.length)for(;f--;)if(!(g=f in a==f in c&&q(a[f],c[f],d)))break}else{if("constructor"in a!="constructor"in c||a.constructor!=c.constructor)return false;for(var h in a)if(b.has(a,h)&&(f++,!(g=b.has(c,h)&&q(a[h],c[h],d))))break;if(g){for(h in c)if(b.has(c,
+h)&&!f--)break;g=!f}}d.pop();return g}var r=this,G=r._,n={},k=Array.prototype,o=Object.prototype,i=k.slice,H=k.unshift,l=o.toString,I=o.hasOwnProperty,w=k.forEach,x=k.map,y=k.reduce,z=k.reduceRight,A=k.filter,B=k.every,C=k.some,p=k.indexOf,D=k.lastIndexOf,o=Array.isArray,J=Object.keys,s=Function.prototype.bind,b=function(a){return new m(a)};if(typeof exports!=="undefined"){if(typeof module!=="undefined"&&module.exports)exports=module.exports=b;exports._=b}else r._=b;b.VERSION="1.3.1";var j=b.each=
+b.forEach=function(a,c,d){if(a!=null)if(w&&a.forEach===w)a.forEach(c,d);else if(a.length===+a.length)for(var e=0,f=a.length;e<f;e++){if(e in a&&c.call(d,a[e],e,a)===n)break}else for(e in a)if(b.has(a,e)&&c.call(d,a[e],e,a)===n)break};b.map=b.collect=function(a,c,b){var e=[];if(a==null)return e;if(x&&a.map===x)return a.map(c,b);j(a,function(a,g,h){e[e.length]=c.call(b,a,g,h)});if(a.length===+a.length)e.length=a.length;return e};b.reduce=b.foldl=b.inject=function(a,c,d,e){var f=arguments.length>2;a==
+null&&(a=[]);if(y&&a.reduce===y)return e&&(c=b.bind(c,e)),f?a.reduce(c,d):a.reduce(c);j(a,function(a,b,i){f?d=c.call(e,d,a,b,i):(d=a,f=true)});if(!f)throw new TypeError("Reduce of empty array with no initial value");return d};b.reduceRight=b.foldr=function(a,c,d,e){var f=arguments.length>2;a==null&&(a=[]);if(z&&a.reduceRight===z)return e&&(c=b.bind(c,e)),f?a.reduceRight(c,d):a.reduceRight(c);var g=b.toArray(a).reverse();e&&!f&&(c=b.bind(c,e));return f?b.reduce(g,c,d,e):b.reduce(g,c)};b.find=b.detect=
+function(a,c,b){var e;E(a,function(a,g,h){if(c.call(b,a,g,h))return e=a,true});return e};b.filter=b.select=function(a,c,b){var e=[];if(a==null)return e;if(A&&a.filter===A)return a.filter(c,b);j(a,function(a,g,h){c.call(b,a,g,h)&&(e[e.length]=a)});return e};b.reject=function(a,c,b){var e=[];if(a==null)return e;j(a,function(a,g,h){c.call(b,a,g,h)||(e[e.length]=a)});return e};b.every=b.all=function(a,c,b){var e=true;if(a==null)return e;if(B&&a.every===B)return a.every(c,b);j(a,function(a,g,h){if(!(e=
+e&&c.call(b,a,g,h)))return n});return e};var E=b.some=b.any=function(a,c,d){c||(c=b.identity);var e=false;if(a==null)return e;if(C&&a.some===C)return a.some(c,d);j(a,function(a,b,h){if(e||(e=c.call(d,a,b,h)))return n});return!!e};b.include=b.contains=function(a,c){var b=false;if(a==null)return b;return p&&a.indexOf===p?a.indexOf(c)!=-1:b=E(a,function(a){return a===c})};b.invoke=function(a,c){var d=i.call(arguments,2);return b.map(a,function(a){return(b.isFunction(c)?c||a:a[c]).apply(a,d)})};b.pluck=
+function(a,c){return b.map(a,function(a){return a[c]})};b.max=function(a,c,d){if(!c&&b.isArray(a))return Math.max.apply(Math,a);if(!c&&b.isEmpty(a))return-Infinity;var e={computed:-Infinity};j(a,function(a,b,h){b=c?c.call(d,a,b,h):a;b>=e.computed&&(e={value:a,computed:b})});return e.value};b.min=function(a,c,d){if(!c&&b.isArray(a))return Math.min.apply(Math,a);if(!c&&b.isEmpty(a))return Infinity;var e={computed:Infinity};j(a,function(a,b,h){b=c?c.call(d,a,b,h):a;b<e.computed&&(e={value:a,computed:b})});
+return e.value};b.shuffle=function(a){var b=[],d;j(a,function(a,f){f==0?b[0]=a:(d=Math.floor(Math.random()*(f+1)),b[f]=b[d],b[d]=a)});return b};b.sortBy=function(a,c,d){return b.pluck(b.map(a,function(a,b,g){return{value:a,criteria:c.call(d,a,b,g)}}).sort(function(a,b){var c=a.criteria,d=b.criteria;return c<d?-1:c>d?1:0}),"value")};b.groupBy=function(a,c){var d={},e=b.isFunction(c)?c:function(a){return a[c]};j(a,function(a,b){var c=e(a,b);(d[c]||(d[c]=[])).push(a)});return d};b.sortedIndex=function(a,
+c,d){d||(d=b.identity);for(var e=0,f=a.length;e<f;){var g=e+f>>1;d(a[g])<d(c)?e=g+1:f=g}return e};b.toArray=function(a){return!a?[]:a.toArray?a.toArray():b.isArray(a)?i.call(a):b.isArguments(a)?i.call(a):b.values(a)};b.size=function(a){return b.toArray(a).length};b.first=b.head=function(a,b,d){return b!=null&&!d?i.call(a,0,b):a[0]};b.initial=function(a,b,d){return i.call(a,0,a.length-(b==null||d?1:b))};b.last=function(a,b,d){return b!=null&&!d?i.call(a,Math.max(a.length-b,0)):a[a.length-1]};b.rest=
+b.tail=function(a,b,d){return i.call(a,b==null||d?1:b)};b.compact=function(a){return b.filter(a,function(a){return!!a})};b.flatten=function(a,c){return b.reduce(a,function(a,e){if(b.isArray(e))return a.concat(c?e:b.flatten(e));a[a.length]=e;return a},[])};b.without=function(a){return b.difference(a,i.call(arguments,1))};b.uniq=b.unique=function(a,c,d){var d=d?b.map(a,d):a,e=[];b.reduce(d,function(d,g,h){if(0==h||(c===true?b.last(d)!=g:!b.include(d,g)))d[d.length]=g,e[e.length]=a[h];return d},[]);
+return e};b.union=function(){return b.uniq(b.flatten(arguments,true))};b.intersection=b.intersect=function(a){var c=i.call(arguments,1);return b.filter(b.uniq(a),function(a){return b.every(c,function(c){return b.indexOf(c,a)>=0})})};b.difference=function(a){var c=b.flatten(i.call(arguments,1));return b.filter(a,function(a){return!b.include(c,a)})};b.zip=function(){for(var a=i.call(arguments),c=b.max(b.pluck(a,"length")),d=Array(c),e=0;e<c;e++)d[e]=b.pluck(a,""+e);return d};b.indexOf=function(a,c,
+d){if(a==null)return-1;var e;if(d)return d=b.sortedIndex(a,c),a[d]===c?d:-1;if(p&&a.indexOf===p)return a.indexOf(c);for(d=0,e=a.length;d<e;d++)if(d in a&&a[d]===c)return d;return-1};b.lastIndexOf=function(a,b){if(a==null)return-1;if(D&&a.lastIndexOf===D)return a.lastIndexOf(b);for(var d=a.length;d--;)if(d in a&&a[d]===b)return d;return-1};b.range=function(a,b,d){arguments.length<=1&&(b=a||0,a=0);for(var d=arguments[2]||1,e=Math.max(Math.ceil((b-a)/d),0),f=0,g=Array(e);f<e;)g[f++]=a,a+=d;return g};
+var F=function(){};b.bind=function(a,c){var d,e;if(a.bind===s&&s)return s.apply(a,i.call(arguments,1));if(!b.isFunction(a))throw new TypeError;e=i.call(arguments,2);return d=function(){if(!(this instanceof d))return a.apply(c,e.concat(i.call(arguments)));F.prototype=a.prototype;var b=new F,g=a.apply(b,e.concat(i.call(arguments)));return Object(g)===g?g:b}};b.bindAll=function(a){var c=i.call(arguments,1);c.length==0&&(c=b.functions(a));j(c,function(c){a[c]=b.bind(a[c],a)});return a};b.memoize=function(a,
+c){var d={};c||(c=b.identity);return function(){var e=c.apply(this,arguments);return b.has(d,e)?d[e]:d[e]=a.apply(this,arguments)}};b.delay=function(a,b){var d=i.call(arguments,2);return setTimeout(function(){return a.apply(a,d)},b)};b.defer=function(a){return b.delay.apply(b,[a,1].concat(i.call(arguments,1)))};b.throttle=function(a,c){var d,e,f,g,h,i=b.debounce(function(){h=g=false},c);return function(){d=this;e=arguments;var b;f||(f=setTimeout(function(){f=null;h&&a.apply(d,e);i()},c));g?h=true:
+a.apply(d,e);i();g=true}};b.debounce=function(a,b){var d;return function(){var e=this,f=arguments;clearTimeout(d);d=setTimeout(function(){d=null;a.apply(e,f)},b)}};b.once=function(a){var b=false,d;return function(){if(b)return d;b=true;return d=a.apply(this,arguments)}};b.wrap=function(a,b){return function(){var d=[a].concat(i.call(arguments,0));return b.apply(this,d)}};b.compose=function(){var a=arguments;return function(){for(var b=arguments,d=a.length-1;d>=0;d--)b=[a[d].apply(this,b)];return b[0]}};
+b.after=function(a,b){return a<=0?b():function(){if(--a<1)return b.apply(this,arguments)}};b.keys=J||function(a){if(a!==Object(a))throw new TypeError("Invalid object");var c=[],d;for(d in a)b.has(a,d)&&(c[c.length]=d);return c};b.values=function(a){return b.map(a,b.identity)};b.functions=b.methods=function(a){var c=[],d;for(d in a)b.isFunction(a[d])&&c.push(d);return c.sort()};b.extend=function(a){j(i.call(arguments,1),function(b){for(var d in b)a[d]=b[d]});return a};b.defaults=function(a){j(i.call(arguments,
+1),function(b){for(var d in b)a[d]==null&&(a[d]=b[d])});return a};b.clone=function(a){return!b.isObject(a)?a:b.isArray(a)?a.slice():b.extend({},a)};b.tap=function(a,b){b(a);return a};b.isEqual=function(a,b){return q(a,b,[])};b.isEmpty=function(a){if(b.isArray(a)||b.isString(a))return a.length===0;for(var c in a)if(b.has(a,c))return false;return true};b.isElement=function(a){return!!(a&&a.nodeType==1)};b.isArray=o||function(a){return l.call(a)=="[object Array]"};b.isObject=function(a){return a===Object(a)};
+b.isArguments=function(a){return l.call(a)=="[object Arguments]"};if(!b.isArguments(arguments))b.isArguments=function(a){return!(!a||!b.has(a,"callee"))};b.isFunction=function(a){return l.call(a)=="[object Function]"};b.isString=function(a){return l.call(a)=="[object String]"};b.isNumber=function(a){return l.call(a)=="[object Number]"};b.isNaN=function(a){return a!==a};b.isBoolean=function(a){return a===true||a===false||l.call(a)=="[object Boolean]"};b.isDate=function(a){return l.call(a)=="[object Date]"};
+b.isRegExp=function(a){return l.call(a)=="[object RegExp]"};b.isNull=function(a){return a===null};b.isUndefined=function(a){return a===void 0};b.has=function(a,b){return I.call(a,b)};b.noConflict=function(){r._=G;return this};b.identity=function(a){return a};b.times=function(a,b,d){for(var e=0;e<a;e++)b.call(d,e)};b.escape=function(a){return(""+a).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;").replace(/\//g,"&#x2F;")};b.mixin=function(a){j(b.functions(a),
+function(c){K(c,b[c]=a[c])})};var L=0;b.uniqueId=function(a){var b=L++;return a?a+b:b};b.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var t=/.^/,u=function(a){return a.replace(/\\\\/g,"\\").replace(/\\'/g,"'")};b.template=function(a,c){var d=b.templateSettings,d="var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('"+a.replace(/\\/g,"\\\\").replace(/'/g,"\\'").replace(d.escape||t,function(a,b){return"',_.escape("+
+u(b)+"),'"}).replace(d.interpolate||t,function(a,b){return"',"+u(b)+",'"}).replace(d.evaluate||t,function(a,b){return"');"+u(b).replace(/[\r\n\t]/g," ")+";__p.push('"}).replace(/\r/g,"\\r").replace(/\n/g,"\\n").replace(/\t/g,"\\t")+"');}return __p.join('');",e=new Function("obj","_",d);return c?e(c,b):function(a){return e.call(this,a,b)}};b.chain=function(a){return b(a).chain()};var m=function(a){this._wrapped=a};b.prototype=m.prototype;var v=function(a,c){return c?b(a).chain():a},K=function(a,c){m.prototype[a]=
+function(){var a=i.call(arguments);H.call(a,this._wrapped);return v(c.apply(b,a),this._chain)}};b.mixin(b);j("pop,push,reverse,shift,sort,splice,unshift".split(","),function(a){var b=k[a];m.prototype[a]=function(){var d=this._wrapped;b.apply(d,arguments);var e=d.length;(a=="shift"||a=="splice")&&e===0&&delete d[0];return v(d,this._chain)}});j(["concat","join","slice"],function(a){var b=k[a];m.prototype[a]=function(){return v(b.apply(this._wrapped,arguments),this._chain)}});m.prototype.chain=function(){this._chain=
+true;return this};m.prototype.value=function(){return this._wrapped}}).call(this);
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/up-pressed.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/up-pressed.png
new file mode 100644
index 0000000000000000000000000000000000000000..8bd587afee2fe38989383ff82010147ea56b93dd
GIT binary patch
literal 372
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`jKx9jP7LeL$-D$|*pj^6U4S$Y
z{B+)352QE?JR*yM+OLB!qm#z$3ZNi+iKnkC`z>}Z1|5lxjZvvUp)Z~;jv*GO&raT-
z#pEb(tbY1#Ey4dH;Y+=<pEBRLsjGAOCY!v|CyvUA4wrPfZ{O_DPe^{q91)qJXqI&@
zO~JiL+CN7oqU^@cvS+{3Bz9yAOB-!e{LTNlK+)ab|H>wAPPMA->(Ug=YM6W%tgKtA
zI`O=0Laf#Y-Y4f~`^K_)D_mvj{B=4?=t!I41ZLNlI~j_4kE*^nvF$)|>mH^X%(>6c
z8XimFvvIAOoRJf!>6jzIa5w(S%7lxdZ{*qJxhxpj6S#UB!oTuMX^Z^6%)IfT_v-!3
z=PEaM_iSh6_`s$!$NaEMP6gw<x#pX-zc1lmBOrZAdYY~+^N*K~{#DY`%7Ol8@O1Ta
JS?83{1OR?3hMxcc

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/up.png b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/up.png
new file mode 100644
index 0000000000000000000000000000000000000000..b94625680b4a4b9647c3a6f3f283776930696aa9
GIT binary patch
literal 363
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`jKx9jP7LeL$-D$|*pj^6U4S$Y
z{B+)352QE?JR*yM+OLB!qm#z$3ZNi+iKnkC`z>}xaYa3wv(2tRq1T=+jv*GO&raUx
z$K)u`w*Tuor>1}ySNCesuPuG-8#b%jw0sn-5fpk^!623V@1GR6+<`78?&Rhov&jx6
z*R7KttIVGJ=8yH~|HhI(uB&NIpYp$LXT}M`Z<Dv|Q9O9-{p!t<9#srg4(I=_Xg%_r
zaf7X90Rxxu?X9UB7>)D=?%dxpN#UiKM#HZsJK4DUm#Y3a5!dMF634rTxz_l%hvABb
z(=Pc<$5*Xj@eE$@$89c0_oa>Y5;`&;INvn7C-9xQbH92`*_(~*lcvS}m5Z2pGdgKc
z>;tJC%=6B^QS*>ubT+QGD)v`9z&&Y`y-xHu*7vDC$|9@xfdY)d)78&qol`;+01iQm
A<^TWy

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/websupport.js b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/websupport.js
new file mode 100644
index 0000000..71c0a13
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/_static/websupport.js
@@ -0,0 +1,808 @@
+/*
+ * websupport.js
+ * ~~~~~~~~~~~~~
+ *
+ * sphinx.websupport utilties for all documentation.
+ *
+ * :copyright: Copyright 2007-2014 by the Sphinx team, see AUTHORS.
+ * :license: BSD, see LICENSE for details.
+ *
+ */
+
+(function($) {
+  $.fn.autogrow = function() {
+    return this.each(function() {
+    var textarea = this;
+
+    $.fn.autogrow.resize(textarea);
+
+    $(textarea)
+      .focus(function() {
+        textarea.interval = setInterval(function() {
+          $.fn.autogrow.resize(textarea);
+        }, 500);
+      })
+      .blur(function() {
+        clearInterval(textarea.interval);
+      });
+    });
+  };
+
+  $.fn.autogrow.resize = function(textarea) {
+    var lineHeight = parseInt($(textarea).css('line-height'), 10);
+    var lines = textarea.value.split('\n');
+    var columns = textarea.cols;
+    var lineCount = 0;
+    $.each(lines, function() {
+      lineCount += Math.ceil(this.length / columns) || 1;
+    });
+    var height = lineHeight * (lineCount + 1);
+    $(textarea).css('height', height);
+  };
+})(jQuery);
+
+(function($) {
+  var comp, by;
+
+  function init() {
+    initEvents();
+    initComparator();
+  }
+
+  function initEvents() {
+    $('a.comment-close').live("click", function(event) {
+      event.preventDefault();
+      hide($(this).attr('id').substring(2));
+    });
+    $('a.vote').live("click", function(event) {
+      event.preventDefault();
+      handleVote($(this));
+    });
+    $('a.reply').live("click", function(event) {
+      event.preventDefault();
+      openReply($(this).attr('id').substring(2));
+    });
+    $('a.close-reply').live("click", function(event) {
+      event.preventDefault();
+      closeReply($(this).attr('id').substring(2));
+    });
+    $('a.sort-option').live("click", function(event) {
+      event.preventDefault();
+      handleReSort($(this));
+    });
+    $('a.show-proposal').live("click", function(event) {
+      event.preventDefault();
+      showProposal($(this).attr('id').substring(2));
+    });
+    $('a.hide-proposal').live("click", function(event) {
+      event.preventDefault();
+      hideProposal($(this).attr('id').substring(2));
+    });
+    $('a.show-propose-change').live("click", function(event) {
+      event.preventDefault();
+      showProposeChange($(this).attr('id').substring(2));
+    });
+    $('a.hide-propose-change').live("click", function(event) {
+      event.preventDefault();
+      hideProposeChange($(this).attr('id').substring(2));
+    });
+    $('a.accept-comment').live("click", function(event) {
+      event.preventDefault();
+      acceptComment($(this).attr('id').substring(2));
+    });
+    $('a.delete-comment').live("click", function(event) {
+      event.preventDefault();
+      deleteComment($(this).attr('id').substring(2));
+    });
+    $('a.comment-markup').live("click", function(event) {
+      event.preventDefault();
+      toggleCommentMarkupBox($(this).attr('id').substring(2));
+    });
+  }
+
+  /**
+   * Set comp, which is a comparator function used for sorting and
+   * inserting comments into the list.
+   */
+  function setComparator() {
+    // If the first three letters are "asc", sort in ascending order
+    // and remove the prefix.
+    if (by.substring(0,3) == 'asc') {
+      var i = by.substring(3);
+      comp = function(a, b) { return a[i] - b[i]; };
+    } else {
+      // Otherwise sort in descending order.
+      comp = function(a, b) { return b[by] - a[by]; };
+    }
+
+    // Reset link styles and format the selected sort option.
+    $('a.sel').attr('href', '#').removeClass('sel');
+    $('a.by' + by).removeAttr('href').addClass('sel');
+  }
+
+  /**
+   * Create a comp function. If the user has preferences stored in
+   * the sortBy cookie, use those, otherwise use the default.
+   */
+  function initComparator() {
+    by = 'rating'; // Default to sort by rating.
+    // If the sortBy cookie is set, use that instead.
+    if (document.cookie.length > 0) {
+      var start = document.cookie.indexOf('sortBy=');
+      if (start != -1) {
+        start = start + 7;
+        var end = document.cookie.indexOf(";", start);
+        if (end == -1) {
+          end = document.cookie.length;
+          by = unescape(document.cookie.substring(start, end));
+        }
+      }
+    }
+    setComparator();
+  }
+
+  /**
+   * Show a comment div.
+   */
+  function show(id) {
+    $('#ao' + id).hide();
+    $('#ah' + id).show();
+    var context = $.extend({id: id}, opts);
+    var popup = $(renderTemplate(popupTemplate, context)).hide();
+    popup.find('textarea[name="proposal"]').hide();
+    popup.find('a.by' + by).addClass('sel');
+    var form = popup.find('#cf' + id);
+    form.submit(function(event) {
+      event.preventDefault();
+      addComment(form);
+    });
+    $('#s' + id).after(popup);
+    popup.slideDown('fast', function() {
+      getComments(id);
+    });
+  }
+
+  /**
+   * Hide a comment div.
+   */
+  function hide(id) {
+    $('#ah' + id).hide();
+    $('#ao' + id).show();
+    var div = $('#sc' + id);
+    div.slideUp('fast', function() {
+      div.remove();
+    });
+  }
+
+  /**
+   * Perform an ajax request to get comments for a node
+   * and insert the comments into the comments tree.
+   */
+  function getComments(id) {
+    $.ajax({
+     type: 'GET',
+     url: opts.getCommentsURL,
+     data: {node: id},
+     success: function(data, textStatus, request) {
+       var ul = $('#cl' + id);
+       var speed = 100;
+       $('#cf' + id)
+         .find('textarea[name="proposal"]')
+         .data('source', data.source);
+
+       if (data.comments.length === 0) {
+         ul.html('<li>No comments yet.</li>');
+         ul.data('empty', true);
+       } else {
+         // If there are comments, sort them and put them in the list.
+         var comments = sortComments(data.comments);
+         speed = data.comments.length * 100;
+         appendComments(comments, ul);
+         ul.data('empty', false);
+       }
+       $('#cn' + id).slideUp(speed + 200);
+       ul.slideDown(speed);
+     },
+     error: function(request, textStatus, error) {
+       showError('Oops, there was a problem retrieving the comments.');
+     },
+     dataType: 'json'
+    });
+  }
+
+  /**
+   * Add a comment via ajax and insert the comment into the comment tree.
+   */
+  function addComment(form) {
+    var node_id = form.find('input[name="node"]').val();
+    var parent_id = form.find('input[name="parent"]').val();
+    var text = form.find('textarea[name="comment"]').val();
+    var proposal = form.find('textarea[name="proposal"]').val();
+
+    if (text == '') {
+      showError('Please enter a comment.');
+      return;
+    }
+
+    // Disable the form that is being submitted.
+    form.find('textarea,input').attr('disabled', 'disabled');
+
+    // Send the comment to the server.
+    $.ajax({
+      type: "POST",
+      url: opts.addCommentURL,
+      dataType: 'json',
+      data: {
+        node: node_id,
+        parent: parent_id,
+        text: text,
+        proposal: proposal
+      },
+      success: function(data, textStatus, error) {
+        // Reset the form.
+        if (node_id) {
+          hideProposeChange(node_id);
+        }
+        form.find('textarea')
+          .val('')
+          .add(form.find('input'))
+          .removeAttr('disabled');
+	var ul = $('#cl' + (node_id || parent_id));
+        if (ul.data('empty')) {
+          $(ul).empty();
+          ul.data('empty', false);
+        }
+        insertComment(data.comment);
+        var ao = $('#ao' + node_id);
+        ao.find('img').attr({'src': opts.commentBrightImage});
+        if (node_id) {
+          // if this was a "root" comment, remove the commenting box
+          // (the user can get it back by reopening the comment popup)
+          $('#ca' + node_id).slideUp();
+        }
+      },
+      error: function(request, textStatus, error) {
+        form.find('textarea,input').removeAttr('disabled');
+        showError('Oops, there was a problem adding the comment.');
+      }
+    });
+  }
+
+  /**
+   * Recursively append comments to the main comment list and children
+   * lists, creating the comment tree.
+   */
+  function appendComments(comments, ul) {
+    $.each(comments, function() {
+      var div = createCommentDiv(this);
+      ul.append($(document.createElement('li')).html(div));
+      appendComments(this.children, div.find('ul.comment-children'));
+      // To avoid stagnating data, don't store the comments children in data.
+      this.children = null;
+      div.data('comment', this);
+    });
+  }
+
+  /**
+   * After adding a new comment, it must be inserted in the correct
+   * location in the comment tree.
+   */
+  function insertComment(comment) {
+    var div = createCommentDiv(comment);
+
+    // To avoid stagnating data, don't store the comments children in data.
+    comment.children = null;
+    div.data('comment', comment);
+
+    var ul = $('#cl' + (comment.node || comment.parent));
+    var siblings = getChildren(ul);
+
+    var li = $(document.createElement('li'));
+    li.hide();
+
+    // Determine where in the parents children list to insert this comment.
+    for(i=0; i < siblings.length; i++) {
+      if (comp(comment, siblings[i]) <= 0) {
+        $('#cd' + siblings[i].id)
+          .parent()
+          .before(li.html(div));
+        li.slideDown('fast');
+        return;
+      }
+    }
+
+    // If we get here, this comment rates lower than all the others,
+    // or it is the only comment in the list.
+    ul.append(li.html(div));
+    li.slideDown('fast');
+  }
+
+  function acceptComment(id) {
+    $.ajax({
+      type: 'POST',
+      url: opts.acceptCommentURL,
+      data: {id: id},
+      success: function(data, textStatus, request) {
+        $('#cm' + id).fadeOut('fast');
+        $('#cd' + id).removeClass('moderate');
+      },
+      error: function(request, textStatus, error) {
+        showError('Oops, there was a problem accepting the comment.');
+      }
+    });
+  }
+
+  function deleteComment(id) {
+    $.ajax({
+      type: 'POST',
+      url: opts.deleteCommentURL,
+      data: {id: id},
+      success: function(data, textStatus, request) {
+        var div = $('#cd' + id);
+        if (data == 'delete') {
+          // Moderator mode: remove the comment and all children immediately
+          div.slideUp('fast', function() {
+            div.remove();
+          });
+          return;
+        }
+        // User mode: only mark the comment as deleted
+        div
+          .find('span.user-id:first')
+          .text('[deleted]').end()
+          .find('div.comment-text:first')
+          .text('[deleted]').end()
+          .find('#cm' + id + ', #dc' + id + ', #ac' + id + ', #rc' + id +
+                ', #sp' + id + ', #hp' + id + ', #cr' + id + ', #rl' + id)
+          .remove();
+        var comment = div.data('comment');
+        comment.username = '[deleted]';
+        comment.text = '[deleted]';
+        div.data('comment', comment);
+      },
+      error: function(request, textStatus, error) {
+        showError('Oops, there was a problem deleting the comment.');
+      }
+    });
+  }
+
+  function showProposal(id) {
+    $('#sp' + id).hide();
+    $('#hp' + id).show();
+    $('#pr' + id).slideDown('fast');
+  }
+
+  function hideProposal(id) {
+    $('#hp' + id).hide();
+    $('#sp' + id).show();
+    $('#pr' + id).slideUp('fast');
+  }
+
+  function showProposeChange(id) {
+    $('#pc' + id).hide();
+    $('#hc' + id).show();
+    var textarea = $('#pt' + id);
+    textarea.val(textarea.data('source'));
+    $.fn.autogrow.resize(textarea[0]);
+    textarea.slideDown('fast');
+  }
+
+  function hideProposeChange(id) {
+    $('#hc' + id).hide();
+    $('#pc' + id).show();
+    var textarea = $('#pt' + id);
+    textarea.val('').removeAttr('disabled');
+    textarea.slideUp('fast');
+  }
+
+  function toggleCommentMarkupBox(id) {
+    $('#mb' + id).toggle();
+  }
+
+  /** Handle when the user clicks on a sort by link. */
+  function handleReSort(link) {
+    var classes = link.attr('class').split(/\s+/);
+    for (var i=0; i<classes.length; i++) {
+      if (classes[i] != 'sort-option') {
+	by = classes[i].substring(2);
+      }
+    }
+    setComparator();
+    // Save/update the sortBy cookie.
+    var expiration = new Date();
+    expiration.setDate(expiration.getDate() + 365);
+    document.cookie= 'sortBy=' + escape(by) +
+                     ';expires=' + expiration.toUTCString();
+    $('ul.comment-ul').each(function(index, ul) {
+      var comments = getChildren($(ul), true);
+      comments = sortComments(comments);
+      appendComments(comments, $(ul).empty());
+    });
+  }
+
+  /**
+   * Function to process a vote when a user clicks an arrow.
+   */
+  function handleVote(link) {
+    if (!opts.voting) {
+      showError("You'll need to login to vote.");
+      return;
+    }
+
+    var id = link.attr('id');
+    if (!id) {
+      // Didn't click on one of the voting arrows.
+      return;
+    }
+    // If it is an unvote, the new vote value is 0,
+    // Otherwise it's 1 for an upvote, or -1 for a downvote.
+    var value = 0;
+    if (id.charAt(1) != 'u') {
+      value = id.charAt(0) == 'u' ? 1 : -1;
+    }
+    // The data to be sent to the server.
+    var d = {
+      comment_id: id.substring(2),
+      value: value
+    };
+
+    // Swap the vote and unvote links.
+    link.hide();
+    $('#' + id.charAt(0) + (id.charAt(1) == 'u' ? 'v' : 'u') + d.comment_id)
+      .show();
+
+    // The div the comment is displayed in.
+    var div = $('div#cd' + d.comment_id);
+    var data = div.data('comment');
+
+    // If this is not an unvote, and the other vote arrow has
+    // already been pressed, unpress it.
+    if ((d.value !== 0) && (data.vote === d.value * -1)) {
+      $('#' + (d.value == 1 ? 'd' : 'u') + 'u' + d.comment_id).hide();
+      $('#' + (d.value == 1 ? 'd' : 'u') + 'v' + d.comment_id).show();
+    }
+
+    // Update the comments rating in the local data.
+    data.rating += (data.vote === 0) ? d.value : (d.value - data.vote);
+    data.vote = d.value;
+    div.data('comment', data);
+
+    // Change the rating text.
+    div.find('.rating:first')
+      .text(data.rating + ' point' + (data.rating == 1 ? '' : 's'));
+
+    // Send the vote information to the server.
+    $.ajax({
+      type: "POST",
+      url: opts.processVoteURL,
+      data: d,
+      error: function(request, textStatus, error) {
+        showError('Oops, there was a problem casting that vote.');
+      }
+    });
+  }
+
+  /**
+   * Open a reply form used to reply to an existing comment.
+   */
+  function openReply(id) {
+    // Swap out the reply link for the hide link
+    $('#rl' + id).hide();
+    $('#cr' + id).show();
+
+    // Add the reply li to the children ul.
+    var div = $(renderTemplate(replyTemplate, {id: id})).hide();
+    $('#cl' + id)
+      .prepend(div)
+      // Setup the submit handler for the reply form.
+      .find('#rf' + id)
+      .submit(function(event) {
+        event.preventDefault();
+        addComment($('#rf' + id));
+        closeReply(id);
+      })
+      .find('input[type=button]')
+      .click(function() {
+        closeReply(id);
+      });
+    div.slideDown('fast', function() {
+      $('#rf' + id).find('textarea').focus();
+    });
+  }
+
+  /**
+   * Close the reply form opened with openReply.
+   */
+  function closeReply(id) {
+    // Remove the reply div from the DOM.
+    $('#rd' + id).slideUp('fast', function() {
+      $(this).remove();
+    });
+
+    // Swap out the hide link for the reply link
+    $('#cr' + id).hide();
+    $('#rl' + id).show();
+  }
+
+  /**
+   * Recursively sort a tree of comments using the comp comparator.
+   */
+  function sortComments(comments) {
+    comments.sort(comp);
+    $.each(comments, function() {
+      this.children = sortComments(this.children);
+    });
+    return comments;
+  }
+
+  /**
+   * Get the children comments from a ul. If recursive is true,
+   * recursively include childrens' children.
+   */
+  function getChildren(ul, recursive) {
+    var children = [];
+    ul.children().children("[id^='cd']")
+      .each(function() {
+        var comment = $(this).data('comment');
+        if (recursive)
+          comment.children = getChildren($(this).find('#cl' + comment.id), true);
+        children.push(comment);
+      });
+    return children;
+  }
+
+  /** Create a div to display a comment in. */
+  function createCommentDiv(comment) {
+    if (!comment.displayed && !opts.moderator) {
+      return $('<div class="moderate">Thank you!  Your comment will show up '
+               + 'once it is has been approved by a moderator.</div>');
+    }
+    // Prettify the comment rating.
+    comment.pretty_rating = comment.rating + ' point' +
+      (comment.rating == 1 ? '' : 's');
+    // Make a class (for displaying not yet moderated comments differently)
+    comment.css_class = comment.displayed ? '' : ' moderate';
+    // Create a div for this comment.
+    var context = $.extend({}, opts, comment);
+    var div = $(renderTemplate(commentTemplate, context));
+
+    // If the user has voted on this comment, highlight the correct arrow.
+    if (comment.vote) {
+      var direction = (comment.vote == 1) ? 'u' : 'd';
+      div.find('#' + direction + 'v' + comment.id).hide();
+      div.find('#' + direction + 'u' + comment.id).show();
+    }
+
+    if (opts.moderator || comment.text != '[deleted]') {
+      div.find('a.reply').show();
+      if (comment.proposal_diff)
+        div.find('#sp' + comment.id).show();
+      if (opts.moderator && !comment.displayed)
+        div.find('#cm' + comment.id).show();
+      if (opts.moderator || (opts.username == comment.username))
+        div.find('#dc' + comment.id).show();
+    }
+    return div;
+  }
+
+  /**
+   * A simple template renderer. Placeholders such as <%id%> are replaced
+   * by context['id'] with items being escaped. Placeholders such as <#id#>
+   * are not escaped.
+   */
+  function renderTemplate(template, context) {
+    var esc = $(document.createElement('div'));
+
+    function handle(ph, escape) {
+      var cur = context;
+      $.each(ph.split('.'), function() {
+        cur = cur[this];
+      });
+      return escape ? esc.text(cur || "").html() : cur;
+    }
+
+    return template.replace(/<([%#])([\w\.]*)\1>/g, function() {
+      return handle(arguments[2], arguments[1] == '%' ? true : false);
+    });
+  }
+
+  /** Flash an error message briefly. */
+  function showError(message) {
+    $(document.createElement('div')).attr({'class': 'popup-error'})
+      .append($(document.createElement('div'))
+               .attr({'class': 'error-message'}).text(message))
+      .appendTo('body')
+      .fadeIn("slow")
+      .delay(2000)
+      .fadeOut("slow");
+  }
+
+  /** Add a link the user uses to open the comments popup. */
+  $.fn.comment = function() {
+    return this.each(function() {
+      var id = $(this).attr('id').substring(1);
+      var count = COMMENT_METADATA[id];
+      var title = count + ' comment' + (count == 1 ? '' : 's');
+      var image = count > 0 ? opts.commentBrightImage : opts.commentImage;
+      var addcls = count == 0 ? ' nocomment' : '';
+      $(this)
+        .append(
+          $(document.createElement('a')).attr({
+            href: '#',
+            'class': 'sphinx-comment-open' + addcls,
+            id: 'ao' + id
+          })
+            .append($(document.createElement('img')).attr({
+              src: image,
+              alt: 'comment',
+              title: title
+            }))
+            .click(function(event) {
+              event.preventDefault();
+              show($(this).attr('id').substring(2));
+            })
+        )
+        .append(
+          $(document.createElement('a')).attr({
+            href: '#',
+            'class': 'sphinx-comment-close hidden',
+            id: 'ah' + id
+          })
+            .append($(document.createElement('img')).attr({
+              src: opts.closeCommentImage,
+              alt: 'close',
+              title: 'close'
+            }))
+            .click(function(event) {
+              event.preventDefault();
+              hide($(this).attr('id').substring(2));
+            })
+        );
+    });
+  };
+
+  var opts = {
+    processVoteURL: '/_process_vote',
+    addCommentURL: '/_add_comment',
+    getCommentsURL: '/_get_comments',
+    acceptCommentURL: '/_accept_comment',
+    deleteCommentURL: '/_delete_comment',
+    commentImage: '/static/_static/comment.png',
+    closeCommentImage: '/static/_static/comment-close.png',
+    loadingImage: '/static/_static/ajax-loader.gif',
+    commentBrightImage: '/static/_static/comment-bright.png',
+    upArrow: '/static/_static/up.png',
+    downArrow: '/static/_static/down.png',
+    upArrowPressed: '/static/_static/up-pressed.png',
+    downArrowPressed: '/static/_static/down-pressed.png',
+    voting: false,
+    moderator: false
+  };
+
+  if (typeof COMMENT_OPTIONS != "undefined") {
+    opts = jQuery.extend(opts, COMMENT_OPTIONS);
+  }
+
+  var popupTemplate = '\
+    <div class="sphinx-comments" id="sc<%id%>">\
+      <p class="sort-options">\
+        Sort by:\
+        <a href="#" class="sort-option byrating">best rated</a>\
+        <a href="#" class="sort-option byascage">newest</a>\
+        <a href="#" class="sort-option byage">oldest</a>\
+      </p>\
+      <div class="comment-header">Comments</div>\
+      <div class="comment-loading" id="cn<%id%>">\
+        loading comments... <img src="<%loadingImage%>" alt="" /></div>\
+      <ul id="cl<%id%>" class="comment-ul"></ul>\
+      <div id="ca<%id%>">\
+      <p class="add-a-comment">Add a comment\
+        (<a href="#" class="comment-markup" id="ab<%id%>">markup</a>):</p>\
+      <div class="comment-markup-box" id="mb<%id%>">\
+        reStructured text markup: <i>*emph*</i>, <b>**strong**</b>, \
+        <tt>``code``</tt>, \
+        code blocks: <tt>::</tt> and an indented block after blank line</div>\
+      <form method="post" id="cf<%id%>" class="comment-form" action="">\
+        <textarea name="comment" cols="80"></textarea>\
+        <p class="propose-button">\
+          <a href="#" id="pc<%id%>" class="show-propose-change">\
+            Propose a change &#9657;\
+          </a>\
+          <a href="#" id="hc<%id%>" class="hide-propose-change">\
+            Propose a change &#9663;\
+          </a>\
+        </p>\
+        <textarea name="proposal" id="pt<%id%>" cols="80"\
+                  spellcheck="false"></textarea>\
+        <input type="submit" value="Add comment" />\
+        <input type="hidden" name="node" value="<%id%>" />\
+        <input type="hidden" name="parent" value="" />\
+      </form>\
+      </div>\
+    </div>';
+
+  var commentTemplate = '\
+    <div id="cd<%id%>" class="sphinx-comment<%css_class%>">\
+      <div class="vote">\
+        <div class="arrow">\
+          <a href="#" id="uv<%id%>" class="vote" title="vote up">\
+            <img src="<%upArrow%>" />\
+          </a>\
+          <a href="#" id="uu<%id%>" class="un vote" title="vote up">\
+            <img src="<%upArrowPressed%>" />\
+          </a>\
+        </div>\
+        <div class="arrow">\
+          <a href="#" id="dv<%id%>" class="vote" title="vote down">\
+            <img src="<%downArrow%>" id="da<%id%>" />\
+          </a>\
+          <a href="#" id="du<%id%>" class="un vote" title="vote down">\
+            <img src="<%downArrowPressed%>" />\
+          </a>\
+        </div>\
+      </div>\
+      <div class="comment-content">\
+        <p class="tagline comment">\
+          <span class="user-id"><%username%></span>\
+          <span class="rating"><%pretty_rating%></span>\
+          <span class="delta"><%time.delta%></span>\
+        </p>\
+        <div class="comment-text comment"><#text#></div>\
+        <p class="comment-opts comment">\
+          <a href="#" class="reply hidden" id="rl<%id%>">reply &#9657;</a>\
+          <a href="#" class="close-reply" id="cr<%id%>">reply &#9663;</a>\
+          <a href="#" id="sp<%id%>" class="show-proposal">proposal &#9657;</a>\
+          <a href="#" id="hp<%id%>" class="hide-proposal">proposal &#9663;</a>\
+          <a href="#" id="dc<%id%>" class="delete-comment hidden">delete</a>\
+          <span id="cm<%id%>" class="moderation hidden">\
+            <a href="#" id="ac<%id%>" class="accept-comment">accept</a>\
+          </span>\
+        </p>\
+        <pre class="proposal" id="pr<%id%>">\
+<#proposal_diff#>\
+        </pre>\
+          <ul class="comment-children" id="cl<%id%>"></ul>\
+        </div>\
+        <div class="clearleft"></div>\
+      </div>\
+    </div>';
+
+  var replyTemplate = '\
+    <li>\
+      <div class="reply-div" id="rd<%id%>">\
+        <form id="rf<%id%>">\
+          <textarea name="comment" cols="80"></textarea>\
+          <input type="submit" value="Add reply" />\
+          <input type="button" value="Cancel" />\
+          <input type="hidden" name="parent" value="<%id%>" />\
+          <input type="hidden" name="node" value="" />\
+        </form>\
+      </div>\
+    </li>';
+
+  $(document).ready(function() {
+    init();
+  });
+})(jQuery);
+
+$(document).ready(function() {
+  // add comment anchors for all paragraphs that are commentable
+  $('.sphinx-has-comment').comment();
+
+  // highlight search words in search results
+  $("div.context").each(function() {
+    var params = $.getQueryParameters();
+    var terms = (params.q) ? params.q[0].split(/\s+/) : [];
+    var result = $(this);
+    $.each(terms, function() {
+      result.highlightText(this.toLowerCase(), 'highlighted');
+    });
+  });
+
+  // directly open comment window if requested
+  var anchor = document.location.hash;
+  if (anchor.substring(0, 9) == '#comment-') {
+    $('#ao' + anchor.substring(9)).click();
+    document.location.hash = '#s' + anchor.substring(9);
+  }
+});
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/admin_extensions.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/admin_extensions.html
new file mode 100644
index 0000000..4a366e3
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/admin_extensions.html
@@ -0,0 +1,169 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Current Admin Extensions &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="shell_plus" href="shell_plus.html" />
+    <link rel="prev" title="Ideas for New Command Extensions" href="command_extension_ideas.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="shell_plus.html" title="shell_plus"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="command_extension_ideas.html" title="Ideas for New Command Extensions"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="current-admin-extensions">
+<h1>Current Admin Extensions<a class="headerlink" href="#current-admin-extensions" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Current Field Extensions</td>
+</tr>
+</tbody>
+</table>
+<ul class="simple">
+<li><em>ForeignKeyAutocompleteAdmin</em> - ForeignKeyAutocompleteAdmin will enable the
+admin app to show ForeignKey fields with an search input field. The search
+field is rendered by the ForeignKeySearchInput form widget and uses jQuery
+to do configureable autocompletion.</li>
+</ul>
+<div class="section" id="example-usage">
+<h2>Example Usage<a class="headerlink" href="#example-usage" title="Permalink to this headline">¶</a></h2>
+<p>To enable the Admin Autocomplete you can follow this code example
+in your admin.py file:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
+<span class="kn">from</span> <span class="nn">foo.models</span> <span class="kn">import</span> <span class="n">Permission</span>
+<span class="kn">from</span> <span class="nn">django_extensions.admin</span> <span class="kn">import</span> <span class="n">ForeignKeyAutocompleteAdmin</span>
+
+
+<span class="k">class</span> <span class="nc">PermissionAdmin</span><span class="p">(</span><span class="n">ForeignKeyAutocompleteAdmin</span><span class="p">):</span>
+    <span class="c"># User is your FK attribute in your model</span>
+    <span class="c"># first_name and email are attributes to search for in the FK model</span>
+    <span class="n">related_search_fields</span> <span class="o">=</span> <span class="p">{</span>
+       <span class="s">&#39;user&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;first_name&#39;</span><span class="p">,</span> <span class="s">&#39;email&#39;</span><span class="p">),</span>
+    <span class="p">}</span>
+
+    <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;user&#39;</span><span class="p">,</span> <span class="s">&#39;avatar&#39;</span><span class="p">,</span> <span class="s">&#39;is_active&#39;</span><span class="p">)</span>
+
+    <span class="o">...</span>
+
+<span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Permission</span><span class="p">,</span> <span class="n">PermissionAdmin</span><span class="p">)</span>
+</pre></div>
+</div>
+<p>If you are using django-reversion you should follow this code example:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
+<span class="kn">from</span> <span class="nn">foo.models</span> <span class="kn">import</span> <span class="n">MyVersionModel</span>
+<span class="kn">from</span> <span class="nn">reversion.admin</span> <span class="kn">import</span> <span class="n">VersionAdmin</span>
+<span class="kn">from</span> <span class="nn">django_extensions.admin</span> <span class="kn">import</span> <span class="n">ForeignKeyAutocompleteAdmin</span>
+
+
+<span class="k">class</span> <span class="nc">MyVersionModelAdmin</span><span class="p">(</span><span class="n">VersionAdmin</span><span class="p">,</span> <span class="n">ForeignKeyAutocompleteAdmin</span><span class="p">):</span>
+    <span class="o">...</span>
+
+<span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">MyVersionModel</span><span class="p">,</span> <span class="n">MyVersionModelAdmin</span><span class="p">)</span>
+</pre></div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">Current Admin Extensions</a><ul>
+<li><a class="reference internal" href="#example-usage">Example Usage</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="command_extension_ideas.html"
+                        title="previous chapter">Ideas for New Command Extensions</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="shell_plus.html"
+                        title="next chapter">shell_plus</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/admin_extensions.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="shell_plus.html" title="shell_plus"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="command_extension_ideas.html" title="Ideas for New Command Extensions"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/command_extension_ideas.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/command_extension_ideas.html
new file mode 100644
index 0000000..a93c627
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/command_extension_ideas.html
@@ -0,0 +1,122 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Ideas for New Command Extensions &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="Current Admin Extensions" href="admin_extensions.html" />
+    <link rel="prev" title="Current Command Extensions" href="command_extensions.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="admin_extensions.html" title="Current Admin Extensions"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="command_extensions.html" title="Current Command Extensions"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="ideas-for-new-command-extensions">
+<h1>Ideas for New Command Extensions<a class="headerlink" href="#ideas-for-new-command-extensions" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Here are some ideas for some future command extensions.</td>
+</tr>
+</tbody>
+</table>
+<ul class="simple">
+<li>create form/manager for App</li>
+<li>CSS and JS concatenation and minification scripts</li>
+</ul>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="command_extensions.html"
+                        title="previous chapter">Current Command Extensions</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="admin_extensions.html"
+                        title="next chapter">Current Admin Extensions</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/command_extension_ideas.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="admin_extensions.html" title="Current Admin Extensions"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="command_extensions.html" title="Current Command Extensions"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/command_extensions.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/command_extensions.html
new file mode 100644
index 0000000..91b53d7
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/command_extensions.html
@@ -0,0 +1,181 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Current Command Extensions &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="Ideas for New Command Extensions" href="command_extension_ideas.html" />
+    <link rel="prev" title="Installation instructions" href="installation_instructions.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="command_extension_ideas.html" title="Ideas for New Command Extensions"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="installation_instructions.html" title="Installation instructions"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="current-command-extensions">
+<h1>Current Command Extensions<a class="headerlink" href="#current-command-extensions" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Current Command Extensions</td>
+</tr>
+</tbody>
+</table>
+<ul class="simple">
+<li><a class="reference internal" href="shell_plus.html"><em>shell_plus</em></a> - An enhanced version of the Django shell.  It will autoload
+all your models making it easy to work with the ORM right away.</li>
+<li><em>admin_generator</em> - Generate automatic Django Admin classes by providing an app name. Outputs
+source code at STDOUT.</li>
+<li><a class="reference external" href="create_app.html">create_app</a> - Creates an application directory structure for the specified
+app name.  This command allows you to specify the &#8211;template option where you
+can indicate a template directory structure to use as your default.</li>
+<li><em>create_command</em> - Creates a command extension directory structure within the
+specified application.  This makes it easy to get started with adding a
+command extension to your application.</li>
+<li><em>create_template_tags</em> - Creates a template tag directory structure within the
+specified application.</li>
+<li><em>create_jobs</em> - Creates a Django jobs command directory structure for the
+given app name in the current directory.  This is part of the impressive jobs
+system.</li>
+<li><em>create_superuser</em> - Makes it easy to create a superuser for the
+django.contrib.auth.</li>
+<li><em>clear_cache</em> - Clear django cache, useful when testing or deploying.</li>
+<li><em>describe_form</em> - Used to display a form definition for a model. Copy and
+paste the contents into your forms.py and you&#8217;re ready to go.</li>
+<li><a class="reference internal" href="dumpscript.html"><em>dumpscript</em></a> - Generates a Python script that will
+repopulate the database using objects. The advantage of this approach is that
+it is easy to understand, and more flexible than directly populating the
+database, or using XML.</li>
+<li><a class="reference external" href="export_emails.html">export_emails</a> - export the email addresses for your
+users in one of many formats.  Currently supports Address, Google, Outlook,
+LinkedIn, and VCard formats.</li>
+<li><em>generate_secret_key</em> - Creates a new secret key that you can put in your
+settings.py module.</li>
+<li><a class="reference external" href="graph_models.html">graph_models</a> - Creates a <a class="reference external" href="http://www.graphviz.org/">GraphViz</a> dot file.  You need
+to send this output to a file yourself.  Great for graphing your models. Pass
+multiple application names to combine all the models into a single dot file.</li>
+<li><em>mail_debug</em> - Starts a mail server which echos out the contents of the email
+instead of sending it.</li>
+<li><em>passwd</em> - Makes it easy to reset a user&#8217;s password.</li>
+<li><a class="reference external" href="print_settings.html">print_settings</a> - Similar to <tt class="docutils literal"><span class="pre">diffsettings</span></tt> but shows <em>selected</em>
+active Django settings or <em>all</em> if no args passed.</li>
+<li><em>print_user_for_session</em> - Print the user information for the provided
+session key. this is very helpful when trying to track down the person who
+experienced a site crash.</li>
+<li><em>reset_db</em> - Resets a database (currently sqlite3, mysql, postgres). Uses &#8220;DROP DATABASE&#8221; and &#8220;CREATE DATABASE&#8221;.</li>
+<li><em>runjob</em> - Run a single maintenance job.  Part of the jobs system.</li>
+<li><em>runjobs</em> - Runs scheduled maintenance jobs. Specify hourly, daily, weekly,
+monthly.  Part of the jobs system.</li>
+<li><a class="reference internal" href="runprofileserver.html"><em>runprofileserver</em></a> - Starts <em>runserver</em> with hotshot/profiling tools enabled.
+I haven&#8217;t had a chance to check this one out, but it looks really cool.</li>
+<li><a class="reference external" href="runscript.html">runscript</a> - Runs a script in the django context.</li>
+<li><a class="reference external" href="runserver_plus.html">runserver_plus</a> - The standard runserver stuff but with
+the Werkzeug debugger baked in. Requires <a class="reference external" href="http://werkzeug.pocoo.org/">Werkzeug</a>. This one kicks ass.</li>
+<li><em>set_fake_passwords</em> -  Sets all user passwords to a common value (<em>password</em> by default). <em>DEBUG only</em>.</li>
+<li><em>show_urls</em> - Displays the url routes that are defined in your project. Very
+crude at this point.</li>
+<li><a class="reference internal" href="sqldiff.html"><em>sqldiff</em></a> - Prints the (approximated) difference between an app&#8217;s models and
+what is in the database.  This is very nice, but also very experimental at
+the moment.  It can not catch everything but it&#8217;s a great sanity check.</li>
+<li><a class="reference internal" href="sqlcreate.html"><em>sqlcreate</em></a> - Generates the SQL to create your database for you, as specified
+in settings.py.</li>
+<li><a class="reference external" href="sync_s3.html">sync_s3</a> - Copies files found in settings.MEDIA_ROOT to S3.
+Optionally can also gzip CSS and Javascript files and set the
+Content-Encoding header, and also set a far future expires header for browser
+caching.</li>
+</ul>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="installation_instructions.html"
+                        title="previous chapter">Installation instructions</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="command_extension_ideas.html"
+                        title="next chapter">Ideas for New Command Extensions</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/command_extensions.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="command_extension_ideas.html" title="Ideas for New Command Extensions"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="installation_instructions.html" title="Installation instructions"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/create_app.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/create_app.html
new file mode 100644
index 0000000..d884597
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/create_app.html
@@ -0,0 +1,152 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>create_app &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="dumpscript" href="dumpscript.html" />
+    <link rel="prev" title="shell_plus" href="shell_plus.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="dumpscript.html" title="dumpscript"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="shell_plus.html" title="shell_plus"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="create-app">
+<h1>create_app<a class="headerlink" href="#create-app" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Creates an application directory structure for the specified application name.</td>
+</tr>
+</tbody>
+</table>
+<p>This command allows you to specify the &#8211;template option where you can indicate
+a template directory structure to use as your default.</p>
+<p>The &#8211;diagram option generates the models.py and admin.py from a .dia file.</p>
+<div class="section" id="example-usage">
+<h2>Example Usage<a class="headerlink" href="#example-usage" title="Permalink to this headline">¶</a></h2>
+<p>All examples assume your current directory is the project directory and
+settings.py is under it.</p>
+<div class="highlight-python"><div class="highlight"><pre># Get command help
+./manage.py create_app --help
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Generate models.py and admin.py from [APP_NAME].dia file. This file should
+# be placed in the settings.py directory.
+./manage.py create_app -d APP_NAME
+</pre></div>
+</div>
+</div>
+<div class="section" id="example-generated-from-sample-dia">
+<h2>Example generated from sample.dia<a class="headerlink" href="#example-generated-from-sample-dia" title="Permalink to this headline">¶</a></h2>
+<div class="highlight-python"><div class="highlight"><pre>./manage.py create_app --diagram=sample.dia webdata
+</pre></div>
+</div>
+<p>-d switch or &#8211;diagram option use <a class="reference external" href="https://svn.devnull.li/main/pythonware/dia2django/trunk/doc/">dia2django</a> to generate models.py and is
+better documented in <a class="reference external" href="http://code.djangoproject.com/wiki/Dia2Django">django wiki</a>.</p>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">create_app</a><ul>
+<li><a class="reference internal" href="#example-usage">Example Usage</a></li>
+<li><a class="reference internal" href="#example-generated-from-sample-dia">Example generated from sample.dia</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="shell_plus.html"
+                        title="previous chapter">shell_plus</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="dumpscript.html"
+                        title="next chapter">dumpscript</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/create_app.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="dumpscript.html" title="dumpscript"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="shell_plus.html" title="shell_plus"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/dumpscript.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/dumpscript.html
new file mode 100644
index 0000000..12045b8
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/dumpscript.html
@@ -0,0 +1,219 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>dumpscript &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="RunScript" href="runscript.html" />
+    <link rel="prev" title="create_app" href="create_app.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="runscript.html" title="RunScript"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="create_app.html" title="create_app"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="dumpscript">
+<h1>dumpscript<a class="headerlink" href="#dumpscript" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Generates a standalone Python script that will repopulate the database using objects.</td>
+</tr>
+</tbody>
+</table>
+<p>The <cite>dumpscript</cite> command generates a standalone Python script that will
+repopulate the database using objects. The advantage of this approach is that
+it is easy to understand, and more flexible than directly populating the
+database, or using XML.</p>
+<div class="section" id="why">
+<h2>Why?<a class="headerlink" href="#why" title="Permalink to this headline">¶</a></h2>
+<p>There are a few benefits to this:</p>
+<ul class="simple">
+<li>less drama with model evolution: foreign keys handled naturally without IDs,
+new and removed columns are ignored</li>
+<li>edit script to create 1,000s of generated entries using for loops, generated
+names, python modules etc.</li>
+</ul>
+<p>For example, an edited script can populate the database with test data:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">2000</span><span class="p">):</span>
+    <span class="n">poll</span> <span class="o">=</span> <span class="n">Poll</span><span class="p">()</span>
+    <span class="n">poll</span><span class="o">.</span><span class="n">question</span> <span class="o">=</span> <span class="s">&quot;Question #</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">i</span>
+    <span class="n">poll</span><span class="o">.</span><span class="n">pub_date</span> <span class="o">=</span> <span class="n">date</span><span class="p">(</span><span class="mi">2001</span><span class="p">,</span><span class="mo">01</span><span class="p">,</span><span class="mo">01</span><span class="p">)</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="n">i</span><span class="p">)</span>
+    <span class="n">poll</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
+</pre></div>
+</div>
+<p>Real databases will probably be bigger and more complicated so it is useful
+to enter some values using the admin interface and then edit the generated
+scripts.</p>
+</div>
+<div class="section" id="features">
+<h2>Features<a class="headerlink" href="#features" title="Permalink to this headline">¶</a></h2>
+<ul class="simple">
+<li><em>ForeignKey</em> and <em>ManyToManyFields</em> (using python variables, not object IDs)</li>
+<li>Self-referencing <em>ForeignKey</em> (and M2M) fields</li>
+<li>Sub-classed models</li>
+<li><em>ContentType</em> fields and generic relationships (but see issue 43)</li>
+<li>Recursive references</li>
+<li><em>AutoFields</em> are excluded</li>
+<li>Parent models are only included when no other child model links to it</li>
+<li>Individual models can be referenced</li>
+</ul>
+</div>
+<div class="section" id="what-it-can-t-do-yet">
+<h2>What it can&#8217;t do (yet!)<a class="headerlink" href="#what-it-can-t-do-yet" title="Permalink to this headline">¶</a></h2>
+<ul class="simple">
+<li>Ideal handling of generic relationships (ie no <em>AutoField</em> references):
+issue 43</li>
+<li>Intermediate join tables: issue 48</li>
+<li>GIS fields: issue 72</li>
+</ul>
+</div>
+<div class="section" id="how">
+<h2>How?<a class="headerlink" href="#how" title="Permalink to this headline">¶</a></h2>
+<p>To dump the data from all the models in a given Django app (<cite>appname</cite>):</p>
+<div class="highlight-python"><div class="highlight"><pre>$ ./manage.py dumpscript appname &gt; scripts/testdata.py
+</pre></div>
+</div>
+<p>To dump the data from just a single model (<cite>appname.ModelName</cite>):</p>
+<div class="highlight-python"><div class="highlight"><pre>$ ./manage.py dumpscript appname.ModelName &gt; scripts/testdata.py
+</pre></div>
+</div>
+<p>To reset a given app, and reload with the saved data:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ ./manage.py reset appname
+$ ./manage.py runscript testdata
+</pre></div>
+</div>
+<p>Note: Runscript needs <em>scripts</em> to be a module, so create the directory and a
+<em>__init__.py</em> file.</p>
+</div>
+<div class="section" id="caveats">
+<h2>Caveats<a class="headerlink" href="#caveats" title="Permalink to this headline">¶</a></h2>
+<div class="section" id="naming-conflicts">
+<h3>Naming conflicts<a class="headerlink" href="#naming-conflicts" title="Permalink to this headline">¶</a></h3>
+<p>Please take care that when naming the output files these filenames do not
+clash with other names in your import path. For instance, if the appname is
+the same as the script name, an importerror can occur because rather than importing
+the application modules it tries to load the modules from the dumpscript file itself.</p>
+<p>Examples:</p>
+<div class="highlight-python"><div class="highlight"><pre># Wrong
+$ ./manage.py dumpscript appname &gt; dumps/appname.py
+
+# Right
+$ ./manage.py dumpscript appname &gt; dumps/appname_all.py
+
+# Right
+$ ./manage.py dumpscript appname.Somemodel &gt; dumps/appname_somemodel.py
+</pre></div>
+</div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">dumpscript</a><ul>
+<li><a class="reference internal" href="#why">Why?</a></li>
+<li><a class="reference internal" href="#features">Features</a></li>
+<li><a class="reference internal" href="#what-it-can-t-do-yet">What it can&#8217;t do (yet!)</a></li>
+<li><a class="reference internal" href="#how">How?</a></li>
+<li><a class="reference internal" href="#caveats">Caveats</a><ul>
+<li><a class="reference internal" href="#naming-conflicts">Naming conflicts</a></li>
+</ul>
+</li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="create_app.html"
+                        title="previous chapter">create_app</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="runscript.html"
+                        title="next chapter">RunScript</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/dumpscript.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="runscript.html" title="RunScript"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="create_app.html" title="create_app"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/export_emails.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/export_emails.html
new file mode 100644
index 0000000..afae78e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/export_emails.html
@@ -0,0 +1,192 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>export_emails &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="Field Extensions" href="field_extensions.html" />
+    <link rel="prev" title="RunScript" href="runscript.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="field_extensions.html" title="Field Extensions"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="runscript.html" title="RunScript"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="export-emails">
+<h1>export_emails<a class="headerlink" href="#export-emails" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">export the email addresses for your users in one of many formats</td>
+</tr>
+</tbody>
+</table>
+<p>Most Django sites include a registered user base. There are times when you
+would like to import these e-mail addresses into other systems (generic mail
+program, GMail, google docs invites, give edit permissions, LinkedLn Group
+pre-approved listing). The export_emails command extension gives you this
+ability. The users exported can be filtered by Group name association.</p>
+<div class="section" id="example-usage">
+<h2>Example Usage<a class="headerlink" href="#example-usage" title="Permalink to this headline">¶</a></h2>
+<div class="highlight-python"><div class="highlight"><pre># Export all the addresses in the &#39;&quot;First Last&quot; &lt;my@addr.com&gt;;&#39; format.
+$ ./manage.py export_emails &gt; addresses.txt
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Export users from the group &#39;Attendees&#39; in the linked in pre-approve Group csv format.
+$ ./manage.py export_emails -g Attendees -f linkedin pycon08.csv
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Create a csv file importable by GMail or Google Docs
+$ ./manage.py export_emails --format=google google.csv
+</pre></div>
+</div>
+</div>
+<div class="section" id="supported-formats">
+<h2>Supported Formats<a class="headerlink" href="#supported-formats" title="Permalink to this headline">¶</a></h2>
+<div class="section" id="address">
+<h3>address<a class="headerlink" href="#address" title="Permalink to this headline">¶</a></h3>
+<p>This is the default basic text format. Each entry is on its own line in the
+format:</p>
+<div class="highlight-python"><div class="highlight"><pre>&quot;First Last&quot; &lt;user@host.com&gt;;
+</pre></div>
+</div>
+<p>This can be used with all known mail programs (that I know about anyway).</p>
+</div>
+<div class="section" id="google">
+<h3>google<a class="headerlink" href="#google" title="Permalink to this headline">¶</a></h3>
+<p>A CSV (comma separated value) format which Google applications can import.
+This can be used to import directly into GMail, a GMail mailing group, Google
+Docs invite (to read), Google Docs grant edit permissions, Google Calendar
+invites, etc.</p>
+<p>Only two columns are supplied. One for the person&#8217;s name and one for the email address.
+This is also nice for importing into spreadsheets.</p>
+</div>
+<div class="section" id="outlook">
+<h3>outlook<a class="headerlink" href="#outlook" title="Permalink to this headline">¶</a></h3>
+<p>A CSV (comma separated value) format which Outlook can parse and import.
+Supplies all the columns that Outlook &#8216;requires&#8217;, but only the name and email
+address are supplied.</p>
+</div>
+<div class="section" id="linkedin">
+<h3>linkedin<a class="headerlink" href="#linkedin" title="Permalink to this headline">¶</a></h3>
+<p>A CSV (comma separated value) format which can be imported by <a class="reference external" href="http://www.linkedin.com/static?key=groups_info">LinkedIn Groups</a>
+to pre-approve a list of people for joining the group.</p>
+<p>This supplies 3 columns: first name, last name, and email address. This is the
+best generic csv file for importing into spreadsheets as well.</p>
+</div>
+<div class="section" id="vcard">
+<h3>vcard<a class="headerlink" href="#vcard" title="Permalink to this headline">¶</a></h3>
+<p>A vCard format which Apple Address Book can parse and import.</p>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">export_emails</a><ul>
+<li><a class="reference internal" href="#example-usage">Example Usage</a></li>
+<li><a class="reference internal" href="#supported-formats">Supported Formats</a><ul>
+<li><a class="reference internal" href="#address">address</a></li>
+<li><a class="reference internal" href="#google">google</a></li>
+<li><a class="reference internal" href="#outlook">outlook</a></li>
+<li><a class="reference internal" href="#linkedin">linkedin</a></li>
+<li><a class="reference internal" href="#vcard">vcard</a></li>
+</ul>
+</li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="runscript.html"
+                        title="previous chapter">RunScript</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="field_extensions.html"
+                        title="next chapter">Field Extensions</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/export_emails.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="field_extensions.html" title="Field Extensions"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="runscript.html" title="RunScript"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/field_extensions.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/field_extensions.html
new file mode 100644
index 0000000..37bb2a6
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/field_extensions.html
@@ -0,0 +1,160 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Field Extensions &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="Graph models" href="graph_models.html" />
+    <link rel="prev" title="export_emails" href="export_emails.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="graph_models.html" title="Graph models"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="export_emails.html" title="export_emails"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="field-extensions">
+<h1>Field Extensions<a class="headerlink" href="#field-extensions" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Current Field Extensions</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="current-database-model-field-extensions">
+<h2>Current Database Model Field Extensions<a class="headerlink" href="#current-database-model-field-extensions" title="Permalink to this headline">¶</a></h2>
+<ul>
+<li><p class="first"><em>AutoSlugField</em> - AutoSlugfield will automatically create a unique slug
+incrementing an appended number on the slug until it is unique. Inspired by
+SmileyChris&#8217; Unique Slugify snippet.</p>
+</li>
+<li><p class="first"><em>CreationDateTimeField</em> - DateTimeField that will automatically set its date
+when the object is first saved to the database. Works in the same way as the
+auto_now_add keyword.</p>
+</li>
+<li><p class="first"><em>ModificationDateTimeField</em> - DateTimeField that will automatically set its
+date when an object is saved to the database. Works in the same way as the
+auto_now keyword.</p>
+</li>
+<li><p class="first"><em>UUIDField</em> - UUIDField for Django, supports all uuid versions that are
+natively supported by the uuid python module.</p>
+<div class="deprecated">
+<p><span class="versionmodified">Deprecated since version 1.4.7: </span>Django 1.8 features a native UUIDField. Django-Extensions will support <em>UUIDField</em> until Django 1.7 becomes unsupported.</p>
+</div>
+</li>
+<li><p class="first"><em>PostgreSQLUUIDField</em> - UUIDField for Django, uses PostgreSQL uuid type.</p>
+<div class="deprecated">
+<p><span class="versionmodified">Deprecated since version 1.4.7: </span>Django 1.8 features a native UUIDField. Django-Extensions will support <em>UUIDField</em> until Django 1.7 becomes unsupported.</p>
+</div>
+</li>
+<li><p class="first"><em>EncryptedCharField</em> - CharField which transparently encrypts its value as it goes in and out of the database.  Encryption is handled by <a class="reference external" href="http://www.keyczar.org/">Keyczar</a>.  To use this field you must have Keyczar installed, have generated a primary encryption key, and have <tt class="docutils literal"><span class="pre">settings.ENCRYPTED_FIELD_KEYS_DIR</span></tt> set to the full path of your keys directory.</p>
+</li>
+<li><p class="first"><em>EncryptedTextField</em> - CharField which transparently encrypts its value as it goes in and out of the database.  Encryption is handled by <a class="reference external" href="http://www.keyczar.org/">Keyczar</a>.  To use this field you must have Keyczar installed, have generated a primary encryption key, and have <tt class="docutils literal"><span class="pre">settings.ENCRYPTED_FIELD_KEYS_DIR</span></tt> set to the full path of your keys directory.</p>
+</li>
+<li><p class="first"><em>ShortUUIDField</em> - CharField which transparently generates a UUID and pass it to base57. It result in shorter 22 characters values useful e.g. for concise, unambiguous URLS. It&#8217;s possible to get shorter values with length parameter: they are not Universal Unique any more but probability of collision is still low</p>
+</li>
+</ul>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">Field Extensions</a><ul>
+<li><a class="reference internal" href="#current-database-model-field-extensions">Current Database Model Field Extensions</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="export_emails.html"
+                        title="previous chapter">export_emails</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="graph_models.html"
+                        title="next chapter">Graph models</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/field_extensions.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="graph_models.html" title="Graph models"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="export_emails.html" title="export_emails"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/genindex.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/genindex.html
new file mode 100644
index 0000000..03ffb37
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/genindex.html
@@ -0,0 +1,92 @@
+
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Index &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="#" title="General Index"
+             accesskey="I">index</a></li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+
+<h1 id="index">Index</h1>
+
+<div class="genindex-jumpbox">
+ 
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+
+   
+
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="#" title="General Index"
+             >index</a></li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/graph_models.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/graph_models.html
new file mode 100644
index 0000000..4c7eab0
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/graph_models.html
@@ -0,0 +1,216 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Graph models &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="Jobs scheduling" href="jobs_scheduling.html" />
+    <link rel="prev" title="Field Extensions" href="field_extensions.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="jobs_scheduling.html" title="Jobs scheduling"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="field_extensions.html" title="Field Extensions"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="graph-models">
+<h1>Graph models<a class="headerlink" href="#graph-models" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Renders a graphical overview of your project or specified apps.</td>
+</tr>
+</tbody>
+</table>
+<p>Creates a <a class="reference external" href="http://www.graphviz.org/">GraphViz</a> dot file for the specified app names based on their models.py.
+You can pass multiple app names and they will all be combined into a single model.
+Output is usually directed to a dot file.</p>
+<p>Several options are available: grouping models, including inheritance,
+excluding models and columns, and changing the layout when rendering to an output
+image.</p>
+<p>With the latest revisions it&#8217;s also possible to specify an output file if
+<a class="reference external" href="https://networkx.lanl.gov/wiki/pygraphviz">pygraphviz</a> is installed and render directly to an image or other supported
+file-type.</p>
+<div class="section" id="selecting-a-library">
+<h2>Selecting a library<a class="headerlink" href="#selecting-a-library" title="Permalink to this headline">¶</a></h2>
+<p>You need to select the library to generate the image. You can do so by passing
+the &#8211;pygraphviz or &#8211;pydot parameter, depending on which library you want to use.</p>
+<p>When neither of the command line parameters are given the default is to try and load
+pygraphviz or pydot (in that order) to generate the image.</p>
+<p>To install pygraphviz you usually need to run this command:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ pip install pygraphviz
+</pre></div>
+</div>
+<p>It is possible you can&#8217;t install it because it needs some C extensions to build. In
+that case you can try other methods to install or you can use PyDot.</p>
+<p>To install pydot you need to run this command:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ pip install pyparsing==1.5.7
+$ pip install pydot
+</pre></div>
+</div>
+<p>Installation should be fast and easy. Remember to install this exact version of
+pyparsing, otherwise it&#8217;s possible you get this error:</p>
+<blockquote>
+<div>Couldn&#8217;t import dot_parser, loading of dot files will not be possible.</div></blockquote>
+</div>
+<div class="section" id="default-settings">
+<h2>Default Settings<a class="headerlink" href="#default-settings" title="Permalink to this headline">¶</a></h2>
+<p>The option GRAPH_MODELS = {} can be used in the settings file to specify default options:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="n">GRAPH_MODELS</span> <span class="o">=</span> <span class="p">{</span>
+  <span class="s">&#39;all_applications&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
+  <span class="s">&#39;group_models&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
+<span class="p">}</span>
+</pre></div>
+</div>
+<p>It uses the same names as on the command line only with the leading two dashes removed and
+the other dashes replaced by underscores.</p>
+</div>
+<div class="section" id="templates">
+<h2>Templates<a class="headerlink" href="#templates" title="Permalink to this headline">¶</a></h2>
+<p>Django templates are used to generate the dot code. This in turn can be drawn into a image
+by libraries like <em>pygraphviz</em> or <em>pydot</em>. You can extend or override the templates if needed.</p>
+<p>Templates used:</p>
+<blockquote>
+<div><ul class="simple">
+<li>django_extensions/graph_models/digraph.dot</li>
+<li>django_extensions/graph_models/label.dot</li>
+<li>django_extensions/graph_models/relation.dot</li>
+</ul>
+</div></blockquote>
+<p>Documentation on how to create dot files can be found here: <a class="reference external" href="http://www.graphviz.org/Documentation.php">http://www.graphviz.org/Documentation.php</a></p>
+<div class="admonition warning">
+<p class="first admonition-title">Warning</p>
+<p>Modifying Django&#8217;s default templates behaviour might break <em>graph_models</em></p>
+<p>Please be aware that if you use any <em>template_loaders</em> or extensions that change the
+way templates are rendered that this can cause <em>graph_models</em> to fail.</p>
+<p class="last">An example of this is
+the Django app <em>django-template-minifier</em> this automatically removed the newlines before/after
+template tags even for none-html templates which leads to a mallformed file.</p>
+</div>
+</div>
+<div class="section" id="example-usage">
+<h2>Example Usage<a class="headerlink" href="#example-usage" title="Permalink to this headline">¶</a></h2>
+<p>With <em>django-extensions</em> installed you can create a dot-file or an
+image by using the <em>graph_models</em> command:</p>
+<div class="highlight-python"><div class="highlight"><pre># Create a dot file
+$ ./manage.py graph_models -a &gt; my_project.dot
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Create a PNG image file called my_project_visualized.png with application grouping
+$ ./manage.py graph_models -a -g -o my_project_visualized.png
+
+# Same example but with explicit selection of pygraphviz or pydot
+$ ./manage.py graph_models --pygraphviz -a -g -o my_project_visualized.png
+$ ./manage.py graph_models --pydot -a -g -o my_project_visualized.png
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Create a dot file for only the &#39;foo&#39; and &#39;bar&#39; applications of your project
+$ ./manage.py graph_models foo bar &gt; my_project.dot
+</pre></div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">Graph models</a><ul>
+<li><a class="reference internal" href="#selecting-a-library">Selecting a library</a></li>
+<li><a class="reference internal" href="#default-settings">Default Settings</a></li>
+<li><a class="reference internal" href="#templates">Templates</a></li>
+<li><a class="reference internal" href="#example-usage">Example Usage</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="field_extensions.html"
+                        title="previous chapter">Field Extensions</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="jobs_scheduling.html"
+                        title="next chapter">Jobs scheduling</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/graph_models.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="jobs_scheduling.html" title="Jobs scheduling"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="field_extensions.html" title="Field Extensions"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/index.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/index.html
new file mode 100644
index 0000000..751d234
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/index.html
@@ -0,0 +1,298 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Welcome to the django-extensions documentation! &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="#" />
+    <link rel="next" title="Installation instructions" href="installation_instructions.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="installation_instructions.html" title="Installation instructions"
+             accesskey="N">next</a> |</li>
+        <li><a href="#">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="welcome-to-the-django-extensions-documentation">
+<h1>Welcome to the django-extensions documentation!<a class="headerlink" href="#welcome-to-the-django-extensions-documentation" title="Permalink to this headline">¶</a></h1>
+<p>Django Extensions is a collection of custom extensions for the Django Framework.</p>
+<p>These include management commands, additional database fields, admin extensions and
+much more.</p>
+<p><a class="reference external" href="http://django-extensions-zh.readthedocs.org/zh_CN/latest/">这篇文档当然还有中文版</a></p>
+</div>
+<div class="section" id="getting-started">
+<h1>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h1>
+<p>The easiest way to figure out what Django Extensions are all about is to watch the <a class="reference external" href="http://ericholscher.com/blog/2008/sep/12/screencast-django-command-extensions/">excellent screencast by Eric Holscher</a>. In a couple minutes Eric walks you through a half a dozen command extensions.</p>
+</div>
+<div class="section" id="getting-it">
+<h1>Getting it<a class="headerlink" href="#getting-it" title="Permalink to this headline">¶</a></h1>
+<p>You can get Django Extensions by using pip or easy_install:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ pip install django-extensions
+or
+$ easy_install django-extensions
+</pre></div>
+</div>
+<p>If you want to install it from source, grab the git repository and run setup.py:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ git clone git://github.com/django-extensions/django-extensions.git
+$ cd django-extensions
+$ python setup.py install
+</pre></div>
+</div>
+<p>For more detailed instructions check out our <a class="reference internal" href="installation_instructions.html"><em>Installation instructions</em></a>. Enjoy.</p>
+</div>
+<div class="section" id="compatibility-with-versions-of-python-and-django">
+<h1>Compatibility with versions of Python and Django<a class="headerlink" href="#compatibility-with-versions-of-python-and-django" title="Permalink to this headline">¶</a></h1>
+<p>We follow the Django guidelines for supported Python and Django versions. See more at <a class="reference external" href="https://docs.djangoproject.com/en/dev/internals/release-process/#supported-versions">Django Supported Versions</a></p>
+<p>This might mean the django-extensions may work with older or unsupported versions but we do not guarantee it and most likely will not fix bugs related to incompatibilities with older versions.</p>
+<p>At the time of writing we support: Python 2.6, 2.7 and 3.3. Django supported versions are 1.4, 1.5 and 1.6.</p>
+</div>
+<div class="section" id="contents">
+<h1>Contents<a class="headerlink" href="#contents" title="Permalink to this headline">¶</a></h1>
+<div class="toctree-wrapper compound">
+<ul>
+<li class="toctree-l1"><a class="reference internal" href="installation_instructions.html">Installation instructions</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="installation_instructions.html#download-and-installation">Download and installation</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="installation_instructions.html#pip-and-easy-install">Pip and easy_install</a></li>
+<li class="toctree-l3"><a class="reference internal" href="installation_instructions.html#download">Download</a></li>
+<li class="toctree-l3"><a class="reference internal" href="installation_instructions.html#installation">Installation</a></li>
+</ul>
+</li>
+<li class="toctree-l2"><a class="reference internal" href="installation_instructions.html#version-control">Version Control</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="command_extensions.html">Current Command Extensions</a></li>
+<li class="toctree-l1"><a class="reference internal" href="command_extension_ideas.html">Ideas for New Command Extensions</a></li>
+<li class="toctree-l1"><a class="reference internal" href="admin_extensions.html">Current Admin Extensions</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="admin_extensions.html#example-usage">Example Usage</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="shell_plus.html">shell_plus</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="shell_plus.html#interactive-python-shells">Interactive Python Shells</a></li>
+<li class="toctree-l2"><a class="reference internal" href="shell_plus.html#configuration">Configuration</a></li>
+<li class="toctree-l2"><a class="reference internal" href="shell_plus.html#additional-imports">Additional Imports</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="create_app.html">create_app</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="create_app.html#example-usage">Example Usage</a></li>
+<li class="toctree-l2"><a class="reference internal" href="create_app.html#example-generated-from-sample-dia">Example generated from sample.dia</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="dumpscript.html">dumpscript</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="dumpscript.html#why">Why?</a></li>
+<li class="toctree-l2"><a class="reference internal" href="dumpscript.html#features">Features</a></li>
+<li class="toctree-l2"><a class="reference internal" href="dumpscript.html#what-it-can-t-do-yet">What it can&#8217;t do (yet!)</a></li>
+<li class="toctree-l2"><a class="reference internal" href="dumpscript.html#how">How?</a></li>
+<li class="toctree-l2"><a class="reference internal" href="dumpscript.html#caveats">Caveats</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="dumpscript.html#naming-conflicts">Naming conflicts</a></li>
+</ul>
+</li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="runscript.html">RunScript</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="runscript.html#introduction">Introduction</a></li>
+<li class="toctree-l2"><a class="reference internal" href="runscript.html#getting-started">Getting Started</a></li>
+<li class="toctree-l2"><a class="reference internal" href="runscript.html#usage">Usage</a></li>
+<li class="toctree-l2"><a class="reference internal" href="runscript.html#passing-arguments">Passing arguments</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="export_emails.html">export_emails</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="export_emails.html#example-usage">Example Usage</a></li>
+<li class="toctree-l2"><a class="reference internal" href="export_emails.html#supported-formats">Supported Formats</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="export_emails.html#address">address</a></li>
+<li class="toctree-l3"><a class="reference internal" href="export_emails.html#google">google</a></li>
+<li class="toctree-l3"><a class="reference internal" href="export_emails.html#outlook">outlook</a></li>
+<li class="toctree-l3"><a class="reference internal" href="export_emails.html#linkedin">linkedin</a></li>
+<li class="toctree-l3"><a class="reference internal" href="export_emails.html#vcard">vcard</a></li>
+</ul>
+</li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="field_extensions.html">Field Extensions</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="field_extensions.html#current-database-model-field-extensions">Current Database Model Field Extensions</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="graph_models.html">Graph models</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="graph_models.html#selecting-a-library">Selecting a library</a></li>
+<li class="toctree-l2"><a class="reference internal" href="graph_models.html#default-settings">Default Settings</a></li>
+<li class="toctree-l2"><a class="reference internal" href="graph_models.html#templates">Templates</a></li>
+<li class="toctree-l2"><a class="reference internal" href="graph_models.html#example-usage">Example Usage</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="jobs_scheduling.html">Jobs scheduling</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="jobs_scheduling.html#jobsscheduling">JobsScheduling</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="jobs_scheduling.html#this-page-is-very-much-a-work-in-progress">This page is very much a  Work In Progress</a></li>
+</ul>
+</li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="model_extensions.html">Model extensions</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="model_extensions.html#current-database-model-extensions">Current Database Model Extensions</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="namespace_proposal.html">Namespace proposal</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="namespace_proposal.html#introduction">Introduction</a></li>
+<li class="toctree-l2"><a class="reference internal" href="namespace_proposal.html#proposal-of-a-namespace">Proposal of a Namespace</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="print_settings.html">print_settings</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="print_settings.html#introduction">Introduction</a></li>
+<li class="toctree-l2"><a class="reference internal" href="print_settings.html#more-info">More Info</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="runprofileserver.html">RunProfileServer</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="runprofileserver.html#introduction">Introduction</a></li>
+<li class="toctree-l2"><a class="reference internal" href="runprofileserver.html#gather-profile-stats-py">gather_profile_stats.py</a></li>
+<li class="toctree-l2"><a class="reference internal" href="runprofileserver.html#kcachegrind">KCacheGrind</a></li>
+<li class="toctree-l2"><a class="reference internal" href="runprofileserver.html#links">Links</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="runserver_plus.html">RunServerPlus</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="runserver_plus.html#introduction">Introduction</a></li>
+<li class="toctree-l2"><a class="reference internal" href="runserver_plus.html#getting-started">Getting Started</a></li>
+<li class="toctree-l2"><a class="reference internal" href="runserver_plus.html#usage">Usage</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="runserver_plus.html#view-source">View Source</a></li>
+<li class="toctree-l3"><a class="reference internal" href="runserver_plus.html#interactive-debugging-console">Interactive Debugging Console</a></li>
+<li class="toctree-l3"><a class="reference internal" href="runserver_plus.html#ssl">SSL</a></li>
+<li class="toctree-l3"><a class="reference internal" href="runserver_plus.html#configuration">Configuration</a></li>
+</ul>
+</li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="sync_s3.html">sync_s3</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="sync_s3.html#example-usage">Example Usage</a></li>
+<li class="toctree-l2"><a class="reference internal" href="sync_s3.html#required-libraries-and-settings">Required libraries and settings</a></li>
+<li class="toctree-l2"><a class="reference internal" href="sync_s3.html#optional-settings">Optional settings</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="sqldiff.html">sqldiff</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="sqldiff.html#supported-databases">Supported Databases</a></li>
+<li class="toctree-l2"><a class="reference internal" href="sqldiff.html#exit-codes">Exit Codes</a></li>
+<li class="toctree-l2"><a class="reference internal" href="sqldiff.html#example-usage">Example Usage</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="sqlcreate.html">sqlcreate</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="sqlcreate.html#introduction">Introduction</a></li>
+<li class="toctree-l2"><a class="reference internal" href="sqlcreate.html#usage">Usage</a></li>
+<li class="toctree-l2"><a class="reference internal" href="sqlcreate.html#example">Example</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="sqlcreate.html#postgresql">PostgreSQL</a></li>
+<li class="toctree-l3"><a class="reference internal" href="sqlcreate.html#mysql">MySQL</a></li>
+</ul>
+</li>
+<li class="toctree-l2"><a class="reference internal" href="sqlcreate.html#known-issues">Known Issues</a></li>
+</ul>
+</li>
+<li class="toctree-l1"><a class="reference internal" href="validate_templates.html">validate_templates</a><ul>
+<li class="toctree-l2"><a class="reference internal" href="validate_templates.html#options">Options</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="validate_templates.html#verbosity">verbosity</a></li>
+<li class="toctree-l3"><a class="reference internal" href="validate_templates.html#break">break</a></li>
+<li class="toctree-l3"><a class="reference internal" href="validate_templates.html#includes">includes</a></li>
+</ul>
+</li>
+<li class="toctree-l2"><a class="reference internal" href="validate_templates.html#settings">Settings</a><ul>
+<li class="toctree-l3"><a class="reference internal" href="validate_templates.html#validate-templates-extra-template-dirs">VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS</a></li>
+</ul>
+</li>
+<li class="toctree-l2"><a class="reference internal" href="validate_templates.html#usage-example">Usage Example</a></li>
+</ul>
+</li>
+</ul>
+</div>
+</div>
+<div class="section" id="indices-and-tables">
+<h1>Indices and tables<a class="headerlink" href="#indices-and-tables" title="Permalink to this headline">¶</a></h1>
+<ul class="simple">
+<li><a class="reference internal" href="search.html"><em>Search Page</em></a></li>
+</ul>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="#">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">Welcome to the django-extensions documentation!</a></li>
+<li><a class="reference internal" href="#getting-started">Getting Started</a></li>
+<li><a class="reference internal" href="#getting-it">Getting it</a></li>
+<li><a class="reference internal" href="#compatibility-with-versions-of-python-and-django">Compatibility with versions of Python and Django</a></li>
+<li><a class="reference internal" href="#contents">Contents</a></li>
+<li><a class="reference internal" href="#indices-and-tables">Indices and tables</a></li>
+</ul>
+
+  <h4>Next topic</h4>
+  <p class="topless"><a href="installation_instructions.html"
+                        title="next chapter">Installation instructions</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/index.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="installation_instructions.html" title="Installation instructions"
+             >next</a> |</li>
+        <li><a href="#">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/installation_instructions.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/installation_instructions.html
new file mode 100644
index 0000000..c287fdd
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/installation_instructions.html
@@ -0,0 +1,216 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Installation instructions &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="Current Command Extensions" href="command_extensions.html" />
+    <link rel="prev" title="Welcome to the django-extensions documentation!" href="index.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="command_extensions.html" title="Current Command Extensions"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="index.html" title="Welcome to the django-extensions documentation!"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="installation-instructions">
+<h1>Installation instructions<a class="headerlink" href="#installation-instructions" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Installing django-extensions</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="download-and-installation">
+<h2>Download and installation<a class="headerlink" href="#download-and-installation" title="Permalink to this headline">¶</a></h2>
+<div class="section" id="pip-and-easy-install">
+<h3>Pip and easy_install<a class="headerlink" href="#pip-and-easy-install" title="Permalink to this headline">¶</a></h3>
+<p>You can use pip or easy_install to install django-extensions:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ pip install django-extensions
+</pre></div>
+</div>
+<p>or:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ easy_install django-extensions
+</pre></div>
+</div>
+</div>
+<div class="section" id="download">
+<h3>Download<a class="headerlink" href="#download" title="Permalink to this headline">¶</a></h3>
+<p>Download the latest packaged version from
+<a class="reference external" href="http://pypi.python.org/pypi/django-extensions/">http://pypi.python.org/pypi/django-extensions/</a> and unpack it. Inside is a
+script called setup.py. Enter this command:</p>
+<div class="highlight-python"><div class="highlight"><pre>python setup.py install
+</pre></div>
+</div>
+<p>...and the package will install automatically.</p>
+</div>
+<div class="section" id="installation">
+<h3>Installation<a class="headerlink" href="#installation" title="Permalink to this headline">¶</a></h3>
+<p>You will need to add the <em>django_extensions</em> application to the INSTALLED_APPS
+setting of your Django project <em>settings.py</em> file.:</p>
+<div class="highlight-python"><div class="highlight"><pre>INSTALLED_APPS = (
+    ...
+    &#39;django_extensions&#39;,
+)
+</pre></div>
+</div>
+<p>This will make sure that Django finds the additional management commands
+provided by <em>django-extensions</em>.</p>
+<p>The next time you invoke <em>./manage.py help</em> you should be able to see all the
+newly available commands.</p>
+<p>Some commands or options require additional applications or python libraries,
+for example:</p>
+<blockquote>
+<div><ul class="simple">
+<li>&#8216;export_emails&#8217; will require the <em>python vobject</em> module to create vcard
+files.</li>
+<li>&#8216;graph_models&#8217; requires <em>pygraphviz</em> to render directly to image file.</li>
+</ul>
+</div></blockquote>
+<p>If the given application or python library is not installed on your system (or
+not in the python path) the executed command will raise an exception and inform
+you of the missing dependency.</p>
+</div>
+</div>
+<div class="section" id="version-control">
+<h2>Version Control<a class="headerlink" href="#version-control" title="Permalink to this headline">¶</a></h2>
+<p>Django-extensions is hosted on github:</p>
+<div class="highlight-python"><div class="highlight"><pre>https://github.com/django-extensions/django-extensions
+</pre></div>
+</div>
+<p>Source code can be accessed by performing a Git clone.</p>
+<p>Tracking the development version of <em>django command extensions</em> should be
+pretty stable and will keep you up-to-date with the latests fixes.</p>
+<p>The following command will check the application&#8217;s source code out to a
+directory called <em>django-extensions</em>:</p>
+<p>Git:</p>
+<div class="highlight-python"><div class="highlight"><pre>git clone git://github.com/django-extensions/django-extensions.git
+</pre></div>
+</div>
+<p>You should either install the resulting project with <em>python setup.py install</em>
+or put the <em>extensions</em> directory into your PYTHONPATH. The most common way
+is to symlink (junction, if you&#8217;re on Windows) the extensions directory inside
+a directory which is on your PYTHONPATH, such as your python installation&#8217;s
+site-packages directory.</p>
+<div class="highlight-python"><div class="highlight"><pre>ln -sf /full/path/to/django-extensions/django_extensions /usr/lib/python2.7/site-packages/django_extensions
+</pre></div>
+</div>
+<p>You can verify that the application is available on your PYTHONPATH by opening a python interpreter and entering the following commands:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">django_extensions</span>
+<span class="gp">&gt;&gt;&gt; </span><span class="n">django_extensions</span><span class="o">.</span><span class="n">VERSION</span>
+<span class="go">(0, 8)</span>
+</pre></div>
+</div>
+<p>Keep in mind that the current code in the git repository may be different from the
+packaged release. It may contain bugs and backwards-incompatible changes but most
+likely also new goodies to play with.</p>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">Installation instructions</a><ul>
+<li><a class="reference internal" href="#download-and-installation">Download and installation</a><ul>
+<li><a class="reference internal" href="#pip-and-easy-install">Pip and easy_install</a></li>
+<li><a class="reference internal" href="#download">Download</a></li>
+<li><a class="reference internal" href="#installation">Installation</a></li>
+</ul>
+</li>
+<li><a class="reference internal" href="#version-control">Version Control</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="index.html"
+                        title="previous chapter">Welcome to the django-extensions documentation!</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="command_extensions.html"
+                        title="next chapter">Current Command Extensions</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/installation_instructions.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="command_extensions.html" title="Current Command Extensions"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="index.html" title="Welcome to the django-extensions documentation!"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/jobs_scheduling.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/jobs_scheduling.html
new file mode 100644
index 0000000..486811a
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/jobs_scheduling.html
@@ -0,0 +1,164 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Jobs scheduling &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="Model extensions" href="model_extensions.html" />
+    <link rel="prev" title="Graph models" href="graph_models.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="model_extensions.html" title="Model extensions"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="graph_models.html" title="Graph models"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="jobs-scheduling">
+<h1>Jobs scheduling<a class="headerlink" href="#jobs-scheduling" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Documentation on creating/using jobs in Django-extensions</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="jobsscheduling">
+<h2>JobsScheduling<a class="headerlink" href="#jobsscheduling" title="Permalink to this headline">¶</a></h2>
+<div class="section" id="this-page-is-very-much-a-work-in-progress">
+<h3>This page is very much a  Work In Progress<a class="headerlink" href="#this-page-is-very-much-a-work-in-progress" title="Permalink to this headline">¶</a></h3>
+<p>Creating jobs works much like management commands work in Django.
+Use create_jobs to make a &#8216;jobs&#8217; directory inside of an application.
+After that create one python file per job.</p>
+<p>Some simple examples are provided by the django_extensions.jobs package.</p>
+<p>A job is a python script with a mandatory Job class which extends from
+HourlyJob, DailyJob, WeeklyJob or MonthlyJob. It has one method that must be
+implemented called &#8216;execute&#8217;, which is called when the job is run.</p>
+<p>The following commands are related to jobs:</p>
+<ul class="simple">
+<li>create_jobs, create the directory structure for jobs</li>
+<li>runjob, run a single job</li>
+<li>runjobs, run all hourly/daily/weekly/monthly jobs</li>
+</ul>
+<p>Use &#8220;runjob(s) -l&#8221; to list all jobs recognized.</p>
+<p>Jobs do not run automatically !</p>
+<p>You must either run a job manually specifying  the exact time on
+which the command is to be run, or use crontab:</p>
+<div class="highlight-python"><div class="highlight"><pre>@hourly /path/to/my/project/manage.py runjobs hourly
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre>@daily /path/to/my/project/manage.py runjobs daily
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre>@weekly /path/to/my/project/manage.py runjobs weekly
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre>@monthly /path/to/my/project/manage.py runjobs monthly
+</pre></div>
+</div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">Jobs scheduling</a><ul>
+<li><a class="reference internal" href="#jobsscheduling">JobsScheduling</a><ul>
+<li><a class="reference internal" href="#this-page-is-very-much-a-work-in-progress">This page is very much a  Work In Progress</a></li>
+</ul>
+</li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="graph_models.html"
+                        title="previous chapter">Graph models</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="model_extensions.html"
+                        title="next chapter">Model extensions</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/jobs_scheduling.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="model_extensions.html" title="Model extensions"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="graph_models.html" title="Graph models"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/model_extensions.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/model_extensions.html
new file mode 100644
index 0000000..e76d70c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/model_extensions.html
@@ -0,0 +1,133 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Model extensions &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="Namespace proposal" href="namespace_proposal.html" />
+    <link rel="prev" title="Jobs scheduling" href="jobs_scheduling.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="namespace_proposal.html" title="Namespace proposal"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="jobs_scheduling.html" title="Jobs scheduling"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="model-extensions">
+<h1>Model extensions<a class="headerlink" href="#model-extensions" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Current Model Extensions</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="current-database-model-extensions">
+<h2>Current Database Model Extensions<a class="headerlink" href="#current-database-model-extensions" title="Permalink to this headline">¶</a></h2>
+<ul class="simple">
+<li><em>TimeStampedModel</em> - TimeStampedModel An abstract base class model that
+provides self-managed &#8220;created&#8221; and &#8220;modified&#8221; fields.</li>
+</ul>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">Model extensions</a><ul>
+<li><a class="reference internal" href="#current-database-model-extensions">Current Database Model Extensions</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="jobs_scheduling.html"
+                        title="previous chapter">Jobs scheduling</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="namespace_proposal.html"
+                        title="next chapter">Namespace proposal</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/model_extensions.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="namespace_proposal.html" title="Namespace proposal"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="jobs_scheduling.html" title="Jobs scheduling"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/namespace_proposal.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/namespace_proposal.html
new file mode 100644
index 0000000..8b9735d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/namespace_proposal.html
@@ -0,0 +1,149 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Namespace proposal &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="print_settings" href="print_settings.html" />
+    <link rel="prev" title="Model extensions" href="model_extensions.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="print_settings.html" title="print_settings"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="model_extensions.html" title="Model extensions"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="namespace-proposal">
+<h1>Namespace proposal<a class="headerlink" href="#namespace-proposal" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Namespace Proposal</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="introduction">
+<h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
+<p>Please change / write your proposal for splitting django_extensions into
+namespaces here.</p>
+</div>
+<div class="section" id="proposal-of-a-namespace">
+<h2>Proposal of a Namespace<a class="headerlink" href="#proposal-of-a-namespace" title="Permalink to this headline">¶</a></h2>
+<p>Rough proposal for splitting into functional parts:</p>
+<ul class="simple">
+<li>django_extensions.commands (20% that everbody uses / production)</li>
+<li>django_extensions.commands.development (everything development)</li>
+<li>django_extensions.commands.extra (not fitting about category&#8217;s?)</li>
+<li>django_extensions.db</li>
+<li>django_extensions.templates</li>
+<li>django_extensions.jobs</li>
+</ul>
+<p>The db part should be okay where it is right now. It&#8217;s only used when
+somebody explicitly imports:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django_extensions.db.models</span> <span class="kn">import</span> <span class="n">something</span>
+</pre></div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">Namespace proposal</a><ul>
+<li><a class="reference internal" href="#introduction">Introduction</a></li>
+<li><a class="reference internal" href="#proposal-of-a-namespace">Proposal of a Namespace</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="model_extensions.html"
+                        title="previous chapter">Model extensions</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="print_settings.html"
+                        title="next chapter">print_settings</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/namespace_proposal.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="print_settings.html" title="print_settings"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="model_extensions.html" title="Model extensions"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/objects.inv b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/objects.inv
new file mode 100644
index 0000000000000000000000000000000000000000..674371537414e2bad22c942ed484ecdbf20411a2
GIT binary patch
literal 213
zcmY#Z2rkIT%&Sny%qvUHE6FdaR47X=D$dN$Q!wIERtPA{&q_@$u~JCMO3X{o*G;V`
zNzDVv76T>2APTJ%4E0Qa+>ne^g`(8l#LT>u)FOraG=-9k%wmPK%$!sOAf23_TTql*
zT%4MsP+FXsm#$EilbNK)RdMU|S^tw~ygk<jXy|!vJmu-*bvE#VX^6&(D`#81UZhTW
z@=Qbf$Ft>Ao-NU;XlmJUDfsh-jHXVfQimyG%hkkG(-&y9bU03BbrxY!S+=~0k>UO`
GLrDNSnN*$t

literal 0
HcmV?d00001

diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/print_settings.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/print_settings.html
new file mode 100644
index 0000000..f7b7524
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/print_settings.html
@@ -0,0 +1,179 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>print_settings &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="RunProfileServer" href="runprofileserver.html" />
+    <link rel="prev" title="Namespace proposal" href="namespace_proposal.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="runprofileserver.html" title="RunProfileServer"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="namespace_proposal.html" title="Namespace proposal"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="print-settings">
+<h1>print_settings<a class="headerlink" href="#print-settings" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Django managment command similar to <tt class="docutils literal"><span class="pre">diffsettings</span></tt> but shows <em>selected</em> active Django settings or <em>all</em> if no args passed.</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="introduction">
+<h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
+<p>Django comes with a <tt class="docutils literal"><span class="pre">diffsettings</span></tt> command that shows how your project&#8217;s
+settings differ from the Django defaults.  Sometimes it is useful to just see
+the settings that are in effect for your project. This is particularly
+true if you have a more complex system for settings than just a single
+<tt class="file docutils literal"><span class="pre">settings.py</span></tt> file. For example, you might have settings files that
+import other settings file, such as dev, test, and production settings files
+that source a base settings file.</p>
+<p>This command also supports dumping the data in a few different formats.</p>
+</div>
+<div class="section" id="more-info">
+<h2>More Info<a class="headerlink" href="#more-info" title="Permalink to this headline">¶</a></h2>
+<p>The simplest way to run it is with no arguments:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py print_settings
+</pre></div>
+</div>
+<p>Some variations:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py print_settings --format=json
+$ python manage.py print_settings --format=yaml    # Requires PyYAML
+</pre></div>
+</div>
+<p>Show just selected settings:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py print_settings DEBUG INSTALLED_APPS
+$ python manage.py print_settings DEBUG INSTALLED_APPS --format=pprint
+</pre></div>
+</div>
+<p>For more info, take a look at the built-in help:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py print_settings --help
+Usage: manage.py print_settings [options]
+
+Print the active Django settings.
+
+Options:
+  -v VERBOSITY, --verbosity=VERBOSITY
+                        Verbosity level; 0=minimal output, 1=normal output,
+                        2=verbose output, 3=very verbose output
+  --settings=SETTINGS   The Python path to a settings module, e.g.
+                        &quot;myproject.settings.main&quot;. If this isn&#39;t provided, the
+                        DJANGO_SETTINGS_MODULE environment variable will be
+                        used.
+  --pythonpath=PYTHONPATH
+                        A directory to add to the Python path, e.g.
+                        &quot;/home/djangoprojects/myproject&quot;.
+  --traceback           Print traceback on exception
+  --format=FORMAT       Specifies output format.
+  --indent=INDENT       Specifies indent level for JSON and YAML
+  --version             show program&#39;s version number and exit
+  -h, --help            show this help message and exit
+</pre></div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">print_settings</a><ul>
+<li><a class="reference internal" href="#introduction">Introduction</a></li>
+<li><a class="reference internal" href="#more-info">More Info</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="namespace_proposal.html"
+                        title="previous chapter">Namespace proposal</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="runprofileserver.html"
+                        title="next chapter">RunProfileServer</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/print_settings.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="runprofileserver.html" title="RunProfileServer"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="namespace_proposal.html" title="Namespace proposal"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runprofileserver.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runprofileserver.html
new file mode 100644
index 0000000..28e8ed2
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runprofileserver.html
@@ -0,0 +1,197 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>RunProfileServer &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="RunServerPlus" href="runserver_plus.html" />
+    <link rel="prev" title="print_settings" href="print_settings.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="runserver_plus.html" title="RunServerPlus"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="print_settings.html" title="print_settings"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="runprofileserver">
+<h1>RunProfileServer<a class="headerlink" href="#runprofileserver" title="Permalink to this headline">¶</a></h1>
+<p><em>We recommend that before you start profiling any language or
+framework you learn enough about it so that you feel comfortable with digging
+into its internals.</em></p>
+<p><em>Without sufficient knowledge it will not only be (very)
+hard but you&#8217;re likely to make wrong assumptions (and fixes). As a rule of thumb,
+clean, well written code will help you a lot more than overzealous
+micro-optimizations will.</em></p>
+<p><em>This document is work in progress. If you feel you can help with
+better/clearer or additional information about profiling Django please leave a
+comment.</em></p>
+<div class="section" id="introduction">
+<h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
+<p><em>runprofileserver</em> starts Django&#8217;s runserver command with hotshot/profiling
+tools enabled. It will save .prof files containing the profiling information
+into the &#8211;prof-path directory. Note that for each request made one profile
+data file is saved.</p>
+<p>By default the profile-data-files are saved in /tmp use the &#8211;prof-path option
+to specify your own target directory. Saving the data in a meaningful directory
+structure helps to keep your profile data organized and keeps /tmp uncluttered.
+(Yes this probably malfunctions systems such as Windows where /tmp does not exist)</p>
+<p>To define profile filenames use &#8211;prof-file option. Default format
+is &#8220;{path}.{duration:06d}ms.{time}&#8221; (Python
+<a class="reference external" href="http://docs.python.org/3/library/string.html#formatspec">Format Specification</a>
+is used).</p>
+<p>Examples:</p>
+<blockquote>
+<div><ul class="simple">
+<li>&#8220;{time}-{path}-{duration}ms&#8221; - to order profile-data-files by request time</li>
+<li>&#8220;{duration:06d}ms.{path}.{time}&#8221; - to order by request duration</li>
+</ul>
+</div></blockquote>
+</div>
+<div class="section" id="gather-profile-stats-py">
+<h2>gather_profile_stats.py<a class="headerlink" href="#gather-profile-stats-py" title="Permalink to this headline">¶</a></h2>
+<p>Django comes packed with a tool to aggregate these different prof files into
+one aggregated profile file. This tool is called <em>gather_profile_stats.py</em> and
+is located inside the <em>bin</em> directory of your Django distribution.</p>
+</div>
+<div class="section" id="kcachegrind">
+<h2>KCacheGrind<a class="headerlink" href="#kcachegrind" title="Permalink to this headline">¶</a></h2>
+<p>Recent versions of <em>runprofileserver</em> have an option to save the profile data
+into a KCacheGrind compatible format. So you can use the excellent KCacheGrind
+tool for analyzing the profile data.</p>
+<p>Example:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ mkdir /tmp/my-profile-data
+$ ./manage.py runprofileserver --kcachegrind --prof-path=/tmp/my-profile-data
+Validating models...
+0 errors found
+
+Django version 1.0-post-release-SVN-SVN-unknown, using settings &#39;complete_project.settings&#39;
+Development server is running at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+[13/Nov/2008 06:29:38] &quot;GET / HTTP/1.1&quot; 200 41107
+[13/Nov/2008 06:29:39] &quot;GET /site_media/base.css?743 HTTP/1.1&quot; 200 17227
+[13/Nov/2008 06:29:39] &quot;GET /site_media/logo.png HTTP/1.1&quot; 200 3474
+[13/Nov/2008 06:29:39] &quot;GET /site_media/jquery.js HTTP/1.1&quot; 200 31033
+[13/Nov/2008 06:29:39] &quot;GET /site_media/heading.png HTTP/1.1&quot; 200 247
+[13/Nov/2008 06:29:39] &quot;GET /site_media/base.js HTTP/1.1&quot; 200 751
+&lt;ctrl-c&gt;
+$ kcachegrind /tmp/my-profile-data/root.12574391.592.prof
+</pre></div>
+</div>
+<p>Here is a screenshot of how the above commands might look in KCacheGrind:</p>
+<blockquote>
+<div><a class="reference external" href="http://trbs.net/media/misc/django-runprofileserver-kcachegrind-full.jpg">http://trbs.net/media/misc/django-runprofileserver-kcachegrind-full.jpg</a></div></blockquote>
+</div>
+<div class="section" id="links">
+<h2>Links<a class="headerlink" href="#links" title="Permalink to this headline">¶</a></h2>
+<ul class="simple">
+<li><a class="reference external" href="http://code.djangoproject.com/wiki/ProfilingDjango">http://code.djangoproject.com/wiki/ProfilingDjango</a></li>
+<li><a class="reference external" href="http://www.rkblog.rk.edu.pl/w/p/django-profiling-hotshot-and-kcachegrind/">http://www.rkblog.rk.edu.pl/w/p/django-profiling-hotshot-and-kcachegrind/</a></li>
+<li><a class="reference external" href="http://code.djangoproject.com/browser/django/trunk/django/bin/profiling/gather_profile_stats.py">http://code.djangoproject.com/browser/django/trunk/django/bin/profiling/gather_profile_stats.py</a></li>
+<li><a class="reference external" href="http://www.oluyede.org/blog/2007/03/07/profiling-django/">http://www.oluyede.org/blog/2007/03/07/profiling-django/</a></li>
+<li><a class="reference external" href="http://simonwillison.net/2008/May/22/debugging/">http://simonwillison.net/2008/May/22/debugging/</a></li>
+</ul>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">RunProfileServer</a><ul>
+<li><a class="reference internal" href="#introduction">Introduction</a></li>
+<li><a class="reference internal" href="#gather-profile-stats-py">gather_profile_stats.py</a></li>
+<li><a class="reference internal" href="#kcachegrind">KCacheGrind</a></li>
+<li><a class="reference internal" href="#links">Links</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="print_settings.html"
+                        title="previous chapter">print_settings</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="runserver_plus.html"
+                        title="next chapter">RunServerPlus</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/runprofileserver.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="runserver_plus.html" title="RunServerPlus"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="print_settings.html" title="print_settings"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runscript.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runscript.html
new file mode 100644
index 0000000..a1917a7
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runscript.html
@@ -0,0 +1,206 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>RunScript &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="export_emails" href="export_emails.html" />
+    <link rel="prev" title="dumpscript" href="dumpscript.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="export_emails.html" title="export_emails"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="dumpscript.html" title="dumpscript"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="runscript">
+<h1>RunScript<a class="headerlink" href="#runscript" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Runs a script in the django context.</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="introduction">
+<h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
+<p>The runscript command lets you run an arbritrary set of python commands within
+the django context. It offers the same usability and functionality as running a
+set of commands in shell accessed by:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py shell
+</pre></div>
+</div>
+</div>
+<div class="section" id="getting-started">
+<h2>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h2>
+<p>To get started create a scripts directory in your project root, next to
+manage.py:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ mkdir scripts
+$ touch scripts/__init__.py
+</pre></div>
+</div>
+<p>Note: The <em>__init__.py</em> file is necessary so that the folder is picked up as a
+python package.</p>
+<p>Next, create a python file with the name of the script you want to run within
+the scripts directory:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ touch scripts/delete_all_polls.py
+</pre></div>
+</div>
+<p>This file must implement a <em>run()</em> function. This is what gets called when you
+run the script. You can import any models or other parts of your django project
+to use in these scripts.</p>
+<p>For example:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="c"># scripts/delete_all_polls.py</span>
+
+<span class="kn">from</span> <span class="nn">Polls.models</span> <span class="kn">import</span> <span class="n">Poll</span>
+
+<span class="k">def</span> <span class="nf">run</span><span class="p">():</span>
+    <span class="c"># Get all polls</span>
+    <span class="n">all_polls</span> <span class="o">=</span> <span class="n">Poll</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
+    <span class="c"># Delete polls</span>
+    <span class="n">all_polls</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
+</pre></div>
+</div>
+<p>Note: You can put a script inside a <em>scripts</em> folder in any of your apps too.</p>
+</div>
+<div class="section" id="usage">
+<h2>Usage<a class="headerlink" href="#usage" title="Permalink to this headline">¶</a></h2>
+<p>To run any script you use the command <em>runscript</em> with the name of the script
+that you want to run.</p>
+<p>For example:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py runscript delete_all_polls
+</pre></div>
+</div>
+<p>Note: The command first checks for scripts in your apps i.e. <em>app_name/scripts</em>
+folder and runs them before checking for and running scripts in the
+<em>project_root/scripts</em> folder. You can have multiple scripts with the same name
+and they will all be run sequentially.</p>
+</div>
+<div class="section" id="passing-arguments">
+<h2>Passing arguments<a class="headerlink" href="#passing-arguments" title="Permalink to this headline">¶</a></h2>
+<p>You can pass arguments from the command line to your script by passing a comma-separated
+list of values with <tt class="docutils literal"><span class="pre">--script-args</span></tt>. For example:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py runscript delete_all_polls --script-args=staleonly
+</pre></div>
+</div>
+<p>The list of argument values gets passed as arguments to your <em>run()</em> function. For
+example:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="c"># scripts/delete_all_polls.py</span>
+
+<span class="kn">from</span> <span class="nn">Polls.models</span> <span class="kn">import</span> <span class="n">Poll</span>
+
+<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
+    <span class="c"># Get all polls</span>
+    <span class="n">all_polls</span> <span class="o">=</span> <span class="n">Poll</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
+    <span class="k">if</span> <span class="s">&#39;staleonly&#39;</span> <span class="ow">in</span> <span class="n">args</span><span class="p">:</span>
+        <span class="n">all_polls</span> <span class="o">=</span> <span class="n">all_polls</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">active</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
+    <span class="c"># Delete polls</span>
+    <span class="n">all_polls</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
+</pre></div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">RunScript</a><ul>
+<li><a class="reference internal" href="#introduction">Introduction</a></li>
+<li><a class="reference internal" href="#getting-started">Getting Started</a></li>
+<li><a class="reference internal" href="#usage">Usage</a></li>
+<li><a class="reference internal" href="#passing-arguments">Passing arguments</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="dumpscript.html"
+                        title="previous chapter">dumpscript</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="export_emails.html"
+                        title="next chapter">export_emails</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/runscript.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="export_emails.html" title="export_emails"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="dumpscript.html" title="dumpscript"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runserver_plus.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runserver_plus.html
new file mode 100644
index 0000000..f0257bf
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/runserver_plus.html
@@ -0,0 +1,251 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>RunServerPlus &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="sync_s3" href="sync_s3.html" />
+    <link rel="prev" title="RunProfileServer" href="runprofileserver.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="sync_s3.html" title="sync_s3"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="runprofileserver.html" title="RunProfileServer"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="runserverplus">
+<h1>RunServerPlus<a class="headerlink" href="#runserverplus" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">RunServerPlus-typical runserver with Werkzeug debugger baked in</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="introduction">
+<h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
+<p>This item requires that you have the <cite>Werkzeug WSGI utilities</cite> (version 0.3)
+installed.  Included with Werkzeug is a kick ass debugger that renders nice
+debugging tracebacks and adds an AJAX based debugger (which allows code execution
+in the context of the traceback’s frames).  Additionally it provides a nice
+access view to the source code.</p>
+</div>
+<div class="section" id="getting-started">
+<h2>Getting Started<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h2>
+<p>To get started we just use the <em>runserver_plus</em> command instead of the normal
+<em>runserver</em> command:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py runserver_plus
+
+* Running on http://127.0.0.1:8000/
+* Restarting with reloader...
+
+Validating models...
+0 errors found
+
+Django version 0.97-newforms-admin-SVN-unknown, using settings &#39;screencasts.settings&#39;
+Development server is running at http://127.0.0.1:8000/
+Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+Quit the server with CONTROL-C.
+</pre></div>
+</div>
+<p>Note: all normal runserver options apply. In other words, if you need to change
+the port number or the host information, you can do so like you would normally.</p>
+</div>
+<div class="section" id="usage">
+<h2>Usage<a class="headerlink" href="#usage" title="Permalink to this headline">¶</a></h2>
+<p>Instead of the default Django traceback page, the Werkzeug traceback page
+will be shown when an exception occurs.</p>
+<img alt="werkzeug-traceback" src="https://f.cloud.github.com/assets/202559/1261027/2637f826-2c22-11e3-83c6-646acc87808b.png" />
+<p>Along with the typical traceback information we have a couple of options. These
+options appear when hovering over a particular traceback line.  Notice that
+two buttons appear to the right:</p>
+<img alt="werkzeug-options" src="https://f.cloud.github.com/assets/202559/1261035/558ad0ee-2c22-11e3-8ddd-6678d84d77e7.png" />
+<p>The options are:</p>
+<div class="section" id="view-source">
+<h3>View Source<a class="headerlink" href="#view-source" title="Permalink to this headline">¶</a></h3>
+<p>This displays the source underneath the traceback:</p>
+<img alt="werkzeug-source" src="https://f.cloud.github.com/assets/202559/1261036/583c8c42-2c22-11e3-9eb9-5c16b8732512.png" />
+<p>Being able to view the source file is handy because it provides more
+context information around the error.  The actual traceback areas are
+highlighted so they are easy to spot.</p>
+<p>One awkward aspect of th UI is that the page is not scrolled to the bottom.
+At first I thought nothing was happening because of this.</p>
+</div>
+<div class="section" id="interactive-debugging-console">
+<h3>Interactive Debugging Console<a class="headerlink" href="#interactive-debugging-console" title="Permalink to this headline">¶</a></h3>
+<p>Clicking on this button opens up a new pane under the traceback line
+you&#8217;re on. This is the money shot:</p>
+<img alt="werkzeug-debugger" src="https://f.cloud.github.com/assets/202559/1261037/5d12eda6-2c22-11e3-802a-2639ff8813fa.png" />
+<p>An ajax based console appears in the pane and you can start debugging.
+Notice in the screenshot above I did a <cite>print environ</cite> to see what was in the
+environment parameter coming into the function.</p>
+<p><em>WARNING</em>: This should <em>never</em> be used in any kind of production environment.
+Not even for a quick problem check.  I cannot emphasize this enough. The
+interactive debugger allows you to evaluate python code right against the
+server.  You&#8217;ve been warned.</p>
+</div>
+<div class="section" id="ssl">
+<h3>SSL<a class="headerlink" href="#ssl" title="Permalink to this headline">¶</a></h3>
+<p>runserver_plus also supports SSL, so that you can easily debug bugs that to pop up
+when https is used. To use SSL simply provide a file name for certificates;
+a key and certificate file will be automatically generated:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py runserver_plus --cert cert
+Validating models...
+0 errors found
+
+Django version 1.6.dev20130122125534, using settings &#39;mysite.settings&#39;
+Development server is running at http://127.0.0.1:8000/
+Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+Quit the server with CONTROL-C.
+ * Running on https://127.0.0.1:8000/
+ * Restarting with reloader
+Validating models...
+0 errors found
+
+Django version 1.6.dev20130122125534, using settings &#39;mysite.settings&#39;
+Development server is running at http://127.0.0.1:8000/
+Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+Quit the server with CONTROL-C.
+</pre></div>
+</div>
+<p>After running this command, your web application can be accessed through
+<a class="reference external" href="https://127.0.0.1:8000">https://127.0.0.1:8000</a>.</p>
+<p>You will also find that two files are created in  the current working directory:
+a key file and a certificate file. If you run the above command again, these
+certificate files will be reused so that you do not have to keep accepting the
+self-generated certificates from your browser every time. You can also provide
+a specific file for the certificate to be used if you already have one:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py runserver_plus --cert /tmp/cert
+</pre></div>
+</div>
+<p>Note that you need the OpenSSL library to use SSL, and Werkzeug 0.9 or later
+if you want to reuse existing certificates.</p>
+<p>To install OpenSSL:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ pip install pyOpenSSL
+</pre></div>
+</div>
+</div>
+<div class="section" id="configuration">
+<h3>Configuration<a class="headerlink" href="#configuration" title="Permalink to this headline">¶</a></h3>
+<p>The <cite>RUNSERVERPLUS_SERVER_ADDRESS_PORT</cite> setting can be configured to specify
+which address and port the development server should bind to.</p>
+<p>If you find yourself frequently starting the server with:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ python manage.py runserver_plus 0.0.0.0:8000
+</pre></div>
+</div>
+<p>You can use settings to automatically default your development to an address/port:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="n">RUNSERVERPLUS_SERVER_ADDRESS_PORT</span> <span class="o">=</span> <span class="s">&#39;0.0.0.0:8000&#39;</span>
+</pre></div>
+</div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">RunServerPlus</a><ul>
+<li><a class="reference internal" href="#introduction">Introduction</a></li>
+<li><a class="reference internal" href="#getting-started">Getting Started</a></li>
+<li><a class="reference internal" href="#usage">Usage</a><ul>
+<li><a class="reference internal" href="#view-source">View Source</a></li>
+<li><a class="reference internal" href="#interactive-debugging-console">Interactive Debugging Console</a></li>
+<li><a class="reference internal" href="#ssl">SSL</a></li>
+<li><a class="reference internal" href="#configuration">Configuration</a></li>
+</ul>
+</li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="runprofileserver.html"
+                        title="previous chapter">RunProfileServer</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="sync_s3.html"
+                        title="next chapter">sync_s3</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/runserver_plus.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="sync_s3.html" title="sync_s3"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="runprofileserver.html" title="RunProfileServer"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/search.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/search.html
new file mode 100644
index 0000000..66a7fbc
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/search.html
@@ -0,0 +1,99 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>Search &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <script type="text/javascript" src="_static/searchtools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+  <script type="text/javascript">
+    jQuery(function() { Search.loadIndex("searchindex.js"); });
+  </script>
+  
+  <script type="text/javascript" id="searchindexloader"></script>
+   
+
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <h1 id="search-documentation">Search</h1>
+  <div id="fallback" class="admonition warning">
+  <script type="text/javascript">$('#fallback').hide();</script>
+  <p>
+    Please activate JavaScript to enable the search
+    functionality.
+  </p>
+  </div>
+  <p>
+    From here you can search these documents. Enter your search
+    words into the box below and click "search". Note that the search
+    function will automatically search for all of the words. Pages
+    containing fewer words won't appear in the result list.
+  </p>
+  <form action="" method="get">
+    <input type="text" name="q" value="" />
+    <input type="submit" value="search" />
+    <span id="search-progress" style="padding-left: 10px"></span>
+  </form>
+  
+  <div id="search-results">
+  
+  </div>
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/searchindex.js b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/searchindex.js
new file mode 100644
index 0000000..65218e2
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/searchindex.js
@@ -0,0 +1 @@
+Search.setIndex({envversion:42,terms:{all:[4,0,9,19,1,3,5,14,17,6,20,7,13,21,12],code:[],skip:11,global:11,is_act:18,runserv:[5,16,19],abil:6,edu:16,follow:[4,0,1,14,11,17,18],validate_templates_extra_template_dir:[],categori:15,privat:1,depend:[7,17],bpython:11,graph:[],pprint:12,intermedi:21,send:5,set_fake_password:5,certainli:14,program:[12,6],under:[13,19],dev20130122125534:19,sourc:[],everi:19,jobsschedul:[],base57:9,far:[1,5],account:1,util:19,failur:20,veri:[],affect:11,appname_somemodel:21,exact:[7,0],cool:5,tri:21,contenttyp:21,level:[20,12],did:19,button:19,dig:16,list:[0,6,3],upload:1,newform:19,"try":[2,5,7],item:[11,19],unsupport:[4,9],profilingdjango:16,quick:19,servic:1,dir:20,pleas:[15,7,16,21],natur:[2,21],direct:7,past:5,aggreg:16,pass:[],download:[],bake:[5,19],click:19,append:[11,9],even:[7,19],what:[],sub:21,compar:14,abl:[17,19],find:[1,17,19],access:[19,17,3],hourli:[0,5],experiment:5,awar:7,underneath:19,net:16,method:[7,0],submodule4:11,celeri:20,widget:18,full:[16,9,17],submodule1:11,submodule2:11,submodule3:11,variat:12,gener:[],never:[2,19],chang:[15,7,17,19],here:[15,7,16,8,11],behaviour:7,let:3,debugg:[5,19],address:[],shell_plus_pre_import:11,along:19,weeklyjob:0,modifi:[7,10],sinc:9,valu:[5,6,21,9,3],dry:2,search:[4,18],invit:6,cert:19,orm:5,pick:3,implement:[0,3],pub_dat:21,honor:11,chanc:5,control:[],timestampedmodel:10,extra:15,appli:19,modul:[5,9,11,17,12,21],filenam:[16,21],leav:16,runscript:[],print_user_for_sess:5,txt:6,db_administr:2,middlewar:20,mail_debug:5,from:[],would:[11,19,14,6],give:6,regist:[18,6],two:[7,19,6],next:[17,3],few:[12,21],call:[7,0,16,17,3],usr:17,recommend:16,type:[7,11,9],until:9,more:[],encryptedtextfield:9,peopl:[11,6],relat:[4,0,7],impress:5,notic:19,enhanc:5,warn:19,linkedln:6,templat:[],uuidfield:9,particular:19,known:[],actual:19,unpack:17,vcard:[],oluyed:16,must:[0,9,3],psql:2,show_url:5,none:7,graphic:7,join:[21,6],sometim:[12,11],aws_secret_access_kei:1,setup:[2,17,4],work:[],uniqu:9,dev:12,mallform:7,can:[],learn:16,purpos:14,root:[16,3],def:3,overrid:[7,11],django_extens:[0,15,11,17,18,7],scan:[20,1,14],process:20,runserverplu:[],indic:[],pictur:11,manytomanyfield:21,tag:[7,5],want:[4,3,2,11,19,20,7],notebook_extens:11,acl:1,occur:[21,19],everywher:2,alwai:11,multipl:[20,7,5,3],newlin:7,first_nam:18,rather:21,comfort:16,spreadsheet:6,versionadmin:18,snippet:9,concis:9,sever:7,instead:[20,5,14,19],csv:6,simpl:0,css:[1,5,8,16],class1:11,product:[15,12,19],shell_plus_dont_load:11,recogn:0,timedelta:21,pypi:17,clone:[4,17],after:[20,7,0,11,19],spot:19,superus:5,diagram:13,befor:[7,16,11,3],wrong:[16,21],notebook:11,okai:15,router:2,mai:[4,16,17,11],e27lvi50csw06w:1,underscor:7,data:[12,16,21],github:[1,17,4],awkward:19,ssl:[],bind:19,minim:12,explicit:7,filter_list:1,exclud:[7,21],issu:[],inform:[2,5,16,17,19],"switch":[20,13],cannot:[1,19],combin:[7,5,11],pocoo:19,allow:[5,13,19],enter:[17,21],fallback:2,order:[7,16,11],help:[5,14,2,16,17,12,13],over:19,approv:6,autoload:[5,11],graphviz:[7,5],group_model:7,runjob:[0,5],all_appl:7,comma:[6,3],pane:19,still:9,dynam:20,paramet:[7,11,9,19],write:[15,4],group:[7,6],uuid:9,fit:15,fix:[4,16,17],better:[13,16],yaml:12,window:[16,17],complex:12,restart:19,mail:[5,6],create_superus:5,main:12,might:[4,14,2,16,12,7],alter:14,them:[1,3],good:2,junction:17,thei:[7,19,9,3],python:[],auto:11,safe:11,dai:21,somemodel:21,modificationdatetimefield:9,framework:[4,16],somebodi:15,half:4,nov:16,echo:5,bigger:21,introduct:[],choic:2,encryptedcharfield:9,name:[],edit:[21,6],drop:5,separ:[6,3],micro:16,screencast:[4,19],submit:2,each:[16,6],debug:[],found:[7,5,16,19],higher:20,hourlyjob:0,mean:4,compil:20,dir2:1,dir1:1,trb:16,my_database_shell_command:2,replac:7,individu:21,hard:16,continu:20,crontab:0,export_email:[],ensur:2,"static":1,our:4,autofield:21,postgresqluuidfield:9,out:[4,5,9,2,17,20],kcachegrind:[],shown:19,referenc:21,encod:[1,5],reload:[21,19],goe:9,open:[17,19],newli:17,unknown:[16,19],content:[],m2m:21,graph_model:[7,5,17],print:[20,12,5,14,19],correct:2,ass:[5,19],model:[],postgr:5,insid:[0,16,17,11,3],migrat:14,create_template_tag:5,situat:20,given:[7,5,17,14,21],standard:[2,5],standalon:21,ajax:19,base:[12,6,10,16,19,7],usabl:3,put:[5,17,3],org:[7,16,17,19],care:21,pyyaml:12,aws_bucket_nam:1,indent:12,couldn:7,appnam:[21,14],simonwillison:16,could:2,traceback:[12,19],openssl:19,keep:[16,17,19],datetimefield:9,turn:7,length:9,place:13,isn:12,my_project_visu:7,charfield:9,app:[5,11,18,3,7,8,21],auth:5,frequent:19,first:[20,6,9,19,3],dont:11,render:[7,17,18,19],shell_plu:[],feel:16,media_root:[1,5],misc:16,number:[20,12,9,19],yourself:[5,19],date:[21,9,17],instruct:[],alreadi:[2,19],done:11,"06d":16,stabl:17,installed_app:[12,17],miss:[2,17],primari:9,dailyjob:0,differ:[5,11,14,16,17,12],rkblog:16,commandlin:11,messag:[12,11],script:[0,5,17,3,8,21],associ:6,interact:[],mkdir:[16,3],system:[12,5,16,17,6],least:[],too:3,accept:19,sqlcreat:[],keyczar:9,recent:16,filter:[6,3],schema:14,shell:[],consol:[],option:[],relationship:21,namespac:[],tool:[5,16,14],copi:[5,11],specifi:[0,11,19,5,16,12,7,13],sync:1,shell_plus_post_import:11,part:[15,5,3],pars:6,haven:5,png:[7,16],sync_s3_prefix:1,enjoi:4,kind:19,target:16,keyword:9,provid:[0,1,10,5,17,19,12],remov:[7,21],structur:[13,1,0,16,5],charact:9,jqueri:[16,18],aws_s3_host:1,reus:19,were:2,minut:4,browser:[5,16,11,19],pre:6,look:[12,5,16],low:9,sync_s3:[],mind:17,ani:[9,11,1,19,16,3,7],dash:7,packag:[0,17,3],expir:[1,5],increment:9,tabl:[],need:[5,11,17,19,7,21],django:[],dozen:4,caus:7,webdata:13,lib:17,gather_profile_stat:[],rout:5,port:19,note:[16,21,19,11,3],also:[5,19,1,6,11,17,12,7],ideal:21,take:[12,21],which:[0,9,19,5,2,11,17,6,7],environ:[12,11,19],noth:19,singl:[7,0,21,5,12],sure:17,distribut:16,clash:21,normal:[12,19],track:[5,17],"\u8fd9\u7bc7\u6587\u6863\u5f53\u7136\u8fd8\u6709\u4e2d\u6587\u7248":4,compress:1,clearer:16,most:[4,17,6],plai:17,deploi:5,create_app:[],pygraphviz:[7,17],"class":[0,10,5,18,21],addr:6,renam:11,url:[5,9],doc:6,clear:5,later:19,request:16,doe:[2,16],pipe:2,ext:11,runserverplus_server_address_port:19,clean:16,latest:[7,17],review:2,dot:[7,5],wsgi:19,shot:19,show:[12,5,18,14],text:[14,6],verbos:[],staleonli:3,syntax:[20,11],directli:[5,1,11,17,6,20,7,21],generate_secret_kei:5,particularli:12,permiss:[2,18,6],inherit:7,rough:15,anywai:6,xml:[5,21],onli:[5,11,1,15,16,6,20,7,21],explicitli:[15,11],locat:16,execut:[0,11,17,19],pretti:17,delet:3,configur:[],activ:[12,5,11,3],written:16,than:[1,5,16,21,12],"public":1,appname_al:21,version:[],arbritrari:3,analyz:16,folder:[1,3],testdata:21,flexibl:[5,21],info:[],get:[],simplest:12,watch:4,becaus:[7,21,19],nativ:9,amazon:1,mainten:5,hotshot:[5,16],progress:[],some_prefix:1,complete_project:16,neither:7,requir:[],layout:7,bar:7,enabl:[1,5,16,18],organ:16,pydot:7,routernam:2,patch:14,related_search_field:18,stuff:5,common:[5,17],contain:[20,2,16,17],through:[4,19],grab:4,dia2django:13,where:[15,20,5,16,13],valid:[16,19],view:[],wiki:[13,16],certif:19,set:[],vobject:17,dump:[12,21],frame:19,knowledg:16,app2:11,malfunct:16,see:[4,19,21,17,12],mandatori:0,result:[9,17],arg:[12,5,3],fail:7,calendar:6,extend:[7,0],best:6,gmail:6,appear:19,statu:14,runserver_plu:[5,19],foreignkeyautocompleteadmin:18,databas:[],someth:15,thumb:16,label:7,enough:[16,19],reset_db:5,between:5,crude:5,drawn:7,awai:5,approach:[5,21],email:[5,18,6],attribut:18,altern:11,verifi:17,assumpt:16,javascript:[1,5],kei:[1,5,21,9,19],web:[1,11,19],xrang:21,job:[],runprofileserv:[],highlight:19,ipython:11,come:[12,16,19],popul:[5,21],both:11,last:6,boto:1,howev:2,against:19,foreign:21,etc:[2,21,6],instanc:21,context:[5,19,3],mani:[5,6],myversionmodel:18,com:[1,16,6,17,4],load:[7,11,21],simpli:19,point:5,schedul:[],inspir:9,create_command:5,pop:19,walk:4,header:[1,5],path:[0,9,16,17,12,21],poll:[21,3],assum:13,quit:[16,19],attende:6,becom:9,evalu:19,coupl:[4,19],dont_load:11,addition:19,shell_plus_model_alias:11,due:2,been:19,json:12,secret:5,much:[],interpret:17,easiest:4,basic:6,monthli:[0,5],addit:[],dure:14,auto_now:9,spit:2,emphas:19,imag:[7,17],resolut:11,great:5,argument:[],foreignkeysearchinput:18,understand:[5,21],unclutt:16,child:21,"catch":5,univers:9,former:11,those:20,"case":7,myproject:[12,11],monthlyjob:0,plain:11,straight:2,mysit:19,modelnam:21,durat:16,defin:[5,16],invok:17,abov:[16,11,19],error:[20,7,16,19],dumpscript:[],loop:21,pack:16,bin:16,stop:2,have:[9,11,3,16,19,20,12],advantag:[5,21],stdout:5,readi:5,site:[5,11,17,18,6],jpg:16,itself:21,s3host:1,linkedin:[],crash:5,revis:7,template_dir:20,"__init__":[21,3],parent:21,incompat:[4,17],develop:[15,16,17,19],grant:[2,6],perform:17,media:[1,16],make:[0,16,5,17],transpar:9,minif:8,same:[9,1,14,3,7,21],eric:4,shorter:9,handl:[9,21],html:7,split:15,sqlite3:[5,14],smileychri:9,document:[],overzeal:16,complet:11,shortuuidfield:9,http:[1,16,17,19,7],screenshot:[16,19],optim:[1,16],cach:[1,5],effect:12,hand:2,moment:5,rais:17,user:[2,5,11,18,6],repopul:[5,21],php:7,typic:19,built:12,"break":[],appropri:1,off:1,bewar:[],older:4,entri:[21,6],well:[20,16,6],sqldiff:[],thought:19,person:[5,6],without:[16,21],logo:16,thi:[],gzip:[1,5],everyth:[15,5],guidelin:4,latter:11,usual:7,comment:16,just:[12,21,19],less:21,excel:[4,16],auto_now_add:9,weekli:[0,5],aspect:19,mysql:[],touch:3,monei:19,validate_templ:[],aws_access_key_id:1,languag:16,holscher:4,project_root:3,now:15,easi:[7,5,21,19],delete_all_pol:3,had:[2,5],except:[12,17,19],blog:[16,11],add:[20,1,19,17,12],book:6,overview:7,input:[18,14],save:[16,9,21],site_media:16,kick:[5,19],build:7,real:[21,14],applic:[0,19,5,14,17,6,20,7,13,21],hover:19,ctrl:16,around:19,format:[],read:[1,6],model_alias:11,know:6,password:[2,5],recurs:21,my_project:7,python2:17,saniti:5,like:[4,0,11,19,16,17,6,20,7],specif:[16,19],deprec:9,should:[15,17,18,19,7,13],manual:0,slugifi:9,server:[5,16,19],collect:4,benefit:21,necessari:3,either:[0,11,17],django_settings_modul:12,output:[7,5,21,12],page:[],www:[7,16],revers:18,everbodi:15,who:5,deal:[],suppli:6,some:[0,11,17,12,7,8,21],self:[10,21,19],intern:16,propos:[],"export":[5,6],instal:[],proper:2,guarante:4,pycon08:6,tablespac:2,all_pol:3,djangoproject:[12,16],lead:7,easili:[2,19],aws_default_acl:1,though:14,definit:5,per:0,passwd:5,suffici:16,exit:[],werkzeug:[5,19],prof:16,foo:[7,18],complic:21,trunk:16,refer:21,object:[5,21,9,3],run:[4,0,19,5,16,3,7,12],importerror:21,word:19,pyopenssl:19,oracl:14,ultim:2,symlink:17,host:[19,17,6],repositori:[4,17],figur:4,post:16,slug:9,handi:19,avatar:18,session:5,about:[15,4,16,6],pypars:7,postgresql:[],troubl:14,column:[7,21,14,6],manag:[4,0,11,19,1,3,10,14,2,16,17,6,20,7,13,8,21,12],drama:21,statement:14,fals:3,goodi:17,approxim:5,sync_s3_rename_gzip_ext:1,outlook:[],own:[16,11,6],digraph:7,pythonpath:[12,17],within:[5,3],admin_gener:5,easy_instal:[],automat:[0,9,5,11,17,19,7],three:11,down:5,describe_form:5,right:[15,5,21,19],empti:1,contrib:[5,18],"import":[],soon:11,your:[12,5,9,11,19,1,3,14,15,2,16,17,18,6,7,13,21],merg:11,autoslugfield:9,git:[4,17],wai:[4,9,14,2,17,7,12],area:19,support:[],question:21,permissionadmin:18,fast:7,custom:[1,11,4],avail:[7,11,17],start:[],appl:6,interfac:[11,21],includ:[],lot:16,clear_cach:5,encrypted_field_keys_dir:9,sync_media_s3_prefix:[],"function":[15,19,3],project:[0,3,5,2,17,12,7,13],head:16,form:[5,8,18],offer:3,function3:11,unambigu:9,link:[],translat:11,line:[7,6,19,3],realli:5,"true":[7,12],bug:[4,17,19],blog_messag:11,reset:[5,21],concaten:8,ipython_argu:11,made:16,evolut:21,happen:[2,19],possibl:[1,11,9,7],"default":[],bucket:1,displai:[5,19],app1:11,directori:[0,9,1,19,5,16,17,3,20,12,13,21],aws_cloudfront_distribut:1,myversionmodeladmin:18,foreignkei:[21,18],autocomplet:18,otherwis:7,problem:19,similar:[12,5,11],app_nam:[13,3],synopsi:[12,0,9,19,1,3,10,5,14,15,2,11,17,18,6,20,7,13,8,21],creat:[0,9,19,3,10,5,2,17,6,7,13,8,21],"abstract":10,dot_pars:7,doesn:11,exist:[16,19],file:[12,0,11,19,1,3,5,2,16,17,18,6,20,7,13,21],home:12,pip:[],template_load:7,variabl:[12,21],mybucket:1,check:[4,5,3,14,17,19,20],probabl:[16,9,21],again:19,profil:[5,16],collid:11,encrypt:9,googl:[],sequenti:3,when:[0,9,19,3,5,15,2,11,6,20,7,21],detail:4,module1:11,field:[],create_job:[0,5],other:[12,19,1,3,14,11,6,20,7,21],collis:9,futur:[1,5,8],rememb:[7,11],test:[1,5,21,12],you:[4,0,9,11,19,3,5,2,16,17,18,6,20,7,13,12],nice:[5,19,6],tmp:[16,19],extern:20,symbol:11,creationdatetimefield:9,meaning:16,releas:[16,17],sql:[2,5,14],svn:[16,19],experienc:5,function2:11,static_root:1,diffset:[12,5],bottom:19,rule:16,print_set:[],portion:2,ignor:[11,21],time:[4,0,11,19,16,17,6,20],minifi:7,backward:17,scroll:19,daili:[0,5]},objtypes:{},objnames:{},filenames:["jobs_scheduling","sync_s3","sqlcreate","runscript","index","command_extensions","export_emails","graph_models","command_extension_ideas","field_extensions","model_extensions","shell_plus","print_settings","create_app","sqldiff","namespace_proposal","runprofileserver","installation_instructions","admin_extensions","runserver_plus","validate_templates","dumpscript"],titles:["Jobs scheduling","sync_s3","sqlcreate","RunScript","Welcome to the django-extensions documentation!","Current Command Extensions","export_emails","Graph models","Ideas for New Command Extensions","Field Extensions","Model extensions","shell_plus","print_settings","create_app","sqldiff","Namespace proposal","RunProfileServer","Installation instructions","Current Admin Extensions","RunServerPlus","validate_templates","dumpscript"],objects:{},titleterms:{code:14,verbos:20,mysql:2,yet:21,validate_templates_extra_template_dir:20,current:[5,10,9,18],how:21,graph:7,configur:[11,19],sourc:19,jobsschedul:0,format:6,python:[4,11],"break":20,ssl:19,"new":8,veri:0,requir:1,introduct:[3,15,2,16,19,12],name:21,dia:13,debug:19,page:0,view:19,set:[20,1,7],runprofileserv:16,idea:8,export_email:6,sampl:13,pass:3,download:17,progress:0,librari:[1,7],kcachegrind:16,what:21,databas:[10,9,14],content:4,version:[4,17],exit:14,"import":11,get:[4,19,3],gener:13,usag:[19,1,3,14,2,18,6,20,7,13],extens:[4,5,9,10,18,8],job:0,address:6,addit:11,postgresql:2,admin:18,interact:[11,19],outlook:6,shell_plu:11,schedul:0,easy_instal:17,instruct:17,runscript:3,instal:17,select:7,from:13,support:[14,6],start:[4,19,3],much:0,includ:20,sqlcreat:2,more:12,shell:11,consol:19,option:[20,1],namespac:15,link:16,templat:7,known:2,vcard:6,info:12,"default":7,work:0,can:21,caveat:21,dumpscript:21,control:17,featur:21,sync_s3:1,argument:3,linkedin:6,tabl:4,pip:17,googl:6,gather_profile_stat:16,runserverplu:19,validate_templ:20,field:9,indic:4,document:4,conflict:21,compat:4,create_app:13,why:21,welcom:4,sqldiff:14,django:4,issu:2,print_set:12,exampl:[1,14,2,18,6,20,7,13],command:[5,8],thi:0,model:[7,10,9],propos:15}})
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/shell_plus.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/shell_plus.html
new file mode 100644
index 0000000..4cdf93c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/shell_plus.html
@@ -0,0 +1,221 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>shell_plus &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="create_app" href="create_app.html" />
+    <link rel="prev" title="Current Admin Extensions" href="admin_extensions.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="create_app.html" title="create_app"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="admin_extensions.html" title="Current Admin Extensions"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="shell-plus">
+<h1>shell_plus<a class="headerlink" href="#shell-plus" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Django shell with autoloading of the apps database models</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="interactive-python-shells">
+<h2>Interactive Python Shells<a class="headerlink" href="#interactive-python-shells" title="Permalink to this headline">¶</a></h2>
+<p>There is support for three different types of interactive python shells.</p>
+<p>IPython:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ ./manage.py shell_plus --ipython
+</pre></div>
+</div>
+<p>BPython:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ ./manage.py shell_plus --bpython
+</pre></div>
+</div>
+<p>Python:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ ./manage.py shell_plus --plain
+</pre></div>
+</div>
+<p>The default resolution order is: bpython, ipython, python.</p>
+<p>You can also set the configuration option SHELL_PLUS to explicitly specify which version you want.</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="c"># Always use IPython for shell_plus</span>
+<span class="n">SHELL_PLUS</span> <span class="o">=</span> <span class="s">&quot;ipython&quot;</span>
+</pre></div>
+</div>
+</div>
+<div class="section" id="configuration">
+<h2>Configuration<a class="headerlink" href="#configuration" title="Permalink to this headline">¶</a></h2>
+<p>Sometimes, models from your own apps and other people&#8217;s apps have colliding names,
+or you may want to completely skip loading an app&#8217;s models. Here are some examples of how to do that.</p>
+<p>Note: These settings are only used inside shell_plus and will not affect your environment.</p>
+<div class="highlight-python"><div class="highlight"><pre># Rename the automatic loaded module Messages in the app blog to blog_messages.
+SHELL_PLUS_MODEL_ALIASES = {&#39;blog&#39;: {&#39;Messages&#39;: &#39;blog_messages&#39;},}
+}
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Dont load the &#39;sites&#39; app, and skip the model &#39;pictures&#39; in the app &#39;blog&#39;
+SHELL_PLUS_DONT_LOAD = [&#39;sites&#39;, &#39;blog.pictures&#39;]
+}
+</pre></div>
+</div>
+<p>You can also combine model_aliases and dont_load.</p>
+<p>It is possible to ignore autoloaded modules when using manage.py, like:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ ./manage.py shell_plus --dont-load app1 --dont-load app2.module1
+</pre></div>
+</div>
+<p>Commandline parameters and settings in the configuration file are merged, so you can
+safely append modules to ignore from the commandline for one-time usage.</p>
+<p>It is possible to use <a class="reference external" href="http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html">IPython Notebook</a>, an interactive Python shell which
+uses a web browser as its user interface, as an alternative shell:</p>
+<div class="highlight-python"><div class="highlight"><pre>$ ./manage.py shell_plus --notebook
+</pre></div>
+</div>
+<p>The Django settings module and database models are auto-loaded into the
+interactive shell&#8217;s global namespace also for IPython Notebook.</p>
+<p>Auto-loading is done by a custom IPython extension which is activated by
+default by passing the
+<tt class="docutils literal"><span class="pre">--ext</span> <span class="pre">django_extensions.management.notebook_extension</span></tt>
+argument to the Notebook.  If you need to pass custom options to the IPython
+Notebook, you can override the default options in your Django settings using
+the <tt class="docutils literal"><span class="pre">IPYTHON_ARGUMENTS</span></tt> setting.  For example:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="n">IPYTHON_ARGUMENTS</span> <span class="o">=</span> <span class="p">[</span>
+    <span class="s">&#39;--ext&#39;</span><span class="p">,</span> <span class="s">&#39;django_extensions.management.notebook_extension&#39;</span><span class="p">,</span>
+    <span class="s">&#39;--ext&#39;</span><span class="p">,</span> <span class="s">&#39;myproject.notebook_extension&#39;</span><span class="p">,</span>
+    <span class="s">&#39;--debug&#39;</span><span class="p">,</span>
+<span class="p">]</span>
+</pre></div>
+</div>
+<p>To activate auto-loading, remember to either include the django-extensions&#8217; default
+notebook extension or copy its auto-loading code into your own extension.</p>
+<p>Note that the IPython Notebook feature doesn&#8217;t currently honor the
+<tt class="docutils literal"><span class="pre">--dont-load</span></tt> option.</p>
+</div>
+<div class="section" id="additional-imports">
+<h2>Additional Imports<a class="headerlink" href="#additional-imports" title="Permalink to this headline">¶</a></h2>
+<p>In addition to importing the models you can specify other items to import by default.
+These are specified in SHELL_PLUS_PRE_IMPORTS and SHELL_PLUS_POST_IMPORTS. The former is imported
+before any other imports (such as the default models import) and the latter is imported after any
+other imports. Both have similar syntax. So in your settings.py file:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="n">SHELL_PLUS_PRE_IMPORTS</span> <span class="o">=</span> <span class="p">(</span>
+    <span class="p">(</span><span class="s">&#39;module.submodule1&#39;</span><span class="p">,</span> <span class="p">(</span><span class="s">&#39;class1&#39;</span><span class="p">,</span> <span class="s">&#39;function2&#39;</span><span class="p">)),</span>
+    <span class="p">(</span><span class="s">&#39;module.submodule2&#39;</span><span class="p">,</span> <span class="s">&#39;function3&#39;</span><span class="p">),</span>
+    <span class="p">(</span><span class="s">&#39;module.submodule3&#39;</span><span class="p">,</span> <span class="s">&#39;*&#39;</span><span class="p">),</span>
+    <span class="s">&#39;module.submodule4&#39;</span>
+<span class="p">)</span>
+</pre></div>
+</div>
+<p>The above example would directly translate to the following python code which would be executed before
+the automatic imports:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">module.submodule1</span> <span class="kn">import</span> <span class="n">class1</span><span class="p">,</span> <span class="n">function2</span>
+<span class="kn">from</span> <span class="nn">module.submodule2</span> <span class="kn">import</span> <span class="n">function3</span>
+<span class="kn">from</span> <span class="nn">module.submodule3</span> <span class="kn">import</span> <span class="o">*</span>
+<span class="kn">import</span> <span class="nn">module.submodule4</span>
+</pre></div>
+</div>
+<p>These symbols will be available as soon as the shell starts.</p>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">shell_plus</a><ul>
+<li><a class="reference internal" href="#interactive-python-shells">Interactive Python Shells</a></li>
+<li><a class="reference internal" href="#configuration">Configuration</a></li>
+<li><a class="reference internal" href="#additional-imports">Additional Imports</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="admin_extensions.html"
+                        title="previous chapter">Current Admin Extensions</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="create_app.html"
+                        title="next chapter">create_app</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/shell_plus.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="create_app.html" title="create_app"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="admin_extensions.html" title="Current Admin Extensions"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sqlcreate.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sqlcreate.html
new file mode 100644
index 0000000..0b4ebe1
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sqlcreate.html
@@ -0,0 +1,172 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>sqlcreate &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="validate_templates" href="validate_templates.html" />
+    <link rel="prev" title="sqldiff" href="sqldiff.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="validate_templates.html" title="validate_templates"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="sqldiff.html" title="sqldiff"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="sqlcreate">
+<h1>sqlcreate<a class="headerlink" href="#sqlcreate" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Helps you setup your database(s) more easily</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="introduction">
+<h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
+<p>Stop creating databases by hand.  Your settings.py file already contains the correct
+information, so DRY.</p>
+</div>
+<div class="section" id="usage">
+<h2>Usage<a class="headerlink" href="#usage" title="Permalink to this headline">¶</a></h2>
+<blockquote>
+<div>$ python manage.py sqlcreate [&#8211;router=&lt;routername&gt;] | &lt;my_database_shell_command&gt;</div></blockquote>
+<p>It will spit out SQL which you can review (if you want). Ultimately you want to
+pipe it into the database shell command of your choice.</p>
+<p>If there were a good way to ensure that the user in the database settings had the
+proper permissions, we could submit the commands straight to the database.
+However, due to the nature of this portion of the project setup, that will never happen.</p>
+</div>
+<div class="section" id="example">
+<h2>Example<a class="headerlink" href="#example" title="Permalink to this headline">¶</a></h2>
+<div class="section" id="postgresql">
+<h3>PostgreSQL<a class="headerlink" href="#postgresql" title="Permalink to this headline">¶</a></h3>
+<blockquote>
+<div>$ ./manage.py sqlcreate [&#8211;router=&lt;routername&gt;] | psql -U &lt;db_administrator&gt; -W</div></blockquote>
+</div>
+<div class="section" id="mysql">
+<h3>MySQL<a class="headerlink" href="#mysql" title="Permalink to this headline">¶</a></h3>
+<blockquote>
+<div>$ ./manage.py sqlcreate [&#8211;router=&lt;routername&gt;] | mysql -u &lt;db_administrator&gt; -p</div></blockquote>
+</div>
+</div>
+<div class="section" id="known-issues">
+<h2>Known Issues<a class="headerlink" href="#known-issues" title="Permalink to this headline">¶</a></h2>
+<blockquote>
+<div><ul class="simple">
+<li>CREATE DATABASE is not SQL standard so might not work everywhere.</li>
+<li>When using fallback user is not created and password is not set.
+But it does try to do a GRANT to the database user.</li>
+<li>Missing options for tablespaces, etc.</li>
+</ul>
+</div></blockquote>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">sqlcreate</a><ul>
+<li><a class="reference internal" href="#introduction">Introduction</a></li>
+<li><a class="reference internal" href="#usage">Usage</a></li>
+<li><a class="reference internal" href="#example">Example</a><ul>
+<li><a class="reference internal" href="#postgresql">PostgreSQL</a></li>
+<li><a class="reference internal" href="#mysql">MySQL</a></li>
+</ul>
+</li>
+<li><a class="reference internal" href="#known-issues">Known Issues</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="sqldiff.html"
+                        title="previous chapter">sqldiff</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="validate_templates.html"
+                        title="next chapter">validate_templates</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/sqlcreate.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="validate_templates.html" title="validate_templates"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="sqldiff.html" title="sqldiff"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sqldiff.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sqldiff.html
new file mode 100644
index 0000000..fca41f2
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sqldiff.html
@@ -0,0 +1,161 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>sqldiff &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="sqlcreate" href="sqlcreate.html" />
+    <link rel="prev" title="sync_s3" href="sync_s3.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="sqlcreate.html" title="sqlcreate"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="sync_s3.html" title="sync_s3"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="sqldiff">
+<h1>sqldiff<a class="headerlink" href="#sqldiff" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Prints the ALTER TABLE statements for the given appnames.</td>
+</tr>
+</tbody>
+</table>
+<p>Django command that scans all models for the given appnames and compares
+their database schema with the real database tables.</p>
+<p>It indicates how columns in the database are different from the SQL that would
+be generated by Django. This command is not a database migration tool, though
+it might certainly be of help during migrations. Its purpose is to show the
+current differences as a way to check or debug your models compared to
+the real database tables and columns.</p>
+<div class="section" id="supported-databases">
+<h2>Supported Databases<a class="headerlink" href="#supported-databases" title="Permalink to this headline">¶</a></h2>
+<p>Currently the following databases are supported:</p>
+<ul class="simple">
+<li>PostgreSQL</li>
+<li>Sqlite3</li>
+<li>MySQL</li>
+<li>Oracle</li>
+</ul>
+<p>Patches to support other databases are welcome! :-)</p>
+</div>
+<div class="section" id="exit-codes">
+<h2>Exit Codes<a class="headerlink" href="#exit-codes" title="Permalink to this headline">¶</a></h2>
+<p>Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.</p>
+</div>
+<div class="section" id="example-usage">
+<h2>Example Usage<a class="headerlink" href="#example-usage" title="Permalink to this headline">¶</a></h2>
+<div class="highlight-python"><div class="highlight"><pre># View SQL differences for all installed applications
+$ ./manage.py sqldiff -a
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># View SQL differences for all installed applications using text instead of SQL
+$ ./manage.py sqldiff -a -t
+</pre></div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">sqldiff</a><ul>
+<li><a class="reference internal" href="#supported-databases">Supported Databases</a></li>
+<li><a class="reference internal" href="#exit-codes">Exit Codes</a></li>
+<li><a class="reference internal" href="#example-usage">Example Usage</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="sync_s3.html"
+                        title="previous chapter">sync_s3</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="sqlcreate.html"
+                        title="next chapter">sqlcreate</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/sqldiff.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="sqlcreate.html" title="sqlcreate"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="sync_s3.html" title="sync_s3"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sync_s3.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sync_s3.html
new file mode 100644
index 0000000..df06c4e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/sync_s3.html
@@ -0,0 +1,190 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>sync_s3 &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="next" title="sqldiff" href="sqldiff.html" />
+    <link rel="prev" title="RunServerPlus" href="runserver_plus.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="sqldiff.html" title="sqldiff"
+             accesskey="N">next</a> |</li>
+        <li class="right" >
+          <a href="runserver_plus.html" title="RunServerPlus"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="sync-s3">
+<h1>sync_s3<a class="headerlink" href="#sync-s3" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">sync your MEDIA_ROOT and STATIC_ROOT folders to S3</td>
+</tr>
+</tbody>
+</table>
+<p>Django command that scans all files in your settings.MEDIA_ROOT and
+settings.STATIC_ROOT folders, then uploads them to S3 with the same
+directory structure.</p>
+<p>This command can optionally do the following but it is off by default:</p>
+<blockquote>
+<div><ul class="simple">
+<li>gzip compress any CSS and Javascript files it finds and adds the
+appropriate &#8216;Content-Encoding&#8217; header.</li>
+<li>set a far future &#8216;Expires&#8217; header for optimal caching.</li>
+<li>upload only media or static files.</li>
+<li>use any other provider compatible with Amazon S3.</li>
+<li>set other than &#8216;public-read&#8217; ACL.</li>
+</ul>
+</div></blockquote>
+<div class="section" id="example-usage">
+<h2>Example Usage<a class="headerlink" href="#example-usage" title="Permalink to this headline">¶</a></h2>
+<div class="highlight-python"><div class="highlight"><pre># Upload files to S3 into the bucket &#39;mybucket&#39;
+$ ./manage.py sync_s3 mybucket
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Upload files to S3 into the bucket &#39;mybucket&#39; and enable gzipping CSS/JS files and setting of a far future expires header
+$ ./manage.py sync_s3 mybucket --gzip --expires
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Upload only media files to S3 into the bucket &#39;mybucket&#39;
+$ ./manage.py sync_s3 mybucket  --media-only  # or --static-only
+</pre></div>
+</div>
+<div class="highlight-python"><div class="highlight"><pre># Upload only media files to a S3 compatible provider into the bucket &#39;mybucket&#39; and set private file ACLs
+$ ./manage.py sync_s3 mybucket  --media-only  --s3host=cs.example.com --acl=private
+</pre></div>
+</div>
+</div>
+<div class="section" id="required-libraries-and-settings">
+<h2>Required libraries and settings<a class="headerlink" href="#required-libraries-and-settings" title="Permalink to this headline">¶</a></h2>
+<p>This management command requires the boto library and was tested with version
+1.4c:</p>
+<blockquote>
+<div><a class="reference external" href="https://github.com/boto/boto">https://github.com/boto/boto</a></div></blockquote>
+<p>It also requires an account with Amazon Web Services (AWS) and the AWS S3 keys.
+Bucket name is required and cannot be empty.
+The keys and bucket name are added to your settings.py file, for example:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="c"># settings.py</span>
+<span class="n">AWS_ACCESS_KEY_ID</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
+<span class="n">AWS_SECRET_ACCESS_KEY</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
+<span class="n">AWS_BUCKET_NAME</span> <span class="o">=</span> <span class="s">&#39;bucket&#39;</span>
+</pre></div>
+</div>
+</div>
+<div class="section" id="optional-settings">
+<h2>Optional settings<a class="headerlink" href="#optional-settings" title="Permalink to this headline">¶</a></h2>
+<p>It is possible to customize sync_s3 directly from django settings file, for example:</p>
+<div class="highlight-python"><div class="highlight"><pre><span class="c"># settings.py</span>
+<span class="n">AWS_S3_HOST</span> <span class="o">=</span> <span class="s">&#39;cs.example.com&#39;</span>
+<span class="n">AWS_DEFAULT_ACL</span> <span class="o">=</span> <span class="s">&#39;private&#39;</span>
+<span class="n">SYNC_S3_PREFIX</span> <span class="o">=</span> <span class="s">&#39;some_prefix&#39;</span>
+<span class="n">FILTER_LIST</span> <span class="o">=</span> <span class="s">&#39;dir1, dir2&#39;</span>
+<span class="n">AWS_CLOUDFRONT_DISTRIBUTION</span> <span class="o">=</span> <span class="s">&#39;E27LVI50CSW06W&#39;</span>
+<span class="n">SYNC_S3_RENAME_GZIP_EXT</span> <span class="o">=</span> <span class="s">&#39;.gz&#39;</span>
+</pre></div>
+</div>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">sync_s3</a><ul>
+<li><a class="reference internal" href="#example-usage">Example Usage</a></li>
+<li><a class="reference internal" href="#required-libraries-and-settings">Required libraries and settings</a></li>
+<li><a class="reference internal" href="#optional-settings">Optional settings</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="runserver_plus.html"
+                        title="previous chapter">RunServerPlus</a></p>
+  <h4>Next topic</h4>
+  <p class="topless"><a href="sqldiff.html"
+                        title="next chapter">sqldiff</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/sync_s3.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="sqldiff.html" title="sqldiff"
+             >next</a> |</li>
+        <li class="right" >
+          <a href="runserver_plus.html" title="RunServerPlus"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/validate_templates.html b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/validate_templates.html
new file mode 100644
index 0000000..2ca5285
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/_build/html/validate_templates.html
@@ -0,0 +1,158 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
+  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+
+
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+    
+    <title>validate_templates &mdash; django-extensions 1.4.6 documentation</title>
+    
+    <link rel="stylesheet" href="_static/default.css" type="text/css" />
+    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
+    
+    <script type="text/javascript">
+      var DOCUMENTATION_OPTIONS = {
+        URL_ROOT:    './',
+        VERSION:     '1.4.6',
+        COLLAPSE_INDEX: false,
+        FILE_SUFFIX: '.html',
+        HAS_SOURCE:  true
+      };
+    </script>
+    <script type="text/javascript" src="_static/jquery.js"></script>
+    <script type="text/javascript" src="_static/underscore.js"></script>
+    <script type="text/javascript" src="_static/doctools.js"></script>
+    <link rel="top" title="django-extensions 1.4.6 documentation" href="index.html" />
+    <link rel="prev" title="sqlcreate" href="sqlcreate.html" /> 
+  </head>
+  <body>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             accesskey="I">index</a></li>
+        <li class="right" >
+          <a href="sqlcreate.html" title="sqlcreate"
+             accesskey="P">previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>  
+
+    <div class="document">
+      <div class="documentwrapper">
+        <div class="bodywrapper">
+          <div class="body">
+            
+  <div class="section" id="validate-templates">
+<h1>validate_templates<a class="headerlink" href="#validate-templates" title="Permalink to this headline">¶</a></h1>
+<table class="docutils field-list" frame="void" rules="none">
+<col class="field-name" />
+<col class="field-body" />
+<tbody valign="top">
+<tr class="field-odd field"><th class="field-name">synopsis:</th><td class="field-body">Checks templates on syntax or compile errors.</td>
+</tr>
+</tbody>
+</table>
+<div class="section" id="options">
+<h2>Options<a class="headerlink" href="#options" title="Permalink to this headline">¶</a></h2>
+<div class="section" id="verbosity">
+<h3>verbosity<a class="headerlink" href="#verbosity" title="Permalink to this headline">¶</a></h3>
+<p>A higher verbosity level will print out all the files that are processed
+instead of only the ones that contain errors.</p>
+</div>
+<div class="section" id="break">
+<h3>break<a class="headerlink" href="#break" title="Permalink to this headline">¶</a></h3>
+<p>Do not continue scanning other templates after the first failure.</p>
+</div>
+<div class="section" id="includes">
+<h3>includes<a class="headerlink" href="#includes" title="Permalink to this headline">¶</a></h3>
+<p>Use -i (can be used multiple times) to add directories to the TEMPLATE_DIRS.</p>
+</div>
+</div>
+<div class="section" id="settings">
+<h2>Settings<a class="headerlink" href="#settings" title="Permalink to this headline">¶</a></h2>
+<div class="section" id="validate-templates-extra-template-dirs">
+<h3>VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS<a class="headerlink" href="#validate-templates-extra-template-dirs" title="Permalink to this headline">¶</a></h3>
+<p>You can use <cite>VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS</cite> to include a number of template
+dirs by default directly from the settings file. This can be useful for situations
+where TEMPLATE_DIRS is dynamically generated or switched in middleware, or when you
+have other template dirs for external applications like celery, and you want to
+check those as well.</p>
+</div>
+</div>
+<div class="section" id="usage-example">
+<h2>Usage Example<a class="headerlink" href="#usage-example" title="Permalink to this headline">¶</a></h2>
+<blockquote>
+<div>./manage.py validate_templates</div></blockquote>
+</div>
+</div>
+
+
+          </div>
+        </div>
+      </div>
+      <div class="sphinxsidebar">
+        <div class="sphinxsidebarwrapper">
+  <h3><a href="index.html">Table Of Contents</a></h3>
+  <ul>
+<li><a class="reference internal" href="#">validate_templates</a><ul>
+<li><a class="reference internal" href="#options">Options</a><ul>
+<li><a class="reference internal" href="#verbosity">verbosity</a></li>
+<li><a class="reference internal" href="#break">break</a></li>
+<li><a class="reference internal" href="#includes">includes</a></li>
+</ul>
+</li>
+<li><a class="reference internal" href="#settings">Settings</a><ul>
+<li><a class="reference internal" href="#validate-templates-extra-template-dirs">VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS</a></li>
+</ul>
+</li>
+<li><a class="reference internal" href="#usage-example">Usage Example</a></li>
+</ul>
+</li>
+</ul>
+
+  <h4>Previous topic</h4>
+  <p class="topless"><a href="sqlcreate.html"
+                        title="previous chapter">sqlcreate</a></p>
+  <h3>This Page</h3>
+  <ul class="this-page-menu">
+    <li><a href="_sources/validate_templates.txt"
+           rel="nofollow">Show Source</a></li>
+  </ul>
+<div id="searchbox" style="display: none">
+  <h3>Quick search</h3>
+    <form class="search" action="search.html" method="get">
+      <input type="text" name="q" />
+      <input type="submit" value="Go" />
+      <input type="hidden" name="check_keywords" value="yes" />
+      <input type="hidden" name="area" value="default" />
+    </form>
+    <p class="searchtip" style="font-size: 90%">
+    Enter search terms or a module, class or function name.
+    </p>
+</div>
+<script type="text/javascript">$('#searchbox').show(0);</script>
+        </div>
+      </div>
+      <div class="clearer"></div>
+    </div>
+    <div class="related">
+      <h3>Navigation</h3>
+      <ul>
+        <li class="right" style="margin-right: 10px">
+          <a href="genindex.html" title="General Index"
+             >index</a></li>
+        <li class="right" >
+          <a href="sqlcreate.html" title="sqlcreate"
+             >previous</a> |</li>
+        <li><a href="index.html">django-extensions 1.4.6 documentation</a> &raquo;</li> 
+      </ul>
+    </div>
+    <div class="footer">
+        &copy; Copyright Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013 Michael Trier, Bas van Oostveen and contributors.
+      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.2.3.
+    </div>
+  </body>
+</html>
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/admin_extensions.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/admin_extensions.rst
new file mode 100644
index 0000000..599558f
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/admin_extensions.rst
@@ -0,0 +1,53 @@
+Current Admin Extensions
+========================
+
+:synopsis: Current Field Extensions
+
+
+* *ForeignKeyAutocompleteAdmin* - ForeignKeyAutocompleteAdmin will enable the
+  admin app to show ForeignKey fields with an search input field. The search
+  field is rendered by the ForeignKeySearchInput form widget and uses jQuery
+  to do configureable autocompletion.
+
+
+Example Usage
+-------------
+
+To enable the Admin Autocomplete you can follow this code example
+in your admin.py file:
+
+::
+
+    from django.contrib import admin
+    from foo.models import Permission
+    from django_extensions.admin import ForeignKeyAutocompleteAdmin
+
+
+    class PermissionAdmin(ForeignKeyAutocompleteAdmin):
+        # User is your FK attribute in your model
+        # first_name and email are attributes to search for in the FK model
+        related_search_fields = {
+           'user': ('first_name', 'email'),
+        }
+
+        fields = ('user', 'avatar', 'is_active')
+
+        ...
+
+    admin.site.register(Permission, PermissionAdmin)
+
+
+If you are using django-reversion you should follow this code example:
+
+::
+
+    from django.contrib import admin
+    from foo.models import MyVersionModel
+    from reversion.admin import VersionAdmin
+    from django_extensions.admin import ForeignKeyAutocompleteAdmin
+
+
+    class MyVersionModelAdmin(VersionAdmin, ForeignKeyAutocompleteAdmin):
+        ...
+
+    admin.site.register(MyVersionModel, MyVersionModelAdmin)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/command_extension_ideas.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/command_extension_ideas.rst
new file mode 100644
index 0000000..c33742b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/command_extension_ideas.rst
@@ -0,0 +1,7 @@
+Ideas for New Command Extensions
+================================
+
+:synopsis: Here are some ideas for some future command extensions.
+
+* create form/manager for App
+* CSS and JS concatenation and minification scripts
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/command_extensions.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/command_extensions.rst
new file mode 100644
index 0000000..aa28e7b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/command_extensions.rst
@@ -0,0 +1,108 @@
+Current Command Extensions
+==========================
+
+:synopsis: Current Command Extensions
+
+* :doc:`shell_plus` - An enhanced version of the Django shell.  It will autoload
+  all your models making it easy to work with the ORM right away.
+
+* *admin_generator* - Generate automatic Django Admin classes by providing an app name. Outputs
+  source code at STDOUT.
+
+* `create_app`_ - Creates an application directory structure for the specified
+  app name.  This command allows you to specify the --template option where you
+  can indicate a template directory structure to use as your default.
+
+* *create_command* - Creates a command extension directory structure within the
+  specified application.  This makes it easy to get started with adding a
+  command extension to your application.
+
+* *create_template_tags* - Creates a template tag directory structure within the
+  specified application.
+
+* *create_jobs* - Creates a Django jobs command directory structure for the
+  given app name in the current directory.  This is part of the impressive jobs
+  system.
+
+* *create_superuser* - Makes it easy to create a superuser for the
+  django.contrib.auth.
+
+* *clear_cache* - Clear django cache, useful when testing or deploying.
+
+* *describe_form* - Used to display a form definition for a model. Copy and
+  paste the contents into your forms.py and you're ready to go.
+
+* :doc:`dumpscript <dumpscript>` - Generates a Python script that will
+  repopulate the database using objects. The advantage of this approach is that
+  it is easy to understand, and more flexible than directly populating the
+  database, or using XML.
+
+* `export_emails`_ - export the email addresses for your
+  users in one of many formats.  Currently supports Address, Google, Outlook,
+  LinkedIn, and VCard formats.
+
+* *generate_secret_key* - Creates a new secret key that you can put in your
+  settings.py module.
+
+* `graph_models`_ - Creates a GraphViz_ dot file.  You need
+  to send this output to a file yourself.  Great for graphing your models. Pass
+  multiple application names to combine all the models into a single dot file.
+
+* *mail_debug* - Starts a mail server which echos out the contents of the email
+  instead of sending it.
+
+* *passwd* - Makes it easy to reset a user's password.
+
+* `print_settings`_ - Similar to ``diffsettings`` but shows *selected*
+  active Django settings or *all* if no args passed.
+
+* *print_user_for_session* - Print the user information for the provided
+  session key. this is very helpful when trying to track down the person who
+  experienced a site crash.
+
+* *drop_test_database* - Drops the test database. Usefull when running Django
+  test via some automated system (BuildBot, Jenkins, etc) and making sure that
+  the test database is always dropped at the end.
+
+* *reset_db* - Resets a database (currently sqlite3, mysql, postgres). Uses "DROP DATABASE" and "CREATE DATABASE".
+
+* *runjob* - Run a single maintenance job.  Part of the jobs system.
+
+* *runjobs* - Runs scheduled maintenance jobs. Specify hourly, daily, weekly,
+  monthly.  Part of the jobs system.
+
+* :doc:`runprofileserver <runprofileserver>` - Starts *runserver* with hotshot/profiling tools enabled.
+  I haven't had a chance to check this one out, but it looks really cool.
+
+* `runscript`_ - Runs a script in the django context.
+
+* `runserver_plus`_ - The standard runserver stuff but with
+  the Werkzeug debugger baked in. Requires Werkzeug_. This one kicks ass.
+
+* *set_fake_passwords* -  Sets all user passwords to a common value (*password* by default). *DEBUG only*.
+
+* *show_urls* - Displays the url routes that are defined in your project. Very
+  crude at this point.
+
+* :doc:`sqldiff` - Prints the (approximated) difference between an app's models and
+  what is in the database.  This is very nice, but also very experimental at
+  the moment.  It can not catch everything but it's a great sanity check.
+
+* :doc:`sqlcreate` - Generates the SQL to create your database for you, as specified
+  in settings.py.
+
+* `sync_s3`_ - Copies files found in settings.MEDIA_ROOT to S3.
+  Optionally can also gzip CSS and Javascript files and set the
+  Content-Encoding header, and also set a far future expires header for browser
+  caching.
+
+
+.. _`create_app`: create_app.html
+.. _`export_emails`: export_emails.html
+.. _`graph_models`: graph_models.html
+.. _`print_settings`: print_settings.html
+.. _`runscript`: runscript.html
+.. _`runserver_plus`: runserver_plus.html
+.. _`sync_s3`: sync_s3.html
+.. _GraphViz: http://www.graphviz.org/
+.. _Werkzeug: http://werkzeug.pocoo.org/
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/command_signals.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/command_signals.rst
new file mode 100644
index 0000000..9609703
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/command_signals.rst
@@ -0,0 +1,91 @@
+Command Signals
+===============
+
+:synopsis: Signals fired before and after a command is executed.
+
+A signal is thrown pre/post each management command allowing your application 
+to hook into each commands execution.
+
+
+Basic Example
+-------------
+
+An example hooking into show_templatetags:
+
+::
+
+  from django_extensions.management.signals import pre_command, post_command
+  from django_extensions.management.commands.show_templatetags import Command
+  
+  def pre_receiver(sender, args, kwargs):
+    # I'm executed prior to the management command
+  
+  def post_receiver(sender, args, kwargs, outcome):
+    # I'm executed after the management command
+  
+  pre_command.connect(pre_receiver, Command)
+  post_command.connect(post_receiver, Command)
+
+
+Custom Permissions For All Models
+---------------------------------
+ 
+You can use the post signal to hook into the ``update_permissions`` command so that 
+you can add your own permissions to each model.
+ 
+For instance, lets say you want to add ``list`` and ``view`` permissions to 
+each model. You could do this by adding them to the ``permissions`` tuple inside
+your models ``Meta`` class but this gets pretty tedious.
+ 
+An easier solution is to hook into the ``update_permissions`` call, as follows;
+ 
+::
+
+  from django.db.models.signals import post_syncdb
+  from django.contrib.contenttypes.models import ContentType
+  from django.contrib.auth.models import Permission
+  from django_extensions.management.signals import post_command
+  from django_extensions.management.commands.update_permissions import Command as UpdatePermissionsCommand
+  
+  def add_permissions(sender, **kwargs):
+    """
+    Add view and list permissions to all content types.
+    """
+    # for each of our content types
+    for content_type in ContentType.objects.all():
+      
+      for action in ['view', 'list']:
+        # build our permission slug
+        codename = "%s_%s" % (action, content_type.model)
+        
+        try:
+          Permission.objects.get(content_type=content_type, codename=codename)
+          # Already exists, ignore
+        except Permission.DoesNotExist:
+          # Doesn't exist, add it
+          Permission.objects.create(content_type=content_type,
+                        codename=codename,
+                        name="Can %s %s" % (action, content_type.name))
+          print "Added %s permission for %s" % (action, content_type.name)
+  post_command.connect(add_permissions, UpdatePermissionsCommand)
+ 
+Each time ``update_permissions`` is called ``add_permissions`` will be called which 
+ensures there are view and list permissions to all content types.
+
+
+Using pre/post signals on your own commands
+-------------------------------------------
+ 
+The signals are implemented using a decorator on the handle method of a management command, 
+thus using this functionality in your own application is trivial:
+
+::
+
+  from django_extensions.management.utils import signalcommand
+   
+  class Command(BaseCommand):
+   
+    @signalcommand
+    def handle(self, *args, **kwargs):
+      ...
+      ...
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/conf.py b/desktop/core/ext-py/django-extensions-1.5.0/docs/conf.py
new file mode 100644
index 0000000..59f04eb
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/conf.py
@@ -0,0 +1,194 @@
+# -*- coding: utf-8 -*-
+#
+# django-extensions documentation build configuration file, created by
+# sphinx-quickstart on Wed Apr  1 20:39:40 2009.
+#
+# This file is execfile()d with the current directory set to its containing dir.
+#
+# Note that not all possible configuration values are present in this
+# autogenerated file.
+#
+# All configuration values have a default; values that are commented out
+# serve to show the default.
+
+#import sys, os
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute, like shown here.
+#sys.path.append(os.path.abspath('.'))
+
+# -- General configuration -----------------------------------------------------
+
+# Add any Sphinx extension module names here, as strings. They can be extensions
+# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
+extensions = []
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# The suffix of source filenames.
+source_suffix = '.rst'
+
+# The encoding of source files.
+#source_encoding = 'utf-8'
+
+# The master toctree document.
+master_doc = 'index'
+
+# General information about the project.
+project = u'django-extensions'
+copyright = u'Copyright (C) 2008-2015 Michael Trier, Bas van Oostveen and contributors'
+
+# The version info for the project you're documenting, acts as replacement for
+# |version| and |release|, also used in various other places throughout the
+# built documents.
+#
+# The short X.Y version.
+version = '1.5'
+# The full version, including alpha/beta/rc tags.
+release = '1.5.0'
+
+# The language for content autogenerated by Sphinx. Refer to documentation
+# for a list of supported languages.
+#language = None
+
+# There are two options for replacing |today|: either, you set today to some
+# non-false value, then it is used:
+#today = ''
+# Else, today_fmt is used as the format for a strftime call.
+#today_fmt = '%B %d, %Y'
+
+# List of documents that shouldn't be included in the build.
+#unused_docs = []
+
+# List of directories, relative to source directory, that shouldn't be searched
+# for source files.
+exclude_trees = ['_build']
+
+# The reST default role (used for this markup: `text`) to use for all documents.
+#default_role = None
+
+# If true, '()' will be appended to :func: etc. cross-reference text.
+#add_function_parentheses = True
+
+# If true, the current module name will be prepended to all description
+# unit titles (such as .. function::).
+#add_module_names = True
+
+# If true, sectionauthor and moduleauthor directives will be shown in the
+# output. They are ignored by default.
+#show_authors = False
+
+# The name of the Pygments (syntax highlighting) style to use.
+pygments_style = 'sphinx'
+
+# A list of ignored prefixes for module index sorting.
+#modindex_common_prefix = []
+
+
+# -- Options for HTML output ---------------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  Major themes that come with
+# Sphinx are currently 'default' and 'sphinxdoc'.
+html_theme = 'default'
+
+# Theme options are theme-specific and customize the look and feel of a theme
+# further.  For a list of options available for each theme, see the
+# documentation.
+#html_theme_options = {}
+
+# Add any paths that contain custom themes here, relative to this directory.
+#html_theme_path = []
+
+# The name for this set of Sphinx documents.  If None, it defaults to
+# "<project> v<release> documentation".
+#html_title = None
+
+# A shorter title for the navigation bar.  Default is the same as html_title.
+#html_short_title = None
+
+# The name of an image file (relative to this directory) to place at the top
+# of the sidebar.
+#html_logo = None
+
+# The name of an image file (within the static path) to use as favicon of the
+# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
+# pixels large.
+#html_favicon = None
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
+
+# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
+# using the given strftime format.
+#html_last_updated_fmt = '%b %d, %Y'
+
+# If true, SmartyPants will be used to convert quotes and dashes to
+# typographically correct entities.
+#html_use_smartypants = True
+
+# Custom sidebar templates, maps document names to template names.
+#html_sidebars = {}
+
+# Additional templates that should be rendered to pages, maps page names to
+# template names.
+#html_additional_pages = {}
+
+# If false, no module index is generated.
+#html_use_modindex = True
+
+# If false, no index is generated.
+#html_use_index = True
+
+# If true, the index is split into individual pages for each letter.
+#html_split_index = False
+
+# If true, links to the reST sources are added to the pages.
+#html_show_sourcelink = True
+
+# If true, an OpenSearch description file will be output, and all pages will
+# contain a <link> tag referring to it.  The value of this option must be the
+# base URL from which the finished HTML is served.
+#html_use_opensearch = ''
+
+# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
+#html_file_suffix = ''
+
+# Output file base name for HTML help builder.
+htmlhelp_basename = 'django-extensionsdoc'
+
+
+# -- Options for LaTeX output --------------------------------------------------
+
+# The paper size ('letter' or 'a4').
+#latex_paper_size = 'letter'
+
+# The font size ('10pt', '11pt' or '12pt').
+#latex_font_size = '10pt'
+
+# Grouping the document tree into LaTeX files. List of tuples
+# (source start file, target name, title, author, documentclass [howto/manual]).
+latex_documents = [(
+    'index', 'django-extensions.tex', u'django-extensions Documentation',
+    u'Michael Trier, Bas van Oostveen, and contributors', 'manual'
+), ]
+
+# The name of an image file (relative to this directory) to place at the top of
+# the title page.
+#latex_logo = None
+
+# For "manual" documents, if this is true, then toplevel headings are parts,
+# not chapters.
+#latex_use_parts = False
+
+# Additional stuff for the LaTeX preamble.
+#latex_preamble = ''
+
+# Documents to append as an appendix to all manuals.
+#latex_appendices = []
+
+# If false, no module index is generated.
+#latex_use_modindex = True
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/create_app.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/create_app.rst
new file mode 100644
index 0000000..83fbff4
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/create_app.rst
@@ -0,0 +1,41 @@
+create_app
+==========
+
+:synopsis: Creates an application directory structure for the specified application name.
+
+This command allows you to specify the --template option where you can indicate
+a template directory structure to use as your default.
+
+The --diagram option generates the models.py and admin.py from a .dia file.
+
+
+Example Usage
+-------------
+
+All examples assume your current directory is the project directory and
+settings.py is under it.
+
+::
+
+  # Get command help
+  ./manage.py create_app --help
+
+::
+
+  # Generate models.py and admin.py from [APP_NAME].dia file. This file should
+  # be placed in the settings.py directory.
+  ./manage.py create_app -d APP_NAME
+
+
+Example generated from sample.dia
+---------------------------------
+
+::
+
+  ./manage.py create_app --diagram=sample.dia webdata
+
+-d switch or --diagram option use dia2django_ to generate models.py and is
+better documented in `django wiki`_.
+
+.. _dia2django: https://svn.devnull.li/main/pythonware/dia2django/trunk/doc/
+.. _`django wiki`: http://code.djangoproject.com/wiki/Dia2Django
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/creating_release.txt b/desktop/core/ext-py/django-extensions-1.5.0/docs/creating_release.txt
new file mode 100644
index 0000000..0d0277d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/creating_release.txt
@@ -0,0 +1,47 @@
+Creating a release
+==================
+
+:synopsis: Creating a django-extensions release
+
+
+How to make a new release
+-------------------------
+
+Get a fresh copy::
+
+  $ git clone git@github.com:django-extensions/django-extensions.git
+  $ cd django-extensions
+
+Run tests::
+
+  $ flake8 --ignore=E265,E501,W391 .
+  $ tox --recreate
+
+Change version numbers in django_extensions/__init__.py and docs/conf.py::
+
+  $ vi django_extensions/__init__.py              (1 occurance)
+  $ vi docs/conf.py                              (2 occurances)
+  $ git commit -a -m v0.4.1
+
+Tag it::
+
+  $ git tag 0.4.1
+
+Prepare the release tarball::
+
+  $ python ./setup.py sdist
+
+Upload release to pypi::
+
+  $ python ./setup.py sdist bdist_wheel upload -s
+
+Bumb version number to new in-development pre version::
+
+  $ vi django_extensions/__init__.py
+  $ git commit -a -m 'bumped version number'
+
+Push changes back to github::
+
+  $ git push --tags
+  $ git push
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/dumpscript.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/dumpscript.rst
new file mode 100644
index 0000000..b1e1b1b
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/dumpscript.rst
@@ -0,0 +1,99 @@
+dumpscript
+==========
+
+:synopsis: Generates a standalone Python script that will repopulate the database using objects.
+
+The `dumpscript` command generates a standalone Python script that will
+repopulate the database using objects. The advantage of this approach is that
+it is easy to understand, and more flexible than directly populating the
+database, or using XML.
+
+Why?
+----
+
+There are a few benefits to this:
+
+* less drama with model evolution: foreign keys handled naturally without IDs,
+  new and removed columns are ignored
+* edit script to create 1,000s of generated entries using for loops, generated
+  names, python modules etc.
+
+For example, an edited script can populate the database with test data::
+
+  for i in xrange(2000):
+      poll = Poll()
+      poll.question = "Question #%d" % i
+      poll.pub_date = date(2001,01,01) + timedelta(days=i)
+      poll.save()
+
+Real databases will probably be bigger and more complicated so it is useful
+to enter some values using the admin interface and then edit the generated
+scripts.
+
+
+Features
+--------
+
+* *ForeignKey* and *ManyToManyFields* (using python variables, not object IDs)
+* Self-referencing *ForeignKey* (and M2M) fields
+* Sub-classed models
+* *ContentType* fields and generic relationships (but see issue 43)
+* Recursive references
+* *AutoFields* are excluded
+* Parent models are only included when no other child model links to it
+* Individual models can be referenced
+
+
+What it can't do (yet!)
+-----------------------
+
+* Ideal handling of generic relationships (ie no *AutoField* references):
+  issue 43
+* Intermediate join tables: issue 48
+* GIS fields: issue 72
+
+
+How?
+----
+
+To dump the data from all the models in a given Django app (`appname`)::
+
+  $ ./manage.py dumpscript appname > scripts/testdata.py
+
+To dump the data from just a single model (`appname.ModelName`)::
+
+  $ ./manage.py dumpscript appname.ModelName > scripts/testdata.py
+
+To reset a given app, and reload with the saved data::
+
+  $ ./manage.py reset appname
+  $ ./manage.py runscript testdata
+
+Note: Runscript needs *scripts* to be a module, so create the directory and a
+*__init__.py* file.
+
+
+Caveats
+-------
+
+Naming conflicts
+~~~~~~~~~~~~~~~~
+
+Please take care that when naming the output files these filenames do not
+clash with other names in your import path. For instance, if the appname is
+the same as the script name, an importerror can occur because rather than importing 
+the application modules it tries to load the modules from the dumpscript file itself.
+
+Examples::
+
+  # Wrong
+  $ ./manage.py dumpscript appname > dumps/appname.py
+  
+  # Right
+  $ ./manage.py dumpscript appname > dumps/appname_all.py
+  
+  # Right
+  $ ./manage.py dumpscript appname.Somemodel > dumps/appname_somemodel.py
+
+
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/export_emails.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/export_emails.rst
new file mode 100644
index 0000000..80493aa
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/export_emails.rst
@@ -0,0 +1,81 @@
+export_emails
+=============
+
+:synopsis: export the email addresses for your users in one of many formats
+
+Most Django sites include a registered user base. There are times when you
+would like to import these e-mail addresses into other systems (generic mail
+program, GMail, google docs invites, give edit permissions, LinkedLn Group
+pre-approved listing). The export_emails command extension gives you this
+ability. The users exported can be filtered by Group name association.
+
+
+Example Usage
+-------------
+
+::
+
+  # Export all the addresses in the '"First Last" <my@addr.com>;' format.
+  $ ./manage.py export_emails > addresses.txt
+
+::
+
+  # Export users from the group 'Attendees' in the linked in pre-approve Group csv format.
+  $ ./manage.py export_emails -g Attendees -f linkedin pycon08.csv
+
+::
+
+  # Create a csv file importable by GMail or Google Docs
+  $ ./manage.py export_emails --format=google google.csv
+
+
+Supported Formats
+-----------------
+
+address
+^^^^^^^
+
+This is the default basic text format. Each entry is on its own line in the
+format::
+
+  "First Last" <user@host.com>;
+
+This can be used with all known mail programs (that I know about anyway).
+
+
+google
+^^^^^^
+
+A CSV (comma separated value) format which Google applications can import.
+This can be used to import directly into GMail, a GMail mailing group, Google
+Docs invite (to read), Google Docs grant edit permissions, Google Calendar
+invites, etc.
+
+Only two columns are supplied. One for the person's name and one for the email address.
+This is also nice for importing into spreadsheets.
+
+
+outlook
+^^^^^^^
+
+A CSV (comma separated value) format which Outlook can parse and import.
+Supplies all the columns that Outlook 'requires', but only the name and email
+address are supplied.
+
+
+linkedin
+^^^^^^^^
+
+A CSV (comma separated value) format which can be imported by `LinkedIn Groups`_
+to pre-approve a list of people for joining the group.
+
+This supplies 3 columns: first name, last name, and email address. This is the
+best generic csv file for importing into spreadsheets as well.
+
+
+vcard
+^^^^^
+
+A vCard format which Apple Address Book can parse and import.
+
+.. _`LinkedIn Groups`: http://www.linkedin.com/static?key=groups_info
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/field_extensions.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/field_extensions.rst
new file mode 100644
index 0000000..312b484
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/field_extensions.rst
@@ -0,0 +1,39 @@
+Field Extensions
+================
+
+:synopsis: Current Field Extensions
+
+
+Current Database Model Field Extensions
+---------------------------------------
+
+* *AutoSlugField* - AutoSlugfield will automatically create a unique slug
+  incrementing an appended number on the slug until it is unique. Inspired by
+  SmileyChris' Unique Slugify snippet.
+
+* *CreationDateTimeField* - DateTimeField that will automatically set its date
+  when the object is first saved to the database. Works in the same way as the
+  auto_now_add keyword.
+
+* *ModificationDateTimeField* - DateTimeField that will automatically set its
+  date when an object is saved to the database. Works in the same way as the
+  auto_now keyword.
+
+* *UUIDField* - UUIDField for Django, supports all uuid versions that are
+  natively supported by the uuid python module.
+
+  .. deprecated:: 1.4.7
+     Django 1.8 features a native UUIDField. Django-Extensions will support *UUIDField* at the very least until Django 1.7 becomes unsupported.
+
+* *PostgreSQLUUIDField* - UUIDField for Django, uses PostgreSQL uuid type.
+
+  .. deprecated:: 1.4.7
+     Django 1.8 features a native UUIDField. Django-Extensions will support *UUIDField* at the very least until Django 1.7 becomes unsupported.
+
+* *EncryptedCharField* - CharField which transparently encrypts its value as it goes in and out of the database.  Encryption is handled by `Keyczar <http://www.keyczar.org/>`_.  To use this field you must have Keyczar installed, have generated a primary encryption key, and have ``settings.ENCRYPTED_FIELD_KEYS_DIR`` set to the full path of your keys directory.
+
+* *EncryptedTextField* - CharField which transparently encrypts its value as it goes in and out of the database.  Encryption is handled by `Keyczar <http://www.keyczar.org/>`_.  To use this field you must have Keyczar installed, have generated a primary encryption key, and have ``settings.ENCRYPTED_FIELD_KEYS_DIR`` set to the full path of your keys directory.
+
+* *ShortUUIDField* - CharField which transparently generates a UUID and pass it to base57. It result in shorter 22 characters values useful e.g. for concise, unambiguous URLS. It's possible to get shorter values with length parameter: they are not Universal Unique any more but probability of collision is still low
+
+* *JSONField* - a generic TextField that neatly serializes/unserializes JSON objects seamlessly
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/graph_models.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/graph_models.rst
new file mode 100644
index 0000000..f028447
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/graph_models.rst
@@ -0,0 +1,110 @@
+Graph models
+============
+
+:synopsis: Renders a graphical overview of your project or specified apps.
+
+Creates a GraphViz_ dot file for the specified app names based on their models.py.
+You can pass multiple app names and they will all be combined into a single model.
+Output is usually directed to a dot file.
+
+Several options are available: grouping models, including inheritance,
+excluding models and columns, and changing the layout when rendering to an output
+image.
+
+With the latest revisions it's also possible to specify an output file if
+pygraphviz_ is installed and render directly to an image or other supported
+file-type.
+
+
+Selecting a library
+-------------------
+
+You need to select the library to generate the image. You can do so by passing
+the --pygraphviz or --pydot parameter, depending on which library you want to use.
+
+When neither of the command line parameters are given the default is to try and load
+pygraphviz or pydot (in that order) to generate the image.
+
+To install pygraphviz you usually need to run this command::
+
+  $ pip install pygraphviz
+
+It is possible you can't install it because it needs some C extensions to build. In
+that case you can try other methods to install or you can use PyDot.
+
+To install pydot you need to run this command::
+
+  $ pip install pyparsing==1.5.7
+  $ pip install pydot
+
+Installation should be fast and easy. Remember to install this exact version of
+pyparsing, otherwise it's possible you get this error:
+
+    Couldn't import dot_parser, loading of dot files will not be possible.
+
+
+Default Settings
+----------------
+
+The option GRAPH_MODELS = {} can be used in the settings file to specify default options::
+
+  GRAPH_MODELS = {
+    'all_applications': True,
+    'group_models': True,
+  }
+
+It uses the same names as on the command line only with the leading two dashes removed and
+the other dashes replaced by underscores.
+
+
+Templates
+---------
+
+Django templates are used to generate the dot code. This in turn can be drawn into a image
+by libraries like *pygraphviz* or *pydot*. You can extend or override the templates if needed.
+
+Templates used:
+
+ - django_extensions/graph_models/digraph.dot
+ - django_extensions/graph_models/label.dot
+ - django_extensions/graph_models/relation.dot
+
+Documentation on how to create dot files can be found here: http://www.graphviz.org/Documentation.php
+
+.. warning::
+  Modifying Django's default templates behaviour might break *graph_models*
+
+  Please be aware that if you use any *template_loaders* or extensions that change the
+  way templates are rendered that this can cause *graph_models* to fail.
+
+  An example of this is
+  the Django app *django-template-minifier* this automatically removed the newlines before/after
+  template tags even for none-html templates which leads to a mallformed file.
+
+Example Usage
+-------------
+
+With *django-extensions* installed you can create a dot-file or an
+image by using the *graph_models* command::
+
+  # Create a dot file
+  $ ./manage.py graph_models -a > my_project.dot
+
+::
+
+  # Create a PNG image file called my_project_visualized.png with application grouping
+  $ ./manage.py graph_models -a -g -o my_project_visualized.png
+
+  # Same example but with explicit selection of pygraphviz or pydot
+  $ ./manage.py graph_models --pygraphviz -a -g -o my_project_visualized.png
+  $ ./manage.py graph_models --pydot -a -g -o my_project_visualized.png
+
+::
+
+  # Create a dot file for only the 'foo' and 'bar' applications of your project
+  $ ./manage.py graph_models foo bar > my_project.dot
+
+
+.. _GraphViz: http://www.graphviz.org/
+.. _pygraphviz: https://pygraphviz.github.io/
+.. _pydot: https://pypi.python.org/pypi/pydot
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/index.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/index.rst
new file mode 100644
index 0000000..7a3e810
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/index.rst
@@ -0,0 +1,82 @@
+.. django-extensions documentation master file, created by
+   sphinx-quickstart on Wed Apr  1 20:39:40 2009.
+   You can adapt this file completely to your liking, but it should at least
+   contain the root `toctree` directive.
+
+Welcome to the django-extensions documentation!
+===============================================
+
+Django Extensions is a collection of custom extensions for the Django Framework.
+
+These include management commands, additional database fields, admin extensions and
+much more.
+
+`这篇文档当然还有中文版 <http://django-extensions-zh.readthedocs.org/zh_CN/latest/>`_
+
+Getting Started
+===============
+
+The easiest way to figure out what Django Extensions are all about is to watch the `excellent screencast by Eric Holscher`__. In a couple minutes Eric walks you through a half a dozen command extensions.
+
+Getting it
+==========
+
+You can get Django Extensions by using pip or easy_install::
+
+ $ pip install django-extensions
+ or
+ $ easy_install django-extensions
+
+If you want to install it from source, grab the git repository and run setup.py::
+
+ $ git clone git://github.com/django-extensions/django-extensions.git
+ $ cd django-extensions
+ $ python setup.py install
+
+For more detailed instructions check out our :doc:`installation_instructions`. Enjoy.
+
+Compatibility with versions of Python and Django
+=================================================
+
+We follow the Django guidelines for supported Python and Django versions. See more at `Django Supported Versions <https://docs.djangoproject.com/en/dev/internals/release-process/#supported-versions>`_
+
+This might mean the django-extensions may work with older or unsupported versions but we do not guarantee it and most likely will not fix bugs related to incompatibilities with older versions.
+
+At this time we test on and thrive to support valid combinations of Python 2.6, 2.7, 3.3, 3.4 and pypy with Django versions 1.4, 1.5, 1.6 and 1.7.
+
+Contents
+========
+
+.. toctree::
+   :maxdepth: 3
+
+   installation_instructions
+   command_extensions
+   command_extension_ideas
+   command_signals
+   admin_extensions
+   shell_plus
+   create_app
+   dumpscript
+   runscript
+   export_emails
+   field_extensions
+   graph_models
+   jobs_scheduling
+   model_extensions
+   namespace_proposal
+   print_settings
+   runprofileserver
+   runserver_plus
+   sync_s3
+   sqldiff
+   sqlcreate
+   validate_templates
+
+
+Indices and tables
+==================
+
+* :ref:`search`
+
+__ http://ericholscher.com/blog/2008/sep/12/screencast-django-command-extensions/
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/installation_instructions.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/installation_instructions.rst
new file mode 100644
index 0000000..f59101c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/installation_instructions.rst
@@ -0,0 +1,100 @@
+Installation instructions
+=========================
+
+:synopsis: Installing django-extensions
+
+
+Download and installation
+-------------------------
+
+Pip and easy_install
+^^^^^^^^^^^^^^^^^^^^
+
+You can use pip or easy_install to install django-extensions::
+
+  $ pip install django-extensions
+
+or::
+
+  $ easy_install django-extensions
+
+Download
+^^^^^^^^
+
+Download the latest packaged version from
+http://pypi.python.org/pypi/django-extensions/ and unpack it. Inside is a
+script called setup.py. Enter this command::
+
+  python setup.py install
+
+...and the package will install automatically.
+
+Installation
+^^^^^^^^^^^^
+
+You will need to add the *django_extensions* application to the INSTALLED_APPS
+setting of your Django project *settings.py* file.::
+
+  INSTALLED_APPS = (
+      ...
+      'django_extensions',
+  )
+
+This will make sure that Django finds the additional management commands
+provided by *django-extensions*.
+
+The next time you invoke *./manage.py help* you should be able to see all the
+newly available commands.
+
+Some commands or options require additional applications or python libraries,
+for example:
+
+  * 'export_emails' will require the *python vobject* module to create vcard
+    files.
+  * 'graph_models' requires *pygraphviz* to render directly to image file.
+
+If the given application or python library is not installed on your system (or
+not in the python path) the executed command will raise an exception and inform
+you of the missing dependency.
+
+Version Control
+---------------
+
+Django-extensions is hosted on github::
+
+ https://github.com/django-extensions/django-extensions
+
+Source code can be accessed by performing a Git clone.
+
+Tracking the development version of *django command extensions* should be
+pretty stable and will keep you up-to-date with the latests fixes.
+
+The following command will check the application's source code out to a
+directory called *django-extensions*:
+
+Git::
+
+  git clone git://github.com/django-extensions/django-extensions.git
+
+You should either install the resulting project with *python setup.py install*
+or put the *extensions* directory into your PYTHONPATH. The most common way
+is to symlink (junction, if you're on Windows) the extensions directory inside
+a directory which is on your PYTHONPATH, such as your python installation's
+site-packages directory.
+
+::
+
+  ln -sf /full/path/to/django-extensions/django_extensions /usr/lib/python2.7/site-packages/django_extensions
+
+You can verify that the application is available on your PYTHONPATH by opening a python interpreter and entering the following commands:
+
+::
+
+  >>> import django_extensions
+  >>> django_extensions.VERSION
+  (0, 8)
+
+Keep in mind that the current code in the git repository may be different from the
+packaged release. It may contain bugs and backwards-incompatible changes but most
+likely also new goodies to play with.
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/jobs_scheduling.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/jobs_scheduling.rst
new file mode 100644
index 0000000..5cf2dd4
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/jobs_scheduling.rst
@@ -0,0 +1,49 @@
+Jobs scheduling
+===============
+
+:synopsis: Documentation on creating/using jobs in Django-extensions
+
+
+JobsScheduling
+--------------
+
+
+This page is very much a  Work In Progress
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Creating jobs works much like management commands work in Django.
+Use create_jobs to make a 'jobs' directory inside of an application.
+After that create one python file per job.
+
+Some simple examples are provided by the django_extensions.jobs package.
+
+A job is a python script with a mandatory Job class which extends from
+HourlyJob, DailyJob, WeeklyJob or MonthlyJob. It has one method that must be
+implemented called 'execute', which is called when the job is run.
+
+The following commands are related to jobs:
+
+* create_jobs, create the directory structure for jobs
+* runjob, run a single job
+* runjobs, run all hourly/daily/weekly/monthly jobs
+
+Use "runjob(s) -l" to list all jobs recognized.
+
+Jobs do not run automatically !
+
+You must either run a job manually specifying  the exact time on
+which the command is to be run, or use crontab: ::
+
+@hourly /path/to/my/project/manage.py runjobs hourly
+
+::
+
+@daily /path/to/my/project/manage.py runjobs daily
+
+::
+
+@weekly /path/to/my/project/manage.py runjobs weekly
+
+::
+
+@monthly /path/to/my/project/manage.py runjobs monthly
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/model_extensions.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/model_extensions.rst
new file mode 100644
index 0000000..4e9025d
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/model_extensions.rst
@@ -0,0 +1,11 @@
+Model extensions
+================
+
+:synopsis: Current Model Extensions
+
+
+Current Database Model Extensions
+---------------------------------
+
+* *TimeStampedModel* - TimeStampedModel An abstract base class model that
+  provides self-managed "created" and "modified" fields.
\ No newline at end of file
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/namespace_proposal.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/namespace_proposal.rst
new file mode 100644
index 0000000..4f1befd
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/namespace_proposal.rst
@@ -0,0 +1,29 @@
+Namespace proposal
+==================
+
+:synopsis: Namespace Proposal
+
+
+Introduction
+------------
+
+Please change / write your proposal for splitting django_extensions into
+namespaces here.
+
+
+Proposal of a Namespace
+-----------------------
+
+Rough proposal for splitting into functional parts:
+
+* django_extensions.commands (20% that everbody uses / production)
+* django_extensions.commands.development (everything development)
+* django_extensions.commands.extra (not fitting about category's?)
+* django_extensions.db
+* django_extensions.templates
+* django_extensions.jobs
+
+The db part should be okay where it is right now. It's only used when
+somebody explicitly imports::
+
+  from django_extensions.db.models import something
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/print_settings.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/print_settings.rst
new file mode 100644
index 0000000..7ad8f38
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/print_settings.rst
@@ -0,0 +1,60 @@
+print_settings
+==============
+
+:synopsis: Django managment command similar to ``diffsettings`` but shows *selected* active Django settings or *all* if no args passed.
+
+
+Introduction
+------------
+
+Django comes with a ``diffsettings`` command that shows how your project's
+settings differ from the Django defaults.  Sometimes it is useful to just see
+the settings that are in effect for your project. This is particularly
+true if you have a more complex system for settings than just a single
+:file:`settings.py` file. For example, you might have settings files that
+import other settings file, such as dev, test, and production settings files
+that source a base settings file.
+
+This command also supports dumping the data in a few different formats.
+
+More Info
+---------------
+
+The simplest way to run it is with no arguments::
+
+    $ python manage.py print_settings
+
+Some variations::
+
+    $ python manage.py print_settings --format=json
+    $ python manage.py print_settings --format=yaml    # Requires PyYAML
+
+Show just selected settings::
+
+    $ python manage.py print_settings DEBUG INSTALLED_APPS
+    $ python manage.py print_settings DEBUG INSTALLED_APPS --format=pprint
+
+For more info, take a look at the built-in help::
+
+    $ python manage.py print_settings --help
+    Usage: manage.py print_settings [options]
+
+    Print the active Django settings.
+
+    Options:
+      -v VERBOSITY, --verbosity=VERBOSITY
+                            Verbosity level; 0=minimal output, 1=normal output,
+                            2=verbose output, 3=very verbose output
+      --settings=SETTINGS   The Python path to a settings module, e.g.
+                            "myproject.settings.main". If this isn't provided, the
+                            DJANGO_SETTINGS_MODULE environment variable will be
+                            used.
+      --pythonpath=PYTHONPATH
+                            A directory to add to the Python path, e.g.
+                            "/home/djangoprojects/myproject".
+      --traceback           Print traceback on exception
+      --format=FORMAT       Specifies output format.
+      --indent=INDENT       Specifies indent level for JSON and YAML
+      --version             show program's version number and exit
+      -h, --help            show this help message and exit
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/runprofileserver.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/runprofileserver.rst
new file mode 100644
index 0000000..940e150
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/runprofileserver.rst
@@ -0,0 +1,86 @@
+RunProfileServer
+================
+
+*We recommend that before you start profiling any language or
+framework you learn enough about it so that you feel comfortable with digging
+into its internals.*
+
+*Without sufficient knowledge it will not only be (very)
+hard but you're likely to make wrong assumptions (and fixes). As a rule of thumb,
+clean, well written code will help you a lot more than overzealous
+micro-optimizations will.*
+
+*This document is work in progress. If you feel you can help with
+better/clearer or additional information about profiling Django please leave a
+comment.*
+
+
+Introduction
+------------
+
+*runprofileserver* starts Django's runserver command with hotshot/profiling
+tools enabled. It will save .prof files containing the profiling information
+into the --prof-path directory. Note that for each request made one profile
+data file is saved.
+
+By default the profile-data-files are saved in /tmp use the --prof-path option
+to specify your own target directory. Saving the data in a meaningful directory
+structure helps to keep your profile data organized and keeps /tmp uncluttered. 
+(Yes this probably malfunctions systems such as Windows where /tmp does not exist)
+
+To define profile filenames use --prof-file option. Default format
+is "{path}.{duration:06d}ms.{time}" (Python
+`Format Specification <http://docs.python.org/3/library/string.html#formatspec>`_
+is used).
+
+Examples:
+
+  * "{time}-{path}-{duration}ms" - to order profile-data-files by request time
+  * "{duration:06d}ms.{path}.{time}" - to order by request duration
+
+gather_profile_stats.py
+-----------------------
+
+Django comes packed with a tool to aggregate these different prof files into
+one aggregated profile file. This tool is called *gather_profile_stats.py* and
+is located inside the *bin* directory of your Django distribution.
+
+
+KCacheGrind
+-----------
+
+Recent versions of *runprofileserver* have an option to save the profile data
+into a KCacheGrind compatible format. So you can use the excellent KCacheGrind
+tool for analyzing the profile data.
+
+Example::
+
+  $ mkdir /tmp/my-profile-data
+  $ ./manage.py runprofileserver --kcachegrind --prof-path=/tmp/my-profile-data
+  Validating models...
+  0 errors found
+
+  Django version 1.0-post-release-SVN-SVN-unknown, using settings 'complete_project.settings'
+  Development server is running at http://127.0.0.1:8000/
+  Quit the server with CONTROL-C.
+  [13/Nov/2008 06:29:38] "GET / HTTP/1.1" 200 41107
+  [13/Nov/2008 06:29:39] "GET /site_media/base.css?743 HTTP/1.1" 200 17227
+  [13/Nov/2008 06:29:39] "GET /site_media/logo.png HTTP/1.1" 200 3474
+  [13/Nov/2008 06:29:39] "GET /site_media/jquery.js HTTP/1.1" 200 31033
+  [13/Nov/2008 06:29:39] "GET /site_media/heading.png HTTP/1.1" 200 247
+  [13/Nov/2008 06:29:39] "GET /site_media/base.js HTTP/1.1" 200 751
+  <ctrl-c>
+  $ kcachegrind /tmp/my-profile-data/root.12574391.592.prof
+
+Here is a screenshot of how the above commands might look in KCacheGrind:
+
+  http://trbs.net/media/misc/django-runprofileserver-kcachegrind-full.jpg
+
+Links
+-----
+
+* http://code.djangoproject.com/wiki/ProfilingDjango
+* http://www.rkblog.rk.edu.pl/w/p/django-profiling-hotshot-and-kcachegrind/
+* http://code.djangoproject.com/browser/django/trunk/django/bin/profiling/gather_profile_stats.py
+* http://www.oluyede.org/blog/2007/03/07/profiling-django/
+* http://simonwillison.net/2008/May/22/debugging/
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/runscript.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/runscript.rst
new file mode 100644
index 0000000..c304c26
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/runscript.rst
@@ -0,0 +1,88 @@
+RunScript
+=============
+
+:synopsis: Runs a script in the django context.
+
+
+Introduction
+------------
+
+The runscript command lets you run an arbritrary set of python commands within
+the django context. It offers the same usability and functionality as running a
+set of commands in shell accessed by::
+
+  $ python manage.py shell
+
+
+Getting Started
+---------------
+
+To get started create a scripts directory in your project root, next to
+manage.py::
+
+  $ mkdir scripts
+  $ touch scripts/__init__.py
+
+Note: The *__init__.py* file is necessary so that the folder is picked up as a
+python package.
+
+Next, create a python file with the name of the script you want to run within
+the scripts directory::
+
+  $ touch scripts/delete_all_polls.py
+
+This file must implement a *run()* function. This is what gets called when you
+run the script. You can import any models or other parts of your django project
+to use in these scripts.
+
+For example::
+
+  # scripts/delete_all_polls.py
+
+  from Polls.models import Poll
+
+  def run():
+      # Get all polls
+      all_polls = Poll.objects.all()
+      # Delete polls
+      all_polls.delete()
+
+Note: You can put a script inside a *scripts* folder in any of your apps too.
+
+Usage
+-----
+
+To run any script you use the command *runscript* with the name of the script
+that you want to run.
+
+For example::
+
+  $ python manage.py runscript delete_all_polls
+
+Note: The command first checks for scripts in your apps i.e. *app_name/scripts*
+folder and runs them before checking for and running scripts in the
+*project_root/scripts* folder. You can have multiple scripts with the same name
+and they will all be run sequentially.
+
+Passing arguments
+-----------------
+
+You can pass arguments from the command line to your script by passing a comma-separated
+list of values with ``--script-args``. For example::
+
+  $ python manage.py runscript delete_all_polls --script-args=staleonly
+
+The list of argument values gets passed as arguments to your *run()* function. For
+example::
+
+  # scripts/delete_all_polls.py
+  
+  from Polls.models import Poll
+  
+  def run(*args):
+      # Get all polls
+      all_polls = Poll.object.all()
+      if 'staleonly' in args:
+          all_polls = all_polls.filter(active=False)
+      # Delete polls
+      all_polls.delete()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/runserver_plus.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/runserver_plus.rst
new file mode 100644
index 0000000..4b03c0c
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/runserver_plus.rst
@@ -0,0 +1,152 @@
+RunServerPlus
+=============
+
+:synopsis: RunServerPlus-typical runserver with Werkzeug debugger baked in
+
+
+Introduction
+------------
+
+This item requires that you have the `Werkzeug WSGI utilities` (version 0.3)
+installed.  Included with Werkzeug is a kick ass debugger that renders nice
+debugging tracebacks and adds an AJAX based debugger (which allows code execution 
+in the context of the traceback’s frames).  Additionally it provides a nice 
+access view to the source code.
+
+
+Getting Started
+---------------
+
+To get started we just use the *runserver_plus* command instead of the normal
+*runserver* command::
+
+  $ python manage.py runserver_plus
+
+  * Running on http://127.0.0.1:8000/
+  * Restarting with reloader...
+
+  Validating models...
+  0 errors found
+
+  Django version 0.97-newforms-admin-SVN-unknown, using settings 'screencasts.settings'
+  Development server is running at http://127.0.0.1:8000/
+  Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+  Quit the server with CONTROL-C.
+
+Note: all normal runserver options apply. In other words, if you need to change
+the port number or the host information, you can do so like you would normally.
+
+
+Usage
+-----
+
+Instead of the default Django traceback page, the Werkzeug traceback page 
+will be shown when an exception occurs.
+
+.. image:: https://f.cloud.github.com/assets/202559/1261027/2637f826-2c22-11e3-83c6-646acc87808b.png
+    :alt: werkzeug-traceback
+
+Along with the typical traceback information we have a couple of options. These
+options appear when hovering over a particular traceback line.  Notice that
+two buttons appear to the right:
+
+.. image:: https://f.cloud.github.com/assets/202559/1261035/558ad0ee-2c22-11e3-8ddd-6678d84d77e7.png
+    :alt: werkzeug-options
+
+The options are:
+
+
+View Source
+^^^^^^^^^^^
+
+This displays the source underneath the traceback:
+
+.. image:: https://f.cloud.github.com/assets/202559/1261036/583c8c42-2c22-11e3-9eb9-5c16b8732512.png
+    :alt: werkzeug-source
+
+Being able to view the source file is handy because it provides more
+context information around the error.  The actual traceback areas are 
+highlighted so they are easy to spot.
+
+One awkward aspect of th UI is that the page is not scrolled to the bottom.
+At first I thought nothing was happening because of this.
+
+
+Interactive Debugging Console
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Clicking on this button opens up a new pane under the traceback line
+you're on. This is the money shot:
+
+.. image:: https://f.cloud.github.com/assets/202559/1261037/5d12eda6-2c22-11e3-802a-2639ff8813fa.png
+    :alt: werkzeug-debugger
+
+An ajax based console appears in the pane and you can start debugging.
+Notice in the screenshot above I did a `print environ` to see what was in the
+environment parameter coming into the function.
+
+*WARNING*: This should *never* be used in any kind of production environment.
+Not even for a quick problem check.  I cannot emphasize this enough. The
+interactive debugger allows you to evaluate python code right against the
+server.  You've been warned.
+
+.. _`Werkzeug WSGI utilities`: http://werkzeug.pocoo.org/
+
+
+SSL
+^^^
+
+runserver_plus also supports SSL, so that you can easily debug bugs that to pop up 
+when https is used. To use SSL simply provide a file name for certificates;  
+a key and certificate file will be automatically generated::
+
+  $ python manage.py runserver_plus --cert cert
+  Validating models...
+  0 errors found
+
+  Django version 1.6.dev20130122125534, using settings 'mysite.settings'
+  Development server is running at http://127.0.0.1:8000/
+  Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+  Quit the server with CONTROL-C.
+   * Running on https://127.0.0.1:8000/
+   * Restarting with reloader
+  Validating models...
+  0 errors found
+
+  Django version 1.6.dev20130122125534, using settings 'mysite.settings'
+  Development server is running at http://127.0.0.1:8000/
+  Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
+  Quit the server with CONTROL-C.
+  
+After running this command, your web application can be accessed through 
+https://127.0.0.1:8000. 
+
+You will also find that two files are created in  the current working directory: 
+a key file and a certificate file. If you run the above command again, these 
+certificate files will be reused so that you do not have to keep accepting the 
+self-generated certificates from your browser every time. You can also provide 
+a specific file for the certificate to be used if you already have one::
+
+  $ python manage.py runserver_plus --cert /tmp/cert 
+  
+Note that you need the OpenSSL library to use SSL, and Werkzeug 0.9 or later 
+if you want to reuse existing certificates. 
+
+To install OpenSSL::
+
+  $ pip install pyOpenSSL
+
+Configuration
+^^^^^^^^^^^^^
+
+The `RUNSERVERPLUS_SERVER_ADDRESS_PORT` setting can be configured to specify
+which address and port the development server should bind to.
+
+If you find yourself frequently starting the server with::
+
+  $ python manage.py runserver_plus 0.0.0.0:8000 
+
+You can use settings to automatically default your development to an address/port::
+
+    RUNSERVERPLUS_SERVER_ADDRESS_PORT = '0.0.0.0:8000'
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/shell_plus.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/shell_plus.rst
new file mode 100644
index 0000000..2353aef
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/shell_plus.rst
@@ -0,0 +1,126 @@
+shell_plus
+==========
+
+:synopsis: Django shell with autoloading of the apps database models
+
+
+Interactive Python Shells
+-------------------------
+
+There is support for three different types of interactive python shells.
+
+IPython::
+
+  $ ./manage.py shell_plus --ipython
+
+
+BPython::
+
+  $ ./manage.py shell_plus --bpython
+
+
+Python::
+
+  $ ./manage.py shell_plus --plain
+
+
+The default resolution order is: bpython, ipython, python.
+
+You can also set the configuration option SHELL_PLUS to explicitly specify which version you want.
+
+::
+
+  # Always use IPython for shell_plus
+  SHELL_PLUS = "ipython"
+
+
+
+Configuration
+-------------
+
+Sometimes, models from your own apps and other people's apps have colliding names,
+or you may want to completely skip loading an app's models. Here are some examples of how to do that.
+
+Note: These settings are only used inside shell_plus and will not affect your environment.
+
+::
+
+  # Rename the automatic loaded module Messages in the app blog to blog_messages.
+  SHELL_PLUS_MODEL_ALIASES = {'blog': {'Messages': 'blog_messages'},}
+  }
+
+::
+
+  # Dont load the 'sites' app, and skip the model 'pictures' in the app 'blog'
+  SHELL_PLUS_DONT_LOAD = ['sites', 'blog.pictures']
+  }
+
+
+You can also combine model_aliases and dont_load.
+
+It is possible to ignore autoloaded modules when using manage.py, like::
+
+  $ ./manage.py shell_plus --dont-load app1 --dont-load app2.module1
+
+Commandline parameters and settings in the configuration file are merged, so you can
+safely append modules to ignore from the commandline for one-time usage.
+
+It is possible to use `IPython Notebook`_, an interactive Python shell which
+uses a web browser as its user interface, as an alternative shell::
+
+    $ ./manage.py shell_plus --notebook
+
+The Django settings module and database models are auto-loaded into the
+interactive shell's global namespace also for IPython Notebook.
+
+Auto-loading is done by a custom IPython extension which is activated by
+default by passing the
+``--ext django_extensions.management.notebook_extension``
+argument to the Notebook.  If you need to pass custom options to the IPython
+Notebook, you can override the default options in your Django settings using
+the ``IPYTHON_ARGUMENTS`` setting.  For example::
+
+    IPYTHON_ARGUMENTS = [
+        '--ext', 'django_extensions.management.notebook_extension',
+        '--ext', 'myproject.notebook_extension',
+        '--debug',
+    ]
+
+To activate auto-loading, remember to either include the django-extensions' default
+notebook extension or copy its auto-loading code into your own extension.
+
+Note that the IPython Notebook feature doesn't currently honor the
+``--dont-load`` option.
+
+.. _`IPython Notebook`: http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html
+
+
+
+Additional Imports
+------------------
+
+In addition to importing the models you can specify other items to import by default.
+These are specified in SHELL_PLUS_PRE_IMPORTS and SHELL_PLUS_POST_IMPORTS. The former is imported
+before any other imports (such as the default models import) and the latter is imported after any
+other imports. Both have similar syntax. So in your settings.py file:
+
+::
+
+    SHELL_PLUS_PRE_IMPORTS = (
+        ('module.submodule1', ('class1', 'function2')),
+        ('module.submodule2', 'function3'),
+        ('module.submodule3', '*'),
+        'module.submodule4'
+    )
+
+The above example would directly translate to the following python code which would be executed before
+the automatic imports:
+
+::
+
+    from module.submodule1 import class1, function2
+    from module.submodule2 import function3
+    from module.submodule3 import *
+    import module.submodule4
+
+These symbols will be available as soon as the shell starts.
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/sqlcreate.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/sqlcreate.rst
new file mode 100644
index 0000000..059be88
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/sqlcreate.rst
@@ -0,0 +1,45 @@
+sqlcreate
+==========
+
+:synopsis: Helps you setup your database(s) more easily
+
+
+Introduction
+-------------
+
+Stop creating databases by hand.  Your settings.py file already contains the correct
+information, so DRY.
+
+Usage
+-------------
+
+  $ python manage.py sqlcreate [--router=<routername>] | <my_database_shell_command>
+  
+It will spit out SQL which you can review (if you want). Ultimately you want to
+pipe it into the database shell command of your choice.
+
+If there were a good way to ensure that the user in the database settings had the
+proper permissions, we could submit the commands straight to the database.
+However, due to the nature of this portion of the project setup, that will never happen.
+
+Example
+-------------
+
+PostgreSQL
+~~~~~~~~~~
+  $ ./manage.py sqlcreate [--router=<routername>] | psql -U <db_administrator> -W
+  
+
+MySQL
+~~~~~
+  $ ./manage.py sqlcreate [--router=<routername>] | mysql -u <db_administrator> -p
+  
+
+Known Issues
+------------
+
+ * CREATE DATABASE is not SQL standard so might not work everywhere.
+ * When using fallback user is not created and password is not set.
+   But it does try to do a GRANT to the database user.
+ * Missing options for tablespaces, etc.
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/sqldiff.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/sqldiff.rst
new file mode 100644
index 0000000..85a5221
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/sqldiff.rst
@@ -0,0 +1,44 @@
+sqldiff
+=======
+
+:synopsis: Prints the ALTER TABLE statements for the given appnames.
+
+Django command that scans all models for the given appnames and compares
+their database schema with the real database tables.
+
+It indicates how columns in the database are different from the SQL that would
+be generated by Django. This command is not a database migration tool, though
+it might certainly be of help during migrations. Its purpose is to show the
+current differences as a way to check or debug your models compared to
+the real database tables and columns.
+
+Supported Databases
+-------------------
+
+Currently the following databases are supported:
+
+* PostgreSQL
+* Sqlite3
+* MySQL
+* Oracle
+
+Patches to support other databases are welcome! :-)
+
+Exit Codes
+----------
+
+Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.
+
+
+Example Usage
+-------------
+
+::
+
+  # View SQL differences for all installed applications
+  $ ./manage.py sqldiff -a
+
+::
+
+  # View SQL differences for all installed applications using text instead of SQL
+  $ ./manage.py sqldiff -a -t
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/sync_s3.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/sync_s3.rst
new file mode 100644
index 0000000..aafc2ac
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/sync_s3.rst
@@ -0,0 +1,70 @@
+sync_s3
+=======
+
+:synopsis: sync your MEDIA_ROOT and STATIC_ROOT folders to S3
+
+Django command that scans all files in your settings.MEDIA_ROOT and
+settings.STATIC_ROOT folders, then uploads them to S3 with the same
+directory structure.
+
+This command can optionally do the following but it is off by default:
+
+  * gzip compress any CSS and Javascript files it finds and adds the
+    appropriate 'Content-Encoding' header.
+  * set a far future 'Expires' header for optimal caching.
+  * upload only media or static files.
+  * use any other provider compatible with Amazon S3.
+  * set other than 'public-read' ACL.
+
+Example Usage
+-------------
+
+::
+
+  # Upload files to S3 into the bucket 'mybucket'
+  $ ./manage.py sync_s3 mybucket
+
+::
+
+  # Upload files to S3 into the bucket 'mybucket' and enable gzipping CSS/JS files and setting of a far future expires header
+  $ ./manage.py sync_s3 mybucket --gzip --expires
+
+::
+
+  # Upload only media files to S3 into the bucket 'mybucket'
+  $ ./manage.py sync_s3 mybucket  --media-only  # or --static-only
+
+::
+
+  # Upload only media files to a S3 compatible provider into the bucket 'mybucket' and set private file ACLs
+  $ ./manage.py sync_s3 mybucket  --media-only  --s3host=cs.example.com --acl=private
+
+Required libraries and settings
+-------------------------------
+
+This management command requires the boto library and was tested with version
+1.4c:
+
+  https://github.com/boto/boto
+
+It also requires an account with Amazon Web Services (AWS) and the AWS S3 keys.
+Bucket name is required and cannot be empty.
+The keys and bucket name are added to your settings.py file, for example::
+
+  # settings.py
+  AWS_ACCESS_KEY_ID = ''
+  AWS_SECRET_ACCESS_KEY = ''
+  AWS_BUCKET_NAME = 'bucket'
+
+Optional settings
+-----------------
+
+It is possible to customize sync_s3 directly from django settings file, for example::
+
+  # settings.py
+  AWS_S3_HOST = 'cs.example.com'
+  AWS_DEFAULT_ACL = 'private'
+  SYNC_S3_PREFIX = 'some_prefix'
+  FILTER_LIST = 'dir1, dir2'
+  AWS_CLOUDFRONT_DISTRIBUTION = 'E27LVI50CSW06W'
+  SYNC_S3_RENAME_GZIP_EXT = '.gz'
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/docs/validate_templates.rst b/desktop/core/ext-py/django-extensions-1.5.0/docs/validate_templates.rst
new file mode 100644
index 0000000..2bff8d5
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/docs/validate_templates.rst
@@ -0,0 +1,38 @@
+validate_templates
+==================
+
+:synopsis: Checks templates on syntax or compile errors.
+
+Options
+-------
+
+verbosity
+~~~~~~~~~
+A higher verbosity level will print out all the files that are processed 
+instead of only the ones that contain errors.
+
+break
+~~~~~
+Do not continue scanning other templates after the first failure.
+
+includes
+~~~~~~~~
+Use -i (can be used multiple times) to add directories to the TEMPLATE_DIRS.
+
+Settings
+--------
+
+VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+You can use `VALIDATE_TEMPLATES_EXTRA_TEMPLATE_DIRS` to include a number of template 
+dirs by default directly from the settings file. This can be useful for situations 
+where TEMPLATE_DIRS is dynamically generated or switched in middleware, or when you 
+have other template dirs for external applications like celery, and you want to 
+check those as well.
+
+Usage Example
+-------------
+
+ ./manage.py validate_templates
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/run_tests.py b/desktop/core/ext-py/django-extensions-1.5.0/run_tests.py
new file mode 100755
index 0000000..9af53c4
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/run_tests.py
@@ -0,0 +1,141 @@
+#!/usr/bin/env python
+
+import sys
+import shutil
+import tempfile
+
+try:
+    import django
+except ImportError:
+    print("Error: missing test dependency:")
+    print("  django library is needed to run test suite")
+    print("  you can install it with 'pip install django'")
+    print("  or use tox to automatically handle test dependencies")
+    sys.exit(1)
+
+try:
+    import shortuuid
+except ImportError:
+    print("Error: missing test dependency:")
+    print("  shortuuid library is needed to run test suite")
+    print("  you can install it with 'pip install shortuuid'")
+    print("  or use tox to automatically handle test dependencies")
+    sys.exit(1)
+
+try:
+    import dateutil
+except ImportError:
+    print("Error: missing test dependency:")
+    print("  dateutil library is needed to run test suite")
+    print("  you can install it with 'pip install python-dateutil'")
+    print("  or use tox to automatically handle test dependencies")
+    sys.exit(1)
+
+try:
+    import six
+except ImportError:
+    print("Error: missing test dependency:")
+    print("  six library is needed to run test suite")
+    print("  you can install it with 'pip install six'")
+    print("  or use tox to automatically handle test dependencies")
+    sys.exit(1)
+
+__test_libs__ = [
+    django,
+    shortuuid,
+    dateutil,
+    six
+]
+
+from django.conf import settings
+
+
+def main():
+    # Dynamically configure the Django settings with the minimum necessary to
+    # get Django running tests.
+    KEY_LOCS = {}
+    try:
+        try:
+            # If KeyCzar is available, set up the environment.
+            from keyczar import keyczart, keyinfo
+
+            # Create an RSA private key.
+            keys_dir = tempfile.mkdtemp("django_extensions_tests_keyzcar_rsa_dir")
+            keyczart.Create(keys_dir, "test", keyinfo.DECRYPT_AND_ENCRYPT, asymmetric=True)
+            keyczart.AddKey(keys_dir, "PRIMARY", size=4096)
+            KEY_LOCS['DECRYPT_AND_ENCRYPT'] = keys_dir
+
+            # Create an RSA public key.
+            pub_dir = tempfile.mkdtemp("django_extensions_tests_keyzcar_pub_dir")
+            keyczart.PubKey(keys_dir, pub_dir)
+            KEY_LOCS['ENCRYPT'] = pub_dir
+        except ImportError:
+            pass
+
+        settings.configure(
+            INSTALLED_APPS=[
+                'django.contrib.auth',
+                'django.contrib.contenttypes',
+                'django.contrib.admin',
+                'django.contrib.sessions',
+                'django_extensions.tests.testapp',
+                'django_extensions',
+            ],
+            # Django replaces this, but it still wants it. *shrugs*
+            DATABASE_ENGINE='django.db.backends.sqlite3',
+            DATABASES={
+                'default': {
+                    'ENGINE': 'django.db.backends.sqlite3',
+                    'NAME': ':memory:',
+                }
+            },
+            MEDIA_ROOT='/tmp/django_extensions_test_media/',
+            MEDIA_PATH='/media/',
+            ROOT_URLCONF='django_extensions.tests.urls',
+            DEBUG=True,
+            TEMPLATE_DEBUG=True,
+            ENCRYPTED_FIELD_KEYS_DIR=KEY_LOCS,
+        )
+
+        if django.VERSION[:2] >= (1, 7):
+            django.setup()
+
+        apps = ['django_extensions']
+        if django.VERSION[:2] >= (1, 6):
+            apps.append('django_extensions.tests.testapp')
+            apps.append('django_extensions.tests')
+
+        from django.core.management import call_command
+        from django.test.utils import get_runner
+
+        try:
+            from django.contrib.auth import get_user_model
+        except ImportError:
+            USERNAME_FIELD = "username"
+        else:
+            USERNAME_FIELD = get_user_model().USERNAME_FIELD
+
+        DjangoTestRunner = get_runner(settings)
+
+        class TestRunner(DjangoTestRunner):
+            def setup_databases(self, *args, **kwargs):
+                result = super(TestRunner, self).setup_databases(*args, **kwargs)
+                kwargs = {
+                    "interactive": False,
+                    "email": "admin@doesnotexit.com",
+                    USERNAME_FIELD: "admin",
+                }
+                call_command("createsuperuser", **kwargs)
+                return result
+
+        failures = TestRunner(verbosity=2, interactive=True).run_tests(apps)
+        sys.exit(failures)
+
+    finally:
+        for name, path in KEY_LOCS.items():
+            # cleanup crypto key temp dirs
+            shutil.rmtree(path)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/setup.cfg b/desktop/core/ext-py/django-extensions-1.5.0/setup.cfg
new file mode 100644
index 0000000..6f08d0e
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/setup.cfg
@@ -0,0 +1,8 @@
+[bdist_wheel]
+universal = 1
+
+[egg_info]
+tag_build = 
+tag_date = 0
+tag_svn_revision = 0
+
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/setup.py b/desktop/core/ext-py/django-extensions-1.5.0/setup.py
new file mode 100644
index 0000000..2dae102
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/setup.py
@@ -0,0 +1,116 @@
+"""
+Based entirely on Django's own ``setup.py``.
+"""
+import os
+import sys
+from distutils.command.install_data import install_data
+from distutils.command.install import INSTALL_SCHEMES
+try:
+    from setuptools import setup
+except ImportError:
+    from distutils.core import setup  # NOQA
+
+
+class osx_install_data(install_data):
+    # On MacOS, the platform-specific lib dir is at:
+    #   /System/Library/Framework/Python/.../
+    # which is wrong. Python 2.5 supplied with MacOS 10.5 has an Apple-specific
+    # fix for this in distutils.command.install_data#306. It fixes install_lib
+    # but not install_data, which is why we roll our own install_data class.
+
+    def finalize_options(self):
+        # By the time finalize_options is called, install.install_lib is set to
+        # the fixed directory, so we set the installdir to install_lib. The
+        # install_data class uses ('install_data', 'install_dir') instead.
+        self.set_undefined_options('install', ('install_lib', 'install_dir'))
+        install_data.finalize_options(self)
+
+if sys.platform == "darwin":
+    cmdclasses = {'install_data': osx_install_data}
+else:
+    cmdclasses = {'install_data': install_data}
+
+
+def fullsplit(path, result=None):
+    """
+    Split a pathname into components (the opposite of os.path.join) in a
+    platform-neutral way.
+    """
+    if result is None:
+        result = []
+    head, tail = os.path.split(path)
+    if head == '':
+        return [tail] + result
+    if head == path:
+        return result
+    return fullsplit(head, [tail] + result)
+
+# Tell distutils to put the data_files in platform-specific installation
+# locations. See here for an explanation:
+# http://groups.google.com/group/comp.lang.python/browse_thread/thread/35ec7b2fed36eaec/2105ee4d9e8042cb
+for scheme in INSTALL_SCHEMES.values():
+    scheme['data'] = scheme['purelib']
+
+
+# Compile the list of packages available, because distutils doesn't have
+# an easy way to do this.
+packages, package_data = [], {}
+
+root_dir = os.path.dirname(__file__)
+if root_dir != '':
+    os.chdir(root_dir)
+extensions_dir = 'django_extensions'
+
+for dirpath, dirnames, filenames in os.walk(extensions_dir):
+    # Ignore PEP 3147 cache dirs and those whose names start with '.'
+    dirnames[:] = [d for d in dirnames if not d.startswith('.') and d != '__pycache__']
+    parts = fullsplit(dirpath)
+    package_name = '.'.join(parts)
+    if '__init__.py' in filenames:
+        packages.append(package_name)
+    elif filenames:
+        relative_path = []
+        while '.'.join(parts) not in packages:
+            relative_path.append(parts.pop())
+        relative_path.reverse()
+        path = os.path.join(*relative_path)
+        package_files = package_data.setdefault('.'.join(parts), [])
+        package_files.extend([os.path.join(path, f) for f in filenames])
+
+
+version = __import__('django_extensions').__version__
+
+setup(
+    name='django-extensions',
+    version=version,
+    description="Extensions for Django",
+    long_description="""django-extensions bundles several useful
+additions for Django projects. See the project page for more information:
+  http://github.com/django-extensions/django-extensions""",
+    author='Michael Trier',
+    author_email='mtrier@gmail.com',
+    maintainer='Bas van Oostveen',
+    maintainer_email='v.oostveen@gmail.com',
+    url='http://github.com/django-extensions/django-extensions',
+    license='MIT License',
+    platforms=['any'],
+    packages=packages,
+    cmdclass=cmdclasses,
+    package_data=package_data,
+    install_requires=['six>=1.2'],
+    tests_require=['Django', 'shortuuid', 'python-dateutil'],
+    test_suite='run_tests.main',
+    classifiers=[
+        'Development Status :: 4 - Beta',
+        'Development Status :: 5 - Production/Stable',
+        'Environment :: Web Environment',
+        'Framework :: Django',
+        'Intended Audience :: Developers',
+        'License :: OSI Approved :: MIT License',
+        'Operating System :: OS Independent',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 3',
+        'Programming Language :: Python :: Implementation :: PyPy',
+        'Topic :: Utilities',
+    ],
+)
diff --git a/desktop/core/ext-py/django-extensions-1.5.0/tox.ini b/desktop/core/ext-py/django-extensions-1.5.0/tox.ini
new file mode 100644
index 0000000..b828d28
--- /dev/null
+++ b/desktop/core/ext-py/django-extensions-1.5.0/tox.ini
@@ -0,0 +1,80 @@
+# Tox (http://tox.testrun.org/) is a tool for running tests
+# in multiple virtualenvs. This configuration file will run the
+# test suite on all supported python versions. To use it, "pip install tox"
+# and then run "tox" from this directory.
+
+[tox]
+envlist = py26_django14, py26_django15,
+          py27_django14, py27_django15, py27_django16, py27_django17,
+          py33_django16, py33_django17,
+          py34_django16, py34_django17,
+
+[testenv]
+commands = {envpython} setup.py test
+
+[testenv:py26_django14]
+basepython = python2.6
+deps = Django==1.4.17
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py27_django14]
+basepython = python2.7
+deps = Django==1.4.17
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py26_django15]
+basepython = python2.6
+deps = Django==1.5.12
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py27_django15]
+basepython = python2.7
+deps = Django==1.5.12
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py27_django16]
+basepython = python2.7
+deps = Django==1.6.9
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py27_django17]
+basepython = python2.7
+deps = Django==1.7.2
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py33_django15]
+basepython = python3.3
+deps = Django==1.5.12
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py33_django16]
+basepython = python3.3
+deps = Django==1.6.9
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py33_django17]
+basepython = python3.3
+deps = Django==1.7.2
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py34_django16]
+basepython = python3.4
+deps = Django==1.6.9
+       shortuuid==0.4
+       python-dateutil
+
+[testenv:py34_django17]
+basepython = python3.4
+deps = Django==1.7.2
+       shortuuid==0.4
+       python-dateutil
+
-- 
1.7.9.5


From fedf69975b763215a779e43ccce3e2ef00284808 Mon Sep 17 00:00:00 2001
From: Erick Tryzelaar <erickt@cloudera.com>
Date: Thu, 22 Jan 2015 17:38:59 -0800
Subject: [PATCH 0656/1173] [spark] Allow session backend to be picked on the
 cli

---
 .../scala/com/cloudera/hue/livy/server/Main.scala  |   32 ++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

diff --git a/apps/spark/java/livy-server/src/main/scala/com/cloudera/hue/livy/server/Main.scala b/apps/spark/java/livy-server/src/main/scala/com/cloudera/hue/livy/server/Main.scala
index f545aa7..d9ad3cf 100644
--- a/apps/spark/java/livy-server/src/main/scala/com/cloudera/hue/livy/server/Main.scala
+++ b/apps/spark/java/livy-server/src/main/scala/com/cloudera/hue/livy/server/Main.scala
@@ -7,13 +7,35 @@ import org.scalatra._
 import org.scalatra.servlet.ScalatraListener
 
 object Main {
+
+  val SESSION_KIND = "livy.session.kind"
+  val PROCESS_SESSION = "process"
+  val YARN_SESSION = "yarn"
+
   def main(args: Array[String]): Unit = {
+
+    if (args.length != 1) {
+      println("Must specify either `process` or `yarn` for the session kind")
+      sys.exit(1)
+    }
+
+    val session_kind = args(0)
+
+    session_kind match {
+      case PROCESS_SESSION | YARN_SESSION =>
+      case _ =>
+        println("Unknown session kind: " + session_kind)
+        sys.exit(1)
+    }
+
     val port = sys.env.getOrElse("PORT", "8998").toInt
     val server = new WebServer(port)
 
+
     server.context.setResourceBase("src/main/com/cloudera/hue/livy/server")
     server.context.setInitParameter(ScalatraListener.LifeCycleKey, classOf[ScalatraBootstrap].getCanonicalName)
     server.context.addEventListener(new ScalatraListener)
+    server.context.setInitParameter(SESSION_KIND, session_kind)
 
     server.start()
     server.join()
@@ -23,11 +45,17 @@ object Main {
 
 class ScalatraBootstrap extends LifeCycle {
 
-  val sessionFactory = new YarnSessionFactory
-  val sessionManager = new SessionManager(sessionFactory)
+  var sessionManager: SessionManager = null
 
   override def init(context: ServletContext): Unit = {
     context.mount(new WebApp(sessionManager), "/*")
+
+    val sessionFactory = context.getInitParameter(Main.SESSION_KIND) match {
+      case Main.PROCESS_SESSION => new ProcessSessionFactory
+      case Main.YARN_SESSION => new YarnSessionFactory
+    }
+
+    sessionManager = new SessionManager(sessionFactory)
   }
 
   override def destroy(context: ServletContext): Unit = {
-- 
1.7.9.5


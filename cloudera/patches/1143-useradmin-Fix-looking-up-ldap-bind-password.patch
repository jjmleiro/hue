From 01db10457a0c2d5a8692bfc681de8a8d5923af6b Mon Sep 17 00:00:00 2001
From: Erick Tryzelaar <erickt@cloudera.com>
Date: Mon, 23 Mar 2015 16:08:47 -0700
Subject: [PATCH 1143/1173] [useradmin] Fix looking up ldap bind password

---
 apps/useradmin/src/useradmin/ldap_access.py |    2 +-
 apps/useradmin/src/useradmin/tests.py       |   68 +++++++++++++++++++++++++++
 desktop/conf.dist/hue.ini                   |    8 ++++
 desktop/conf/pseudo-distributed.ini.tmpl    |    8 ++++
 desktop/core/src/desktop/conf.py            |    5 ++
 5 files changed, 90 insertions(+), 1 deletion(-)

diff --git a/apps/useradmin/src/useradmin/ldap_access.py b/apps/useradmin/src/useradmin/ldap_access.py
index 1ec7a09..32983c5 100644
--- a/apps/useradmin/src/useradmin/ldap_access.py
+++ b/apps/useradmin/src/useradmin/ldap_access.py
@@ -45,7 +45,7 @@ def get_connection(ldap_config):
 
   ldap_url = ldap_config.LDAP_URL.get()
   username = ldap_config.BIND_DN.get()
-  password = desktop.conf.get_ldap_password(ldap_config)
+  password = desktop.conf.get_ldap_bind_password(ldap_config)
   ldap_cert = ldap_config.LDAP_CERT.get()
   search_bind_authentication = ldap_config.SEARCH_BIND_AUTHENTICATION.get()
 
diff --git a/apps/useradmin/src/useradmin/tests.py b/apps/useradmin/src/useradmin/tests.py
index dbd9349..f85e5c2 100644
--- a/apps/useradmin/src/useradmin/tests.py
+++ b/apps/useradmin/src/useradmin/tests.py
@@ -19,12 +19,14 @@
 import json
 import ldap
 import re
+import sys
 import urllib
 
 from nose.plugins.attrib import attr
 from nose.plugins.skip import SkipTest
 from nose.tools import assert_true, assert_equal, assert_false
 
+import desktop.conf
 from desktop.lib.django_test_util import make_logged_in_client
 from django.contrib.auth.models import User, Group
 from django.utils.encoding import smart_unicode
@@ -35,6 +37,7 @@ from useradmin.models import HuePermission, GroupPermission, UserProfile
 from useradmin.models import get_profile, get_default_user_group
 
 import useradmin.conf
+import useradmin.ldap_access
 from hadoop import pseudo_hdfs4
 from useradmin.password_policy import reset_password_policy
 
@@ -724,3 +727,68 @@ def test_list_for_autocomplete():
   assert_equal(['test_list_for_autocomplete', 'test_list_for_autocomplete2'], users)
   assert_true('test_list_for_autocomplete' in groups, groups)
   assert_true('test_list_for_autocomplete_other_group' in groups, groups)
+
+class MockLdapConnection(object):
+  def __init__(self, ldap_config, ldap_url, username, password, ldap_cert):
+    self.ldap_config = ldap_config
+    self.ldap_url = ldap_url
+    self.username = username
+    self.password = password
+    self.ldap_cert = ldap_cert
+
+def test_get_connection_bind_password():
+  # Monkey patch the LdapConnection class as we don't want to make a real connection.
+  OriginalLdapConnection = useradmin.ldap_access.LdapConnection
+  reset = [
+      desktop.conf.LDAP.LDAP_URL.set_for_testing('default.example.com'),
+      desktop.conf.LDAP.BIND_PASSWORD.set_for_testing('default-password'),
+      desktop.conf.LDAP.LDAP_SERVERS.set_for_testing({
+        'test': {
+          'ldap_url': 'test.example.com',
+          'bind_password': 'test-password',
+        }
+      })
+  ]
+  try:
+    useradmin.ldap_access.LdapConnection = MockLdapConnection
+
+    connection = useradmin.ldap_access.get_connection_from_server()
+    assert_equal(connection.password, 'default-password')
+
+    connection = useradmin.ldap_access.get_connection_from_server('test')
+    assert_equal(connection.password, 'test-password')
+  finally:
+    useradmin.ldap_access.LdapConnection = OriginalLdapConnection
+    for f in reset:
+      f()
+
+def test_get_connection_bind_password_script():
+  SCRIPT = '%s -c "print \'\\n password from script \\n\'"' % sys.executable
+
+  # Monkey patch the LdapConnection class as we don't want to make a real connection.
+  OriginalLdapConnection = useradmin.ldap_access.LdapConnection
+  reset = [
+      desktop.conf.LDAP.LDAP_URL.set_for_testing('default.example.com'),
+      desktop.conf.LDAP.BIND_PASSWORD_SCRIPT.set_for_testing(
+        '%s -c "print \'\\n default password \\n\'"' % sys.executable
+      ),
+      desktop.conf.LDAP.LDAP_SERVERS.set_for_testing({
+        'test': {
+          'ldap_url': 'test.example.com',
+          'bind_password_script':
+            '%s -c "print \'\\n test password \\n\'"' % sys.executable,
+        }
+      })
+  ]
+  try:
+    useradmin.ldap_access.LdapConnection = MockLdapConnection
+
+    connection = useradmin.ldap_access.get_connection_from_server()
+    assert_equal(connection.password, ' default password ')
+
+    connection = useradmin.ldap_access.get_connection_from_server('test')
+    assert_equal(connection.password, ' test password ')
+  finally:
+    useradmin.ldap_access.LdapConnection = OriginalLdapConnection
+    for f in reset:
+      f()
diff --git a/desktop/conf.dist/hue.ini b/desktop/conf.dist/hue.ini
index 0d6a57a..b5fce10 100644
--- a/desktop/conf.dist/hue.ini
+++ b/desktop/conf.dist/hue.ini
@@ -256,6 +256,10 @@
     # anonymous searches
     ## bind_password=
 
+    # Execute this script to produce the bind user password. This will be used
+    # when `bind_password` is not set.
+    ## bind_password_script=
+
     # Pattern for searching for usernames -- Use <username> for the parameter
     # For use when using LdapBackend for Hue authentication
     ## ldap_username_pattern="uid=<username>,ou=People,dc=mycompany,dc=com"
@@ -337,6 +341,10 @@
         # anonymous searches
         ## bind_password=
 
+        # Execute this script to produce the bind user password. This will be used
+        # when `bind_password` is not set.
+        ## bind_password_script=
+
         # Pattern for searching for usernames -- Use <username> for the parameter
         # For use when using LdapBackend for Hue authentication
         ## ldap_username_pattern="uid=<username>,ou=People,dc=mycompany,dc=com"
diff --git a/desktop/conf/pseudo-distributed.ini.tmpl b/desktop/conf/pseudo-distributed.ini.tmpl
index 37d3927..6902c4f 100644
--- a/desktop/conf/pseudo-distributed.ini.tmpl
+++ b/desktop/conf/pseudo-distributed.ini.tmpl
@@ -259,6 +259,10 @@
     # anonymous searches
     ## bind_password=
 
+    # Execute this script to produce the bind user password. This will be used
+    # when `bind_password` is not set.
+    ## bind_password_script=
+
     # Pattern for searching for usernames -- Use <username> for the parameter
     # For use when using LdapBackend for Hue authentication
     ## ldap_username_pattern="uid=<username>,ou=People,dc=mycompany,dc=com"
@@ -340,6 +344,10 @@
         # anonymous searches
         ## bind_password=
 
+        # Execute this script to produce the bind user password. This will be used
+        # when `bind_password` is not set.
+        ## bind_password_script=
+
         # Pattern for searching for usernames -- Use <username> for the parameter
         # For use when using LdapBackend for Hue authentication
         ## ldap_username_pattern="uid=<username>,ou=People,dc=mycompany,dc=com"
diff --git a/desktop/core/src/desktop/conf.py b/desktop/core/src/desktop/conf.py
index 894818f..4214d9e 100644
--- a/desktop/core/src/desktop/conf.py
+++ b/desktop/core/src/desktop/conf.py
@@ -669,6 +669,11 @@ LDAP = ConfigSection(
                    default=None,
                    private=True,
                    help=_("The password for the bind user.")),
+    BIND_PASSWORD_SCRIPT=Config("bind_password_script",
+                   default=None,
+                   private=True,
+                   type=coerce_password_from_script,
+                   help=_("Execute this script to produce the LDAP bind user password. This will be used when `bind_password` is not set.")),
     SEARCH_BIND_AUTHENTICATION=Config("search_bind_authentication",
                    default=True,
                    type=coerce_bool,
-- 
1.7.9.5


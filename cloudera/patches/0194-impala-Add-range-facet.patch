From d8b40c3520ce730fcda3b0886dfa57a8d02d6954 Mon Sep 17 00:00:00 2001
From: Romain Rigaux <romain@cloudera.com>
Date: Fri, 3 Oct 2014 18:21:15 -0700
Subject: [PATCH 0194/1173] [impala] Add range facet

---
 apps/impala/src/impala/dashboards.py            |  114 +++++++++++++++++------
 apps/impala/src/impala/models.py                |    4 +-
 apps/impala/src/impala/templates/dashboard.mako |    1 +
 apps/impala/static/js/impala-dashboard.ko.js    |   10 +-
 4 files changed, 96 insertions(+), 33 deletions(-)

diff --git a/apps/impala/src/impala/dashboards.py b/apps/impala/src/impala/dashboards.py
index d71791c..37ada09 100644
--- a/apps/impala/src/impala/dashboards.py
+++ b/apps/impala/src/impala/dashboards.py
@@ -19,6 +19,8 @@
 import logging
 import json
 
+from math import log
+
 from django.http import HttpResponse
 
 from desktop.context_processors import get_app_name
@@ -63,21 +65,28 @@ def query(request):
     filters = ''
 
   if 'facet' in request.POST:
-    if request.POST.get('facet') == 'count' or True:
+    facet = json.loads(request.POST.get('facet'))
+    slot = None
+
+    if facet['type'] == 'field':
       template = "SELECT %(field)s, COUNT(*) AS top FROM %(database)s.%(table)s WHERE %(field)s IS NOT NULL %(filters)s GROUP BY %(field)s ORDER BY top DESC LIMIT %(limit)s"
-    elif request.POST.get('facet') == 'range':
-      template = "SELECT cast(%(field)s / 10000 AS int), COUNT(*) AS top FROM %(database)s.%(table)s WHERE %(field)s IS NOT NULL %(filters)s GROUP BY cast(%(field)s / 10000 AS int) ORDER BY top DESC LIMIT %(limit)s"    
+    elif facet['type'] == 'range':
+      slot = (facet['properties']['end'] - facet['properties']['start']) / facet['properties']['limit']
+      template = """select cast(%(field)s / %(slot)s AS int) * %(slot)s, count(*) AS top, cast(%(field)s / %(slot)s as int) as s 
+       FROM %(database)s.%(table)s WHERE %(field)s IS NOT NULL GROUP BY s ORDER BY s DESC LIMIT %(limit)s"""    
     else:            
+      # Simple Top
       template = "SELECT DISTINCT %(field)s FROM %(database)s.%(table)s WHERE %(field)s IS NOT NULL %(filters)s ORDER BY %(field)s DESC LIMIT %(limit)s"
     
     facet = json.loads(request.POST['facet'])
     hql = template % {
-          'database': database,
-          'table': table,
-          'limit': facet['properties']['limit'],
-          'field': facet['field'],
-          'filters': (' AND ' + filters) if filters else ''
-      }
+        'database': database,
+        'table': table,
+        'limit': facet['properties']['limit'],
+        'field': facet['field'],
+        'filters': (' AND ' + filters) if filters else '',
+        'slot': slot
+    }
     result['id'] = facet['id']
     result['field'] = facet['field']
     fields = [fq['field'] for fq in fqs]
@@ -97,18 +106,23 @@ def query(request):
   db = dbms.get(request.user, query_server=query_server)
   
   query = hql_query(hql)
-  handle = db.execute_and_wait(query, timeout_sec=5.0)
+  print hql
+  handle = db.execute_and_wait(query, timeout_sec=35.0)
 
   if handle:
     data = db.fetch(handle, rows=100)
     if 'facet' in request.POST:
-      result['data'] = [{"value": row[0], "count": row[1], "selected": False, "cat": facet['field']} for row in data.rows()]
+      facet = json.loads(request.POST.get('facet'))
+      if facet['type'] == 'top':
+        result['data'] = [{"value": row[0], "count": None, "selected": False, "cat": facet['field']} for row in data.rows()]
+      else:
+        result['data'] = [{"value": row[0], "count": row[1], "selected": False, "cat": facet['field']} for row in data.rows()]
     else:
       result['data'] = list(data.rows())
     result['cols'] = list(data.cols())
     result['status'] = 0
     db.close(handle)
-    
+
   return HttpResponse(json.dumps(result), mimetype="application/json")
 
 
@@ -121,13 +135,8 @@ def new_facet(request):
     facet_field = request.POST['field']
 
     result['message'] = ''
-    result['facet'] =  {
-        'id': facet_json['id'],
-        'label': facet_field,
-        'field': facet_field,
-        'widget_type': facet_json['widgetType'], 
-        'properties': {'limit': 10}
-    }
+    result['facet'] = _create_facet(dashboard, request.user, facet_json, facet_field)
+
     result['status'] = 0
   except Exception, e:
     result['message'] = unicode(str(e), "utf8")
@@ -172,7 +181,51 @@ def get_fields(request):
   return HttpResponse(json.dumps(result), mimetype="application/json") 
 
 
-def _create_facet(collection, user, facet_id, facet_label, facet_field, widget_type):
+def _round_number_range(n):
+  if n <= 10:
+    return n, n + 1
+  else:
+    i = int(log(n, 10))
+    end = round(n, -i)
+    start = end - 10 ** i
+    return start, end
+  
+
+def _guess_range(user, dashboard, field):
+    
+    hql = "SELECT MIN(%(field)s), MAX(%(field)s) FROM %(database)s.%(table)s" % {
+      'field': field['name'],
+      'database': dashboard['properties'][0]['database'],
+      'table': dashboard['properties'][0]['table']      
+    }
+    
+    query_server = get_query_server_config(name='impala')
+    db = dbms.get(user, query_server=query_server)
+    
+    query = hql_query(hql)
+    handle = db.execute_and_wait(query, timeout_sec=35.0)    
+
+    data = db.fetch(handle, rows=1)
+    stats_min, stats_max = list(data.rows())[0]
+    db.close(handle)
+    
+    _min, _m = _round_number_range(stats_min)
+    _m, _max = _round_number_range(stats_max)    
+
+    properties = {
+      'min': stats_min,
+      'max': stats_max,
+      'start': _min,
+      'end': _max,
+      #'gap': gap,
+      'canRange': True,
+      'isDate': False,
+    }
+    
+    return properties
+
+
+def _create_facet(dashboard, user, facet_json, facet_field):
   properties = {
     'sort': 'desc',
     'canRange': False,
@@ -180,21 +233,30 @@ def _create_facet(collection, user, facet_id, facet_label, facet_field, widget_t
     'limit': 10,
     'mincount': 0,
     'isDate': False,
-    'andUp': False,  # Not used yet
   }
 
-  facet_type = 'field'
+  field = [field for field in dashboard['fields'] if field['name'] == facet_field][0]
+
+  if field['type'] == 'int':
+    facet_type = 'range'
+    _props = _guess_range(user, dashboard, field)
+    properties.update(_props)
+  else:
+    facet_type = 'field'
+  
+  # facet_type = 'top'
+  
 
-  if widget_type == 'map-widget':
+  if facet_json['widgetType'] == 'map-widget':
     properties['scope'] = 'world'
     properties['mincount'] = 1
     properties['limit'] = 100
 
   return {
-    'id': facet_id,
-    'label': facet_label,
+    'id': facet_json['id'],
+    'label': facet_field,
     'field': facet_field,
     'type': facet_type,
-    'widgetType': widget_type,
+    'widgetType': facet_json['widgetType'],
     'properties': properties
   }
diff --git a/apps/impala/src/impala/models.py b/apps/impala/src/impala/models.py
index 64f3e49..59ef0b1 100644
--- a/apps/impala/src/impala/models.py
+++ b/apps/impala/src/impala/models.py
@@ -25,14 +25,14 @@ class Dashboard():
   
   data = json.dumps(
       {'layout': [
-              {"size":2,"rows":[{"widgets":[{"size":12,"name":"Top salaries","id":"52f07188-f30f-1296-2450-f77e02e1a5c1","widgetType":"facet-widget",
+              {"size":2,"rows":[{"widgets":[{"size":12,"name":"Total Employees","id":"52f07188-f30f-1296-2450-f77e02e1a5c1","widgetType":"facet-widget",
                    "properties":{},"offset":0,"isLoading":True,"klass":"card card-widget span12"}]}],"drops":["temp"],"klass":"card card-home card-column span2"},
               {"size":10,"rows":[{"widgets":[
                   {"size":12,"name":"Grid Results","id":"52f07188-f30f-1296-2450-f77e02e1a5c0","widgetType":"resultset-widget",
                    "properties":{},"offset":0,"isLoading":True,"klass":"card card-widget span12"}]}],
               "drops":["temp"],"klass":"card card-home card-column span10"}
          ],
-      'facets': [{'id': '52f07188-f30f-1296-2450-f77e02e1a5c1', 'label': 'Top salaries', 'field': 'salary', 'widget_type': 'facet-widget', 
+      'facets': [{'id': '52f07188-f30f-1296-2450-f77e02e1a5c1', 'label': 'Total Employees', 'type': 'field', 'field': 'total_emp', 'widget_type': 'facet-widget', 
                     'properties': {'limit': 10}}],
       'properties': [{'database': 'default', 'table': 'sample_07', 'fields': []}]
   })
diff --git a/apps/impala/src/impala/templates/dashboard.mako b/apps/impala/src/impala/templates/dashboard.mako
index ca8ff3c..441c839 100644
--- a/apps/impala/src/impala/templates/dashboard.mako
+++ b/apps/impala/src/impala/templates/dashboard.mako
@@ -218,6 +218,7 @@ ${ dashboard.layout_skeleton() }
     <div data-bind="visible: $root.isEditing, with: $root.dashboard.getFacetById($parent.id())">
       <input type="text" data-bind="value: field" />
       <input type="text" data-bind="value: properties.limit" />
+      <input type="text" data-bind="value: $data.type" />
     </div>
   
     <span data-bind="foreach: {data: data(), afterRender: function(){ $root.getWidgetById($parent.id()).isLoading(false); }} ">
diff --git a/apps/impala/static/js/impala-dashboard.ko.js b/apps/impala/static/js/impala-dashboard.ko.js
index 87ba5b0..fbd0ccd 100644
--- a/apps/impala/static/js/impala-dashboard.ko.js
+++ b/apps/impala/static/js/impala-dashboard.ko.js
@@ -62,19 +62,19 @@ var Query = function (vm, query) {
       self.fqs.push(ko.mapping.fromJS({
         'id': data.widget.id(),
         'field': data.widget.field(),
-        'filter': [data.facet[0]],
+        'filter': [data.facet['value']],
         'type': 'field'
       }));
     } else {
       $.each(self.fqs(), function (index, fq) {
         if (fq.id() == data.widget.id()) {
-          if (fq.filter.indexOf(data.facet[0]) > -1) {
-            fq.filter.remove(data.facet[0]);
+          if (fq.filter.indexOf(data.facet['value']) > -1) {
+            fq.filter.remove(data.facet['value']);
             if (fq.filter().length == 0) {
               self.fqs.remove(fq);
             }
           } else {
-            fq.filter.push(data.facet[0]);
+            fq.filter.push(data.facet['value']);
           }
         }
       });
@@ -181,7 +181,7 @@ var Dashboard = function (vm, dashboard) {
   self.getFacetById = function (facet_id) {
     var _facet = null;
     $.each(self.facets(), function (index, facet) {
-      if (facet.id == facet_id) {
+      if (facet.id() == facet_id) {
         _facet = facet;
         return false;
       }
-- 
1.7.9.5


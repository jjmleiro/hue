From d2ccfb0158880376267a4bc6b7c10fd2066353a2 Mon Sep 17 00:00:00 2001
From: Erick Tryzelaar <erickt@cloudera.com>
Date: Tue, 3 Mar 2015 10:26:47 -0800
Subject: [PATCH 0965/1173] [livy] Stop the python repl crashing hanging the
 livy-repl

---
 .../scala/com/cloudera/hue/livy/repl/Session.scala |    1 +
 .../scala/com/cloudera/hue/livy/repl/WebApp.scala  |    1 +
 .../hue/livy/repl/python/PythonSession.scala       |   40 ++++++++++++--------
 3 files changed, 27 insertions(+), 15 deletions(-)

diff --git a/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/Session.scala b/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/Session.scala
index afad6fb..532a47d 100644
--- a/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/Session.scala
+++ b/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/Session.scala
@@ -10,6 +10,7 @@ object Session {
   case class Starting() extends State
   case class Idle() extends State
   case class Busy() extends State
+  case class Error() extends State
   case class ShuttingDown() extends State
   case class ShutDown() extends State
 }
diff --git a/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/WebApp.scala b/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/WebApp.scala
index b4fe554..99346e4 100644
--- a/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/WebApp.scala
+++ b/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/WebApp.scala
@@ -30,6 +30,7 @@ class WebApp(session: Session) extends ScalatraServlet with FutureSupport with J
       case Session.Starting() => "starting"
       case Session.Idle() => "idle"
       case Session.Busy() => "busy"
+      case Session.Error() => "error"
       case Session.ShuttingDown() => "shutting_down"
       case Session.ShutDown() => "shut_down"
     }
diff --git a/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/python/PythonSession.scala b/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/python/PythonSession.scala
index 1be4864..f839c12 100644
--- a/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/python/PythonSession.scala
+++ b/apps/spark/java/livy-repl/src/main/scala/com/cloudera/hue/livy/repl/python/PythonSession.scala
@@ -118,6 +118,9 @@ private class PythonSession(process: Process, gatewayServer: GatewayServer) exte
   private val thread = new Thread {
     override def run() = {
       waitUntilReady()
+
+      _state = Session.Idle()
+
       loop()
     }
 
@@ -132,10 +135,14 @@ private class PythonSession(process: Process, gatewayServer: GatewayServer) exte
 
     @tailrec
     def loop(): Unit = {
-      _state = Session.Idle()
+      (_state, queue.take()) match {
+        case (Session.Error(), ExecuteRequest(code, promise)) =>
+          promise.failure(new Exception("session has been terminated"))
+          loop()
+
+        case (state, ExecuteRequest(code, promise)) =>
+          require(state == Session.Idle())
 
-      queue.take() match {
-        case ExecuteRequest(code, promise) =>
           _state = Session.Busy()
 
           val msg = Map(
@@ -148,6 +155,7 @@ private class PythonSession(process: Process, gatewayServer: GatewayServer) exte
           val line = stdout.readLine()
           // The python process shut down
           if (line == null) {
+            _state = Session.Error()
             promise.failure(new Exception("session has been terminated"))
           } else {
             val rep = parse(line)
@@ -156,12 +164,16 @@ private class PythonSession(process: Process, gatewayServer: GatewayServer) exte
             val content: JValue = rep \ "content"
             _history += content
 
-            promise.success(content)
+            _state = Session.Idle()
 
-            loop()
+            promise.success(content)
           }
 
-        case ShutdownRequest(promise) =>
+          loop()
+
+        case (_, ShutdownRequest(promise)) =>
+          require(state == Session.Idle() || state == Session.Error())
+
           _state = Session.ShuttingDown()
           process.getInputStream.close()
           process.getOutputStream.close()
@@ -192,7 +204,7 @@ private class PythonSession(process: Process, gatewayServer: GatewayServer) exte
     promise.future
   }
 
-  override def close(): Future[Unit] = {
+  override def close(): Future[Unit] = synchronized {
     _state match {
       case Session.ShutDown() =>
         Future.successful(())
@@ -202,14 +214,12 @@ private class PythonSession(process: Process, gatewayServer: GatewayServer) exte
           Future.successful(())
         }
       case _ =>
-        synchronized {
-          val promise = Promise[Unit]()
-          queue.put(ShutdownRequest(promise))
-          promise.future.map({ case () =>
-            thread.join()
-            gatewayServer.shutdown()
-          })
-        }
+        val promise = Promise[Unit]()
+        queue.put(ShutdownRequest(promise))
+        promise.future.map({ case () =>
+          thread.join()
+          gatewayServer.shutdown()
+        })
     }
   }
 }
-- 
1.7.9.5

